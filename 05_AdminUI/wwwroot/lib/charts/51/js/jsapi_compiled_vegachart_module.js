function gvjs_xM(a){if(!Array.isArray(a)||!Array.isArray(a.raw)||1!==a.length)throw new TypeError("safeScript is a template literal tag function that only accepts template literals without expressions. For example, safeScript`foo`;");return gvjs_Om(a[0])};/*

Copyright (c) 2015-2018, University of Washington Interactive Data Lab
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
var gvjs_vha={NaN:NaN,E:Math.E,LN2:Math.LN2,LN10:Math.LN10,LOG2E:Math.LOG2E,LOG10E:Math.LOG10E,PI:Math.PI,SQRT1_2:Math.SQRT1_2,SQRT2:Math.SQRT2,MIN_VALUE:Number.MIN_VALUE,MAX_VALUE:Number.MAX_VALUE},gvjs_wha={"*":function(a,b){return a*b},"+":function(a,b){return a+b},"-":function(a,b){return a-b},"/":function(a,b){return a/b},"%":function(a,b){return a%b},">":function(a,b){return a>b},"<":function(a,b){return a<b},"<=":function(a,b){return a<=b},">=":function(a,b){return a>=b},"==":function(a,b){return a==
b},"!=":function(a,b){return a!=b},"===":function(a,b){return a===b},"!==":function(a,b){return a!==b},"&":function(a,b){return a&b},"|":function(a,b){return a|b},"^":function(a,b){return a^b},"<<":function(a,b){return a<<b},">>":function(a,b){return a>>b},">>>":function(a,b){return a>>>b}},gvjs_xha={"+":function(a){return+a},"-":function(a){return-a},"~":function(a){return~a},"!":function(a){return!a}},gvjs_yha=Array.prototype.slice;
function gvjs_yM(a,b,c){c=c?c(b[0]):b[0];return c[a].apply(c,gvjs_yha.call(b,1))}
var gvjs_zha={isNaN:Number.isNaN,isFinite:Number.isFinite,abs:Math.abs,acos:Math.acos,asin:Math.asin,atan:Math.atan,atan2:Math.atan2,ceil:Math.ceil,cos:Math.cos,exp:Math.exp,floor:Math.floor,log:Math.log,max:Math.max,min:Math.min,pow:Math.pow,random:Math.random,round:Math.round,sin:Math.sin,sqrt:Math.sqrt,tan:Math.tan,clamp:function(a,b,c){return Math.max(b,Math.min(c,a))},now:Date.now,utc:Date.UTC,datetime:function(a,b,c,d,e,f,g){return new Date(a,b||0,null!=c?c:1,d||0,e||0,f||0,g||0)},date:function(a){return(new Date(a)).getDate()},
day:function(a){return(new Date(a)).getDay()},year:function(a){return(new Date(a)).getFullYear()},month:function(a){return(new Date(a)).getMonth()},hours:function(a){return(new Date(a)).getHours()},minutes:function(a){return(new Date(a)).getMinutes()},seconds:function(a){return(new Date(a)).getSeconds()},milliseconds:function(a){return(new Date(a)).getMilliseconds()},time:function(a){return(new Date(a)).getTime()},timezoneoffset:function(a){return(new Date(a)).getTimezoneOffset()},utcdate:function(a){return(new Date(a)).getUTCDate()},
utcday:function(a){return(new Date(a)).getUTCDay()},utcyear:function(a){return(new Date(a)).getUTCFullYear()},utcmonth:function(a){return(new Date(a)).getUTCMonth()},utchours:function(a){return(new Date(a)).getUTCHours()},utcminutes:function(a){return(new Date(a)).getUTCMinutes()},utcseconds:function(a){return(new Date(a)).getUTCSeconds()},utcmilliseconds:function(a){return(new Date(a)).getUTCMilliseconds()},length:function(a){return a.length},join:function(){return gvjs_yM("join",arguments)},indexof:function(){return gvjs_yM("indexOf",
arguments)},lastindexof:function(){return gvjs_yM("lastIndexOf",arguments)},slice:function(){return gvjs_yM(gvjs_Zp,arguments)},reverse:function(a){return a.slice().reverse()},parseFloat:parseFloat,parseInt:parseInt,upper:function(a){return String(a).toUpperCase()},lower:function(a){return String(a).toLowerCase()},substring:function(){return gvjs_yM("substring",arguments,String)},split:function(){return gvjs_yM("split",arguments,String)},replace:function(){return gvjs_yM("replace",arguments,String)},
trim:function(a){return String(a).trim()},regexp:RegExp,test:function(a,b){return RegExp(a).test(b)}},gvjs_Aha=["view","item",gvjs_Cp,"xy","x","y"],gvjs_Bha={Literal:function(a,b){return b.value},Identifier:function(a,b){b=b.name;return 0<a.memberDepth?b:b===gvjs_gp?a.datum:"event"===b?a.event:"item"===b?a.item:gvjs_vha[b]||a.params["$"+b]},MemberExpression:function(a,b){var c=!b.computed,d=a(b.object);c&&(a.memberDepth+=1);b=a(b.property);c&&--a.memberDepth;if(d&&b in d)return d[b]},CallExpression:function(a,
b){var c=b.arguments;b=b.callee.name;b.startsWith("_")&&(b=b.slice(1));return"if"===b?a(c[0])?a(c[1]):a(c[2]):(a.fn[b]||gvjs_zha[b]).apply(a.fn,c.map(a))},ArrayExpression:function(a,b){return b.elements.map(a)},BinaryExpression:function(a,b){return gvjs_wha[b.operator](a(b.left),a(b.right))},UnaryExpression:function(a,b){return gvjs_xha[b.operator](a(b.argument))},ConditionalExpression:function(a,b){return a(b.test)?a(b.consequent):a(b.alternate)},LogicalExpression:function(a,b){return"&&"===b.operator?
a(b.left)&&a(b.right):a(b.left)||a(b.right)},ObjectExpression:function(a,b){return b.properties.reduce(function(c,d){a.memberDepth+=1;var e=a(d.key);--a.memberDepth;c[e]=a(d.value);return c},{})}};
function gvjs_zM(a,b,c,d,e,f){function g(h){return gvjs_Bha[h.type](g,h)}g.memberDepth=0;g.fn=Object.create(b);g.params=c;g.datum=d;g.event=e;g.item=f;gvjs_Aha.forEach(function(h){return g.fn[h]=function(k){for(var l=[],m=0;m<arguments.length;++m)l[m-0]=arguments[m];return e.vega[h].apply(e.vega,gvjs_9d(l))}});return g(a)}
var gvjs_Cha={operator:function(a,b){var c=b.ast,d=a.functions;return function(e){return gvjs_zM(c,d,e)}},parameter:function(a,b){var c=b.ast,d=a.functions;return function(e,f){return gvjs_zM(c,d,f,e)}},event:function(a,b){var c=b.ast,d=a.functions;return function(e){return gvjs_zM(c,d,void 0,void 0,e)}},handler:function(a,b){var c=b.ast,d=a.functions;return function(e,f){return gvjs_zM(c,d,e,f.item&&f.item.datum,f)}},encode:function(a,b){var c=b.marktype,d=b.channels,e=a.functions,f=c===gvjs_Cp||
"image"===c||c===gvjs_Qp;return function(g,h){var k=g.datum,l=0,m;for(m in d){var n=gvjs_zM(d[m].ast,e,h,k,void 0,g);g[m]!==n&&(g[m]=n,l=1)}"rule"!==c&&(d.x2&&(d.x?(f&&g.x>g.x2&&(k=g.x,g.x=g.x2,g.x2=k),g.width=g.x2-g.x):g.x=g.x2-(g.width||0)),d.xc&&(g.x=g.xc-(g.width||0)/2),d.y2&&(d.y?(f&&g.y>g.y2&&(k=g.y,g.y=g.y2,g.y2=k),g.height=g.y2-g.y):g.y=g.y2-(g.height||0)),d.yc&&(g.y=g.yc-(g.height||0)/2));return l}}};function gvjs_AM(a){var b=document.createElement("script");b.textContent=gvjs_Pm(a);var c;a=(b.ownerDocument&&b.ownerDocument.defaultView||window).document;(c=(a=null===(c=a.querySelector)||void 0===c?void 0:c.call(a,gvjs_Ed))?a.nonce||a.getAttribute(gvjs_qd)||"":"")&&b.setAttribute(gvjs_qd,c);document.head.appendChild(b)};var gvjs_BM=["/** @license\nCopyright (c) 2015-2018, University of Washington Interactive Data Lab\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n  may be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}));\n}(this, (function (exports) { 'use strict';\n\n  var name = \"vega\";\n  var version$1 = \"5.20.2\";\n  var description = \"The Vega visualization grammar.\";\n  var keywords$1 = [\n  \t\"vega\",\n  \t\"visualization\",\n  \t\"interaction\",\n  \t\"dataflow\",\n  \t\"library\",\n  \t\"data\",\n  \t\"d3\"\n  ];\n  var license = \"BSD-3-Clause\";\n  var author = \"UW Interactive Data Lab (http://idl.cs.washington.edu)\";\n  var main = \"build/vega-node.js\";\n  var module = \"build/vega.module.js\";\n  var unpkg = \"build/vega.min.js\";\n  var jsdelivr = \"build/vega.min.js\";\n  var types = \"index.d.ts\";\n  var repository = \"vega/vega\";\n  var scripts = {\n  \tbundle: \"rollup -c --config-bundle\",\n  \tprebuild: \"rimraf build && rimraf build-es5\",\n  \tbuild: \"rollup -c --config-core --config-bundle --config-ie\",\n  \tpostbuild: \"node schema-copy\",\n  \tpretest: \"yarn build --config-test\",\n  \ttest: \"TZ=America/Los_Angeles tape 'test/**/*-test.js'\",\n  \tprepublishOnly: \"yarn test && yarn build\",\n  \tpostpublish: \"./schema-deploy.sh\"\n  };\n  var dependencies = {\n  \t\"vega-crossfilter\": \"~4.0.5\",\n  \t\"vega-dataflow\": \"~5.7.4\",\n  \t\"vega-encode\": \"~4.8.3\",\n  \t\"vega-event-selector\": \"~2.0.6\",\n  \t\"vega-expression\": \"~4.0.1\",\n  \t\"vega-force\": \"~4.0.7\",\n  \t\"vega-format\": \"~1.0.4\",\n  \t\"vega-functions\": \"~5.12.0\",\n  \t\"vega-geo\": \"~4.3.8\",\n  \t\"vega-hierarchy\": \"~4.0.9\",\n  \t\"vega-label\": \"~1.0.0\",\n  \t\"vega-loader\": \"~4.4.0\",\n  \t\"vega-parser\": \"~6.1.3\",\n  \t\"vega-projection\": \"~1.4.5\",\n  \t\"vega-regression\": \"~1.0.9\",\n  \t\"vega-runtime\": \"~6.1.3\",\n  \t\"vega-scale\": \"~7.1.1\",\n  \t\"vega-scenegraph\": \"~4.9.4\",\n  \t\"vega-statistics\": \"~1.7.9\",\n  \t\"vega-time\": \"~2.0.4\",\n  \t\"vega-transforms\": \"~4.9.4\",\n  \t\"vega-typings\": \"~0.21.0\",\n  \t\"vega-util\": \"~1.16.1\",\n  \t\"vega-view\": \"~5.10.1\",\n  \t\"vega-view-transforms\": \"~4.5.8\",\n  \t\"vega-voronoi\": \"~4.1.5\",\n  \t\"vega-wordcloud\": \"~4.1.3\"\n  };\n  var devDependencies = {\n  \t\"vega-schema\": \"*\"\n  };\n  var pkg = {\n  \tname: name,\n  \tversion: version$1,\n  \tdescription: description,\n  \tkeywords: keywords$1,\n  \tlicense: license,\n  \tauthor: author,\n  \tmain: main,\n  \tmodule: module,\n  \tunpkg: unpkg,\n  \tjsdelivr: jsdelivr,\n  \ttypes: types,\n  \trepository: repository,\n  \tscripts: scripts,\n  \tdependencies: dependencies,\n  \tdevDependencies: devDependencies\n  };\n\n  function accessor(fn, fields, name) {\n    fn.fields = fields || [];\n    fn.fname = name;\n    return fn;\n  }\n\n  function accessorName(fn) {\n    return fn == null ? null : fn.fname;\n  }\n\n  function accessorFields(fn) {\n    return fn == null ? null : fn.fields;\n  }\n\n  function getter(path) {\n    return path.length === 1 ? get1(path[0]) : getN(path);\n  }\n\n  const get1 = field => function (obj) {\n    return obj[field];\n  };\n\n  const getN = path => {\n    const len = path.length;\n    return function (obj) {\n      for (let i = 0; i < len; ++i) {\n        obj = obj[path[i]];\n      }\n\n      return obj;\n    };\n  };\n\n  function error(message) {\n    throw Error(message);\n  }\n\n  function splitAccessPath(p) {\n    const path = [],\n          n = p.length;\n    let q = null,\n        b = 0,\n        s = '',\n        i,\n        j,\n        c;\n    p = p + '';\n\n    function push() {\n      path.push(s + p.substring(i, j));\n      s = '';\n      i = j + 1;\n    }\n\n    for (i = j = 0; j < n; ++j) {\n      c = p[j];\n\n      if (c === '\\\\') {\n        s += p.substring(i, j);\n        s += p.substring(++j, ++j);\n        i = j;\n      } else if (c === q) {\n        push();\n        q = null;\n        b = -1;\n      } else if (q) {\n        continue;\n      } else if (i === b && c === '\"') {\n        i = j + 1;\n        q = c;\n      } else if (i === b && c === \"'\") {\n        i = j + 1;\n        q = c;\n      } else if (c === '.' && !b) {\n        if (j > i) {\n          push();\n        } else {\n          i = j + 1;\n        }\n      } else if (c === '[') {\n        if (j > i) push();\n        b = i = j + 1;\n      } else if (c === ']') {\n        if (!b) error('Access path missing open bracket: ' + p);\n        if (b > 0) push();\n        b = 0;\n        i = j + 1;\n      }\n    }\n\n    if (b) error('Access path missing closing bracket: ' + p);\n    if (q) error('Access path missing closing quote: ' + p);\n\n    if (j > i) {\n      j++;\n      push();\n    }\n\n    return path;\n  }\n\n  function field$1(field, name, opt) {\n    const path = splitAccessPath(field);\n    field = path.length === 1 ? path[0] : field;\n    return accessor((opt && opt.get || getter)(path), [field], name || field);\n  }\n\n  const id = field$1('id');\n  const identity$6 = accessor(_ => _, [], 'identity');\n  const zero$2 = accessor(() => 0, [], 'zero');\n  const one$2 = accessor(() => 1, [], 'one');\n  const truthy = accessor(() => true, [], 'true');\n  const falsy = accessor(() => false, [], 'false');\n\n  function log$1$1(method, level, input) {\n    const args = [level].concat([].slice.call(input));\n    console[method].apply(console, args); // eslint-disable-line no-console\n  }\n\n  const None$2 = 0;\n  const Error$1 = 1;\n  const Warn = 2;\n  const Info = 3;\n  const Debug = 4;\n\n  function logger(_, method) {\n    let level = _ || None$2;\n    return {\n      level(_) {\n        if (arguments.length) {\n          level = +_;\n          return this;\n        } else {\n          return level;\n        }\n      },\n\n      error() {\n        if (level >= Error$1) log$1$1(method || 'error', 'ERROR', arguments);\n        return this;\n      },\n\n      warn() {\n        if (level >= Warn) log$1$1(method || 'warn', 'WARN', arguments);\n        return this;\n      },\n\n      info() {\n        if (level >= Info) log$1$1(method || 'log', 'INFO', arguments);\n        return this;\n      },\n\n      debug() {\n        if (level >= Debug) log$1$1(method || 'log', 'DEBUG', arguments);\n        return this;\n      }\n\n    };\n  }\n\n  var isArray = Array.isArray;\n\n  function isObject(_) {\n    return _ === Object(_);\n  }\n\n  const isLegalKey = key => key !== '__proto__';\n\n  function mergeConfig(...configs) {\n    return configs.reduce((out, source) => {\n      for (const key in source) {\n        if (key === 'signals') {\n          // for signals, we merge the signals arrays\n          // source signals take precedence over\n          // existing signals with the same name\n          out.signals = mergeNamed(out.signals, source.signals);\n        } else {\n          // otherwise, merge objects subject to recursion constraints\n          // for legend block, recurse for the layout entry only\n          // for style block, recurse for all properties\n          // otherwise, no recursion: objects overwrite, no merging\n          const r = key === 'legend' ? {\n            layout: 1\n          } : key === 'style' ? true : null;\n          writeConfig(out, key, source[key], r);\n        }\n      }\n\n      return out;\n    }, {});\n  }\n\n  function writeConfig(output, key, value, recurse) {\n    if (!isLegalKey(key)) return;\n    let k, o;\n\n    if (isObject(value) && !isArray(value)) {\n      o = isObject(output[key]) ? output[key] : output[key] = {};\n\n      for (k in value) {\n        if (recurse && (recurse === true || recurse[k])) {\n          writeConfig(o, k, value[k]);\n        } else if (isLegalKey(k)) {\n          o[k] = value[k];\n        }\n      }\n    } else {\n      output[key] = value;\n    }\n  }\n\n  function mergeNamed(a, b) {\n    if (a == null) return b;\n    const map = {},\n          out = [];\n\n    function add(_) {\n      if (!map[_.name]) {\n        map[_.name] = 1;\n        out.push(_);\n      }\n    }\n\n    b.forEach(add);\n    a.forEach(add);\n    return out;\n  }\n\n  function peek$1(array) {\n    return array[array.length - 1];\n  }\n\n  function toNumber(_) {\n    return _ == null || _ === '' ? null : +_;\n  }\n\n  const exp$2 = sign => x => sign * Math.exp(x);\n\n  const log$4 = sign => x => Math.log(sign * x);\n\n  const symlog$1 = c => x => Math.sign(x) * Math.log1p(Math.abs(x / c));\n\n  const symexp = c => x => Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n\n  const pow$4 = exponent => x => x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n\n  function pan(domain, delta, lift, ground) {\n    const d0 = lift(domain[0]),\n          d1 = lift(peek$1(domain)),\n          dd = (d1 - d0) * delta;\n    return [ground(d0 - dd), ground(d1 - dd)];\n  }\n\n  function panLinear(domain, delta) {\n    return pan(domain, delta, toNumber, identity$6);\n  }\n\n  function panLog(domain, delta) {\n    var sign = Math.sign(domain[0]);\n    return pan(domain, delta, log$4(sign), exp$2(sign));\n  }\n\n  function panPow(domain, delta, exponent) {\n    return pan(domain, delta, pow$4(exponent), pow$4(1 / exponent));\n  }\n\n  function panSymlog(domain, delta, constant) {\n    return pan(domain, delta, symlog$1(constant), symexp(constant));\n  }\n\n  function zoom$1(domain, anchor, scale, lift, ground) {\n    const d0 = lift(domain[0]),\n          d1 = lift(peek$1(domain)),\n          da = anchor != null ? lift(anchor) : (d0 + d1) / 2;\n    return [ground(da + (d0 - da) * scale), ground(da + (d1 - da) * scale)];\n  }\n\n  function zoomLinear(domain, anchor, scale) {\n    return zoom$1(domain, anchor, scale, toNumber, identity$6);\n  }\n\n  function zoomLog(domain, anchor, scale) {\n    const sign = Math.sign(domain[0]);\n    return zoom$1(domain, anchor, scale, log$4(sign), exp$2(sign));\n  }\n\n  function zoomPow(domain, anchor, scale, exponent) {\n    return zoom$1(domain, anchor, scale, pow$4(exponent), pow$4(1 / exponent));\n  }\n\n  function zoomSymlog(domain, anchor, scale, constant) {\n    return zoom$1(domain, anchor, scale, symlog$1(constant), symexp(constant));\n  }\n\n  function quarter(date) {\n    return 1 + ~~(new Date(date).getMonth() / 3);\n  }\n\n  function utcquarter(date) {\n    return 1 + ~~(new Date(date).getUTCMonth() / 3);\n  }\n\n  function array$5(_) {\n    return _ != null ? isArray(_) ? _ : [_] : [];\n  }\n  /**\n   * Span-preserving range clamp. If the span of the input range is less\n   * than (max - min) and an endpoint exceeds either the min or max value,\n   * the range is translated such that the span is preserved and one\n   * endpoint touches the boundary of the min/max range.\n   * If the span exceeds (max - min), the range [min, max] is returned.\n   */\n\n\n  function clampRange(range, min, max) {\n    let lo = range[0],\n        hi = range[1],\n        span;\n\n    if (hi < lo) {\n      span = hi;\n      hi = lo;\n      lo = span;\n    }\n\n    span = hi - lo;\n    return span >= max - min ? [min, max] : [lo = Math.min(Math.max(lo, min), max - span), lo + span];\n  }\n\n  function isFunction(_) {\n    return typeof _ === 'function';\n  }\n\n  const DESCENDING = 'descending';\n\n  function compare$1(fields, orders, opt) {\n    opt = opt || {};\n    orders = array$5(orders) || [];\n    const ord = [],\n          get = [],\n          fmap = {},\n          gen = opt.comparator || comparator;\n    array$5(fields).forEach((f, i) => {\n      if (f == null) return;\n      ord.push(orders[i] === DESCENDING ? -1 : 1);\n      get.push(f = isFunction(f) ? f : field$1(f, null, opt));\n      (accessorFields(f) || []).forEach(_ => fmap[_] = 1);\n    });\n    return get.length === 0 ? null : accessor(gen(get, ord), Object.keys(fmap));\n  }\n\n  const ascending$3 = (u, v) => (u < v || u == null) && v != null ? -1 : (u > v || v == null) && u != null ? 1 : (v = v instanceof Date ? +v : v, u = u instanceof Date ? +u : u) !== u && v === v ? -1 : v !== v && u === u ? 1 : 0;\n\n  const comparator = (fields, orders) => fields.length === 1 ? compare1(fields[0], orders[0]) : compareN(fields, orders, fields.length);\n\n  const compare1 = (field, order) => function (a, b) {\n    return ascending$3(field(a), field(b)) * order;\n  };\n\n  const compareN = (fields, orders, n) => {\n    orders.push(0); // pad zero for convenient lookup\n\n    return function (a, b) {\n      let f,\n          c = 0,\n          i = -1;\n\n      while (c === 0 && ++i < n) {\n        f = fields[i];\n        c = ascending$3(f(a), f(b));\n      }\n\n      return c * orders[i];\n    };\n  };\n\n  function constant$4(_) {\n    return isFunction(_) ? _ : () => _;\n  }\n\n  function debounce(delay, handler) {\n    let tid;\n    return e => {\n      if (tid) clearTimeout(tid);\n      tid = setTimeout(() => (handler(e), tid = null), delay);\n    };\n  }\n\n  function extend$1(_) {\n    for (let x, k, i = 1, len = arguments.length; i < len; ++i) {\n      x = arguments[i];\n\n      for (k in x) {\n        _[k] = x[k];\n      }\n    }\n\n    return _;\n  }\n  /**\n   * Return an array with minimum and maximum values, in the\n   * form [min, max]. Ignores null, undefined, and NaN values.\n   */\n\n\n  function extent(array, f) {\n    let i = 0,\n        n,\n        v,\n        min,\n        max;\n\n    if (array && (n = array.length)) {\n      if (f == null) {\n        // find first valid value\n        for (v = array[i]; i < n && (v == null || v !== v); v = array[++i]);\n\n        min = max = v; // visit all other values\n\n        for (; i < n; ++i) {\n          v = array[i]; // skip null/undefined; NaN will fail all comparisons\n\n          if (v != null) {\n            if (v < min) min = v;\n            if (v > max) max = v;\n          }\n        }\n      } else {\n        // find first valid value\n        for (v = f(array[i]); i < n && (v == null || v !== v); v = f(array[++i]));\n\n        min = max = v; // visit all other values\n\n        for (; i < n; ++i) {\n          v = f(array[i]); // skip null/undefined; NaN will fail all comparisons\n\n          if (v != null) {\n            if (v < min) min = v;\n            if (v > max) max = v;\n          }\n        }\n      }\n    }\n\n    return [min, max];\n  }\n\n  function extentIndex(array, f) {\n    const n = array.length;\n    let i = -1,\n        a,\n        b,\n        c,\n        u,\n        v;\n\n    if (f == null) {\n      while (++i < n) {\n        b = array[i];\n\n        if (b != null && b >= b) {\n          a = c = b;\n          break;\n        }\n      }\n\n      if (i === n) return [-1, -1];\n      u = v = i;\n\n      while (++i < n) {\n        b = array[i];\n\n        if (b != null) {\n          if (a > b) {\n            a = b;\n            u = i;\n          }\n\n          if (c < b) {\n            c = b;\n            v = i;\n          }\n        }\n      }\n    } else {\n      while (++i < n) {\n        b = f(array[i], i, array);\n\n        if (b != null && b >= b) {\n          a = c = b;\n          break;\n        }\n      }\n\n      if (i === n) return [-1, -1];\n      u = v = i;\n\n      while (++i < n) {\n        b = f(array[i], i, array);\n\n        if (b != null) {\n          if (a > b) {\n            a = b;\n            u = i;\n          }\n\n          if (c < b) {\n            c = b;\n            v = i;\n          }\n        }\n      }\n    }\n\n    return [u, v];\n  }\n\n  const hop = Object.prototype.hasOwnProperty;\n\n  function has$1(object, property) {\n    return hop.call(object, property);\n  }\n\n  const NULL = {};\n\n  function fastmap(input) {\n    let obj = {},\n        test;\n\n    function has$1$1(key) {\n      return has$1(obj, key) && obj[key] !== NULL;\n    }\n\n    const map = {\n      size: 0,\n      empty: 0,\n      object: obj,\n      has: has$1$1,\n\n      get(key) {\n        return has$1$1(key) ? obj[key] : undefined;\n      },\n\n      set(key, value) {\n        if (!has$1$1(key)) {\n          ++map.size;\n          if (obj[key] === NULL) --map.empty;\n        }\n\n        obj[key] = value;\n        return this;\n      },\n\n      delete(key) {\n        if (has$1$1(key)) {\n          --map.size;\n          ++map.empty;\n          obj[key] = NULL;\n        }\n\n        return this;\n      },\n\n      clear() {\n        map.size = map.empty = 0;\n        map.object = obj = {};\n      },\n\n      test(_) {\n        if (arguments.length) {\n          test = _;\n          return map;\n        } else {\n          return test;\n        }\n      },\n\n      clean() {\n        const next = {};\n        let size = 0;\n\n        for (const key in obj) {\n          const value = obj[key];\n\n          if (value !== NULL && (!test || !test(value))) {\n            next[key] = value;\n            ++size;\n          }\n        }\n\n        map.size = size;\n        map.empty = 0;\n        map.object = obj = next;\n      }\n\n    };\n    if (input) Object.keys(input).forEach(key => {\n      map.set(key, input[key]);\n    });\n    return map;\n  }\n\n  function flush(range, value, threshold, left, right, center) {\n    if (!threshold && threshold !== 0) return center;\n    const t = +threshold;\n    let a = range[0],\n        b = peek$1(range),\n        l; // swap endpoints if range is reversed\n\n    if (b < a) {\n      l = a;\n      a = b;\n      b = l;\n    } // compare value to endpoints\n\n\n    l = Math.abs(value - a);\n    const r = Math.abs(b - value); // adjust if value is within threshold distance of endpoint\n\n    return l < r && l <= t ? left : r <= t ? right : center;\n  }\n\n  function inherits(child, parent, members) {\n    const proto = child.prototype = Object.create(parent.prototype);\n    Object.defineProperty(proto, 'constructor', {\n      value: child,\n      writable: true,\n      enumerable: true,\n      configurable: true\n    });\n    return extend$1(proto, members);\n  }\n  /**\n   * Predicate that returns true if the value lies within the span\n   * of the given range. The left and right flags control the use\n   * of inclusive (true) or exclusive (false) comparisons.\n   */\n\n\n  function inrange(value, range, left, right) {\n    let r0 = range[0],\n        r1 = range[range.length - 1],\n        t;\n\n    if (r0 > r1) {\n      t = r0;\n      r0 = r1;\n      r1 = t;\n    }\n\n    left = left === undefined || left;\n    right = right === undefined || right;\n    return (left ? r0 <= value : r0 < value) && (right ? value <= r1 : value < r1);\n  }\n\n  function isBoolean$1(_) {\n    return typeof _ === 'boolean';\n  }\n\n  function isDate$1(_) {\n    return Object.prototype.toString.call(_) === '[object Date]';\n  }\n\n  function isIterable(_) {\n    return _ && isFunction(_[Symbol.iterator]);\n  }\n\n  function isNumber$1(_) {\n    return typeof _ === 'number';\n  }\n\n  function isRegExp(_) {\n    return Object.prototype.toString.call(_) === '[object RegExp]';\n  }\n\n  function isString(_) {\n    return typeof _ === 'string';\n  }\n\n  function key(fields, flat, opt) {\n    if (fields) {\n      fields = flat ? array$5(fields).map(f => f.replace(/\\\\(.)/g, '$1')) : array$5(fields);\n    }\n\n    const len = fields && fields.length,\n          gen = opt && opt.get || getter,\n          map = f => gen(flat ? [f] : splitAccessPath(f));\n\n    let fn;\n\n    if (!len) {\n      fn = function () {\n        return '';\n      };\n    } else if (len === 1) {\n      const get = map(fields[0]);\n\n      fn = function (_) {\n        return '' + get(_);\n      };\n    } else {\n      const get = fields.map(map);\n\n      fn = function (_) {\n        let s = '' + get[0](_),\n            i = 0;\n\n        while (++i < len) s += '|' + get[i](_);\n\n        return s;\n      };\n    }\n\n    return accessor(fn, fields, 'key');\n  }\n\n  function lerp(array, frac) {\n    const lo = array[0],\n          hi = peek$1(array),\n          f = +frac;\n    return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);\n  }\n\n  const DEFAULT_MAX_SIZE = 10000; // adapted from https://github.com/dominictarr/hashlru/ (MIT License)\n\n  function lruCache(maxsize) {\n    maxsize = +maxsize || DEFAULT_MAX_SIZE;\n    let curr, prev, size;\n\n    const clear = () => {\n      curr = {};\n      prev = {};\n      size = 0;\n    };\n\n    const update = (key, value) => {\n      if (++size > maxsize) {\n        prev = curr;\n        curr = {};\n        size = 1;\n      }\n\n      return curr[key] = value;\n    };\n\n    clear();\n    return {\n      clear,\n      has: key => has$1(curr, key) || has$1(prev, key),\n      get: key => has$1(curr, key) ? curr[key] : has$1(prev, key) ? update(key, prev[key]) : undefined,\n      set: (key, value) => has$1(curr, key) ? curr[key] = value : update(key, value)\n    };\n  }\n\n  function merge$3(compare, array0, array1, output) {\n    const n0 = array0.length,\n          n1 = array1.length;\n    if (!n1) return array0;\n    if (!n0) return array1;\n    const merged = output || new array0.constructor(n0 + n1);\n    let i0 = 0,\n        i1 = 0,\n        i = 0;\n\n    for (; i0 < n0 && i1 < n1; ++i) {\n      merged[i] = compare(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];\n    }\n\n    for (; i0 < n0; ++i0, ++i) {\n      merged[i] = array0[i0];\n    }\n\n    for (; i1 < n1; ++i1, ++i) {\n      merged[i] = array1[i1];\n    }\n\n    return merged;\n  }\n\n  function repeat(str, reps) {\n    let s = '';\n\n    while (--reps >= 0) s += str;\n\n    return s;\n  }\n\n  function pad$2(str, length, padchar, align) {\n    const c = padchar || ' ',\n          s = str + '',\n          n = length - s.length;\n    return n <= 0 ? s : align === 'left' ? repeat(c, n) + s : align === 'center' ? repeat(c, ~~(n / 2)) + s + repeat(c, Math.ceil(n / 2)) : s + repeat(c, n);\n  }\n  /**\n   * Return the numerical span of an array: the difference between\n   * the last and first values.\n   */\n\n\n  function span(array) {\n    return array && peek$1(array) - array[0] || 0;\n  }\n\n  function $(x) {\n    return isArray(x) ? '[' + x.map($) + ']' : isObject(x) || isString(x) ? // Output valid JSON and JS source strings.\n    // See http://timelessrepo.com/json-isnt-a-javascript-subset\n    JSON.stringify(x).replace('\\u2028', '\\\\u2028').replace('\\u2029', '\\\\u2029') : x;\n  }\n\n  function toBoolean(_) {\n    return _ == null || _ === '' ? null : !_ || _ === 'false' || _ === '0' ? false : !!_;\n  }\n\n  const defaultParser = _ => isNumber$1(_) ? _ : isDate$1(_) ? _ : Date.parse(_);\n\n  function toDate(_, parser) {\n    parser = parser || defaultParser;\n    return _ == null || _ === '' ? null : parser(_);\n  }\n\n  function toString(_) {\n    return _ == null || _ === '' ? null : _ + '';\n  }\n\n  function toSet(_) {\n    const s = {},\n          n = _.length;\n\n    for (let i = 0; i < n; ++i) s[_[i]] = true;\n\n    return s;\n  }\n\n  function truncate$1(str, length, align, ellipsis) {\n    const e = ellipsis != null ? ellipsis : '\\u2026',\n          s = str + '',\n          n = s.length,\n          l = Math.max(0, length - e.length);\n    return n <= length ? s : align === 'left' ? e + s.slice(n - l) : align === 'center' ? s.slice(0, Math.ceil(l / 2)) + e + s.slice(n - ~~(l / 2)) : s.slice(0, l) + e;\n  }\n\n  function visitArray(array, filter, visitor) {\n    if (array) {\n      if (filter) {\n        const n = array.length;\n\n        for (let i = 0; i < n; ++i) {\n          const t = filter(array[i]);\n          if (t) visitor(t, i, array);\n        }\n      } else {\n        array.forEach(visitor);\n      }\n    }\n  }\n\n  var EOL = {},\n      EOF = {},\n      QUOTE = 34,\n      NEWLINE = 10,\n      RETURN = 13;\n\n  function objectConverter(columns) {\n    return new Function(\"d\", \"return {\" + columns.map(function (name, i) {\n      return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n    }).join(\",\") + \"}\");\n  }\n\n  function customConverter(columns, f) {\n    var object = objectConverter(columns);\n    return function (row, i) {\n      return f(object(row), i, columns);\n    };\n  } // Compute unique columns in order of discovery.\n\n\n  function inferColumns(rows) {\n    var columnSet = Object.create(null),\n        columns = [];\n    rows.forEach(function (row) {\n      for (var column in row) {\n        if (!(column in columnSet)) {\n          columns.push(columnSet[column] = column);\n        }\n      }\n    });\n    return columns;\n  }\n\n  function pad$1(value, width) {\n    var s = value + \"\",\n        length = s.length;\n    return length < width ? new Array(width - length + 1).join(0) + s : s;\n  }\n\n  function formatYear$1(year) {\n    return year < 0 ? \"-\" + pad$1(-year, 6) : year > 9999 ? \"+\" + pad$1(year, 6) : pad$1(year, 4);\n  }\n\n  function formatDate(date) {\n    var hours = date.getUTCHours(),\n        minutes = date.getUTCMinutes(),\n        seconds = date.getUTCSeconds(),\n        milliseconds = date.getUTCMilliseconds();\n    return isNaN(date) ? \"Invalid Date\" : formatYear$1(date.getUTCFullYear()) + \"-\" + pad$1(date.getUTCMonth() + 1, 2) + \"-\" + pad$1(date.getUTCDate(), 2) + (milliseconds ? \"T\" + pad$1(hours, 2) + \":\" + pad$1(minutes, 2) + \":\" + pad$1(seconds, 2) + \".\" + pad$1(milliseconds, 3) + \"Z\" : seconds ? \"T\" + pad$1(hours, 2) + \":\" + pad$1(minutes, 2) + \":\" + pad$1(seconds, 2) + \"Z\" : minutes || hours ? \"T\" + pad$1(hours, 2) + \":\" + pad$1(minutes, 2) + \"Z\" : \"\");\n  }\n\n  function dsvFormat (delimiter) {\n    var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n        DELIMITER = delimiter.charCodeAt(0);\n\n    function parse(text, f) {\n      var convert,\n          columns,\n          rows = parseRows(text, function (row, i) {\n        if (convert) return convert(row, i - 1);\n        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n      });\n      rows.columns = columns || [];\n      return rows;\n    }\n\n    function parseRows(text, f) {\n      var rows = [],\n          // output rows\n      N = text.length,\n          I = 0,\n          // current character index\n      n = 0,\n          // current line number\n      t,\n          // current token\n      eof = N <= 0,\n          // current token followed by EOF?\n      eol = false; // current token followed by EOL?\n      // Strip the trailing newline.\n\n      if (text.charCodeAt(N - 1) === NEWLINE) --N;\n      if (text.charCodeAt(N - 1) === RETURN) --N;\n\n      function token() {\n        if (eof) return EOF;\n        if (eol) return eol = false, EOL; // Unescape quotes.\n\n        var i,\n            j = I,\n            c;\n\n        if (text.charCodeAt(j) === QUOTE) {\n          while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n\n          if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {\n            eol = true;\n            if (text.charCodeAt(I) === NEWLINE) ++I;\n          }\n          return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n        } // Find next delimiter or newline.\n\n\n        while (I < N) {\n          if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {\n            eol = true;\n            if (text.charCodeAt(I) === NEWLINE) ++I;\n          } else if (c !== DELIMITER) continue;\n          return text.slice(j, i);\n        } // Return last token before EOF.\n\n\n        return eof = true, text.slice(j, N);\n      }\n\n      while ((t = token()) !== EOF) {\n        var row = [];\n\n        while (t !== EOL && t !== EOF) row.push(t), t = token();\n\n        if (f && (row = f(row, n++)) == null) continue;\n        rows.push(row);\n      }\n\n      return rows;\n    }\n\n    function preformatBody(rows, columns) {\n      return rows.map(function (row) {\n        return columns.map(function (column) {\n          return formatValue(row[column]);\n        }).join(delimiter);\n      });\n    }\n\n    function format(rows, columns) {\n      if (columns == null) columns = inferColumns(rows);\n      return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n    }\n\n    function formatBody(rows, columns) {\n      if (columns == null) columns = inferColumns(rows);\n      return preformatBody(rows, columns).join(\"\\n\");\n    }\n\n    function formatRows(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    }\n\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n\n    function formatValue(value) {\n      return value == null ? \"\" : value instanceof Date ? formatDate(value) : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\" : value;\n    }\n\n    return {\n      parse: parse,\n      parseRows: parseRows,\n      format: format,\n      formatBody: formatBody,\n      formatRows: formatRows,\n      formatRow: formatRow,\n      formatValue: formatValue\n    };\n  }\n\n  function identity$5 (x) {\n    return x;\n  }\n\n  function transform$3 (transform) {\n    if (transform == null) return identity$5;\n    var x0,\n        y0,\n        kx = transform.scale[0],\n        ky = transform.scale[1],\n        dx = transform.translate[0],\n        dy = transform.translate[1];\n    return function (input, i) {\n      if (!i) x0 = y0 = 0;\n      var j = 2,\n          n = input.length,\n          output = new Array(n);\n      output[0] = (x0 += input[0]) * kx + dx;\n      output[1] = (y0 += input[1]) * ky + dy;\n\n      while (j < n) output[j] = input[j], ++j;\n\n      return output;\n    };\n  }\n\n  function reverse$1 (array, n) {\n    var t,\n        j = array.length,\n        i = j - n;\n\n    while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n  }\n\n  function feature (topology, o) {\n    if (typeof o === \"string\") o = topology.objects[o];\n    return o.type === \"GeometryCollection\" ? {\n      type: \"FeatureCollection\",\n      features: o.geometries.map(function (o) {\n        return feature$1(topology, o);\n      })\n    } : feature$1(topology, o);\n  }\n\n  function feature$1(topology, o) {\n    var id = o.id,\n        bbox = o.bbox,\n        properties = o.properties == null ? {} : o.properties,\n        geometry = object$1(topology, o);\n    return id == null && bbox == null ? {\n      type: \"Feature\",\n      properties: properties,\n      geometry: geometry\n    } : bbox == null ? {\n      type: \"Feature\",\n      id: id,\n      properties: properties,\n      geometry: geometry\n    } : {\n      type: \"Feature\",\n      id: id,\n      bbox: bbox,\n      properties: properties,\n      geometry: geometry\n    };\n  }\n\n  function object$1(topology, o) {\n    var transformPoint = transform$3(topology.transform),\n        arcs = topology.arcs;\n\n    function arc(i, points) {\n      if (points.length) points.pop();\n\n      for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n        points.push(transformPoint(a[k], k));\n      }\n\n      if (i < 0) reverse$1(points, n);\n    }\n\n    function point(p) {\n      return transformPoint(p);\n    }\n\n    function line(arcs) {\n      var points = [];\n\n      for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n\n      if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n\n      return points;\n    }\n\n    function ring(arcs) {\n      var points = line(arcs);\n\n      while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n\n\n      return points;\n    }\n\n    function polygon(arcs) {\n      return arcs.map(ring);\n    }\n\n    function geometry(o) {\n      var type = o.type,\n          coordinates;\n\n      switch (type) {\n        case \"GeometryCollection\":\n          return {\n            type: type,\n            geometries: o.geometries.map(geometry)\n          };\n\n        case \"Point\":\n          coordinates = point(o.coordinates);\n          break;\n\n        case \"MultiPoint\":\n          coordinates = o.coordinates.map(point);\n          break;\n\n        case \"LineString\":\n          coordinates = line(o.arcs);\n          break;\n\n        case \"MultiLineString\":\n          coordinates = o.arcs.map(line);\n          break;\n\n        case \"Polygon\":\n          coordinates = polygon(o.arcs);\n          break;\n\n        case \"MultiPolygon\":\n          coordinates = o.arcs.map(polygon);\n          break;\n\n        default:\n          return null;\n      }\n\n      return {\n        type: type,\n        coordinates: coordinates\n      };\n    }\n\n    return geometry(o);\n  }\n\n  function stitch (topology, arcs) {\n    var stitchedArcs = {},\n        fragmentByStart = {},\n        fragmentByEnd = {},\n        fragments = [],\n        emptyIndex = -1; // Stitch empty arcs first, since they may be subsumed by other arcs.\n\n    arcs.forEach(function (i, j) {\n      var arc = topology.arcs[i < 0 ? ~i : i],\n          t;\n\n      if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n        t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n      }\n    });\n    arcs.forEach(function (i) {\n      var e = ends(i),\n          start = e[0],\n          end = e[1],\n          f,\n          g;\n\n      if (f = fragmentByEnd[start]) {\n        delete fragmentByEnd[f.end];\n        f.push(i);\n        f.end = end;\n\n        if (g = fragmentByStart[end]) {\n          delete fragmentByStart[g.start];\n          var fg = g === f ? f : f.concat(g);\n          fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n        } else {\n          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n        }\n      } else if (f = fragmentByStart[end]) {\n        delete fragmentByStart[f.start];\n        f.unshift(i);\n        f.start = start;\n\n        if (g = fragmentByEnd[start]) {\n          delete fragmentByEnd[g.end];\n          var gf = g === f ? f : g.concat(f);\n          fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n        } else {\n          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n        }\n      } else {\n        f = [i];\n        fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n      }\n    });\n\n    function ends(i) {\n      var arc = topology.arcs[i < 0 ? ~i : i],\n          p0 = arc[0],\n          p1;\n      if (topology.transform) p1 = [0, 0], arc.forEach(function (dp) {\n        p1[0] += dp[0], p1[1] += dp[1];\n      });else p1 = arc[arc.length - 1];\n      return i < 0 ? [p1, p0] : [p0, p1];\n    }\n\n    function flush(fragmentByEnd, fragmentByStart) {\n      for (var k in fragmentByEnd) {\n        var f = fragmentByEnd[k];\n        delete fragmentByStart[f.start];\n        delete f.start;\n        delete f.end;\n        f.forEach(function (i) {\n          stitchedArcs[i < 0 ? ~i : i] = 1;\n        });\n        fragments.push(f);\n      }\n    }\n\n    flush(fragmentByEnd, fragmentByStart);\n    flush(fragmentByStart, fragmentByEnd);\n    arcs.forEach(function (i) {\n      if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);\n    });\n    return fragments;\n  }\n\n  function mesh (topology) {\n    return object$1(topology, meshArcs.apply(this, arguments));\n  }\n  function meshArcs(topology, object, filter) {\n    var arcs, i, n;\n    if (arguments.length > 1) arcs = extractArcs(topology, object, filter);else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\n    return {\n      type: \"MultiLineString\",\n      arcs: stitch(topology, arcs)\n    };\n  }\n\n  function extractArcs(topology, object, filter) {\n    var arcs = [],\n        geomsByArc = [],\n        geom;\n\n    function extract0(i) {\n      var j = i < 0 ? ~i : i;\n      (geomsByArc[j] || (geomsByArc[j] = [])).push({\n        i: i,\n        g: geom\n      });\n    }\n\n    function extract1(arcs) {\n      arcs.forEach(extract0);\n    }\n\n    function extract2(arcs) {\n      arcs.forEach(extract1);\n    }\n\n    function extract3(arcs) {\n      arcs.forEach(extract2);\n    }\n\n    function geometry(o) {\n      switch (geom = o, o.type) {\n        case \"GeometryCollection\":\n          o.geometries.forEach(geometry);\n          break;\n\n        case \"LineString\":\n          extract1(o.arcs);\n          break;\n\n        case \"MultiLineString\":\n        case \"Polygon\":\n          extract2(o.arcs);\n          break;\n\n        case \"MultiPolygon\":\n          extract3(o.arcs);\n          break;\n      }\n    }\n\n    geometry(object);\n    geomsByArc.forEach(filter == null ? function (geoms) {\n      arcs.push(geoms[0].i);\n    } : function (geoms) {\n      if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);\n    });\n    return arcs;\n  }\n\n  function ascending$2 (a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function bisector$1 (f) {\n    let delta = f;\n    let compare = f;\n\n    if (f.length === 1) {\n      delta = (d, x) => f(d) - x;\n\n      compare = ascendingComparator$1(f);\n    }\n\n    function left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        const mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      }\n\n      return lo;\n    }\n\n    function right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        const mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n      }\n\n      return lo;\n    }\n\n    function center(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      const i = left(a, x, lo, hi - 1);\n      return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n    }\n\n    return {\n      left,\n      center,\n      right\n    };\n  }\n\n  function ascendingComparator$1(f) {\n    return (d, x) => ascending$2(f(d), x);\n  }\n\n  function number$6 (x) {\n    return x === null ? NaN : +x;\n  }\n  function* numbers$2(values, valueof) {\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    } else {\n      let index = -1;\n\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    }\n  }\n\n  const ascendingBisect = bisector$1(ascending$2);\n  const bisectRight$1 = ascendingBisect.right;\n  const bisectLeft$1 = ascendingBisect.left;\n  bisector$1(number$6).center;\n\n  function variance(values, valueof) {\n    let count = 0;\n    let delta;\n    let mean = 0;\n    let sum = 0;\n\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          delta = value - mean;\n          mean += delta / ++count;\n          sum += delta * (value - mean);\n        }\n      }\n    } else {\n      let index = -1;\n\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          delta = value - mean;\n          mean += delta / ++count;\n          sum += delta * (value - mean);\n        }\n      }\n    }\n\n    if (count > 1) return sum / (count - 1);\n  }\n\n  function deviation(values, valueof) {\n    const v = variance(values, valueof);\n    return v ? Math.sqrt(v) : v;\n  }\n\n  // https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\n  class Adder {\n    constructor() {\n      this._partials = new Float64Array(32);\n      this._n = 0;\n    }\n\n    add(x) {\n      const p = this._partials;\n      let i = 0;\n\n      for (let j = 0; j < this._n && j < 32; j++) {\n        const y = p[j],\n              hi = x + y,\n              lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n        if (lo) p[i++] = lo;\n        x = hi;\n      }\n\n      p[i] = x;\n      this._n = i + 1;\n      return this;\n    }\n\n    valueOf() {\n      const p = this._partials;\n      let n = this._n,\n          x,\n          y,\n          lo,\n          hi = 0;\n\n      if (n > 0) {\n        hi = p[--n];\n\n        while (n > 0) {\n          x = hi;\n          y = p[--n];\n          hi = x + y;\n          lo = y - (hi - x);\n          if (lo) break;\n        }\n\n        if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {\n          y = lo * 2;\n          x = hi + y;\n          if (y == x - hi) hi = x;\n        }\n      }\n\n      return hi;\n    }\n\n  }\n\n  function permute (source, keys) {\n    return Array.from(keys, key => source[key]);\n  }\n\n  var e10 = Math.sqrt(50),\n      e5 = Math.sqrt(10),\n      e2 = Math.sqrt(2);\n  function ticks (start, stop, count) {\n    var reverse,\n        i = -1,\n        n,\n        ticks,\n        step;\n    stop = +stop, start = +start, count = +count;\n    if (start === stop && count > 0) return [start];\n    if (reverse = stop < start) n = start, start = stop, stop = n;\n    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n    if (step > 0) {\n      let r0 = Math.round(start / step),\n          r1 = Math.round(stop / step);\n      if (r0 * step < start) ++r0;\n      if (r1 * step > stop) --r1;\n      ticks = new Array(n = r1 - r0 + 1);\n\n      while (++i < n) ticks[i] = (r0 + i) * step;\n    } else {\n      step = -step;\n      let r0 = Math.round(start * step),\n          r1 = Math.round(stop * step);\n      if (r0 / step < start) ++r0;\n      if (r1 / step > stop) --r1;\n      ticks = new Array(n = r1 - r0 + 1);\n\n      while (++i < n) ticks[i] = (r0 + i) / step;\n    }\n\n    if (reverse) ticks.reverse();\n    return ticks;\n  }\n  function tickIncrement(start, stop, count) {\n    var step = (stop - start) / Math.max(0, count),\n        power = Math.floor(Math.log(step) / Math.LN10),\n        error = step / Math.pow(10, power);\n    return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n  }\n  function tickStep(start, stop, count) {\n    var step0 = Math.abs(stop - start) / Math.max(0, count),\n        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n        error = step0 / step1;\n    if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n    return stop < start ? -step1 : step1;\n  }\n\n  function max$2(values, valueof) {\n    let max;\n\n    if (valueof === undefined) {\n      for (const value of values) {\n        if (value != null && (max < value || max === undefined && value >= value)) {\n          max = value;\n        }\n      }\n    } else {\n      let index = -1;\n\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {\n          max = value;\n        }\n      }\n    }\n\n    return max;\n  }\n\n  function min$2(values, valueof) {\n    let min;\n\n    if (valueof === undefined) {\n      for (const value of values) {\n        if (value != null && (min > value || min === undefined && value >= value)) {\n          min = value;\n        }\n      }\n    } else {\n      let index = -1;\n\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {\n          min = value;\n        }\n      }\n    }\n\n    return min;\n  }\n\n  // ISC license, Copyright 2018 Vladimir Agafonkin.\n\n  function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending$2) {\n    while (right > left) {\n      if (right - left > 600) {\n        const n = right - left + 1;\n        const m = k - left + 1;\n        const z = Math.log(n);\n        const s = 0.5 * Math.exp(2 * z / 3);\n        const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n        const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n        const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n        quickselect(array, k, newLeft, newRight, compare);\n      }\n\n      const t = array[k];\n      let i = left;\n      let j = right;\n      swap$1(array, left, k);\n      if (compare(array[right], t) > 0) swap$1(array, left, right);\n\n      while (i < j) {\n        swap$1(array, i, j), ++i, --j;\n\n        while (compare(array[i], t) < 0) ++i;\n\n        while (compare(array[j], t) > 0) --j;\n      }\n\n      if (compare(array[left], t) === 0) swap$1(array, left, j);else ++j, swap$1(array, j, right);\n      if (j <= k) left = j + 1;\n      if (k <= j) right = j - 1;\n    }\n\n    return array;\n  }\n\n  function swap$1(array, i, j) {\n    const t = array[i];\n    array[i] = array[j];\n    array[j] = t;\n  }\n\n  function quantile$1(values, p, valueof) {\n    values = Float64Array.from(numbers$2(values, valueof));\n    if (!(n = values.length)) return;\n    if ((p = +p) <= 0 || n < 2) return min$2(values);\n    if (p >= 1) return max$2(values);\n    var n,\n        i = (n - 1) * p,\n        i0 = Math.floor(i),\n        value0 = max$2(quickselect(values, i0).subarray(0, i0 + 1)),\n        value1 = min$2(values.subarray(i0 + 1));\n    return value0 + (value1 - value0) * (i - i0);\n  }\n  function quantileSorted(values, p, valueof = number$6) {\n    if (!(n = values.length)) return;\n    if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n    if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n    var n,\n        i = (n - 1) * p,\n        i0 = Math.floor(i),\n        value0 = +valueof(values[i0], i0, values),\n        value1 = +valueof(values[i0 + 1], i0 + 1, values);\n    return value0 + (value1 - value0) * (i - i0);\n  }\n\n  function mean(values, valueof) {\n    let count = 0;\n    let sum = 0;\n\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          ++count, sum += value;\n        }\n      }\n    } else {\n      let index = -1;\n\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          ++count, sum += value;\n        }\n      }\n    }\n\n    if (count) return sum / count;\n  }\n\n  function median (values, valueof) {\n    return quantile$1(values, 0.5, valueof);\n  }\n\n  function* flatten(arrays) {\n    for (const array of arrays) {\n      yield* array;\n    }\n  }\n\n  function merge$2(arrays) {\n    return Array.from(flatten(arrays));\n  }\n\n  function range$1$1 (start, stop, step) {\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n    var i = -1,\n        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n        range = new Array(n);\n\n    while (++i < n) {\n      range[i] = start + i * step;\n    }\n\n    return range;\n  }\n\n  function sum(values, valueof) {\n    let sum = 0;\n\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value = +value) {\n          sum += value;\n        }\n      }\n    } else {\n      let index = -1;\n\n      for (let value of values) {\n        if (value = +valueof(value, ++index, values)) {\n          sum += value;\n        }\n      }\n    }\n\n    return sum;\n  }\n\n  function formatDecimal (x) {\n    return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString(\"en\").replace(/,/g, \"\") : x.toString(10);\n  } // Computes the decimal coefficient and exponent of the specified number x with\n  // significant digits p, where x is positive and p is in [1, 21] or undefined.\n  // For example, formatDecimalParts(1.23) returns [\"123\", 0].\n\n  function formatDecimalParts(x, p) {\n    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, \u00b1Infinity\n\n    var i,\n        coefficient = x.slice(0, i); // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n    // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n\n    return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];\n  }\n\n  function exponent (x) {\n    return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n  }\n\n  function formatGroup (grouping, thousands) {\n    return function (value, width) {\n      var i = value.length,\n          t = [],\n          j = 0,\n          g = grouping[0],\n          length = 0;\n\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = grouping[j = (j + 1) % grouping.length];\n      }\n\n      return t.reverse().join(thousands);\n    };\n  }\n\n  function formatNumerals (numerals) {\n    return function (value) {\n      return value.replace(/[0-9]/g, function (i) {\n        return numerals[+i];\n      });\n    };\n  }\n\n  // [[fill]align][sign][symbol][0][width][,][.precision][~][type]\n  var re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n  function formatSpecifier(specifier) {\n    if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n    var match;\n    return new FormatSpecifier({\n      fill: match[1],\n      align: match[2],\n      sign: match[3],\n      symbol: match[4],\n      zero: match[5],\n      width: match[6],\n      comma: match[7],\n      precision: match[8] && match[8].slice(1),\n      trim: match[9],\n      type: match[10]\n    });\n  }\n  formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\n  function FormatSpecifier(specifier) {\n    this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n    this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n    this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n    this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n    this.zero = !!specifier.zero;\n    this.width = specifier.width === undefined ? undefined : +specifier.width;\n    this.comma = !!specifier.comma;\n    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n    this.trim = !!specifier.trim;\n    this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n  }\n\n  FormatSpecifier.prototype.toString = function () {\n    return this.fill + this.align + this.sign + this.symbol + (this.zero ? \"0\" : \"\") + (this.width === undefined ? \"\" : Math.max(1, this.width | 0)) + (this.comma ? \",\" : \"\") + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0)) + (this.trim ? \"~\" : \"\") + this.type;\n  };\n\n  // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\n  function formatTrim (s) {\n    out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n      switch (s[i]) {\n        case \".\":\n          i0 = i1 = i;\n          break;\n\n        case \"0\":\n          if (i0 === 0) i0 = i;\n          i1 = i;\n          break;\n\n        default:\n          if (!+s[i]) break out;\n          if (i0 > 0) i0 = 0;\n          break;\n      }\n    }\n\n    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n  }\n\n  var prefixExponent;\n  function formatPrefixAuto (x, p) {\n    var d = formatDecimalParts(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1],\n        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n        n = coefficient.length;\n    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join(\"0\") : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i) : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n  }\n\n  function formatRounded (x, p) {\n    var d = formatDecimalParts(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1];\n    return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n  }\n\n  var formatTypes = {\n    \"%\": (x, p) => (x * 100).toFixed(p),\n    \"b\": x => Math.round(x).toString(2),\n    \"c\": x => x + \"\",\n    \"d\": formatDecimal,\n    \"e\": (x, p) => x.toExponential(p),\n    \"f\": (x, p) => x.toFixed(p),\n    \"g\": (x, p) => x.toPrecision(p),\n    \"o\": x => Math.round(x).toString(8),\n    \"p\": (x, p) => formatRounded(x * 100, p),\n    \"r\": formatRounded,\n    \"s\": formatPrefixAuto,\n    \"X\": x => Math.round(x).toString(16).toUpperCase(),\n    \"x\": x => Math.round(x).toString(16)\n  };\n\n  function identity$4 (x) {\n    return x;\n  }\n\n  var map$1 = Array.prototype.map,\n      prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"\u00b5\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n  function formatLocale$1 (locale) {\n    var group = locale.grouping === undefined || locale.thousands === undefined ? identity$4 : formatGroup(map$1.call(locale.grouping, Number), locale.thousands + \"\"),\n        currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n        currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n        decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n        numerals = locale.numerals === undefined ? identity$4 : formatNumerals(map$1.call(locale.numerals, String)),\n        percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n        minus = locale.minus === undefined ? \"\u2212\" : locale.minus + \"\",\n        nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n    function newFormat(specifier) {\n      specifier = formatSpecifier(specifier);\n      var fill = specifier.fill,\n          align = specifier.align,\n          sign = specifier.sign,\n          symbol = specifier.symbol,\n          zero = specifier.zero,\n          width = specifier.width,\n          comma = specifier.comma,\n          precision = specifier.precision,\n          trim = specifier.trim,\n          type = specifier.type; // The \"n\" type is an alias for \",g\".\n\n      if (type === \"n\") comma = true, type = \"g\"; // The \"\" type, and any invalid type, is an alias for \".12~g\".\n      else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\"; // If zero fill is specified, padding goes after sign and before digits.\n\n      if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\"; // Compute the prefix and suffix.\n      // For SI-prefix, the suffix is lazily computed.\n\n      var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n          suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\"; // What format function should we use?\n      // Is this an integer type?\n      // Can this type generate exponential notation?\n\n      var formatType = formatTypes[type],\n          maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,\n      // or clamp the specified precision to the supported range.\n      // For significant precision, it must be in [1, 21].\n      // For fixed precision, it must be in [0, 20].\n\n      precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n\n      function format(value) {\n        var valuePrefix = prefix,\n            valueSuffix = suffix,\n            i,\n            n,\n            c;\n\n        if (type === \"c\") {\n          valueSuffix = formatType(value) + valueSuffix;\n          value = \"\";\n        } else {\n          value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n\n          var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.\n\n          value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.\n\n          if (trim) value = formatTrim(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n\n          if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false; // Compute the prefix and suffix.\n\n          valuePrefix = (valueNegative ? sign === \"(\" ? sign : minus : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n          valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\"); // Break the formatted value into the integer \u201cvalue\u201d part that can be\n          // grouped, and fractional or exponential \u201csuffix\u201d part that is not.\n\n          if (maybeSuffix) {\n            i = -1, n = value.length;\n\n            while (++i < n) {\n              if (c = value.charCodeAt(i), 48 > c || c > 57) {\n                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n                value = value.slice(0, i);\n                break;\n              }\n            }\n          }\n        } // If the fill character is not \"0\", grouping is applied before padding.\n\n\n        if (comma && !zero) value = group(value, Infinity); // Compute the padding.\n\n        var length = valuePrefix.length + value.length + valueSuffix.length,\n            padding = length < width ? new Array(width - length + 1).join(fill) : \"\"; // If the fill character is \"0\", grouping is applied after padding.\n\n        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\"; // Reconstruct the final output based on the desired alignment.\n\n        switch (align) {\n          case \"<\":\n            value = valuePrefix + value + valueSuffix + padding;\n            break;\n\n          case \"=\":\n            value = valuePrefix + padding + value + valueSuffix;\n            break;\n\n          case \"^\":\n            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n            break;\n\n          default:\n            value = padding + valuePrefix + value + valueSuffix;\n            break;\n        }\n\n        return numerals(value);\n      }\n\n      format.toString = function () {\n        return specifier + \"\";\n      };\n\n      return format;\n    }\n\n    function formatPrefix(specifier, value) {\n      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n          e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n          k = Math.pow(10, -e),\n          prefix = prefixes[8 + e / 3];\n      return function (value) {\n        return f(k * value) + prefix;\n      };\n    }\n\n    return {\n      format: newFormat,\n      formatPrefix: formatPrefix\n    };\n  }\n\n  var locale$2;\n  var format$3;\n  var formatPrefix;\n  defaultLocale$2({\n    thousands: \",\",\n    grouping: [3],\n    currency: [\"$\", \"\"]\n  });\n  function defaultLocale$2(definition) {\n    locale$2 = formatLocale$1(definition);\n    format$3 = locale$2.format;\n    formatPrefix = locale$2.formatPrefix;\n    return locale$2;\n  }\n\n  function precisionFixed (step) {\n    return Math.max(0, -exponent(Math.abs(step)));\n  }\n\n  function precisionPrefix (step, value) {\n    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n  }\n\n  function precisionRound (step, max) {\n    step = Math.abs(step), max = Math.abs(max) - step;\n    return Math.max(0, exponent(max) - exponent(step)) + 1;\n  }\n\n  var t0$2 = new Date(),\n      t1$1 = new Date();\n  function newInterval(floori, offseti, count, field) {\n    function interval(date) {\n      return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n    }\n\n    interval.floor = function (date) {\n      return floori(date = new Date(+date)), date;\n    };\n\n    interval.ceil = function (date) {\n      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n    };\n\n    interval.round = function (date) {\n      var d0 = interval(date),\n          d1 = interval.ceil(date);\n      return date - d0 < d1 - date ? d0 : d1;\n    };\n\n    interval.offset = function (date, step) {\n      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n    };\n\n    interval.range = function (start, stop, step) {\n      var range = [],\n          previous;\n      start = interval.ceil(start);\n      step = step == null ? 1 : Math.floor(step);\n      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n      do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);\n\n      return range;\n    };\n\n    interval.filter = function (test) {\n      return newInterval(function (date) {\n        if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n      }, function (date, step) {\n        if (date >= date) {\n          if (step < 0) while (++step <= 0) {\n            while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n          } else while (--step >= 0) {\n            while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n          }\n        }\n      });\n    };\n\n    if (count) {\n      interval.count = function (start, end) {\n        t0$2.setTime(+start), t1$1.setTime(+end);\n        floori(t0$2), floori(t1$1);\n        return Math.floor(count(t0$2, t1$1));\n      };\n\n      interval.every = function (step) {\n        step = Math.floor(step);\n        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n          return field(d) % step === 0;\n        } : function (d) {\n          return interval.count(0, d) % step === 0;\n        });\n      };\n    }\n\n    return interval;\n  }\n\n  var millisecond = newInterval(function () {// noop\n  }, function (date, step) {\n    date.setTime(+date + step);\n  }, function (start, end) {\n    return end - start;\n  }); // An optimized implementation for this simple case.\n\n  millisecond.every = function (k) {\n    k = Math.floor(k);\n    if (!isFinite(k) || !(k > 0)) return null;\n    if (!(k > 1)) return millisecond;\n    return newInterval(function (date) {\n      date.setTime(Math.floor(date / k) * k);\n    }, function (date, step) {\n      date.setTime(+date + step * k);\n    }, function (start, end) {\n      return (end - start) / k;\n    });\n  };\n\n  var durationSecond$2 = 1e3;\n  var durationMinute$2 = 6e4;\n  var durationHour$2 = 36e5;\n  var durationDay$2 = 864e5;\n  var durationWeek$2 = 6048e5;\n\n  var second = newInterval(function (date) {\n    date.setTime(date - date.getMilliseconds());\n  }, function (date, step) {\n    date.setTime(+date + step * durationSecond$2);\n  }, function (start, end) {\n    return (end - start) / durationSecond$2;\n  }, function (date) {\n    return date.getUTCSeconds();\n  });\n\n  var minute = newInterval(function (date) {\n    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond$2);\n  }, function (date, step) {\n    date.setTime(+date + step * durationMinute$2);\n  }, function (start, end) {\n    return (end - start) / durationMinute$2;\n  }, function (date) {\n    return date.getMinutes();\n  });\n\n  var hour = newInterval(function (date) {\n    date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond$2 - date.getMinutes() * durationMinute$2);\n  }, function (date, step) {\n    date.setTime(+date + step * durationHour$2);\n  }, function (start, end) {\n    return (end - start) / durationHour$2;\n  }, function (date) {\n    return date.getHours();\n  });\n\n  var day = newInterval(date => date.setHours(0, 0, 0, 0), (date, step) => date.setDate(date.getDate() + step), (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$2) / durationDay$2, date => date.getDate() - 1);\n\n  function weekday$1(i) {\n    return newInterval(function (date) {\n      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n      date.setHours(0, 0, 0, 0);\n    }, function (date, step) {\n      date.setDate(date.getDate() + step * 7);\n    }, function (start, end) {\n      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$2) / durationWeek$2;\n    });\n  }\n\n  var sunday = weekday$1(0);\n  var monday = weekday$1(1);\n  weekday$1(2);\n  weekday$1(3);\n  var thursday = weekday$1(4);\n  weekday$1(5);\n  weekday$1(6);\n\n  var month = newInterval(function (date) {\n    date.setDate(1);\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setMonth(date.getMonth() + step);\n  }, function (start, end) {\n    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n  }, function (date) {\n    return date.getMonth();\n  });\n\n  var year = newInterval(function (date) {\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setFullYear(date.getFullYear() + step);\n  }, function (start, end) {\n    return end.getFullYear() - start.getFullYear();\n  }, function (date) {\n    return date.getFullYear();\n  }); // An optimized implementation for this simple case.\n\n  year.every = function (k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {\n      date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n      date.setMonth(0, 1);\n      date.setHours(0, 0, 0, 0);\n    }, function (date, step) {\n      date.setFullYear(date.getFullYear() + step * k);\n    });\n  };\n\n  var utcMinute = newInterval(function (date) {\n    date.setUTCSeconds(0, 0);\n  }, function (date, step) {\n    date.setTime(+date + step * durationMinute$2);\n  }, function (start, end) {\n    return (end - start) / durationMinute$2;\n  }, function (date) {\n    return date.getUTCMinutes();\n  });\n\n  var utcHour = newInterval(function (date) {\n    date.setUTCMinutes(0, 0, 0);\n  }, function (date, step) {\n    date.setTime(+date + step * durationHour$2);\n  }, function (start, end) {\n    return (end - start) / durationHour$2;\n  }, function (date) {\n    return date.getUTCHours();\n  });\n\n  var utcDay = newInterval(function (date) {\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCDate(date.getUTCDate() + step);\n  }, function (start, end) {\n    return (end - start) / durationDay$2;\n  }, function (date) {\n    return date.getUTCDate() - 1;\n  });\n\n  function utcWeekday(i) {\n    return newInterval(function (date) {\n      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function (date, step) {\n      date.setUTCDate(date.getUTCDate() + step * 7);\n    }, function (start, end) {\n      return (end - start) / durationWeek$2;\n    });\n  }\n\n  var utcSunday = utcWeekday(0);\n  var utcMonday = utcWeekday(1);\n  utcWeekday(2);\n  utcWeekday(3);\n  var utcThursday = utcWeekday(4);\n  utcWeekday(5);\n  utcWeekday(6);\n\n  var utcMonth = newInterval(function (date) {\n    date.setUTCDate(1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCMonth(date.getUTCMonth() + step);\n  }, function (start, end) {\n    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n  }, function (date) {\n    return date.getUTCMonth();\n  });\n\n  var utcYear = newInterval(function (date) {\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step);\n  }, function (start, end) {\n    return end.getUTCFullYear() - start.getUTCFullYear();\n  }, function (date) {\n    return date.getUTCFullYear();\n  }); // An optimized implementation for this simple case.\n\n  utcYear.every = function (k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {\n      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n      date.setUTCMonth(0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function (date, step) {\n      date.setUTCFullYear(date.getUTCFullYear() + step * k);\n    });\n  };\n\n  const YEAR = 'year';\n  const QUARTER = 'quarter';\n  const MONTH = 'month';\n  const WEEK = 'week';\n  const DATE = 'date';\n  const DAY = 'day';\n  const DAYOFYEAR = 'dayofyear';\n  const HOURS = 'hours';\n  const MINUTES = 'minutes';\n  const SECONDS = 'seconds';\n  const MILLISECONDS = 'milliseconds';\n  const TIME_UNITS = [YEAR, QUARTER, MONTH, WEEK, DATE, DAY, DAYOFYEAR, HOURS, MINUTES, SECONDS, MILLISECONDS];\n  const UNITS = TIME_UNITS.reduce((o, u, i) => (o[u] = 1 + i, o), {});\n\n  function timeUnits(units) {\n    const u = array$5(units).slice(),\n          m = {}; // check validity\n\n    if (!u.length) error('Missing time unit.');\n    u.forEach(unit => {\n      if (has$1(UNITS, unit)) {\n        m[unit] = 1;\n      } else {\n        error(`Invalid time unit: ${unit}.`);\n      }\n    });\n    const numTypes = (m[WEEK] || m[DAY] ? 1 : 0) + (m[QUARTER] || m[MONTH] || m[DATE] ? 1 : 0) + (m[DAYOFYEAR] ? 1 : 0);\n\n    if (numTypes > 1) {\n      error(`Incompatible time units: ${units}`);\n    } // ensure proper sort order\n\n\n    u.sort((a, b) => UNITS[a] - UNITS[b]);\n    return u;\n  }\n\n  const defaultSpecifiers = {\n    [YEAR]: '%Y ',\n    [QUARTER]: 'Q%q ',\n    [MONTH]: '%b ',\n    [DATE]: '%d ',\n    [WEEK]: 'W%U ',\n    [DAY]: '%a ',\n    [DAYOFYEAR]: '%j ',\n    [HOURS]: '%H:00',\n    [MINUTES]: '00:%M',\n    [SECONDS]: ':%S',\n    [MILLISECONDS]: '.%L',\n    [`${YEAR}-${MONTH}`]: '%Y-%m ',\n    [`${YEAR}-${MONTH}-${DATE}`]: '%Y-%m-%d ',\n    [`${HOURS}-${MINUTES}`]: '%H:%M'\n  };\n\n  function timeUnitSpecifier(units, specifiers) {\n    const s = extend$1({}, defaultSpecifiers, specifiers),\n          u = timeUnits(units),\n          n = u.length;\n    let fmt = '',\n        start = 0,\n        end,\n        key;\n\n    for (start = 0; start < n;) {\n      for (end = u.length; end > start; --end) {\n        key = u.slice(start, end).join('-');\n\n        if (s[key] != null) {\n          fmt += s[key];\n          start = end;\n          break;\n        }\n      }\n    }\n\n    return fmt.trim();\n  }\n\n  const t0$1 = new Date();\n\n  function localYear(y) {\n    t0$1.setFullYear(y);\n    t0$1.setMonth(0);\n    t0$1.setDate(1);\n    t0$1.setHours(0, 0, 0, 0);\n    return t0$1;\n  }\n\n  function dayofyear(d) {\n    return localDayOfYear(new Date(d));\n  }\n\n  function week(d) {\n    return localWeekNum(new Date(d));\n  }\n\n  function localDayOfYear(d) {\n    return day.count(localYear(d.getFullYear()) - 1, d);\n  }\n\n  function localWeekNum(d) {\n    return sunday.count(localYear(d.getFullYear()) - 1, d);\n  }\n\n  function localFirst(y) {\n    return localYear(y).getDay();\n  }\n\n  function localDate$1(y, m, d, H, M, S, L) {\n    if (0 <= y && y < 100) {\n      const date = new Date(-1, m, d, H, M, S, L);\n      date.setFullYear(y);\n      return date;\n    }\n\n    return new Date(y, m, d, H, M, S, L);\n  }\n\n  function utcdayofyear(d) {\n    return utcDayOfYear(new Date(d));\n  }\n\n  function utcweek(d) {\n    return utcWeekNum(new Date(d));\n  }\n\n  function utcDayOfYear(d) {\n    const y = Date.UTC(d.getUTCFullYear(), 0, 1);\n    return utcDay.count(y - 1, d);\n  }\n\n  function utcWeekNum(d) {\n    const y = Date.UTC(d.getUTCFullYear(), 0, 1);\n    return utcSunday.count(y - 1, d);\n  }\n\n  function utcFirst(y) {\n    t0$1.setTime(Date.UTC(y, 0, 1));\n    return t0$1.getUTCDay();\n  }\n\n  function utcDate$1(y, m, d, H, M, S, L) {\n    if (0 <= y && y < 100) {\n      const date = new Date(Date.UTC(-1, m, d, H, M, S, L));\n      date.setUTCFullYear(d.y);\n      return date;\n    }\n\n    return new Date(Date.UTC(y, m, d, H, M, S, L));\n  }\n\n  function floor(units, step, get, inv, newDate) {\n    const s = step || 1,\n          b = peek$1(units),\n          _ = (unit, p, key) => {\n      key = key || unit;\n      return getUnit(get[key], inv[key], unit === b && s, p);\n    };\n\n    const t = new Date(),\n          u = toSet(units),\n          y = u[YEAR] ? _(YEAR) : constant$4(2012),\n          m = u[MONTH] ? _(MONTH) : u[QUARTER] ? _(QUARTER) : zero$2,\n          d = u[WEEK] && u[DAY] ? _(DAY, 1, WEEK + DAY) : u[WEEK] ? _(WEEK, 1) : u[DAY] ? _(DAY, 1) : u[DATE] ? _(DATE, 1) : u[DAYOFYEAR] ? _(DAYOFYEAR, 1) : one$2,\n          H = u[HOURS] ? _(HOURS) : zero$2,\n          M = u[MINUTES] ? _(MINUTES) : zero$2,\n          S = u[SECONDS] ? _(SECONDS) : zero$2,\n          L = u[MILLISECONDS] ? _(MILLISECONDS) : zero$2;\n    return function (v) {\n      t.setTime(+v);\n      const year = y(t);\n      return newDate(year, m(t), d(t, year), H(t), M(t), S(t), L(t));\n    };\n  }\n\n  function getUnit(f, inv, step, phase) {\n    const u = step <= 1 ? f : phase ? (d, y) => phase + step * Math.floor((f(d, y) - phase) / step) : (d, y) => step * Math.floor(f(d, y) / step);\n    return inv ? (d, y) => inv(u(d, y), y) : u;\n  } // returns the day of the year based on week number, day of week,\n  // and the day of the week for the first day of the year\n\n\n  function weekday(week, day, firstDay) {\n    return day + week * 7 - (firstDay + 6) % 7;\n  } // -- LOCAL TIME --\n\n\n  const localGet = {\n    [YEAR]: d => d.getFullYear(),\n    [QUARTER]: d => Math.floor(d.getMonth() / 3),\n    [MONTH]: d => d.getMonth(),\n    [DATE]: d => d.getDate(),\n    [HOURS]: d => d.getHours(),\n    [MINUTES]: d => d.getMinutes(),\n    [SECONDS]: d => d.getSeconds(),\n    [MILLISECONDS]: d => d.getMilliseconds(),\n    [DAYOFYEAR]: d => localDayOfYear(d),\n    [WEEK]: d => localWeekNum(d),\n    [WEEK + DAY]: (d, y) => weekday(localWeekNum(d), d.getDay(), localFirst(y)),\n    [DAY]: (d, y) => weekday(1, d.getDay(), localFirst(y))\n  };\n  const localInv = {\n    [QUARTER]: q => 3 * q,\n    [WEEK]: (w, y) => weekday(w, 0, localFirst(y))\n  };\n\n  function timeFloor(units, step) {\n    return floor(units, step || 1, localGet, localInv, localDate$1);\n  } // -- UTC TIME --\n\n\n  const utcGet = {\n    [YEAR]: d => d.getUTCFullYear(),\n    [QUARTER]: d => Math.floor(d.getUTCMonth() / 3),\n    [MONTH]: d => d.getUTCMonth(),\n    [DATE]: d => d.getUTCDate(),\n    [HOURS]: d => d.getUTCHours(),\n    [MINUTES]: d => d.getUTCMinutes(),\n    [SECONDS]: d => d.getUTCSeconds(),\n    [MILLISECONDS]: d => d.getUTCMilliseconds(),\n    [DAYOFYEAR]: d => utcDayOfYear(d),\n    [WEEK]: d => utcWeekNum(d),\n    [DAY]: (d, y) => weekday(1, d.getUTCDay(), utcFirst(y)),\n    [WEEK + DAY]: (d, y) => weekday(utcWeekNum(d), d.getUTCDay(), utcFirst(y))\n  };\n  const utcInv = {\n    [QUARTER]: q => 3 * q,\n    [WEEK]: (w, y) => weekday(w, 0, utcFirst(y))\n  };\n\n  function utcFloor(units, step) {\n    return floor(units, step || 1, utcGet, utcInv, utcDate$1);\n  }\n\n  const timeIntervals = {\n    [YEAR]: year,\n    [QUARTER]: month.every(3),\n    [MONTH]: month,\n    [WEEK]: sunday,\n    [DATE]: day,\n    [DAY]: day,\n    [DAYOFYEAR]: day,\n    [HOURS]: hour,\n    [MINUTES]: minute,\n    [SECONDS]: second,\n    [MILLISECONDS]: millisecond\n  };\n  const utcIntervals = {\n    [YEAR]: utcYear,\n    [QUARTER]: utcMonth.every(3),\n    [MONTH]: utcMonth,\n    [WEEK]: utcSunday,\n    [DATE]: utcDay,\n    [DAY]: utcDay,\n    [DAYOFYEAR]: utcDay,\n    [HOURS]: utcHour,\n    [MINUTES]: utcMinute,\n    [SECONDS]: second,\n    [MILLISECONDS]: millisecond\n  };\n\n  function timeInterval(unit) {\n    return timeIntervals[unit];\n  }\n\n  function utcInterval(unit) {\n    return utcIntervals[unit];\n  }\n\n  function offset$3(ival, date, step) {\n    return ival ? ival.offset(date, step) : undefined;\n  }\n\n  function timeOffset(unit, date, step) {\n    return offset$3(timeInterval(unit), date, step);\n  }\n\n  function utcOffset(unit, date, step) {\n    return offset$3(utcInterval(unit), date, step);\n  }\n\n  function sequence$1(ival, start, stop, step) {\n    return ival ? ival.range(start, stop, step) : undefined;\n  }\n\n  function timeSequence(unit, start, stop, step) {\n    return sequence$1(timeInterval(unit), start, stop, step);\n  }\n\n  function utcSequence(unit, start, stop, step) {\n    return sequence$1(utcInterval(unit), start, stop, step);\n  }\n\n  const durationSecond$1 = 1000,\n        durationMinute$1 = durationSecond$1 * 60,\n        durationHour$1 = durationMinute$1 * 60,\n        durationDay$1 = durationHour$1 * 24,\n        durationWeek$1 = durationDay$1 * 7,\n        durationMonth$1 = durationDay$1 * 30,\n        durationYear$1 = durationDay$1 * 365;\n  const Milli = [YEAR, MONTH, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS],\n        Seconds = Milli.slice(0, -1),\n        Minutes = Seconds.slice(0, -1),\n        Hours = Minutes.slice(0, -1),\n        Day = Hours.slice(0, -1),\n        Week = [YEAR, WEEK],\n        Month = [YEAR, MONTH],\n        Year = [YEAR];\n  const intervals = [[Seconds, 1, durationSecond$1], [Seconds, 5, 5 * durationSecond$1], [Seconds, 15, 15 * durationSecond$1], [Seconds, 30, 30 * durationSecond$1], [Minutes, 1, durationMinute$1], [Minutes, 5, 5 * durationMinute$1], [Minutes, 15, 15 * durationMinute$1], [Minutes, 30, 30 * durationMinute$1], [Hours, 1, durationHour$1], [Hours, 3, 3 * durationHour$1], [Hours, 6, 6 * durationHour$1], [Hours, 12, 12 * durationHour$1], [Day, 1, durationDay$1], [Week, 1, durationWeek$1], [Month, 1, durationMonth$1], [Month, 3, 3 * durationMonth$1], [Year, 1, durationYear$1]];\n\n  function bin$1(opt) {\n    const ext = opt.extent,\n          max = opt.maxbins || 40,\n          target = Math.abs(span(ext)) / max;\n    let i = bisector$1(i => i[2]).right(intervals, target),\n        units,\n        step;\n\n    if (i === intervals.length) {\n      units = Year, step = tickStep(ext[0] / durationYear$1, ext[1] / durationYear$1, max);\n    } else if (i) {\n      i = intervals[target / intervals[i - 1][2] < intervals[i][2] / target ? i - 1 : i];\n      units = i[0];\n      step = i[1];\n    } else {\n      units = Milli;\n      step = Math.max(tickStep(ext[0], ext[1], max), 1);\n    }\n\n    return {\n      units,\n      step\n    };\n  }\n\n  function localDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n      date.setFullYear(d.y);\n      return date;\n    }\n\n    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n  }\n\n  function utcDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n      date.setUTCFullYear(d.y);\n      return date;\n    }\n\n    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n  }\n\n  function newDate(y, m, d) {\n    return {\n      y: y,\n      m: m,\n      d: d,\n      H: 0,\n      M: 0,\n      S: 0,\n      L: 0\n    };\n  }\n\n  function formatLocale(locale) {\n    var locale_dateTime = locale.dateTime,\n        locale_date = locale.date,\n        locale_time = locale.time,\n        locale_periods = locale.periods,\n        locale_weekdays = locale.days,\n        locale_shortWeekdays = locale.shortDays,\n        locale_months = locale.months,\n        locale_shortMonths = locale.shortMonths;\n    var periodRe = formatRe(locale_periods),\n        periodLookup = formatLookup(locale_periods),\n        weekdayRe = formatRe(locale_weekdays),\n        weekdayLookup = formatLookup(locale_weekdays),\n        shortWeekdayRe = formatRe(locale_shortWeekdays),\n        shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n        monthRe = formatRe(locale_months),\n        monthLookup = formatLookup(locale_months),\n        shortMonthRe = formatRe(locale_shortMonths),\n        shortMonthLookup = formatLookup(locale_shortMonths);\n    var formats = {\n      \"a\": formatShortWeekday,\n      \"A\": formatWeekday,\n      \"b\": formatShortMonth,\n      \"B\": formatMonth,\n      \"c\": null,\n      \"d\": formatDayOfMonth,\n      \"e\": formatDayOfMonth,\n      \"f\": formatMicroseconds,\n      \"g\": formatYearISO,\n      \"G\": formatFullYearISO,\n      \"H\": formatHour24,\n      \"I\": formatHour12,\n      \"j\": formatDayOfYear,\n      \"L\": formatMilliseconds,\n      \"m\": formatMonthNumber,\n      \"M\": formatMinutes,\n      \"p\": formatPeriod,\n      \"q\": formatQuarter,\n      \"Q\": formatUnixTimestamp,\n      \"s\": formatUnixTimestampSeconds,\n      \"S\": formatSeconds,\n      \"u\": formatWeekdayNumberMonday,\n      \"U\": formatWeekNumberSunday,\n      \"V\": formatWeekNumberISO,\n      \"w\": formatWeekdayNumberSunday,\n      \"W\": formatWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatYear,\n      \"Y\": formatFullYear,\n      \"Z\": formatZone,\n      \"%\": formatLiteralPercent\n    };\n    var utcFormats = {\n      \"a\": formatUTCShortWeekday,\n      \"A\": formatUTCWeekday,\n      \"b\": formatUTCShortMonth,\n      \"B\": formatUTCMonth,\n      \"c\": null,\n      \"d\": formatUTCDayOfMonth,\n      \"e\": formatUTCDayOfMonth,\n      \"f\": formatUTCMicroseconds,\n      \"g\": formatUTCYearISO,\n      \"G\": formatUTCFullYearISO,\n      \"H\": formatUTCHour24,\n      \"I\": formatUTCHour12,\n      \"j\": formatUTCDayOfYear,\n      \"L\": formatUTCMilliseconds,\n      \"m\": formatUTCMonthNumber,\n      \"M\": formatUTCMinutes,\n      \"p\": formatUTCPeriod,\n      \"q\": formatUTCQuarter,\n      \"Q\": formatUnixTimestamp,\n      \"s\": formatUnixTimestampSeconds,\n      \"S\": formatUTCSeconds,\n      \"u\": formatUTCWeekdayNumberMonday,\n      \"U\": formatUTCWeekNumberSunday,\n      \"V\": formatUTCWeekNumberISO,\n      \"w\": formatUTCWeekdayNumberSunday,\n      \"W\": formatUTCWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatUTCYear,\n      \"Y\": formatUTCFullYear,\n      \"Z\": formatUTCZone,\n      \"%\": formatLiteralPercent\n    };\n    var parses = {\n      \"a\": parseShortWeekday,\n      \"A\": parseWeekday,\n      \"b\": parseShortMonth,\n      \"B\": parseMonth,\n      \"c\": parseLocaleDateTime,\n      \"d\": parseDayOfMonth,\n      \"e\": parseDayOfMonth,\n      \"f\": parseMicroseconds,\n      \"g\": parseYear,\n      \"G\": parseFullYear,\n      \"H\": parseHour24,\n      \"I\": parseHour24,\n      \"j\": parseDayOfYear,\n      \"L\": parseMilliseconds,\n      \"m\": parseMonthNumber,\n      \"M\": parseMinutes,\n      \"p\": parsePeriod,\n      \"q\": parseQuarter,\n      \"Q\": parseUnixTimestamp,\n      \"s\": parseUnixTimestampSeconds,\n      \"S\": parseSeconds,\n      \"u\": parseWeekdayNumberMonday,\n      \"U\": parseWeekNumberSunday,\n      \"V\": parseWeekNumberISO,\n      \"w\": parseWeekdayNumberSunday,\n      \"W\": parseWeekNumberMonday,\n      \"x\": parseLocaleDate,\n      \"X\": parseLocaleTime,\n      \"y\": parseYear,\n      \"Y\": parseFullYear,\n      \"Z\": parseZone,\n      \"%\": parseLiteralPercent\n    }; // These recursive directive definitions must be deferred.\n\n    formats.x = newFormat(locale_date, formats);\n    formats.X = newFormat(locale_time, formats);\n    formats.c = newFormat(locale_dateTime, formats);\n    utcFormats.x = newFormat(locale_date, utcFormats);\n    utcFormats.X = newFormat(locale_time, utcFormats);\n    utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n    function newFormat(specifier, formats) {\n      return function (date) {\n        var string = [],\n            i = -1,\n            j = 0,\n            n = specifier.length,\n            c,\n            pad,\n            format;\n        if (!(date instanceof Date)) date = new Date(+date);\n\n        while (++i < n) {\n          if (specifier.charCodeAt(i) === 37) {\n            string.push(specifier.slice(j, i));\n            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === \"e\" ? \" \" : \"0\";\n            if (format = formats[c]) c = format(date, pad);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n\n        string.push(specifier.slice(j, i));\n        return string.join(\"\");\n      };\n    }\n\n    function newParse(specifier, Z) {\n      return function (string) {\n        var d = newDate(1900, undefined, 1),\n            i = parseSpecifier(d, specifier, string += \"\", 0),\n            week,\n            day$1;\n        if (i != string.length) return null; // If a UNIX timestamp is specified, return it.\n\n        if (\"Q\" in d) return new Date(d.Q);\n        if (\"s\" in d) return new Date(d.s * 1000 + (\"L\" in d ? d.L : 0)); // If this is utcParse, never use the local timezone.\n\n        if (Z && !(\"Z\" in d)) d.Z = 0; // The am-pm flag is 0 for AM, and 1 for PM.\n\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12; // If the month was not specified, inherit from the quarter.\n\n        if (d.m === undefined) d.m = \"q\" in d ? d.q : 0; // Convert day-of-week and week-of-year to day-of-year.\n\n        if (\"V\" in d) {\n          if (d.V < 1 || d.V > 53) return null;\n          if (!(\"w\" in d)) d.w = 1;\n\n          if (\"Z\" in d) {\n            week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();\n            week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);\n            week = utcDay.offset(week, (d.V - 1) * 7);\n            d.y = week.getUTCFullYear();\n            d.m = week.getUTCMonth();\n            d.d = week.getUTCDate() + (d.w + 6) % 7;\n          } else {\n            week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();\n            week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);\n            week = day.offset(week, (d.V - 1) * 7);\n            d.y = week.getFullYear();\n            d.m = week.getMonth();\n            d.d = week.getDate() + (d.w + 6) % 7;\n          }\n        } else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\n          day$1 = \"Z\" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();\n          d.m = 0;\n          d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;\n        } // If a time zone is specified, all fields are interpreted as UTC and then\n        // offset according to the specified time zone.\n\n\n        if (\"Z\" in d) {\n          d.H += d.Z / 100 | 0;\n          d.M += d.Z % 100;\n          return utcDate(d);\n        } // Otherwise, all fields are in local time.\n\n\n        return localDate(d);\n      };\n    }\n\n    function parseSpecifier(d, specifier, string, j) {\n      var i = 0,\n          n = specifier.length,\n          m = string.length,\n          c,\n          parse;\n\n      while (i < n) {\n        if (j >= m) return -1;\n        c = specifier.charCodeAt(i++);\n\n        if (c === 37) {\n          c = specifier.charAt(i++);\n          parse = parses[c in pads ? specifier.charAt(i++) : c];\n          if (!parse || (j = parse(d, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n\n      return j;\n    }\n\n    function parsePeriod(d, string, i) {\n      var n = periodRe.exec(string.slice(i));\n      return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n\n    function parseShortWeekday(d, string, i) {\n      var n = shortWeekdayRe.exec(string.slice(i));\n      return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n\n    function parseWeekday(d, string, i) {\n      var n = weekdayRe.exec(string.slice(i));\n      return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n\n    function parseShortMonth(d, string, i) {\n      var n = shortMonthRe.exec(string.slice(i));\n      return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n\n    function parseMonth(d, string, i) {\n      var n = monthRe.exec(string.slice(i));\n      return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n\n    function parseLocaleDateTime(d, string, i) {\n      return parseSpecifier(d, locale_dateTime, string, i);\n    }\n\n    function parseLocaleDate(d, string, i) {\n      return parseSpecifier(d, locale_date, string, i);\n    }\n\n    function parseLocaleTime(d, string, i) {\n      return parseSpecifier(d, locale_time, string, i);\n    }\n\n    function formatShortWeekday(d) {\n      return locale_shortWeekdays[d.getDay()];\n    }\n\n    function formatWeekday(d) {\n      return locale_weekdays[d.getDay()];\n    }\n\n    function formatShortMonth(d) {\n      return locale_shortMonths[d.getMonth()];\n    }\n\n    function formatMonth(d) {\n      return locale_months[d.getMonth()];\n    }\n\n    function formatPeriod(d) {\n      return locale_periods[+(d.getHours() >= 12)];\n    }\n\n    function formatQuarter(d) {\n      return 1 + ~~(d.getMonth() / 3);\n    }\n\n    function formatUTCShortWeekday(d) {\n      return locale_shortWeekdays[d.getUTCDay()];\n    }\n\n    function formatUTCWeekday(d) {\n      return locale_weekdays[d.getUTCDay()];\n    }\n\n    function formatUTCShortMonth(d) {\n      return locale_shortMonths[d.getUTCMonth()];\n    }\n\n    function formatUTCMonth(d) {\n      return locale_months[d.getUTCMonth()];\n    }\n\n    function formatUTCPeriod(d) {\n      return locale_periods[+(d.getUTCHours() >= 12)];\n    }\n\n    function formatUTCQuarter(d) {\n      return 1 + ~~(d.getUTCMonth() / 3);\n    }\n\n    return {\n      format: function (specifier) {\n        var f = newFormat(specifier += \"\", formats);\n\n        f.toString = function () {\n          return specifier;\n        };\n\n        return f;\n      },\n      parse: function (specifier) {\n        var p = newParse(specifier += \"\", false);\n\n        p.toString = function () {\n          return specifier;\n        };\n\n        return p;\n      },\n      utcFormat: function (specifier) {\n        var f = newFormat(specifier += \"\", utcFormats);\n\n        f.toString = function () {\n          return specifier;\n        };\n\n        return f;\n      },\n      utcParse: function (specifier) {\n        var p = newParse(specifier += \"\", true);\n\n        p.toString = function () {\n          return specifier;\n        };\n\n        return p;\n      }\n    };\n  }\n  var pads = {\n    \"-\": \"\",\n    \"_\": \" \",\n    \"0\": \"0\"\n  },\n      numberRe = /^\\s*\\d+/,\n      // note: ignores next directive\n  percentRe = /^%/,\n      requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\n\n  function pad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\",\n        string = (sign ? -value : value) + \"\",\n        length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n\n  function requote(s) {\n    return s.replace(requoteRe, \"\\\\$&\");\n  }\n\n  function formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n  }\n\n  function formatLookup(names) {\n    return new Map(names.map((name, i) => [name.toLowerCase(), i]));\n  }\n\n  function parseWeekdayNumberSunday(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.w = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekdayNumberMonday(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.u = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberSunday(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.U = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberISO(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.V = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberMonday(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.W = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseFullYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 4));\n    return n ? (d.y = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n  }\n\n  function parseZone(d, string, i) {\n    var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\n    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n  }\n\n  function parseQuarter(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;\n  }\n\n  function parseMonthNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n  }\n\n  function parseDayOfMonth(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseDayOfYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseHour24(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.H = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMinutes(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.M = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseSeconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.S = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMilliseconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.L = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMicroseconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 6));\n    return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\n  }\n\n  function parseLiteralPercent(d, string, i) {\n    var n = percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n\n  function parseUnixTimestamp(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.Q = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseUnixTimestampSeconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.s = +n[0], i + n[0].length) : -1;\n  }\n\n  function formatDayOfMonth(d, p) {\n    return pad(d.getDate(), p, 2);\n  }\n\n  function formatHour24(d, p) {\n    return pad(d.getHours(), p, 2);\n  }\n\n  function formatHour12(d, p) {\n    return pad(d.getHours() % 12 || 12, p, 2);\n  }\n\n  function formatDayOfYear(d, p) {\n    return pad(1 + day.count(year(d), d), p, 3);\n  }\n\n  function formatMilliseconds(d, p) {\n    return pad(d.getMilliseconds(), p, 3);\n  }\n\n  function formatMicroseconds(d, p) {\n    return formatMilliseconds(d, p) + \"000\";\n  }\n\n  function formatMonthNumber(d, p) {\n    return pad(d.getMonth() + 1, p, 2);\n  }\n\n  function formatMinutes(d, p) {\n    return pad(d.getMinutes(), p, 2);\n  }\n\n  function formatSeconds(d, p) {\n    return pad(d.getSeconds(), p, 2);\n  }\n\n  function formatWeekdayNumberMonday(d) {\n    var day = d.getDay();\n    return day === 0 ? 7 : day;\n  }\n\n  function formatWeekNumberSunday(d, p) {\n    return pad(sunday.count(year(d) - 1, d), p, 2);\n  }\n\n  function dISO(d) {\n    var day = d.getDay();\n    return day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);\n  }\n\n  function formatWeekNumberISO(d, p) {\n    d = dISO(d);\n    return pad(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);\n  }\n\n  function formatWeekdayNumberSunday(d) {\n    return d.getDay();\n  }\n\n  function formatWeekNumberMonday(d, p) {\n    return pad(monday.count(year(d) - 1, d), p, 2);\n  }\n\n  function formatYear(d, p) {\n    return pad(d.getFullYear() % 100, p, 2);\n  }\n\n  function formatYearISO(d, p) {\n    d = dISO(d);\n    return pad(d.getFullYear() % 100, p, 2);\n  }\n\n  function formatFullYear(d, p) {\n    return pad(d.getFullYear() % 10000, p, 4);\n  }\n\n  function formatFullYearISO(d, p) {\n    var day = d.getDay();\n    d = day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);\n    return pad(d.getFullYear() % 10000, p, 4);\n  }\n\n  function formatZone(d) {\n    var z = d.getTimezoneOffset();\n    return (z > 0 ? \"-\" : (z *= -1, \"+\")) + pad(z / 60 | 0, \"0\", 2) + pad(z % 60, \"0\", 2);\n  }\n\n  function formatUTCDayOfMonth(d, p) {\n    return pad(d.getUTCDate(), p, 2);\n  }\n\n  function formatUTCHour24(d, p) {\n    return pad(d.getUTCHours(), p, 2);\n  }\n\n  function formatUTCHour12(d, p) {\n    return pad(d.getUTCHours() % 12 || 12, p, 2);\n  }\n\n  function formatUTCDayOfYear(d, p) {\n    return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n  }\n\n  function formatUTCMilliseconds(d, p) {\n    return pad(d.getUTCMilliseconds(), p, 3);\n  }\n\n  function formatUTCMicroseconds(d, p) {\n    return formatUTCMilliseconds(d, p) + \"000\";\n  }\n\n  function formatUTCMonthNumber(d, p) {\n    return pad(d.getUTCMonth() + 1, p, 2);\n  }\n\n  function formatUTCMinutes(d, p) {\n    return pad(d.getUTCMinutes(), p, 2);\n  }\n\n  function formatUTCSeconds(d, p) {\n    return pad(d.getUTCSeconds(), p, 2);\n  }\n\n  function formatUTCWeekdayNumberMonday(d) {\n    var dow = d.getUTCDay();\n    return dow === 0 ? 7 : dow;\n  }\n\n  function formatUTCWeekNumberSunday(d, p) {\n    return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);\n  }\n\n  function UTCdISO(d) {\n    var day = d.getUTCDay();\n    return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);\n  }\n\n  function formatUTCWeekNumberISO(d, p) {\n    d = UTCdISO(d);\n    return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\n  }\n\n  function formatUTCWeekdayNumberSunday(d) {\n    return d.getUTCDay();\n  }\n\n  function formatUTCWeekNumberMonday(d, p) {\n    return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);\n  }\n\n  function formatUTCYear(d, p) {\n    return pad(d.getUTCFullYear() % 100, p, 2);\n  }\n\n  function formatUTCYearISO(d, p) {\n    d = UTCdISO(d);\n    return pad(d.getUTCFullYear() % 100, p, 2);\n  }\n\n  function formatUTCFullYear(d, p) {\n    return pad(d.getUTCFullYear() % 10000, p, 4);\n  }\n\n  function formatUTCFullYearISO(d, p) {\n    var day = d.getUTCDay();\n    d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);\n    return pad(d.getUTCFullYear() % 10000, p, 4);\n  }\n\n  function formatUTCZone() {\n    return \"+0000\";\n  }\n\n  function formatLiteralPercent() {\n    return \"%\";\n  }\n\n  function formatUnixTimestamp(d) {\n    return +d;\n  }\n\n  function formatUnixTimestampSeconds(d) {\n    return Math.floor(+d / 1000);\n  }\n\n  var locale$1;\n  var timeFormat$1;\n  var timeParse$1;\n  var utcFormat$1;\n  var utcParse$1;\n  defaultLocale$1({\n    dateTime: \"%x, %X\",\n    date: \"%-m/%-d/%Y\",\n    time: \"%-I:%M:%S %p\",\n    periods: [\"AM\", \"PM\"],\n    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n    shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  });\n  function defaultLocale$1(definition) {\n    locale$1 = formatLocale(definition);\n    timeFormat$1 = locale$1.format;\n    timeParse$1 = locale$1.parse;\n    utcFormat$1 = locale$1.utcFormat;\n    utcParse$1 = locale$1.utcParse;\n    return locale$1;\n  }\n\n  function memoize(method) {\n    const cache = {};\n    return spec => cache[spec] || (cache[spec] = method(spec));\n  }\n\n  function trimZeroes(numberFormat, decimalChar) {\n    return x => {\n      const str = numberFormat(x),\n            dec = str.indexOf(decimalChar);\n      if (dec < 0) return str;\n      let idx = rightmostDigit(str, dec);\n      const end = idx < str.length ? str.slice(idx) : '';\n\n      while (--idx > dec) if (str[idx] !== '0') {\n        ++idx;\n        break;\n      }\n\n      return str.slice(0, idx) + end;\n    };\n  }\n\n  function rightmostDigit(str, dec) {\n    let i = str.lastIndexOf('e'),\n        c;\n    if (i > 0) return i;\n\n    for (i = str.length; --i > dec;) {\n      c = str.charCodeAt(i);\n      if (c >= 48 && c <= 57) return i + 1; // is digit\n    }\n  }\n\n  function numberLocale(locale) {\n    const format = memoize(locale.format),\n          formatPrefix = locale.formatPrefix;\n    return {\n      format,\n      formatPrefix,\n\n      formatFloat(spec) {\n        const s = formatSpecifier(spec || ',');\n\n        if (s.precision == null) {\n          s.precision = 12;\n\n          switch (s.type) {\n            case '%':\n              s.precision -= 2;\n              break;\n\n            case 'e':\n              s.precision -= 1;\n              break;\n          }\n\n          return trimZeroes(format(s), // number format\n          format('.1f')(1)[1] // decimal point character\n          );\n        } else {\n          return format(s);\n        }\n      },\n\n      formatSpan(start, stop, count, specifier) {\n        specifier = formatSpecifier(specifier == null ? ',f' : specifier);\n        const step = tickStep(start, stop, count),\n              value = Math.max(Math.abs(start), Math.abs(stop));\n        let precision;\n\n        if (specifier.precision == null) {\n          switch (specifier.type) {\n            case 's':\n              {\n                if (!isNaN(precision = precisionPrefix(step, value))) {\n                  specifier.precision = precision;\n                }\n\n                return formatPrefix(specifier, value);\n              }\n\n            case '':\n            case 'e':\n            case 'g':\n            case 'p':\n            case 'r':\n              {\n                if (!isNaN(precision = precisionRound(step, value))) {\n                  specifier.precision = precision - (specifier.type === 'e');\n                }\n\n                break;\n              }\n\n            case 'f':\n            case '%':\n              {\n                if (!isNaN(precision = precisionFixed(step))) {\n                  specifier.precision = precision - (specifier.type === '%') * 2;\n                }\n\n                break;\n              }\n          }\n        }\n\n        return format(specifier);\n      }\n\n    };\n  }\n\n  let defaultNumberLocale;\n  resetNumberFormatDefaultLocale();\n\n  function resetNumberFormatDefaultLocale() {\n    return defaultNumberLocale = numberLocale({\n      format: format$3,\n      formatPrefix: formatPrefix\n    });\n  }\n\n  function numberFormatLocale(definition) {\n    return numberLocale(formatLocale$1(definition));\n  }\n\n  function numberFormatDefaultLocale(definition) {\n    return arguments.length ? defaultNumberLocale = numberFormatLocale(definition) : defaultNumberLocale;\n  }\n\n  function timeMultiFormat(format, interval, spec) {\n    spec = spec || {};\n\n    if (!isObject(spec)) {\n      error(`Invalid time multi-format specifier: ${spec}`);\n    }\n\n    const second = interval(SECONDS),\n          minute = interval(MINUTES),\n          hour = interval(HOURS),\n          day = interval(DATE),\n          week = interval(WEEK),\n          month = interval(MONTH),\n          quarter = interval(QUARTER),\n          year = interval(YEAR),\n          L = format(spec[MILLISECONDS] || '.%L'),\n          S = format(spec[SECONDS] || ':%S'),\n          M = format(spec[MINUTES] || '%I:%M'),\n          H = format(spec[HOURS] || '%I %p'),\n          d = format(spec[DATE] || spec[DAY] || '%a %d'),\n          w = format(spec[WEEK] || '%b %d'),\n          m = format(spec[MONTH] || '%B'),\n          q = format(spec[QUARTER] || '%B'),\n          y = format(spec[YEAR] || '%Y');\n    return date => (second(date) < date ? L : minute(date) < date ? S : hour(date) < date ? M : day(date) < date ? H : month(date) < date ? week(date) < date ? d : w : year(date) < date ? quarter(date) < date ? m : q : y)(date);\n  }\n\n  function timeLocale(locale) {\n    const timeFormat = memoize(locale.format),\n          utcFormat = memoize(locale.utcFormat);\n    return {\n      timeFormat: spec => isString(spec) ? timeFormat(spec) : timeMultiFormat(timeFormat, timeInterval, spec),\n      utcFormat: spec => isString(spec) ? utcFormat(spec) : timeMultiFormat(utcFormat, utcInterval, spec),\n      timeParse: memoize(locale.parse),\n      utcParse: memoize(locale.utcParse)\n    };\n  }\n\n  let defaultTimeLocale;\n  resetTimeFormatDefaultLocale();\n\n  function resetTimeFormatDefaultLocale() {\n    return defaultTimeLocale = timeLocale({\n      format: timeFormat$1,\n      parse: timeParse$1,\n      utcFormat: utcFormat$1,\n      utcParse: utcParse$1\n    });\n  }\n\n  function timeFormatLocale(definition) {\n    return timeLocale(formatLocale(definition));\n  }\n\n  function timeFormatDefaultLocale(definition) {\n    return arguments.length ? defaultTimeLocale = timeFormatLocale(definition) : defaultTimeLocale;\n  }\n\n  const createLocale = (number, time) => extend$1({}, number, time);\n\n  function locale(numberSpec, timeSpec) {\n    const number = numberSpec ? numberFormatLocale(numberSpec) : numberFormatDefaultLocale();\n    const time = timeSpec ? timeFormatLocale(timeSpec) : timeFormatDefaultLocale();\n    return createLocale(number, time);\n  }\n\n  function defaultLocale(numberSpec, timeSpec) {\n    const args = arguments.length;\n\n    if (args && args !== 2) {\n      error('defaultLocale expects either zero or two arguments.');\n    }\n\n    return args ? createLocale(numberFormatDefaultLocale(numberSpec), timeFormatDefaultLocale(timeSpec)) : createLocale(numberFormatDefaultLocale(), timeFormatDefaultLocale());\n  }\n\n  function resetDefaultLocale() {\n    resetNumberFormatDefaultLocale();\n    resetTimeFormatDefaultLocale();\n    return defaultLocale();\n  }\n\n  const protocol_re = /^([A-Za-z]+:)?\\/\\//; // Matches allowed URIs. From https://github.com/cure53/DOMPurify/blob/master/src/regexp.js with added file://\n\n  const allowed_re = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file|data):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i; // eslint-disable-line no-useless-escape\n\n  const whitespace_re = /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g; // eslint-disable-line no-control-regex\n  // Special treatment in node.js for the file: protocol\n\n  const fileProtocol = 'file://';\n  /**\n   * Factory for a loader constructor that provides methods for requesting\n   * files from either the network or disk, and for sanitizing request URIs.\n   * @param {function} fetch - The Fetch API for HTTP network requests.\n   *   If null or undefined, HTTP loading will be disabled.\n   * @param {object} fs - The file system interface for file loading.\n   *   If null or undefined, local file loading will be disabled.\n   * @return {function} A loader constructor with the following signature:\n   *   param {object} [options] - Optional default loading options to use.\n   *   return {object} - A new loader instance.\n   */\n\n  function loaderFactory(fetch, fs) {\n    return options => ({\n      options: options || {},\n      sanitize: sanitize,\n      load: load$1,\n      fileAccess: !!fs,\n      file: fileLoader(fs),\n      http: httpLoader(fetch)\n    });\n  }\n  /**\n   * Load an external resource, typically either from the web or from the local\n   * filesystem. This function uses {@link sanitize} to first sanitize the uri,\n   * then calls either {@link http} (for web requests) or {@link file} (for\n   * filesystem loading).\n   * @param {string} uri - The resource indicator (e.g., URL or filename).\n   * @param {object} [options] - Optional loading options. These options will\n   *   override any existing default options.\n   * @return {Promise} - A promise that resolves to the loaded content.\n   */\n\n\n  async function load$1(uri, options) {\n    const opt = await this.sanitize(uri, options),\n          url = opt.href;\n    return opt.localFile ? this.file(url) : this.http(url, options);\n  }\n  /**\n   * URI sanitizer function.\n   * @param {string} uri - The uri (url or filename) to check.\n   * @param {object} options - An options hash.\n   * @return {Promise} - A promise that resolves to an object containing\n   *  sanitized uri data, or rejects it the input uri is deemed invalid.\n   *  The properties of the resolved object are assumed to be\n   *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be\n   *  provided by the 'href' property of the returned object.\n   */\n\n\n  async function sanitize(uri, options) {\n    options = extend$1({}, this.options, options);\n    const fileAccess = this.fileAccess,\n          result = {\n      href: null\n    };\n    let isFile, loadFile, base;\n    const isAllowed = allowed_re.test(uri.replace(whitespace_re, ''));\n\n    if (uri == null || typeof uri !== 'string' || !isAllowed) {\n      error('Sanitize failure, invalid URI: ' + $(uri));\n    }\n\n    const hasProtocol = protocol_re.test(uri); // if relative url (no protocol/host), prepend baseURL\n\n    if ((base = options.baseURL) && !hasProtocol) {\n      // Ensure that there is a slash between the baseURL (e.g. hostname) and url\n      if (!uri.startsWith('/') && base[base.length - 1] !== '/') {\n        uri = '/' + uri;\n      }\n\n      uri = base + uri;\n    } // should we load from file system?\n\n\n    loadFile = (isFile = uri.startsWith(fileProtocol)) || options.mode === 'file' || options.mode !== 'http' && !hasProtocol && fileAccess;\n\n    if (isFile) {\n      // strip file protocol\n      uri = uri.slice(fileProtocol.length);\n    } else if (uri.startsWith('//')) {\n      if (options.defaultProtocol === 'file') {\n        // if is file, strip protocol and set loadFile flag\n        uri = uri.slice(2);\n        loadFile = true;\n      } else {\n        // if relative protocol (starts with '//'), prepend default protocol\n        uri = (options.defaultProtocol || 'http') + ':' + uri;\n      }\n    } // set non-enumerable mode flag to indicate local file load\n\n\n    Object.defineProperty(result, 'localFile', {\n      value: !!loadFile\n    }); // set uri\n\n    result.href = uri; // set default result target, if specified\n\n    if (options.target) {\n      result.target = options.target + '';\n    } // set default result rel, if specified (#1542)\n\n\n    if (options.rel) {\n      result.rel = options.rel + '';\n    } // provide control over cross-origin image handling (#2238)\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\n\n\n    if (options.context === 'image' && options.crossOrigin) {\n      result.crossOrigin = options.crossOrigin + '';\n    } // return\n\n\n    return result;\n  }\n  /**\n   * File system loader factory.\n   * @param {object} fs - The file system interface.\n   * @return {function} - A file loader with the following signature:\n   *   param {string} filename - The file system path to load.\n   *   param {string} filename - The file system path to load.\n   *   return {Promise} A promise that resolves to the file contents.\n   */\n\n\n  function fileLoader(fs) {\n    return fs ? filename => new Promise((accept, reject) => {\n      fs.readFile(filename, (error, data) => {\n        if (error) reject(error);else accept(data);\n      });\n    }) : fileReject;\n  }\n  /**\n   * Default file system loader that simply rejects.\n   */\n\n\n  async function fileReject() {\n    error('No file system access.');\n  }\n  /**\n   * HTTP request handler factory.\n   * @param {function} fetch - The Fetch API method.\n   * @return {function} - An http loader with the following signature:\n   *   param {string} url - The url to request.\n   *   param {object} options - An options hash.\n   *   return {Promise} - A promise that resolves to the file contents.\n   */\n\n\n  function httpLoader(fetch) {\n    return fetch ? async function (url, options) {\n      const opt = extend$1({}, this.options.http, options),\n            type = options && options.response,\n            response = await fetch(url, opt);\n      return !response.ok ? error(response.status + '' + response.statusText) : isFunction(response[type]) ? response[type]() : response.text();\n    } : httpReject;\n  }\n  /**\n   * Default http request handler that simply rejects.\n   */\n\n\n  async function httpReject() {\n    error('No HTTP fetch method available.');\n  }\n\n  const isValid = _ => _ != null && _ === _;\n\n  const isBoolean = _ => _ === 'true' || _ === 'false' || _ === true || _ === false;\n\n  const isDate = _ => !Number.isNaN(Date.parse(_));\n\n  const isNumber = _ => !Number.isNaN(+_) && !(_ instanceof Date);\n\n  const isInteger = _ => isNumber(_) && Number.isInteger(+_);\n\n  const typeParsers = {\n    boolean: toBoolean,\n    integer: toNumber,\n    number: toNumber,\n    date: toDate,\n    string: toString,\n    unknown: identity$6\n  };\n  const typeTests = [isBoolean, isInteger, isNumber, isDate];\n  const typeList = ['boolean', 'integer', 'number', 'date'];\n\n  function inferType(values, field) {\n    if (!values || !values.length) return 'unknown';\n    const n = values.length,\n          m = typeTests.length,\n          a = typeTests.map((_, i) => i + 1);\n\n    for (let i = 0, t = 0, j, value; i < n; ++i) {\n      value = field ? values[i][field] : values[i];\n\n      for (j = 0; j < m; ++j) {\n        if (a[j] && isValid(value) && !typeTests[j](value)) {\n          a[j] = 0;\n          ++t;\n          if (t === typeTests.length) return 'string';\n        }\n      }\n    }\n\n    return typeList[a.reduce((u, v) => u === 0 ? v : u, 0) - 1];\n  }\n\n  function inferTypes(data, fields) {\n    return fields.reduce((types, field) => {\n      types[field] = inferType(data, field);\n      return types;\n    }, {});\n  }\n\n  function delimitedFormat(delimiter) {\n    const parse = function (data, format) {\n      const delim = {\n        delimiter: delimiter\n      };\n      return dsv(data, format ? extend$1(format, delim) : delim);\n    };\n\n    parse.responseType = 'text';\n    return parse;\n  }\n\n  function dsv(data, format) {\n    if (format.header) {\n      data = format.header.map($).join(format.delimiter) + '\\n' + data;\n    }\n\n    return dsvFormat(format.delimiter).parse(data + '');\n  }\n\n  dsv.responseType = 'text';\n\n  function isBuffer(_) {\n    return typeof Buffer === 'function' && isFunction(Buffer.isBuffer) ? Buffer.isBuffer(_) : false;\n  }\n\n  function json(data, format) {\n    const prop = format && format.property ? field$1(format.property) : identity$6;\n    return isObject(data) && !isBuffer(data) ? parseJSON(prop(data), format) : prop(JSON.parse(data));\n  }\n\n  json.responseType = 'json';\n\n  function parseJSON(data, format) {\n    if (!isArray(data) && isIterable(data)) {\n      data = [...data];\n    }\n\n    return format && format.copy ? JSON.parse(JSON.stringify(data)) : data;\n  }\n\n  const filters = {\n    interior: (a, b) => a !== b,\n    exterior: (a, b) => a === b\n  };\n\n  function topojson(data, format) {\n    let method, object, property, filter;\n    data = json(data, format);\n\n    if (format && format.feature) {\n      method = feature;\n      property = format.feature;\n    } else if (format && format.mesh) {\n      method = mesh;\n      property = format.mesh;\n      filter = filters[format.filter];\n    } else {\n      error('Missing TopoJSON feature or mesh parameter.');\n    }\n\n    object = (object = data.objects[property]) ? method(data, object, filter) : error('Invalid TopoJSON object: ' + property);\n    return object && object.features || [object];\n  }\n\n  topojson.responseType = 'json';\n  const format$2 = {\n    dsv: dsv,\n    csv: delimitedFormat(','),\n    tsv: delimitedFormat('\\t'),\n    json: json,\n    topojson: topojson\n  };\n\n  function formats$1(name, reader) {\n    if (arguments.length > 1) {\n      format$2[name] = reader;\n      return this;\n    } else {\n      return has$1(format$2, name) ? format$2[name] : null;\n    }\n  }\n\n  function responseType(type) {\n    const f = formats$1(type);\n    return f && f.responseType || 'text';\n  }\n\n  function read(data, schema, timeParser, utcParser) {\n    schema = schema || {};\n    const reader = formats$1(schema.type || 'json');\n    if (!reader) error('Unknown data format type: ' + schema.type);\n    data = reader(data, schema);\n    if (schema.parse) parse$5(data, schema.parse, timeParser, utcParser);\n    if (has$1(data, 'columns')) delete data.columns;\n    return data;\n  }\n\n  function parse$5(data, types, timeParser, utcParser) {\n    if (!data.length) return; // early exit for empty data\n\n    const locale = timeFormatDefaultLocale();\n    timeParser = timeParser || locale.timeParse;\n    utcParser = utcParser || locale.utcParse;\n    let fields = data.columns || Object.keys(data[0]),\n        datum,\n        field,\n        i,\n        j,\n        n,\n        m;\n    if (types === 'auto') types = inferTypes(data, fields);\n    fields = Object.keys(types);\n    const parsers = fields.map(field => {\n      const type = types[field];\n      let parts, pattern;\n\n      if (type && (type.startsWith('date:') || type.startsWith('utc:'))) {\n        parts = type.split(/:(.+)?/, 2); // split on first :\n\n        pattern = parts[1];\n\n        if (pattern[0] === '\\'' && pattern[pattern.length - 1] === '\\'' || pattern[0] === '\"' && pattern[pattern.length - 1] === '\"') {\n          pattern = pattern.slice(1, -1);\n        }\n\n        const parse = parts[0] === 'utc' ? utcParser : timeParser;\n        return parse(pattern);\n      }\n\n      if (!typeParsers[type]) {\n        throw Error('Illegal format pattern: ' + field + ':' + type);\n      }\n\n      return typeParsers[type];\n    });\n\n    for (i = 0, n = data.length, m = fields.length; i < n; ++i) {\n      datum = data[i];\n\n      for (j = 0; j < m; ++j) {\n        field = fields[j];\n        datum[field] = parsers[j](datum[field]);\n      }\n    }\n  }\n\n  const loader = loaderFactory(typeof fetch !== 'undefined' && fetch, // use built-in fetch API\n  null // no file system access\n  );\n\n  function UniqueList(idFunc) {\n    const $ = idFunc || identity$6,\n          list = [],\n          ids = {};\n\n    list.add = _ => {\n      const id = $(_);\n\n      if (!ids[id]) {\n        ids[id] = 1;\n        list.push(_);\n      }\n\n      return list;\n    };\n\n    list.remove = _ => {\n      const id = $(_);\n\n      if (ids[id]) {\n        ids[id] = 0;\n        const idx = list.indexOf(_);\n        if (idx >= 0) list.splice(idx, 1);\n      }\n\n      return list;\n    };\n\n    return list;\n  }\n  /**\n   * Invoke and await a potentially async callback function. If\n   * an error occurs, trap it and route to Dataflow.error.\n   * @param {Dataflow} df - The dataflow instance\n   * @param {function} callback - A callback function to invoke\n   *   and then await. The dataflow will be passed as the single\n   *   argument to the function.\n   */\n\n\n  async function asyncCallback(df, callback) {\n    try {\n      await callback(df);\n    } catch (err) {\n      df.error(err);\n    }\n  }\n\n  const TUPLE_ID_KEY = Symbol('vega_id');\n  let TUPLE_ID = 1;\n  /**\n   * Checks if an input value is a registered tuple.\n   * @param {*} t - The value to check.\n   * @return {boolean} True if the input is a tuple, false otherwise.\n   */\n\n  function isTuple(t) {\n    return !!(t && tupleid(t));\n  }\n  /**\n   * Returns the id of a tuple.\n   * @param {object} t - The input tuple.\n   * @return {*} the tuple id.\n   */\n\n\n  function tupleid(t) {\n    return t[TUPLE_ID_KEY];\n  }\n  /**\n   * Sets the id of a tuple.\n   * @param {object} t - The input tuple.\n   * @param {*} id - The id value to set.\n   * @return {object} the input tuple.\n   */\n\n\n  function setid(t, id) {\n    t[TUPLE_ID_KEY] = id;\n    return t;\n  }\n  /**\n   * Ingest an object or value as a data tuple.\n   * If the input value is an object, an id field will be added to it. For\n   * efficiency, the input object is modified directly. A copy is not made.\n   * If the input value is a literal, it will be wrapped in a new object\n   * instance, with the value accessible as the 'data' property.\n   * @param datum - The value to ingest.\n   * @return {object} The ingested data tuple.\n   */\n\n\n  function ingest$1(datum) {\n    const t = datum === Object(datum) ? datum : {\n      data: datum\n    };\n    return tupleid(t) ? t : setid(t, TUPLE_ID++);\n  }\n  /**\n   * Given a source tuple, return a derived copy.\n   * @param {object} t - The source tuple.\n   * @return {object} The derived tuple.\n   */\n\n\n  function derive(t) {\n    return rederive(t, ingest$1({}));\n  }\n  /**\n   * Rederive a derived tuple by copying values from the source tuple.\n   * @param {object} t - The source tuple.\n   * @param {object} d - The derived tuple.\n   * @return {object} The derived tuple.\n   */\n\n\n  function rederive(t, d) {\n    for (const k in t) d[k] = t[k];\n\n    return d;\n  }\n  /**\n   * Replace an existing tuple with a new tuple.\n   * @param {object} t - The existing data tuple.\n   * @param {object} d - The new tuple that replaces the old.\n   * @return {object} The new tuple.\n   */\n\n\n  function replace$1(t, d) {\n    return setid(d, tupleid(t));\n  }\n  /**\n   * Generate an augmented comparator function that provides stable\n   * sorting by tuple id when the given comparator produces ties.\n   * @param {function} cmp - The comparator to augment.\n   * @param {function} [f] - Optional tuple accessor function.\n   * @return {function} An augmented comparator function.\n   */\n\n\n  function stableCompare(cmp, f) {\n    return !cmp ? null : f ? (a, b) => cmp(a, b) || tupleid(f(a)) - tupleid(f(b)) : (a, b) => cmp(a, b) || tupleid(a) - tupleid(b);\n  }\n\n  function isChangeSet(v) {\n    return v && v.constructor === changeset;\n  }\n\n  function changeset() {\n    const add = [],\n          // insert tuples\n    rem = [],\n          // remove tuples\n    mod = [],\n          // modify tuples\n    remp = [],\n          // remove by predicate\n    modp = []; // modify by predicate\n\n    let clean = null,\n        reflow = false;\n    return {\n      constructor: changeset,\n\n      insert(t) {\n        const d = array$5(t),\n              n = d.length;\n\n        for (let i = 0; i < n; ++i) add.push(d[i]);\n\n        return this;\n      },\n\n      remove(t) {\n        const a = isFunction(t) ? remp : rem,\n              d = array$5(t),\n              n = d.length;\n\n        for (let i = 0; i < n; ++i) a.push(d[i]);\n\n        return this;\n      },\n\n      modify(t, field, value) {\n        const m = {\n          field: field,\n          value: constant$4(value)\n        };\n\n        if (isFunction(t)) {\n          m.filter = t;\n          modp.push(m);\n        } else {\n          m.tuple = t;\n          mod.push(m);\n        }\n\n        return this;\n      },\n\n      encode(t, set) {\n        if (isFunction(t)) modp.push({\n          filter: t,\n          field: set\n        });else mod.push({\n          tuple: t,\n          field: set\n        });\n        return this;\n      },\n\n      clean(value) {\n        clean = value;\n        return this;\n      },\n\n      reflow() {\n        reflow = true;\n        return this;\n      },\n\n      pulse(pulse, tuples) {\n        const cur = {},\n              out = {};\n        let i, n, m, f, t, id; // build lookup table of current tuples\n\n        for (i = 0, n = tuples.length; i < n; ++i) {\n          cur[tupleid(tuples[i])] = 1;\n        } // process individual tuples to remove\n\n\n        for (i = 0, n = rem.length; i < n; ++i) {\n          t = rem[i];\n          cur[tupleid(t)] = -1;\n        } // process predicate-based removals\n\n\n        for (i = 0, n = remp.length; i < n; ++i) {\n          f = remp[i];\n          tuples.forEach(t => {\n            if (f(t)) cur[tupleid(t)] = -1;\n          });\n        } // process all add tuples\n\n\n        for (i = 0, n = add.length; i < n; ++i) {\n          t = add[i];\n          id = tupleid(t);\n\n          if (cur[id]) {\n            // tuple already resides in dataset\n            // if flagged for both add and remove, cancel\n            cur[id] = 1;\n          } else {\n            // tuple does not reside in dataset, add\n            pulse.add.push(ingest$1(add[i]));\n          }\n        } // populate pulse rem list\n\n\n        for (i = 0, n = tuples.length; i < n; ++i) {\n          t = tuples[i];\n          if (cur[tupleid(t)] < 0) pulse.rem.push(t);\n        } // modify helper method\n\n\n        function modify(t, f, v) {\n          if (v) {\n            t[f] = v(t);\n          } else {\n            pulse.encode = f;\n          }\n\n          if (!reflow) out[tupleid(t)] = t;\n        } // process individual tuples to modify\n\n\n        for (i = 0, n = mod.length; i < n; ++i) {\n          m = mod[i];\n          t = m.tuple;\n          f = m.field;\n          id = cur[tupleid(t)];\n\n          if (id > 0) {\n            modify(t, f, m.value);\n            pulse.modifies(f);\n          }\n        } // process predicate-based modifications\n\n\n        for (i = 0, n = modp.length; i < n; ++i) {\n          m = modp[i];\n          f = m.filter;\n          tuples.forEach(t => {\n            if (f(t) && cur[tupleid(t)] > 0) {\n              modify(t, m.field, m.value);\n            }\n          });\n          pulse.modifies(m.field);\n        } // upon reflow request, populate mod with all non-removed tuples\n        // otherwise, populate mod with modified tuples only\n\n\n        if (reflow) {\n          pulse.mod = rem.length || remp.length ? tuples.filter(t => cur[tupleid(t)] > 0) : tuples.slice();\n        } else {\n          for (id in out) pulse.mod.push(out[id]);\n        } // set pulse garbage collection request\n\n\n        if (clean || clean == null && (rem.length || remp.length)) {\n          pulse.clean(true);\n        }\n\n        return pulse;\n      }\n\n    };\n  }\n\n  const CACHE = '_:mod:_';\n  /**\n   * Hash that tracks modifications to assigned values.\n   * Callers *must* use the set method to update values.\n   */\n\n  function Parameters() {\n    Object.defineProperty(this, CACHE, {\n      writable: true,\n      value: {}\n    });\n  }\n\n  Parameters.prototype = {\n    /**\n     * Set a parameter value. If the parameter value changes, the parameter\n     * will be recorded as modified.\n     * @param {string} name - The parameter name.\n     * @param {number} index - The index into an array-value parameter. Ignored if\n     *   the argument is undefined, null or less than zero.\n     * @param {*} value - The parameter value to set.\n     * @param {boolean} [force=false] - If true, records the parameter as modified\n     *   even if the value is unchanged.\n     * @return {Parameters} - This parameter object.\n     */\n    set(name, index, value, force) {\n      const o = this,\n            v = o[name],\n            mod = o[CACHE];\n\n      if (index != null && index >= 0) {\n        if (v[index] !== value || force) {\n          v[index] = value;\n          mod[index + ':' + name] = -1;\n          mod[name] = -1;\n        }\n      } else if (v !== value || force) {\n        o[name] = value;\n        mod[name] = isArray(value) ? 1 + value.length : -1;\n      }\n\n      return o;\n    },\n\n    /**\n     * Tests if one or more parameters has been modified. If invoked with no\n     * arguments, returns true if any parameter value has changed. If the first\n     * argument is array, returns trues if any parameter name in the array has\n     * changed. Otherwise, tests if the given name and optional array index has\n     * changed.\n     * @param {string} name - The parameter name to test.\n     * @param {number} [index=undefined] - The parameter array index to test.\n     * @return {boolean} - Returns true if a queried parameter was modified.\n     */\n    modified(name, index) {\n      const mod = this[CACHE];\n\n      if (!arguments.length) {\n        for (const k in mod) {\n          if (mod[k]) return true;\n        }\n\n        return false;\n      } else if (isArray(name)) {\n        for (let k = 0; k < name.length; ++k) {\n          if (mod[name[k]]) return true;\n        }\n\n        return false;\n      }\n\n      return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ':' + name] : !!mod[name];\n    },\n\n    /**\n     * Clears the modification records. After calling this method,\n     * all parameters are considered unmodified.\n     */\n    clear() {\n      this[CACHE] = {};\n      return this;\n    }\n\n  };\n  let OP_ID = 0;\n  const PULSE = 'pulse',\n        NO_PARAMS = new Parameters(); // Boolean Flags\n\n  const SKIP$1$1 = 1,\n        MODIFIED = 2;\n  /**\n   * An Operator is a processing node in a dataflow graph.\n   * Each operator stores a value and an optional value update function.\n   * Operators can accept a hash of named parameters. Parameter values can\n   * either be direct (JavaScript literals, arrays, objects) or indirect\n   * (other operators whose values will be pulled dynamically). Operators\n   * included as parameters will have this operator added as a dependency.\n   * @constructor\n   * @param {*} [init] - The initial value for this operator.\n   * @param {function(object, Pulse)} [update] - An update function. Upon\n   *   evaluation of this operator, the update function will be invoked and the\n   *   return value will be used as the new value of this operator.\n   * @param {object} [params] - The parameters for this operator.\n   * @param {boolean} [react=true] - Flag indicating if this operator should\n   *   listen for changes to upstream operators included as parameters.\n   * @see parameters\n   */\n\n  function Operator(init, update, params, react) {\n    this.id = ++OP_ID;\n    this.value = init;\n    this.stamp = -1;\n    this.rank = -1;\n    this.qrank = -1;\n    this.flags = 0;\n\n    if (update) {\n      this._update = update;\n    }\n\n    if (params) this.parameters(params, react);\n  }\n\n  function flag(bit) {\n    return function (state) {\n      const f = this.flags;\n      if (arguments.length === 0) return !!(f & bit);\n      this.flags = state ? f | bit : f & ~bit;\n      return this;\n    };\n  }\n\n  Operator.prototype = {\n    /**\n     * Returns a list of target operators dependent on this operator.\n     * If this list does not exist, it is created and then returned.\n     * @return {UniqueList}\n     */\n    targets() {\n      return this._targets || (this._targets = UniqueList(id));\n    },\n\n    /**\n     * Sets the value of this operator.\n     * @param {*} value - the value to set.\n     * @return {Number} Returns 1 if the operator value has changed\n     *   according to strict equality, returns 0 otherwise.\n     */\n    set(value) {\n      if (this.value !== value) {\n        this.value = value;\n        return 1;\n      } else {\n        return 0;\n      }\n    },\n\n    /**\n     * Indicates that operator evaluation should be skipped on the next pulse.\n     * This operator will still propagate incoming pulses, but its update function\n     * will not be invoked. The skip flag is reset after every pulse, so calling\n     * this method will affect processing of the next pulse only.\n     */\n    skip: flag(SKIP$1$1),\n\n    /**\n     * Indicates that this operator's value has been modified on its most recent\n     * pulse. Normally modification is checked via strict equality; however, in\n     * some cases it is more efficient to update the internal state of an object.\n     * In those cases, the modified flag can be used to trigger propagation. Once\n     * set, the modification flag persists across pulses until unset. The flag can\n     * be used with the last timestamp to test if a modification is recent.\n     */\n    modified: flag(MODIFIED),\n\n    /**\n     * Sets the parameters for this operator. The parameter values are analyzed for\n     * operator instances. If found, this operator will be added as a dependency\n     * of the parameterizing operator. Operator values are dynamically marshalled\n     * from each operator parameter prior to evaluation. If a parameter value is\n     * an array, the array will also be searched for Operator instances. However,\n     * the search does not recurse into sub-arrays or object properties.\n     * @param {object} params - A hash of operator parameters.\n     * @param {boolean} [react=true] - A flag indicating if this operator should\n     *   automatically update (react) when parameter values change. In other words,\n     *   this flag determines if the operator registers itself as a listener on\n     *   any upstream operators included in the parameters.\n     * @param {boolean} [initonly=false] - A flag indicating if this operator\n     *   should calculate an update only upon its initiatal evaluation, then\n     *   deregister dependencies and suppress all future update invocations.\n     * @return {Operator[]} - An array of upstream dependencies.\n     */\n    parameters(params, react, initonly) {\n      react = react !== false;\n      const argval = this._argval = this._argval || new Parameters(),\n            argops = this._argops = this._argops || [],\n            deps = [];\n      let name, value, n, i;\n\n      const add = (name, index, value) => {\n        if (value instanceof Operator) {\n          if (value !== this) {\n            if (react) value.targets().add(this);\n            deps.push(value);\n          }\n\n          argops.push({\n            op: value,\n            name: name,\n            index: index\n          });\n        } else {\n          argval.set(name, index, value);\n        }\n      };\n\n      for (name in params) {\n        value = params[name];\n\n        if (name === PULSE) {\n          array$5(value).forEach(op => {\n            if (!(op instanceof Operator)) {\n              error('Pulse parameters must be operator instances.');\n            } else if (op !== this) {\n              op.targets().add(this);\n              deps.push(op);\n            }\n          });\n          this.source = value;\n        } else if (isArray(value)) {\n          argval.set(name, -1, Array(n = value.length));\n\n          for (i = 0; i < n; ++i) add(name, i, value[i]);\n        } else {\n          add(name, -1, value);\n        }\n      }\n\n      this.marshall().clear(); // initialize values\n\n      if (initonly) argops.initonly = true;\n      return deps;\n    },\n\n    /**\n     * Internal method for marshalling parameter values.\n     * Visits each operator dependency to pull the latest value.\n     * @return {Parameters} A Parameters object to pass to the update function.\n     */\n    marshall(stamp) {\n      const argval = this._argval || NO_PARAMS,\n            argops = this._argops;\n      let item, i, op, mod;\n\n      if (argops) {\n        const n = argops.length;\n\n        for (i = 0; i < n; ++i) {\n          item = argops[i];\n          op = item.op;\n          mod = op.modified() && op.stamp === stamp;\n          argval.set(item.name, item.index, op.value, mod);\n        }\n\n        if (argops.initonly) {\n          for (i = 0; i < n; ++i) {\n            item = argops[i];\n            item.op.targets().remove(this);\n          }\n\n          this._argops = null;\n          this._update = null;\n        }\n      }\n\n      return argval;\n    },\n\n    /**\n     * Detach this operator from the dataflow.\n     * Unregisters listeners on upstream dependencies.\n     */\n    detach() {\n      const argops = this._argops;\n      let i, n, item, op;\n\n      if (argops) {\n        for (i = 0, n = argops.length; i < n; ++i) {\n          item = argops[i];\n          op = item.op;\n\n          if (op._targets) {\n            op._targets.remove(this);\n          }\n        }\n      } // remove references to the source and pulse object,\n      // if present, to prevent memory leaks of old data.\n\n\n      this.pulse = null;\n      this.source = null;\n    },\n\n    /**\n     * Delegate method to perform operator processing.\n     * Subclasses can override this method to perform custom processing.\n     * By default, it marshalls parameters and calls the update function\n     * if that function is defined. If the update function does not\n     * change the operator value then StopPropagation is returned.\n     * If no update function is defined, this method does nothing.\n     * @param {Pulse} pulse - the current dataflow pulse.\n     * @return The output pulse or StopPropagation. A falsy return value\n     *   (including undefined) will let the input pulse pass through.\n     */\n    evaluate(pulse) {\n      const update = this._update;\n\n      if (update) {\n        const params = this.marshall(pulse.stamp),\n              v = update.call(this, params, pulse);\n        params.clear();\n\n        if (v !== this.value) {\n          this.value = v;\n        } else if (!this.modified()) {\n          return pulse.StopPropagation;\n        }\n      }\n    },\n\n    /**\n     * Run this operator for the current pulse. If this operator has already\n     * been run at (or after) the pulse timestamp, returns StopPropagation.\n     * Internally, this method calls {@link evaluate} to perform processing.\n     * If {@link evaluate} returns a falsy value, the input pulse is returned.\n     * This method should NOT be overridden, instead overrride {@link evaluate}.\n     * @param {Pulse} pulse - the current dataflow pulse.\n     * @return the output pulse for this operator (or StopPropagation)\n     */\n    run(pulse) {\n      if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n      let rv;\n\n      if (this.skip()) {\n        this.skip(false);\n        rv = 0;\n      } else {\n        rv = this.evaluate(pulse);\n      }\n\n      return this.pulse = rv || pulse;\n    }\n\n  };\n  /**\n   * Add an operator to the dataflow graph. This function accepts a\n   * variety of input argument types. The basic signature supports an\n   * initial value, update function and parameters. If the first parameter\n   * is an Operator instance, it will be added directly. If it is a\n   * constructor for an Operator subclass, a new instance will be instantiated.\n   * Otherwise, if the first parameter is a function instance, it will be used\n   * as the update function and a null initial value is assumed.\n   * @param {*} init - One of: the operator to add, the initial value of\n   *   the operator, an operator class to instantiate, or an update function.\n   * @param {function} [update] - The operator update function.\n   * @param {object} [params] - The operator parameters.\n   * @param {boolean} [react=true] - Flag indicating if this operator should\n   *   listen for changes to upstream operators included as parameters.\n   * @return {Operator} - The added operator.\n   */\n\n  function add$3(init, update, params, react) {\n    let shift = 1,\n        op;\n\n    if (init instanceof Operator) {\n      op = init;\n    } else if (init && init.prototype instanceof Operator) {\n      op = new init();\n    } else if (isFunction(init)) {\n      op = new Operator(null, init);\n    } else {\n      shift = 0;\n      op = new Operator(init, update);\n    }\n\n    this.rank(op);\n\n    if (shift) {\n      react = params;\n      params = update;\n    }\n\n    if (params) this.connect(op, op.parameters(params, react));\n    this.touch(op);\n    return op;\n  }\n  /**\n   * Connect a target operator as a dependent of source operators.\n   * If necessary, this method will rerank the target operator and its\n   * dependents to ensure propagation proceeds in a topologically sorted order.\n   * @param {Operator} target - The target operator.\n   * @param {Array<Operator>} - The source operators that should propagate\n   *   to the target operator.\n   */\n\n\n  function connect(target, sources) {\n    const targetRank = target.rank,\n          n = sources.length;\n\n    for (let i = 0; i < n; ++i) {\n      if (targetRank < sources[i].rank) {\n        this.rerank(target);\n        return;\n      }\n    }\n  }\n\n  let STREAM_ID = 0;\n  /**\n   * Models an event stream.\n   * @constructor\n   * @param {function(Object, number): boolean} [filter] - Filter predicate.\n   *   Events pass through when truthy, events are suppressed when falsy.\n   * @param {function(Object): *} [apply] - Applied to input events to produce\n   *   new event values.\n   * @param {function(Object)} [receive] - Event callback function to invoke\n   *   upon receipt of a new event. Use to override standard event processing.\n   */\n\n  function EventStream(filter, apply, receive) {\n    this.id = ++STREAM_ID;\n    this.value = null;\n    if (receive) this.receive = receive;\n    if (filter) this._filter = filter;\n    if (apply) this._apply = apply;\n  }\n  /**\n   * Creates a new event stream instance with the provided\n   * (optional) filter, apply and receive functions.\n   * @param {function(Object, number): boolean} [filter] - Filter predicate.\n   *   Events pass through when truthy, events are suppressed when falsy.\n   * @param {function(Object): *} [apply] - Applied to input events to produce\n   *   new event values.\n   * @see EventStream\n   */\n\n\n  function stream(filter, apply, receive) {\n    return new EventStream(filter, apply, receive);\n  }\n\n  EventStream.prototype = {\n    _filter: truthy,\n    _apply: identity$6,\n\n    targets() {\n      return this._targets || (this._targets = UniqueList(id));\n    },\n\n    consume(_) {\n      if (!arguments.length) return !!this._consume;\n      this._consume = !!_;\n      return this;\n    },\n\n    receive(evt) {\n      if (this._filter(evt)) {\n        const val = this.value = this._apply(evt),\n              trg = this._targets,\n              n = trg ? trg.length : 0;\n\n        for (let i = 0; i < n; ++i) trg[i].receive(val);\n\n        if (this._consume) {\n          evt.preventDefault();\n          evt.stopPropagation();\n        }\n      }\n    },\n\n    filter(filter) {\n      const s = stream(filter);\n      this.targets().add(s);\n      return s;\n    },\n\n    apply(apply) {\n      const s = stream(null, apply);\n      this.targets().add(s);\n      return s;\n    },\n\n    merge() {\n      const s = stream();\n      this.targets().add(s);\n\n      for (let i = 0, n = arguments.length; i < n; ++i) {\n        arguments[i].targets().add(s);\n      }\n\n      return s;\n    },\n\n    throttle(pause) {\n      let t = -1;\n      return this.filter(() => {\n        const now = Date.now();\n\n        if (now - t > pause) {\n          t = now;\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n    },\n\n    debounce(delay) {\n      const s = stream();\n      this.targets().add(stream(null, null, debounce(delay, e => {\n        const df = e.dataflow;\n        s.receive(e);\n        if (df && df.run) df.run();\n      })));\n      return s;\n    },\n\n    between(a, b) {\n      let active = false;\n      a.targets().add(stream(null, null, () => active = true));\n      b.targets().add(stream(null, null, () => active = false));\n      return this.filter(() => active);\n    },\n\n    detach() {\n      // ensures compatibility with operators (#2753)\n      // remove references to other streams and filter functions that may\n      // be bound to subcontexts that need to be garbage collected.\n      this._filter = truthy;\n      this._targets = null;\n    }\n\n  };\n  /**\n   * Create a new event stream from an event source.\n   * @param {object} source - The event source to monitor. The input must\n   *  support the addEventListener method.\n   * @param {string} type - The event type.\n   * @param {function(object): boolean} [filter] - Event filter function.\n   * @param {function(object): *} [apply] - Event application function.\n   *   If provided, this function will be invoked and the result will be\n   *   used as the downstream event value.\n   * @return {EventStream}\n   */\n\n  function events$1(source, type, filter, apply) {\n    const df = this,\n          s = stream(filter, apply),\n          send = function (e) {\n      e.dataflow = df;\n\n      try {\n        s.receive(e);\n      } catch (error) {\n        df.error(error);\n      } finally {\n        df.run();\n      }\n    };\n\n    let sources;\n\n    if (typeof source === 'string' && typeof document !== 'undefined') {\n      sources = document.querySelectorAll(source);\n    } else {\n      sources = array$5(source);\n    }\n\n    const n = sources.length;\n\n    for (let i = 0; i < n; ++i) {\n      sources[i].addEventListener(type, send);\n    }\n\n    return s;\n  }\n\n  function parse$4(data, format) {\n    const locale = this.locale();\n    return read(data, format, locale.timeParse, locale.utcParse);\n  }\n  /**\n   * Ingests new data into the dataflow. First parses the data using the\n   * vega-loader read method, then pulses a changeset to the target operator.\n   * @param {Operator} target - The Operator to target with ingested data,\n   *   typically a Collect transform instance.\n   * @param {*} data - The input data, prior to parsing. For JSON this may\n   *   be a string or an object. For CSV, TSV, etc should be a string.\n   * @param {object} format - The data format description for parsing\n   *   loaded data. This object is passed to the vega-loader read method.\n   * @returns {Dataflow}\n   */\n\n\n  function ingest(target, data, format) {\n    data = this.parse(data, format);\n    return this.pulse(target, this.changeset().insert(data));\n  }\n  /**\n   * Request data from an external source, parse it, and return a Promise.\n   * @param {string} url - The URL from which to load the data. This string\n   *   is passed to the vega-loader load method.\n   * @param {object} [format] - The data format description for parsing\n   *   loaded data. This object is passed to the vega-loader read method.\n   * @return {Promise} A Promise that resolves upon completion of the request.\n   *   The resolved object contains the following properties:\n   *   - data: an array of parsed data (or null upon error)\n   *   - status: a code for success (0), load fail (-1), or parse fail (-2)\n   */\n\n\n  async function request(url, format) {\n    const df = this;\n    let status = 0,\n        data;\n\n    try {\n      data = await df.loader().load(url, {\n        context: 'dataflow',\n        response: responseType(format && format.type)\n      });\n\n      try {\n        data = df.parse(data, format);\n      } catch (err) {\n        status = -2;\n        df.warn('Data ingestion failed', url, err);\n      }\n    } catch (err) {\n      status = -1;\n      df.warn('Loading failed', url, err);\n    }\n\n    return {\n      data,\n      status\n    };\n  }\n\n  async function preload(target, url, format) {\n    const df = this,\n          pending = df._pending || loadPending(df);\n    pending.requests += 1;\n    const res = await df.request(url, format);\n    df.pulse(target, df.changeset().remove(truthy).insert(res.data || []));\n    pending.done();\n    return res;\n  }\n\n  function loadPending(df) {\n    let accept;\n    const pending = new Promise(a => accept = a);\n    pending.requests = 0;\n\n    pending.done = () => {\n      if (--pending.requests === 0) {\n        df._pending = null;\n        accept(df);\n      }\n    };\n\n    return df._pending = pending;\n  }\n\n  const SKIP$2 = {\n    skip: true\n  };\n  /**\n   * Perform operator updates in response to events. Applies an\n   * update function to compute a new operator value. If the update function\n   * returns a {@link ChangeSet}, the operator will be pulsed with those tuple\n   * changes. Otherwise, the operator value will be updated to the return value.\n   * @param {EventStream|Operator} source - The event source to react to.\n   *   This argument can be either an EventStream or an Operator.\n   * @param {Operator|function(object):Operator} target - The operator to update.\n   *   This argument can either be an Operator instance or (if the source\n   *   argument is an EventStream), a function that accepts an event object as\n   *   input and returns an Operator to target.\n   * @param {function(Parameters,Event): *} [update] - Optional update function\n   *   to compute the new operator value, or a literal value to set. Update\n   *   functions expect to receive a parameter object and event as arguments.\n   *   This function can either return a new operator value or (if the source\n   *   argument is an EventStream) a {@link ChangeSet} instance to pulse\n   *   the target operator with tuple changes.\n   * @param {object} [params] - The update function parameters.\n   * @param {object} [options] - Additional options hash. If not overridden,\n   *   updated operators will be skipped by default.\n   * @param {boolean} [options.skip] - If true, the operator will\n   *  be skipped: it will not be evaluated, but its dependents will be.\n   * @param {boolean} [options.force] - If true, the operator will\n   *   be re-evaluated even if its value has not changed.\n   * @return {Dataflow}\n   */\n\n  function on(source, target, update, params, options) {\n    const fn = source instanceof Operator ? onOperator : onStream;\n    fn(this, source, target, update, params, options);\n    return this;\n  }\n\n  function onStream(df, stream, target, update, params, options) {\n    const opt = extend$1({}, options, SKIP$2);\n    let func, op;\n    if (!isFunction(target)) target = constant$4(target);\n\n    if (update === undefined) {\n      func = e => df.touch(target(e));\n    } else if (isFunction(update)) {\n      op = new Operator(null, update, params, false);\n\n      func = e => {\n        op.evaluate(e);\n        const t = target(e),\n              v = op.value;\n        isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);\n      };\n    } else {\n      func = e => df.update(target(e), update, opt);\n    }\n\n    stream.apply(func);\n  }\n\n  function onOperator(df, source, target, update, params, options) {\n    if (update === undefined) {\n      source.targets().add(target);\n    } else {\n      const opt = options || {},\n            op = new Operator(null, updater(target, update), params, false);\n      op.modified(opt.force);\n      op.rank = source.rank; // immediately follow source\n\n      source.targets().add(op); // add dependency\n\n      if (target) {\n        op.skip(true); // skip first invocation\n\n        op.value = target.value; // initialize value\n\n        op.targets().add(target); // chain dependencies\n\n        df.connect(target, [op]); // rerank as needed, #1672\n      }\n    }\n  }\n\n  function updater(target, update) {\n    update = isFunction(update) ? update : constant$4(update);\n    return target ? function (_, pulse) {\n      const value = update(_, pulse);\n\n      if (!target.skip()) {\n        target.skip(value !== this.value).value = value;\n      }\n\n      return value;\n    } : update;\n  }\n  /**\n   * Assigns a rank to an operator. Ranks are assigned in increasing order\n   * by incrementing an internal rank counter.\n   * @param {Operator} op - The operator to assign a rank.\n   */\n\n\n  function rank(op) {\n    op.rank = ++this._rank;\n  }\n  /**\n   * Re-ranks an operator and all downstream target dependencies. This\n   * is necessary when upstream dependencies of higher rank are added to\n   * a target operator.\n   * @param {Operator} op - The operator to re-rank.\n   */\n\n\n  function rerank(op) {\n    const queue = [op];\n    let cur, list, i;\n\n    while (queue.length) {\n      this.rank(cur = queue.pop());\n\n      if (list = cur._targets) {\n        for (i = list.length; --i >= 0;) {\n          queue.push(cur = list[i]);\n          if (cur === op) error('Cycle detected in dataflow graph.');\n        }\n      }\n    }\n  }\n  /**\n   * Sentinel value indicating pulse propagation should stop.\n   */\n\n\n  const StopPropagation = {}; // Pulse visit type flags\n\n  const ADD = 1 << 0,\n        REM = 1 << 1,\n        MOD$1 = 1 << 2,\n        ADD_REM = ADD | REM,\n        ADD_MOD = ADD | MOD$1,\n        ALL = ADD | REM | MOD$1,\n        REFLOW = 1 << 3,\n        SOURCE = 1 << 4,\n        NO_SOURCE = 1 << 5,\n        NO_FIELDS = 1 << 6;\n  /**\n   * A Pulse enables inter-operator communication during a run of the\n   * dataflow graph. In addition to the current timestamp, a pulse may also\n   * contain a change-set of added, removed or modified data tuples, as well as\n   * a pointer to a full backing data source. Tuple change sets may not\n   * be fully materialized; for example, to prevent needless array creation\n   * a change set may include larger arrays and corresponding filter functions.\n   * The pulse provides a {@link visit} method to enable proper and efficient\n   * iteration over requested data tuples.\n   *\n   * In addition, each pulse can track modification flags for data tuple fields.\n   * Responsible transform operators should call the {@link modifies} method to\n   * indicate changes to data fields. The {@link modified} method enables\n   * querying of this modification state.\n   *\n   * @constructor\n   * @param {Dataflow} dataflow - The backing dataflow instance.\n   * @param {number} stamp - The current propagation timestamp.\n   * @param {string} [encode] - An optional encoding set name, which is then\n   *   accessible as Pulse.encode. Operators can respond to (or ignore) this\n   *   setting as appropriate. This parameter can be used in conjunction with\n   *   the Encode transform in the vega-encode module.\n   */\n\n  function Pulse(dataflow, stamp, encode) {\n    this.dataflow = dataflow;\n    this.stamp = stamp == null ? -1 : stamp;\n    this.add = [];\n    this.rem = [];\n    this.mod = [];\n    this.fields = null;\n    this.encode = encode || null;\n  }\n\n  function materialize(data, filter) {\n    const out = [];\n    visitArray(data, filter, _ => out.push(_));\n    return out;\n  }\n\n  function filter$1(pulse, flags) {\n    const map = {};\n    pulse.visit(flags, t => {\n      map[tupleid(t)] = 1;\n    });\n    return t => map[tupleid(t)] ? null : t;\n  }\n\n  function addFilter(a, b) {\n    return a ? (t, i) => a(t, i) && b(t, i) : b;\n  }\n\n  Pulse.prototype = {\n    /**\n     * Sentinel value indicating pulse propagation should stop.\n     */\n    StopPropagation,\n\n    /**\n     * Boolean flag indicating ADD (added) tuples.\n     */\n    ADD,\n\n    /**\n     * Boolean flag indicating REM (removed) tuples.\n     */\n    REM,\n\n    /**\n     * Boolean flag indicating MOD (modified) tuples.\n     */\n    MOD: MOD$1,\n\n    /**\n     * Boolean flag indicating ADD (added) and REM (removed) tuples.\n     */\n    ADD_REM,\n\n    /**\n     * Boolean flag indicating ADD (added) and MOD (modified) tuples.\n     */\n    ADD_MOD,\n\n    /**\n     * Boolean flag indicating ADD, REM and MOD tuples.\n     */\n    ALL,\n\n    /**\n     * Boolean flag indicating all tuples in a data source\n     * except for the ADD, REM and MOD tuples.\n     */\n    REFLOW,\n\n    /**\n     * Boolean flag indicating a 'pass-through' to a\n     * backing data source, ignoring ADD, REM and MOD tuples.\n     */\n    SOURCE,\n\n    /**\n     * Boolean flag indicating that source data should be\n     * suppressed when creating a forked pulse.\n     */\n    NO_SOURCE,\n\n    /**\n     * Boolean flag indicating that field modifications should be\n     * suppressed when creating a forked pulse.\n     */\n    NO_FIELDS,\n\n    /**\n     * Creates a new pulse based on the values of this pulse.\n     * The dataflow, time stamp and field modification values are copied over.\n     * By default, new empty ADD, REM and MOD arrays are created.\n     * @param {number} flags - Integer of boolean flags indicating which (if any)\n     *   tuple arrays should be copied to the new pulse. The supported flag values\n     *   are ADD, REM and MOD. Array references are copied directly: new array\n     *   instances are not created.\n     * @return {Pulse} - The forked pulse instance.\n     * @see init\n     */\n    fork(flags) {\n      return new Pulse(this.dataflow).init(this, flags);\n    },\n\n    /**\n     * Creates a copy of this pulse with new materialized array\n     * instances for the ADD, REM, MOD, and SOURCE arrays.\n     * The dataflow, time stamp and field modification values are copied over.\n     * @return {Pulse} - The cloned pulse instance.\n     * @see init\n     */\n    clone() {\n      const p = this.fork(ALL);\n      p.add = p.add.slice();\n      p.rem = p.rem.slice();\n      p.mod = p.mod.slice();\n      if (p.source) p.source = p.source.slice();\n      return p.materialize(ALL | SOURCE);\n    },\n\n    /**\n     * Returns a pulse that adds all tuples from a backing source. This is\n     * useful for cases where operators are added to a dataflow after an\n     * upstream data pipeline has already been processed, ensuring that\n     * new operators can observe all tuples within a stream.\n     * @return {Pulse} - A pulse instance with all source tuples included\n     *   in the add array. If the current pulse already has all source\n     *   tuples in its add array, it is returned directly. If the current\n     *   pulse does not have a backing source, it is returned directly.\n     */\n    addAll() {\n      let p = this;\n      const reuse = !p.source || p.add === p.rem // special case for indexed set (e.g., crossfilter)\n      || !p.rem.length && p.source.length === p.add.length;\n\n      if (reuse) {\n        return p;\n      } else {\n        p = new Pulse(this.dataflow).init(this);\n        p.add = p.source;\n        p.rem = []; // new operators can ignore rem #2769\n\n        return p;\n      }\n    },\n\n    /**\n     * Initialize this pulse based on the values of another pulse. This method\n     * is used internally by {@link fork} to initialize a new forked tuple.\n     * The dataflow, time stamp and field modification values are copied over.\n     * By default, new empty ADD, REM and MOD arrays are created.\n     * @param {Pulse} src - The source pulse to copy from.\n     * @param {number} flags - Integer of boolean flags indicating which (if any)\n     *   tuple arrays should be copied to the new pulse. The supported flag values\n     *   are ADD, REM and MOD. Array references are copied directly: new array\n     *   instances are not created. By default, source data arrays are copied\n     *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.\n     * @return {Pulse} - Returns this Pulse instance.\n     */\n    init(src, flags) {\n      const p = this;\n      p.stamp = src.stamp;\n      p.encode = src.encode;\n\n      if (src.fields && !(flags & NO_FIELDS)) {\n        p.fields = src.fields;\n      }\n\n      if (flags & ADD) {\n        p.addF = src.addF;\n        p.add = src.add;\n      } else {\n        p.addF = null;\n        p.add = [];\n      }\n\n      if (flags & REM) {\n        p.remF = src.remF;\n        p.rem = src.rem;\n      } else {\n        p.remF = null;\n        p.rem = [];\n      }\n\n      if (flags & MOD$1) {\n        p.modF = src.modF;\n        p.mod = src.mod;\n      } else {\n        p.modF = null;\n        p.mod = [];\n      }\n\n      if (flags & NO_SOURCE) {\n        p.srcF = null;\n        p.source = null;\n      } else {\n        p.srcF = src.srcF;\n        p.source = src.source;\n        if (src.cleans) p.cleans = src.cleans;\n      }\n\n      return p;\n    },\n\n    /**\n     * Schedules a function to run after pulse propagation completes.\n     * @param {function} func - The function to run.\n     */\n    runAfter(func) {\n      this.dataflow.runAfter(func);\n    },\n\n    /**\n     * Indicates if tuples have been added, removed or modified.\n     * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.\n     *   Defaults to ALL, returning true if any tuple type has changed.\n     * @return {boolean} - Returns true if one or more queried tuple types have\n     *   changed, false otherwise.\n     */\n    changed(flags) {\n      const f = flags || ALL;\n      return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD$1 && this.mod.length;\n    },\n\n    /**\n     * Forces a \"reflow\" of tuple values, such that all tuples in the backing\n     * source are added to the MOD set, unless already present in the ADD set.\n     * @param {boolean} [fork=false] - If true, returns a forked copy of this\n     *   pulse, and invokes reflow on that derived pulse.\n     * @return {Pulse} - The reflowed pulse instance.\n     */\n    reflow(fork) {\n      if (fork) return this.fork(ALL).reflow();\n      const len = this.add.length,\n            src = this.source && this.source.length;\n\n      if (src && src !== len) {\n        this.mod = this.source;\n        if (len) this.filter(MOD$1, filter$1(this, ADD));\n      }\n\n      return this;\n    },\n\n    /**\n     * Get/set metadata to pulse requesting garbage collection\n     * to reclaim currently unused resources.\n     */\n    clean(value) {\n      if (arguments.length) {\n        this.cleans = !!value;\n        return this;\n      } else {\n        return this.cleans;\n      }\n    },\n\n    /**\n     * Marks one or more data field names as modified to assist dependency\n     * tracking and incremental processing by transform operators.\n     * @param {string|Array<string>} _ - The field(s) to mark as modified.\n     * @return {Pulse} - This pulse instance.\n     */\n    modifies(_) {\n      const hash = this.fields || (this.fields = {});\n\n      if (isArray(_)) {\n        _.forEach(f => hash[f] = true);\n      } else {\n        hash[_] = true;\n      }\n\n      return this;\n    },\n\n    /**\n     * Checks if one or more data fields have been modified during this pulse\n     * propagation timestamp.\n     * @param {string|Array<string>} _ - The field(s) to check for modified.\n     * @param {boolean} nomod - If true, will check the modified flag even if\n     *   no mod tuples exist. If false (default), mod tuples must be present.\n     * @return {boolean} - Returns true if any of the provided fields has been\n     *   marked as modified, false otherwise.\n     */\n    modified(_, nomod) {\n      const fields = this.fields;\n      return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : isArray(_) ? _.some(f => fields[f]) : fields[_];\n    },\n\n    /**\n     * Adds a filter function to one more tuple sets. Filters are applied to\n     * backing tuple arrays, to determine the actual set of tuples considered\n     * added, removed or modified. They can be used to delay materialization of\n     * a tuple set in order to avoid expensive array copies. In addition, the\n     * filter functions can serve as value transformers: unlike standard predicate\n     * function (which return boolean values), Pulse filters should return the\n     * actual tuple value to process. If a tuple set is already filtered, the\n     * new filter function will be appended into a conjuntive ('and') query.\n     * @param {number} flags - Flags indicating the tuple set(s) to filter.\n     * @param {function(*):object} filter - Filter function that will be applied\n     *   to the tuple set array, and should return a data tuple if the value\n     *   should be included in the tuple set, and falsy (or null) otherwise.\n     * @return {Pulse} - Returns this pulse instance.\n     */\n    filter(flags, filter) {\n      const p = this;\n      if (flags & ADD) p.addF = addFilter(p.addF, filter);\n      if (flags & REM) p.remF = addFilter(p.remF, filter);\n      if (flags & MOD$1) p.modF = addFilter(p.modF, filter);\n      if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);\n      return p;\n    },\n\n    /**\n     * Materialize one or more tuple sets in this pulse. If the tuple set(s) have\n     * a registered filter function, it will be applied and the tuple set(s) will\n     * be replaced with materialized tuple arrays.\n     * @param {number} flags - Flags indicating the tuple set(s) to materialize.\n     * @return {Pulse} - Returns this pulse instance.\n     */\n    materialize(flags) {\n      flags = flags || ALL;\n      const p = this;\n\n      if (flags & ADD && p.addF) {\n        p.add = materialize(p.add, p.addF);\n        p.addF = null;\n      }\n\n      if (flags & REM && p.remF) {\n        p.rem = materialize(p.rem, p.remF);\n        p.remF = null;\n      }\n\n      if (flags & MOD$1 && p.modF) {\n        p.mod = materialize(p.mod, p.modF);\n        p.modF = null;\n      }\n\n      if (flags & SOURCE && p.srcF) {\n        p.source = p.source.filter(p.srcF);\n        p.srcF = null;\n      }\n\n      return p;\n    },\n\n    /**\n     * Visit one or more tuple sets in this pulse.\n     * @param {number} flags - Flags indicating the tuple set(s) to visit.\n     *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source\n     *   has been set).\n     * @param {function(object):*} - Visitor function invoked per-tuple.\n     * @return {Pulse} - Returns this pulse instance.\n     */\n    visit(flags, visitor) {\n      const p = this,\n            v = visitor;\n\n      if (flags & SOURCE) {\n        visitArray(p.source, p.srcF, v);\n        return p;\n      }\n\n      if (flags & ADD) visitArray(p.add, p.addF, v);\n      if (flags & REM) visitArray(p.rem, p.remF, v);\n      if (flags & MOD$1) visitArray(p.mod, p.modF, v);\n      const src = p.source;\n\n      if (flags & REFLOW && src) {\n        const sum = p.add.length + p.mod.length;\n        if (sum === src.length) ;else if (sum) {\n          visitArray(src, filter$1(p, ADD_MOD), v);\n        } else {\n          // if no add/rem/mod tuples, visit source\n          visitArray(src, p.srcF, v);\n        }\n      }\n\n      return p;\n    }\n\n  };\n  /**\n   * Represents a set of multiple pulses. Used as input for operators\n   * that accept multiple pulses at a time. Contained pulses are\n   * accessible via the public \"pulses\" array property. This pulse doe\n   * not carry added, removed or modified tuples directly. However,\n   * the visit method can be used to traverse all such tuples contained\n   * in sub-pulses with a timestamp matching this parent multi-pulse.\n   * @constructor\n   * @param {Dataflow} dataflow - The backing dataflow instance.\n   * @param {number} stamp - The timestamp.\n   * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.\n   */\n\n  function MultiPulse(dataflow, stamp, pulses, encode) {\n    const p = this,\n          n = pulses.length;\n    let c = 0;\n    this.dataflow = dataflow;\n    this.stamp = stamp;\n    this.fields = null;\n    this.encode = encode || null;\n    this.pulses = pulses;\n\n    for (let i = 0; i < n; ++i) {\n      const pulse = pulses[i];\n      if (pulse.stamp !== stamp) continue;\n\n      if (pulse.fields) {\n        const hash = p.fields || (p.fields = {});\n\n        for (const f in pulse.fields) {\n          hash[f] = 1;\n        }\n      }\n\n      if (pulse.changed(p.ADD)) c |= p.ADD;\n      if (pulse.changed(p.REM)) c |= p.REM;\n      if (pulse.changed(p.MOD)) c |= p.MOD;\n    }\n\n    this.changes = c;\n  }\n\n  inherits(MultiPulse, Pulse, {\n    /**\n     * Creates a new pulse based on the values of this pulse.\n     * The dataflow, time stamp and field modification values are copied over.\n     * @return {Pulse}\n     */\n    fork(flags) {\n      const p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);\n\n      if (flags !== undefined) {\n        if (flags & p.ADD) this.visit(p.ADD, t => p.add.push(t));\n        if (flags & p.REM) this.visit(p.REM, t => p.rem.push(t));\n        if (flags & p.MOD) this.visit(p.MOD, t => p.mod.push(t));\n      }\n\n      return p;\n    },\n\n    changed(flags) {\n      return this.changes & flags;\n    },\n\n    modified(_) {\n      const p = this,\n            fields = p.fields;\n      return !(fields && p.changes & p.MOD) ? 0 : isArray(_) ? _.some(f => fields[f]) : fields[_];\n    },\n\n    filter() {\n      error('MultiPulse does not support filtering.');\n    },\n\n    materialize() {\n      error('MultiPulse does not support materialization.');\n    },\n\n    visit(flags, visitor) {\n      const p = this,\n            pulses = p.pulses,\n            n = pulses.length;\n      let i = 0;\n\n      if (flags & p.SOURCE) {\n        for (; i < n; ++i) {\n          pulses[i].visit(flags, visitor);\n        }\n      } else {\n        for (; i < n; ++i) {\n          if (pulses[i].stamp === p.stamp) {\n            pulses[i].visit(flags, visitor);\n          }\n        }\n      }\n\n      return p;\n    }\n\n  });\n  /* eslint-disable require-atomic-updates */\n\n  /**\n   * Evaluates the dataflow and returns a Promise that resolves when pulse\n   * propagation completes. This method will increment the current timestamp\n   * and process all updated, pulsed and touched operators. When invoked for\n   * the first time, all registered operators will be processed. This method\n   * should not be invoked by third-party clients, use {@link runAsync} or\n   * {@link run} instead.\n   * @param {string} [encode] - The name of an encoding set to invoke during\n   *   propagation. This value is added to generated Pulse instances;\n   *   operators can then respond to (or ignore) this setting as appropriate.\n   *   This parameter can be used in conjunction with the Encode transform in\n   *   the vega-encode package.\n   * @param {function} [prerun] - An optional callback function to invoke\n   *   immediately before dataflow evaluation commences.\n   * @param {function} [postrun] - An optional callback function to invoke\n   *   after dataflow evaluation completes. The callback will be invoked\n   *   after those registered via {@link runAfter}.\n   * @return {Promise} - A promise that resolves to this dataflow after\n   *   evaluation completes.\n   */\n\n  async function evaluate(encode, prerun, postrun) {\n    const df = this,\n          async = []; // if the pulse value is set, this is a re-entrant call\n\n    if (df._pulse) return reentrant(df); // wait for pending datasets to load\n\n    if (df._pending) await df._pending; // invoke prerun function, if provided\n\n    if (prerun) await asyncCallback(df, prerun); // exit early if there are no updates\n\n    if (!df._touched.length) {\n      df.debug('Dataflow invoked, but nothing to do.');\n      return df;\n    } // increment timestamp clock\n\n\n    const stamp = ++df._clock; // set the current pulse\n\n    df._pulse = new Pulse(df, stamp, encode); // initialize priority queue, reset touched operators\n\n    df._touched.forEach(op => df._enqueue(op, true));\n\n    df._touched = UniqueList(id);\n    let count = 0,\n        op,\n        next,\n        error;\n\n    try {\n      while (df._heap.size() > 0) {\n        // dequeue operator with highest priority\n        op = df._heap.pop(); // re-queue if rank changed\n\n        if (op.rank !== op.qrank) {\n          df._enqueue(op, true);\n\n          continue;\n        } // otherwise, evaluate the operator\n\n\n        next = op.run(df._getPulse(op, encode));\n\n        if (next.then) {\n          // await if operator returns a promise directly\n          next = await next;\n        } else if (next.async) {\n          // queue parallel asynchronous execution\n          async.push(next.async);\n          next = StopPropagation;\n        } // propagate evaluation, enqueue dependent operators\n\n\n        if (next !== StopPropagation) {\n          if (op._targets) op._targets.forEach(op => df._enqueue(op));\n        } // increment visit counter\n\n\n        ++count;\n      }\n    } catch (err) {\n      df._heap.clear();\n\n      error = err;\n    } // reset pulse map\n\n\n    df._input = {};\n    df._pulse = null;\n    df.debug(`Pulse ${stamp}: ${count} operators`);\n\n    if (error) {\n      df._postrun = [];\n      df.error(error);\n    } // invoke callbacks queued via runAfter\n\n\n    if (df._postrun.length) {\n      const pr = df._postrun.sort((a, b) => b.priority - a.priority);\n\n      df._postrun = [];\n\n      for (let i = 0; i < pr.length; ++i) {\n        await asyncCallback(df, pr[i].callback);\n      }\n    } // invoke postrun function, if provided\n\n\n    if (postrun) await asyncCallback(df, postrun); // handle non-blocking asynchronous callbacks\n\n    if (async.length) {\n      Promise.all(async).then(cb => df.runAsync(null, () => {\n        cb.forEach(f => {\n          try {\n            f(df);\n          } catch (err) {\n            df.error(err);\n          }\n        });\n      }));\n    }\n\n    return df;\n  }\n  /**\n   * Queues dataflow evaluation to run once any other queued evaluations have\n   * completed and returns a Promise that resolves when the queued pulse\n   * propagation completes. If provided, a callback function will be invoked\n   * immediately before evaluation commences. This method will ensure a\n   * separate evaluation is invoked for each time it is called.\n   * @param {string} [encode] - The name of an encoding set to invoke during\n   *   propagation. This value is added to generated Pulse instances;\n   *   operators can then respond to (or ignore) this setting as appropriate.\n   *   This parameter can be used in conjunction with the Encode transform in\n   *   the vega-encode package.\n   * @param {function} [prerun] - An optional callback function to invoke\n   *   immediately before dataflow evaluation commences.\n   * @param {function} [postrun] - An optional callback function to invoke\n   *   after dataflow evaluation completes. The callback will be invoked\n   *   after those registered via {@link runAfter}.\n   * @return {Promise} - A promise that resolves to this dataflow after\n   *   evaluation completes.\n   */\n\n\n  async function runAsync(encode, prerun, postrun) {\n    // await previously queued functions\n    while (this._running) await this._running; // run dataflow, manage running promise\n\n\n    const clear = () => this._running = null;\n\n    (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);\n    return this._running;\n  }\n  /**\n   * Requests dataflow evaluation and the immediately returns this dataflow\n   * instance. If there are pending data loading or other asynchronous\n   * operations, the dataflow will evaluate asynchronously after this method\n   * has been invoked. To track when dataflow evaluation completes, use the\n   * {@link runAsync} method instead. This method will raise an error if\n   * invoked while the dataflow is already in the midst of evaluation.\n   * @param {string} [encode] - The name of an encoding set to invoke during\n   *   propagation. This value is added to generated Pulse instances;\n   *   operators can then respond to (or ignore) this setting as appropriate.\n   *   This parameter can be used in conjunction with the Encode transform in\n   *   the vega-encode module.\n   * @param {function} [prerun] - An optional callback function to invoke\n   *   immediately before dataflow evaluation commences.\n   * @param {function} [postrun] - An optional callback function to invoke\n   *   after dataflow evaluation completes. The callback will be invoked\n   *   after those registered via {@link runAfter}.\n   * @return {Dataflow} - This dataflow instance.\n   */\n\n\n  function run(encode, prerun, postrun) {\n    return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);\n  }\n  /**\n   * Schedules a callback function to be invoked after the current pulse\n   * propagation completes. If no propagation is currently occurring,\n   * the function is invoked immediately. Callbacks scheduled via runAfter\n   * are invoked immediately upon completion of the current cycle, before\n   * any request queued via runAsync. This method is primarily intended for\n   * internal use. Third-party callers using runAfter to schedule a callback\n   * that invokes {@link run} or {@link runAsync} should not use this method,\n   * but instead use {@link runAsync} with prerun or postrun arguments.\n   * @param {function(Dataflow)} callback - The callback function to run.\n   *   The callback will be invoked with this Dataflow instance as its\n   *   sole argument.\n   * @param {boolean} enqueue - A boolean flag indicating that the\n   *   callback should be queued up to run after the next propagation\n   *   cycle, suppressing immediate invocation when propagation is not\n   *   currently occurring.\n   * @param {number} [priority] - A priority value used to sort registered\n   *   callbacks to determine execution order. This argument is intended\n   *   for internal Vega use only.\n   */\n\n\n  function runAfter(callback, enqueue, priority) {\n    if (this._pulse || enqueue) {\n      // pulse propagation is currently running, queue to run after\n      this._postrun.push({\n        priority: priority || 0,\n        callback: callback\n      });\n    } else {\n      // pulse propagation already complete, invoke immediately\n      try {\n        callback(this);\n      } catch (err) {\n        this.error(err);\n      }\n    }\n  }\n  /**\n   * Raise an error for re-entrant dataflow evaluation.\n   */\n\n\n  function reentrant(df) {\n    df.error('Dataflow already running. Use runAsync() to chain invocations.');\n    return df;\n  }\n  /**\n   * Enqueue an operator into the priority queue for evaluation. The operator\n   * will be enqueued if it has no registered pulse for the current cycle, or if\n   * the force argument is true. Upon enqueue, this method also sets the\n   * operator's qrank to the current rank value.\n   * @param {Operator} op - The operator to enqueue.\n   * @param {boolean} [force] - A flag indicating if the operator should be\n   *   forceably added to the queue, even if it has already been previously\n   *   enqueued during the current pulse propagation. This is useful when the\n   *   dataflow graph is dynamically modified and the operator rank changes.\n   */\n\n\n  function enqueue(op, force) {\n    const q = op.stamp < this._clock;\n    if (q) op.stamp = this._clock;\n\n    if (q || force) {\n      op.qrank = op.rank;\n\n      this._heap.push(op);\n    }\n  }\n  /**\n   * Provide a correct pulse for evaluating an operator. If the operator has an\n   * explicit source operator, we will try to pull the pulse(s) from it.\n   * If there is an array of source operators, we build a multi-pulse.\n   * Otherwise, we return a current pulse with correct source data.\n   * If the pulse is the pulse map has an explicit target set, we use that.\n   * Else if the pulse on the upstream source operator is current, we use that.\n   * Else we use the pulse from the pulse map, but copy the source tuple array.\n   * @param {Operator} op - The operator for which to get an input pulse.\n   * @param {string} [encode] - An (optional) encoding set name with which to\n   *   annotate the returned pulse. See {@link run} for more information.\n   */\n\n\n  function getPulse(op, encode) {\n    const s = op.source,\n          stamp = this._clock;\n    return s && isArray(s) ? new MultiPulse(this, stamp, s.map(_ => _.pulse), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);\n  }\n\n  function singlePulse(p, s) {\n    if (s && s.stamp === p.stamp) {\n      return s;\n    }\n\n    p = p.fork();\n\n    if (s && s !== StopPropagation) {\n      p.source = s.source;\n    }\n\n    return p;\n  }\n\n  const NO_OPT = {\n    skip: false,\n    force: false\n  };\n  /**\n   * Touches an operator, scheduling it to be evaluated. If invoked outside of\n   * a pulse propagation, the operator will be evaluated the next time this\n   * dataflow is run. If invoked in the midst of pulse propagation, the operator\n   * will be queued for evaluation if and only if the operator has not yet been\n   * evaluated on the current propagation timestamp.\n   * @param {Operator} op - The operator to touch.\n   * @param {object} [options] - Additional options hash.\n   * @param {boolean} [options.skip] - If true, the operator will\n   *   be skipped: it will not be evaluated, but its dependents will be.\n   * @return {Dataflow}\n   */\n\n  function touch(op, options) {\n    const opt = options || NO_OPT;\n\n    if (this._pulse) {\n      // if in midst of propagation, add to priority queue\n      this._enqueue(op);\n    } else {\n      // otherwise, queue for next propagation\n      this._touched.add(op);\n    }\n\n    if (opt.skip) op.skip(true);\n    return this;\n  }\n  /**\n   * Updates the value of the given operator.\n   * @param {Operator} op - The operator to update.\n   * @param {*} value - The value to set.\n   * @param {object} [options] - Additional options hash.\n   * @param {boolean} [options.force] - If true, the operator will\n   *   be re-evaluated even if its value has not changed.\n   * @param {boolean} [options.skip] - If true, the operator will\n   *   be skipped: it will not be evaluated, but its dependents will be.\n   * @return {Dataflow}\n   */\n\n\n  function update$6(op, value, options) {\n    const opt = options || NO_OPT;\n\n    if (op.set(value) || opt.force) {\n      this.touch(op, opt);\n    }\n\n    return this;\n  }\n  /**\n   * Pulses an operator with a changeset of tuples. If invoked outside of\n   * a pulse propagation, the pulse will be applied the next time this\n   * dataflow is run. If invoked in the midst of pulse propagation, the pulse\n   * will be added to the set of active pulses and will be applied if and\n   * only if the target operator has not yet been evaluated on the current\n   * propagation timestamp.\n   * @param {Operator} op - The operator to pulse.\n   * @param {ChangeSet} value - The tuple changeset to apply.\n   * @param {object} [options] - Additional options hash.\n   * @param {boolean} [options.skip] - If true, the operator will\n   *   be skipped: it will not be evaluated, but its dependents will be.\n   * @return {Dataflow}\n   */\n\n\n  function pulse(op, changeset, options) {\n    this.touch(op, options || NO_OPT);\n    const p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),\n          t = op.pulse && op.pulse.source || [];\n    p.target = op;\n    this._input[op.id] = changeset.pulse(p, t);\n    return this;\n  }\n\n  function Heap(cmp) {\n    let nodes = [];\n    return {\n      clear: () => nodes = [],\n      size: () => nodes.length,\n      peek: () => nodes[0],\n      push: x => {\n        nodes.push(x);\n        return siftdown(nodes, 0, nodes.length - 1, cmp);\n      },\n      pop: () => {\n        const last = nodes.pop();\n        let item;\n\n        if (nodes.length) {\n          item = nodes[0];\n          nodes[0] = last;\n          siftup(nodes, 0, cmp);\n        } else {\n          item = last;\n        }\n\n        return item;\n      }\n    };\n  }\n\n  function siftdown(array, start, idx, cmp) {\n    let parent, pidx;\n    const item = array[idx];\n\n    while (idx > start) {\n      pidx = idx - 1 >> 1;\n      parent = array[pidx];\n\n      if (cmp(item, parent) < 0) {\n        array[idx] = parent;\n        idx = pidx;\n        continue;\n      }\n\n      break;\n    }\n\n    return array[idx] = item;\n  }\n\n  function siftup(array, idx, cmp) {\n    const start = idx,\n          end = array.length,\n          item = array[idx];\n    let cidx = (idx << 1) + 1,\n        ridx;\n\n    while (cidx < end) {\n      ridx = cidx + 1;\n\n      if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {\n        cidx = ridx;\n      }\n\n      array[idx] = array[cidx];\n      idx = cidx;\n      cidx = (idx << 1) + 1;\n    }\n\n    array[idx] = item;\n    return siftdown(array, start, idx, cmp);\n  }\n  /**\n   * A dataflow graph for reactive processing of data streams.\n   * @constructor\n   */\n\n\n  function Dataflow() {\n    this.logger(logger());\n    this.logLevel(Error$1);\n    this._clock = 0;\n    this._rank = 0;\n    this._locale = defaultLocale();\n\n    try {\n      this._loader = loader();\n    } catch (e) {// do nothing if loader module is unavailable\n    }\n\n    this._touched = UniqueList(id);\n    this._input = {};\n    this._pulse = null;\n    this._heap = Heap((a, b) => a.qrank - b.qrank);\n    this._postrun = [];\n  }\n\n  function logMethod(method) {\n    return function () {\n      return this._log[method].apply(this, arguments);\n    };\n  }\n\n  Dataflow.prototype = {\n    /**\n     * The current timestamp of this dataflow. This value reflects the\n     * timestamp of the previous dataflow run. The dataflow is initialized\n     * with a stamp value of 0. The initial run of the dataflow will have\n     * a timestap of 1, and so on. This value will match the\n     * {@link Pulse.stamp} property.\n     * @return {number} - The current timestamp value.\n     */\n    stamp() {\n      return this._clock;\n    },\n\n    /**\n     * Gets or sets the loader instance to use for data file loading. A\n     * loader object must provide a \"load\" method for loading files and a\n     * \"sanitize\" method for checking URL/filename validity. Both methods\n     * should accept a URI and options hash as arguments, and return a Promise\n     * that resolves to the loaded file contents (load) or a hash containing\n     * sanitized URI data with the sanitized url assigned to the \"href\" property\n     * (sanitize).\n     * @param {object} _ - The loader instance to use.\n     * @return {object|Dataflow} - If no arguments are provided, returns\n     *   the current loader instance. Otherwise returns this Dataflow instance.\n     */\n    loader(_) {\n      if (arguments.length) {\n        this._loader = _;\n        return this;\n      } else {\n        return this._loader;\n      }\n    },\n\n    /**\n     * Gets or sets the locale instance to use for formatting and parsing\n     * string values. The locale object should be provided by the\n     * vega-format library, and include methods such as format, timeFormat,\n     * utcFormat, timeParse, and utcParse.\n     * @param {object} _ - The locale instance to use.\n     * @return {object|Dataflow} - If no arguments are provided, returns\n     *   the current locale instance. Otherwise returns this Dataflow instance.\n     */\n    locale(_) {\n      if (arguments.length) {\n        this._locale = _;\n        return this;\n      } else {\n        return this._locale;\n      }\n    },\n\n    /**\n     * Get or set the logger instance used to log messages. If no arguments are\n     * provided, returns the current logger instance. Otherwise, sets the logger\n     * and return this Dataflow instance. Provided loggers must support the full\n     * API of logger objects generated by the vega-util logger method. Note that\n     * by default the log level of the new logger will be used; use the logLevel\n     * method to adjust the log level as needed.\n     */\n    logger(logger) {\n      if (arguments.length) {\n        this._log = logger;\n        return this;\n      } else {\n        return this._log;\n      }\n    },\n\n    /**\n     * Logs an error message. By default, logged messages are written to console\n     * output. The message will only be logged if the current log level is high\n     * enough to permit error messages.\n     */\n    error: logMethod('error'),\n\n    /**\n     * Logs a warning message. By default, logged messages are written to console\n     * output. The message will only be logged if the current log level is high\n     * enough to permit warning messages.\n     */\n    warn: logMethod('warn'),\n\n    /**\n     * Logs a information message. By default, logged messages are written to\n     * console output. The message will only be logged if the current log level is\n     * high enough to permit information messages.\n     */\n    info: logMethod('info'),\n\n    /**\n     * Logs a debug message. By default, logged messages are written to console\n     * output. The message will only be logged if the current log level is high\n     * enough to permit debug messages.\n     */\n    debug: logMethod('debug'),\n\n    /**\n     * Get or set the current log level. If an argument is provided, it\n     * will be used as the new log level.\n     * @param {number} [level] - Should be one of None, Warn, Info\n     * @return {number} - The current log level.\n     */\n    logLevel: logMethod('level'),\n\n    /**\n     * Empty entry threshold for garbage cleaning. Map data structures will\n     * perform cleaning once the number of empty entries exceeds this value.\n     */\n    cleanThreshold: 1e4,\n    // OPERATOR REGISTRATION\n    add: add$3,\n    connect,\n    rank,\n    rerank,\n    // OPERATOR UPDATES\n    pulse,\n    touch,\n    update: update$6,\n    changeset,\n    // DATA LOADING\n    ingest,\n    parse: parse$4,\n    preload,\n    request,\n    // EVENT HANDLING\n    events: events$1,\n    on,\n    // PULSE PROPAGATION\n    evaluate,\n    run,\n    runAsync,\n    runAfter,\n    _enqueue: enqueue,\n    _getPulse: getPulse\n  };\n  /**\n   * Abstract class for operators that process data tuples.\n   * Subclasses must provide a {@link transform} method for operator processing.\n   * @constructor\n   * @param {*} [init] - The initial value for this operator.\n   * @param {object} [params] - The parameters for this operator.\n   * @param {Operator} [source] - The operator from which to receive pulses.\n   */\n\n  function Transform(init, params) {\n    Operator.call(this, init, null, params);\n  }\n\n  inherits(Transform, Operator, {\n    /**\n     * Overrides {@link Operator.evaluate} for transform operators.\n     * Internally, this method calls {@link evaluate} to perform processing.\n     * If {@link evaluate} returns a falsy value, the input pulse is returned.\n     * This method should NOT be overridden, instead overrride {@link evaluate}.\n     * @param {Pulse} pulse - the current dataflow pulse.\n     * @return the output pulse for this operator (or StopPropagation)\n     */\n    run(pulse) {\n      if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n      let rv;\n\n      if (this.skip()) {\n        this.skip(false);\n      } else {\n        rv = this.evaluate(pulse);\n      }\n\n      rv = rv || pulse;\n\n      if (rv.then) {\n        rv = rv.then(_ => this.pulse = _);\n      } else if (rv !== pulse.StopPropagation) {\n        this.pulse = rv;\n      }\n\n      return rv;\n    },\n\n    /**\n     * Overrides {@link Operator.evaluate} for transform operators.\n     * Marshalls parameter values and then invokes {@link transform}.\n     * @param {Pulse} pulse - the current dataflow pulse.\n     * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n         value (including undefined) will let the input pulse pass through.\n    */\n    evaluate(pulse) {\n      const params = this.marshall(pulse.stamp),\n            out = this.transform(params, pulse);\n      params.clear();\n      return out;\n    },\n\n    /**\n     * Process incoming pulses.\n     * Subclasses should override this method to implement transforms.\n     * @param {Parameters} _ - The operator parameter values.\n     * @param {Pulse} pulse - The current dataflow pulse.\n     * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n     *   value (including undefined) will let the input pulse pass through.\n     */\n    transform() {}\n\n  });\n  const transforms = {};\n\n  function definition$1(type) {\n    const t = transform$2(type);\n    return t && t.Definition || null;\n  }\n\n  function transform$2(type) {\n    type = type && type.toLowerCase();\n    return has$1(transforms, type) ? transforms[type] : null;\n  }\n\n  function* numbers$1(values, valueof) {\n    if (valueof == null) {\n      for (let value of values) {\n        if (value != null && value !== '' && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    } else {\n      let index = -1;\n\n      for (let value of values) {\n        value = valueof(value, ++index, values);\n\n        if (value != null && value !== '' && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    }\n  }\n\n  function quantiles(array, p, f) {\n    const values = Float64Array.from(numbers$1(array, f)); // don't depend on return value from typed array sort call\n    // protects against undefined sort results in Safari (vega/vega-lite#4964)\n\n    values.sort(ascending$2);\n    return p.map(_ => quantileSorted(values, _));\n  }\n\n  function quartiles(array, f) {\n    return quantiles(array, [0.25, 0.50, 0.75], f);\n  } // Theory, Practice, and Visualization. Wiley.\n\n\n  function estimateBandwidth(array, f) {\n    const n = array.length,\n          d = deviation(array, f),\n          q = quartiles(array, f),\n          h = (q[2] - q[0]) / 1.34,\n          v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n    return 1.06 * v * Math.pow(n, -0.2);\n  }\n\n  function bin(_) {\n    // determine range\n    const maxb = _.maxbins || 20,\n          base = _.base || 10,\n          logb = Math.log(base),\n          div = _.divide || [5, 2];\n    let min = _.extent[0],\n        max = _.extent[1],\n        step,\n        level,\n        minstep,\n        v,\n        i,\n        n;\n    const span = _.span || max - min || Math.abs(min) || 1;\n\n    if (_.step) {\n      // if step size is explicitly given, use that\n      step = _.step;\n    } else if (_.steps) {\n      // if provided, limit choice to acceptable step sizes\n      v = span / maxb;\n\n      for (i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i);\n\n      step = _.steps[Math.max(0, i - 1)];\n    } else {\n      // else use span to determine step size\n      level = Math.ceil(Math.log(maxb) / logb);\n      minstep = _.minstep || 0;\n      step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level)); // increase step size if too many bins\n\n      while (Math.ceil(span / step) > maxb) {\n        step *= base;\n      } // decrease step size if allowed\n\n\n      for (i = 0, n = div.length; i < n; ++i) {\n        v = step / div[i];\n        if (v >= minstep && span / v <= maxb) step = v;\n      }\n    } // update precision, min and max\n\n\n    v = Math.log(step);\n    const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n          eps = Math.pow(base, -precision - 1);\n\n    if (_.nice || _.nice === undefined) {\n      v = Math.floor(min / step + eps) * step;\n      min = min < v ? v - step : v;\n      max = Math.ceil(max / step) * step;\n    }\n\n    return {\n      start: min,\n      stop: max === min ? min + step : max,\n      step: step\n    };\n  }\n\n  exports.random = Math.random;\n\n  function setRandom(r) {\n    exports.random = r;\n  }\n\n  function bootstrapCI(array, samples, alpha, f) {\n    if (!array.length) return [undefined, undefined];\n    const values = Float64Array.from(numbers$1(array, f)),\n          n = values.length,\n          m = samples;\n    let a, i, j, mu;\n\n    for (j = 0, mu = Array(m); j < m; ++j) {\n      for (a = 0, i = 0; i < n; ++i) {\n        a += values[~~(exports.random() * n)];\n      }\n\n      mu[j] = a / n;\n    }\n\n    mu.sort(ascending$2);\n    return [quantile$1(mu, alpha / 2), quantile$1(mu, 1 - alpha / 2)];\n  } // Dot density binning for dot plot construction.\n  // Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n  // https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n\n\n  function dotbin(array, step, smooth, f) {\n    f = f || (_ => _);\n\n    const n = array.length,\n          v = new Float64Array(n);\n    let i = 0,\n        j = 1,\n        a = f(array[0]),\n        b = a,\n        w = a + step,\n        x;\n\n    for (; j < n; ++j) {\n      x = f(array[j]);\n\n      if (x >= w) {\n        b = (a + b) / 2;\n\n        for (; i < j; ++i) v[i] = b;\n\n        w = x + step;\n        a = x;\n      }\n\n      b = x;\n    }\n\n    b = (a + b) / 2;\n\n    for (; i < j; ++i) v[i] = b;\n\n    return smooth ? smoothing(v, step + step / 4) : v;\n  } // perform smoothing to reduce variance\n  // swap points between \"adjacent\" stacks\n  // Wilkinson defines adjacent as within step/4 units\n\n\n  function smoothing(v, thresh) {\n    const n = v.length;\n    let a = 0,\n        b = 1,\n        c,\n        d; // get left stack\n\n    while (v[a] === v[b]) ++b;\n\n    while (b < n) {\n      // get right stack\n      c = b + 1;\n\n      while (v[b] === v[c]) ++c; // are stacks adjacent?\n      // if so, compare sizes and swap as needed\n\n\n      if (v[b] - v[b - 1] < thresh) {\n        d = b + (a + c - b - b >> 1);\n\n        while (d < b) v[d++] = v[b];\n\n        while (d > b) v[d--] = v[a];\n      } // update left stack indices\n\n\n      a = b;\n      b = c;\n    }\n\n    return v;\n  }\n\n  function lcg$1(seed) {\n    // Random numbers using a Linear Congruential Generator with seed value\n    // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n    return function () {\n      seed = (1103515245 * seed + 12345) % 2147483647;\n      return seed / 2147483647;\n    };\n  }\n\n  function integer(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n\n    let a, b, d;\n    const dist = {\n      min(_) {\n        if (arguments.length) {\n          a = _ || 0;\n          d = b - a;\n          return dist;\n        } else {\n          return a;\n        }\n      },\n\n      max(_) {\n        if (arguments.length) {\n          b = _ || 0;\n          d = b - a;\n          return dist;\n        } else {\n          return b;\n        }\n      },\n\n      sample() {\n        return a + Math.floor(d * exports.random());\n      },\n\n      pdf(x) {\n        return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;\n      },\n\n      cdf(x) {\n        const v = Math.floor(x);\n        return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n      },\n\n      icdf(p) {\n        return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;\n      }\n\n    };\n    return dist.min(min).max(max);\n  }\n\n  const SQRT2PI = Math.sqrt(2 * Math.PI);\n  const SQRT2 = Math.SQRT2;\n  let nextSample = NaN;\n\n  function sampleNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    let x = 0,\n        y = 0,\n        rds,\n        c;\n\n    if (nextSample === nextSample) {\n      x = nextSample;\n      nextSample = NaN;\n    } else {\n      do {\n        x = exports.random() * 2 - 1;\n        y = exports.random() * 2 - 1;\n        rds = x * x + y * y;\n      } while (rds === 0 || rds > 1);\n\n      c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n\n      x *= c;\n      nextSample = y * c;\n    }\n\n    return mean + x * stdev;\n  }\n\n  function densityNormal(value, mean, stdev) {\n    stdev = stdev == null ? 1 : stdev;\n    const z = (value - (mean || 0)) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n  } // Approximation from West (2009)\n  // Better Approximations to Cumulative Normal Functions\n\n\n  function cumulativeNormal(value, mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    const z = (value - mean) / stdev,\n          Z = Math.abs(z);\n    let cd;\n\n    if (Z > 37) {\n      cd = 0;\n    } else {\n      const exp = Math.exp(-Z * Z / 2);\n      let sum;\n\n      if (Z < 7.07106781186547) {\n        sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n        sum = sum * Z + 6.37396220353165;\n        sum = sum * Z + 33.912866078383;\n        sum = sum * Z + 112.079291497871;\n        sum = sum * Z + 221.213596169931;\n        sum = sum * Z + 220.206867912376;\n        cd = exp * sum;\n        sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n        sum = sum * Z + 16.064177579207;\n        sum = sum * Z + 86.7807322029461;\n        sum = sum * Z + 296.564248779674;\n        sum = sum * Z + 637.333633378831;\n        sum = sum * Z + 793.826512519948;\n        sum = sum * Z + 440.413735824752;\n        cd = cd / sum;\n      } else {\n        sum = Z + 0.65;\n        sum = Z + 4 / sum;\n        sum = Z + 3 / sum;\n        sum = Z + 2 / sum;\n        sum = Z + 1 / sum;\n        cd = exp / sum / 2.506628274631;\n      }\n    }\n\n    return z > 0 ? 1 - cd : cd;\n  } // Approximation of Probit function using inverse error function.\n\n\n  function quantileNormal(p, mean, stdev) {\n    if (p < 0 || p > 1) return NaN;\n    return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n  } // Approximate inverse error function. Implementation from \"Approximating\n  // the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n  // Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\n\n\n  function erfinv(x) {\n    // beware that the logarithm argument must be\n    // commputed as (1.0 - x) * (1.0 + x),\n    // it must NOT be simplified as 1.0 - x * x as this\n    // would induce rounding errors near the boundaries +/-1\n    let w = -Math.log((1 - x) * (1 + x)),\n        p;\n\n    if (w < 6.25) {\n      w -= 3.125;\n      p = -3.6444120640178196996e-21;\n      p = -1.685059138182016589e-19 + p * w;\n      p = 1.2858480715256400167e-18 + p * w;\n      p = 1.115787767802518096e-17 + p * w;\n      p = -1.333171662854620906e-16 + p * w;\n      p = 2.0972767875968561637e-17 + p * w;\n      p = 6.6376381343583238325e-15 + p * w;\n      p = -4.0545662729752068639e-14 + p * w;\n      p = -8.1519341976054721522e-14 + p * w;\n      p = 2.6335093153082322977e-12 + p * w;\n      p = -1.2975133253453532498e-11 + p * w;\n      p = -5.4154120542946279317e-11 + p * w;\n      p = 1.051212273321532285e-09 + p * w;\n      p = -4.1126339803469836976e-09 + p * w;\n      p = -2.9070369957882005086e-08 + p * w;\n      p = 4.2347877827932403518e-07 + p * w;\n      p = -1.3654692000834678645e-06 + p * w;\n      p = -1.3882523362786468719e-05 + p * w;\n      p = 0.0001867342080340571352 + p * w;\n      p = -0.00074070253416626697512 + p * w;\n      p = -0.0060336708714301490533 + p * w;\n      p = 0.24015818242558961693 + p * w;\n      p = 1.6536545626831027356 + p * w;\n    } else if (w < 16.0) {\n      w = Math.sqrt(w) - 3.25;\n      p = 2.2137376921775787049e-09;\n      p = 9.0756561938885390979e-08 + p * w;\n      p = -2.7517406297064545428e-07 + p * w;\n      p = 1.8239629214389227755e-08 + p * w;\n      p = 1.5027403968909827627e-06 + p * w;\n      p = -4.013867526981545969e-06 + p * w;\n      p = 2.9234449089955446044e-06 + p * w;\n      p = 1.2475304481671778723e-05 + p * w;\n      p = -4.7318229009055733981e-05 + p * w;\n      p = 6.8284851459573175448e-05 + p * w;\n      p = 2.4031110387097893999e-05 + p * w;\n      p = -0.0003550375203628474796 + p * w;\n      p = 0.00095328937973738049703 + p * w;\n      p = -0.0016882755560235047313 + p * w;\n      p = 0.0024914420961078508066 + p * w;\n      p = -0.0037512085075692412107 + p * w;\n      p = 0.005370914553590063617 + p * w;\n      p = 1.0052589676941592334 + p * w;\n      p = 3.0838856104922207635 + p * w;\n    } else if (Number.isFinite(w)) {\n      w = Math.sqrt(w) - 5.0;\n      p = -2.7109920616438573243e-11;\n      p = -2.5556418169965252055e-10 + p * w;\n      p = 1.5076572693500548083e-09 + p * w;\n      p = -3.7894654401267369937e-09 + p * w;\n      p = 7.6157012080783393804e-09 + p * w;\n      p = -1.4960026627149240478e-08 + p * w;\n      p = 2.9147953450901080826e-08 + p * w;\n      p = -6.7711997758452339498e-08 + p * w;\n      p = 2.2900482228026654717e-07 + p * w;\n      p = -9.9298272942317002539e-07 + p * w;\n      p = 4.5260625972231537039e-06 + p * w;\n      p = -1.9681778105531670567e-05 + p * w;\n      p = 7.5995277030017761139e-05 + p * w;\n      p = -0.00021503011930044477347 + p * w;\n      p = -0.00013871931833623122026 + p * w;\n      p = 1.0103004648645343977 + p * w;\n      p = 4.8499064014085844221 + p * w;\n    } else {\n      p = Infinity;\n    }\n\n    return p * x;\n  }\n\n  function gaussian(mean, stdev) {\n    let mu, sigma;\n    const dist = {\n      mean(_) {\n        if (arguments.length) {\n          mu = _ || 0;\n          return dist;\n        } else {\n          return mu;\n        }\n      },\n\n      stdev(_) {\n        if (arguments.length) {\n          sigma = _ == null ? 1 : _;\n          return dist;\n        } else {\n          return sigma;\n        }\n      },\n\n      sample: () => sampleNormal(mu, sigma),\n      pdf: value => densityNormal(value, mu, sigma),\n      cdf: value => cumulativeNormal(value, mu, sigma),\n      icdf: p => quantileNormal(p, mu, sigma)\n    };\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  function kde(support, bandwidth) {\n    const kernel = gaussian();\n    let n = 0;\n    const dist = {\n      data(_) {\n        if (arguments.length) {\n          support = _;\n          n = _ ? _.length : 0;\n          return dist.bandwidth(bandwidth);\n        } else {\n          return support;\n        }\n      },\n\n      bandwidth(_) {\n        if (!arguments.length) return bandwidth;\n        bandwidth = _;\n        if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n        return dist;\n      },\n\n      sample() {\n        return support[~~(exports.random() * n)] + bandwidth * kernel.sample();\n      },\n\n      pdf(x) {\n        let y = 0,\n            i = 0;\n\n        for (; i < n; ++i) {\n          y += kernel.pdf((x - support[i]) / bandwidth);\n        }\n\n        return y / bandwidth / n;\n      },\n\n      cdf(x) {\n        let y = 0,\n            i = 0;\n\n        for (; i < n; ++i) {\n          y += kernel.cdf((x - support[i]) / bandwidth);\n        }\n\n        return y / n;\n      },\n\n      icdf() {\n        throw Error('KDE icdf not supported.');\n      }\n\n    };\n    return dist.data(support);\n  }\n\n  function sampleLogNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    return Math.exp(mean + sampleNormal() * stdev);\n  }\n\n  function densityLogNormal(value, mean, stdev) {\n    if (value <= 0) return 0;\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    const z = (Math.log(value) - mean) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n  }\n\n  function cumulativeLogNormal(value, mean, stdev) {\n    return cumulativeNormal(Math.log(value), mean, stdev);\n  }\n\n  function quantileLogNormal(p, mean, stdev) {\n    return Math.exp(quantileNormal(p, mean, stdev));\n  }\n\n  function lognormal(mean, stdev) {\n    let mu, sigma;\n    const dist = {\n      mean(_) {\n        if (arguments.length) {\n          mu = _ || 0;\n          return dist;\n        } else {\n          return mu;\n        }\n      },\n\n      stdev(_) {\n        if (arguments.length) {\n          sigma = _ == null ? 1 : _;\n          return dist;\n        } else {\n          return sigma;\n        }\n      },\n\n      sample: () => sampleLogNormal(mu, sigma),\n      pdf: value => densityLogNormal(value, mu, sigma),\n      cdf: value => cumulativeLogNormal(value, mu, sigma),\n      icdf: p => quantileLogNormal(p, mu, sigma)\n    };\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  function mixture$1(dists, weights) {\n    let m = 0,\n        w;\n\n    function normalize(x) {\n      const w = [];\n      let sum = 0,\n          i;\n\n      for (i = 0; i < m; ++i) {\n        sum += w[i] = x[i] == null ? 1 : +x[i];\n      }\n\n      for (i = 0; i < m; ++i) {\n        w[i] /= sum;\n      }\n\n      return w;\n    }\n\n    const dist = {\n      weights(_) {\n        if (arguments.length) {\n          w = normalize(weights = _ || []);\n          return dist;\n        }\n\n        return weights;\n      },\n\n      distributions(_) {\n        if (arguments.length) {\n          if (_) {\n            m = _.length;\n            dists = _;\n          } else {\n            m = 0;\n            dists = [];\n          }\n\n          return dist.weights(weights);\n        }\n\n        return dists;\n      },\n\n      sample() {\n        const r = exports.random();\n        let d = dists[m - 1],\n            v = w[0],\n            i = 0; // first select distribution\n\n        for (; i < m - 1; v += w[++i]) {\n          if (r < v) {\n            d = dists[i];\n            break;\n          }\n        } // then sample from it\n\n\n        return d.sample();\n      },\n\n      pdf(x) {\n        let p = 0,\n            i = 0;\n\n        for (; i < m; ++i) {\n          p += w[i] * dists[i].pdf(x);\n        }\n\n        return p;\n      },\n\n      cdf(x) {\n        let p = 0,\n            i = 0;\n\n        for (; i < m; ++i) {\n          p += w[i] * dists[i].cdf(x);\n        }\n\n        return p;\n      },\n\n      icdf() {\n        throw Error('Mixture icdf not supported.');\n      }\n\n    };\n    return dist.distributions(dists).weights(weights);\n  }\n\n  function sampleUniform(min, max) {\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n\n    return min + (max - min) * exports.random();\n  }\n\n  function densityUniform(value, min, max) {\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n\n    return value >= min && value <= max ? 1 / (max - min) : 0;\n  }\n\n  function cumulativeUniform(value, min, max) {\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n\n    return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n  }\n\n  function quantileUniform(p, min, max) {\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n\n    return p >= 0 && p <= 1 ? min + p * (max - min) : NaN;\n  }\n\n  function uniform(min, max) {\n    let a, b;\n    const dist = {\n      min(_) {\n        if (arguments.length) {\n          a = _ || 0;\n          return dist;\n        } else {\n          return a;\n        }\n      },\n\n      max(_) {\n        if (arguments.length) {\n          b = _ == null ? 1 : _;\n          return dist;\n        } else {\n          return b;\n        }\n      },\n\n      sample: () => sampleUniform(a, b),\n      pdf: value => densityUniform(value, a, b),\n      cdf: value => cumulativeUniform(value, a, b),\n      icdf: p => quantileUniform(p, a, b)\n    };\n\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n\n    return dist.min(min).max(max);\n  } // Ordinary Least Squares\n\n\n  function ols(uX, uY, uXY, uX2) {\n    const delta = uX2 - uX * uX,\n          slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n          intercept = uY - slope * uX;\n    return [intercept, slope];\n  }\n\n  function points(data, x, y, sort) {\n    data = data.filter(d => {\n      let u = x(d),\n          v = y(d);\n      return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n    });\n\n    if (sort) {\n      data.sort((a, b) => x(a) - x(b));\n    }\n\n    const n = data.length,\n          X = new Float64Array(n),\n          Y = new Float64Array(n); // extract values, calculate means\n\n    let i = 0,\n        ux = 0,\n        uy = 0,\n        xv,\n        yv,\n        d;\n\n    for (d of data) {\n      X[i] = xv = +x(d);\n      Y[i] = yv = +y(d);\n      ++i;\n      ux += (xv - ux) / i;\n      uy += (yv - uy) / i;\n    } // mean center the data\n\n\n    for (i = 0; i < n; ++i) {\n      X[i] -= ux;\n      Y[i] -= uy;\n    }\n\n    return [X, Y, ux, uy];\n  }\n\n  function visitPoints(data, x, y, callback) {\n    let i = -1,\n        u,\n        v;\n\n    for (const d of data) {\n      u = x(d);\n      v = y(d);\n\n      if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n        callback(u, v, ++i);\n      }\n    }\n  } // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\n\n  function rSquared(data, x, y, uY, predict) {\n    let SSE = 0,\n        SST = 0;\n    visitPoints(data, x, y, (dx, dy) => {\n      const sse = dy - predict(dx),\n            sst = dy - uY;\n      SSE += sse * sse;\n      SST += sst * sst;\n    });\n    return 1 - SSE / SST;\n  } // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\n\n  function linear$2(data, x, y) {\n    let X = 0,\n        Y = 0,\n        XY = 0,\n        X2 = 0,\n        n = 0;\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n;\n      X += (dx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (dx * dy - XY) / n;\n      X2 += (dx * dx - X2) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] + coef[1] * x;\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  } // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\n\n  function log$3(data, x, y) {\n    let X = 0,\n        Y = 0,\n        XY = 0,\n        X2 = 0,\n        n = 0;\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n;\n      dx = Math.log(dx);\n      X += (dx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (dx * dy - XY) / n;\n      X2 += (dx * dx - X2) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] + coef[1] * Math.log(x);\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  }\n\n  function exp$1(data, x, y) {\n    // eslint-disable-next-line no-unused-vars\n    const [xv, yv, ux, uy] = points(data, x, y);\n    let YL = 0,\n        XY = 0,\n        XYL = 0,\n        X2Y = 0,\n        n = 0,\n        dx,\n        ly,\n        xy;\n    visitPoints(data, x, y, (_, dy) => {\n      dx = xv[n++];\n      ly = Math.log(dy);\n      xy = dx * dy;\n      YL += (dy * ly - YL) / n;\n      XY += (xy - XY) / n;\n      XYL += (xy * ly - XYL) / n;\n      X2Y += (dx * xy - X2Y) / n;\n    });\n\n    const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n          predict = x => Math.exp(c0 + c1 * (x - ux));\n\n    return {\n      coef: [Math.exp(c0 - c1 * ux), c1],\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  } // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\n\n  function pow$3(data, x, y) {\n    let X = 0,\n        Y = 0,\n        XY = 0,\n        X2 = 0,\n        YS = 0,\n        n = 0;\n    visitPoints(data, x, y, (dx, dy) => {\n      const lx = Math.log(dx),\n            ly = Math.log(dy);\n      ++n;\n      X += (lx - X) / n;\n      Y += (ly - Y) / n;\n      XY += (lx * ly - XY) / n;\n      X2 += (lx * lx - X2) / n;\n      YS += (dy - YS) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] * Math.pow(x, coef[1]);\n\n    coef[0] = Math.exp(coef[0]);\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, YS, predict)\n    };\n  }\n\n  function quad(data, x, y) {\n    const [xv, yv, ux, uy] = points(data, x, y),\n          n = xv.length;\n    let X2 = 0,\n        X3 = 0,\n        X4 = 0,\n        XY = 0,\n        X2Y = 0,\n        i,\n        dx,\n        dy,\n        x2;\n\n    for (i = 0; i < n;) {\n      dx = xv[i];\n      dy = yv[i++];\n      x2 = dx * dx;\n      X2 += (x2 - X2) / i;\n      X3 += (x2 * dx - X3) / i;\n      X4 += (x2 * x2 - X4) / i;\n      XY += (dx * dy - XY) / i;\n      X2Y += (x2 * dy - X2Y) / i;\n    }\n\n    const X2X2 = X4 - X2 * X2,\n          d = X2 * X2X2 - X3 * X3,\n          a = (X2Y * X2 - XY * X3) / d,\n          b = (XY * X2X2 - X2Y * X3) / d,\n          c = -a * X2,\n          predict = x => {\n      x = x - ux;\n      return a * x * x + b * x + c + uy;\n    }; // transform coefficients back from mean-centered space\n\n\n    return {\n      coef: [c - b * ux + a * ux * ux + uy, b - 2 * a * ux, a],\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  } // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  // ... which was adapted from regression-js by Tom Alexander\n  // Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n  // License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n\n\n  function poly(data, x, y, order) {\n    // use more efficient methods for lower orders\n    if (order === 1) return linear$2(data, x, y);\n    if (order === 2) return quad(data, x, y);\n    const [xv, yv, ux, uy] = points(data, x, y),\n          n = xv.length,\n          lhs = [],\n          rhs = [],\n          k = order + 1;\n    let i, j, l, v, c;\n\n    for (i = 0; i < k; ++i) {\n      for (l = 0, v = 0; l < n; ++l) {\n        v += Math.pow(xv[l], i) * yv[l];\n      }\n\n      lhs.push(v);\n      c = new Float64Array(k);\n\n      for (j = 0; j < k; ++j) {\n        for (l = 0, v = 0; l < n; ++l) {\n          v += Math.pow(xv[l], i + j);\n        }\n\n        c[j] = v;\n      }\n\n      rhs.push(c);\n    }\n\n    rhs.push(lhs);\n\n    const coef = gaussianElimination(rhs),\n          predict = x => {\n      x -= ux;\n      let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n\n      for (i = 3; i < k; ++i) y += coef[i] * Math.pow(x, i);\n\n      return y;\n    };\n\n    return {\n      coef: uncenter(k, coef, -ux, uy),\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  function uncenter(k, a, x, y) {\n    const z = Array(k);\n    let i, j, v, c; // initialize to zero\n\n    for (i = 0; i < k; ++i) z[i] = 0; // polynomial expansion\n\n\n    for (i = k - 1; i >= 0; --i) {\n      v = a[i];\n      c = 1;\n      z[i] += v;\n\n      for (j = 1; j <= i; ++j) {\n        c *= (i + 1 - j) / j; // binomial coefficent\n\n        z[i - j] += v * Math.pow(x, j) * c;\n      }\n    } // bias term\n\n\n    z[0] += y;\n    return z;\n  } // Given an array for a two-dimensional matrix and the polynomial order,\n  // solve A * x = b using Gaussian elimination.\n\n\n  function gaussianElimination(matrix) {\n    const n = matrix.length - 1,\n          coef = [];\n    let i, j, k, r, t;\n\n    for (i = 0; i < n; ++i) {\n      r = i; // max row\n\n      for (j = i + 1; j < n; ++j) {\n        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n          r = j;\n        }\n      }\n\n      for (k = i; k < n + 1; ++k) {\n        t = matrix[k][i];\n        matrix[k][i] = matrix[k][r];\n        matrix[k][r] = t;\n      }\n\n      for (j = i + 1; j < n; ++j) {\n        for (k = n; k >= i; k--) {\n          matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];\n        }\n      }\n    }\n\n    for (j = n - 1; j >= 0; --j) {\n      t = 0;\n\n      for (k = j + 1; k < n; ++k) {\n        t += matrix[k][j] * coef[k];\n      }\n\n      coef[j] = (matrix[n][j] - t) / matrix[j][j];\n    }\n\n    return coef;\n  }\n\n  const maxiters = 2,\n        epsilon$5 = 1e-12; // Adapted from science.js by Jason Davies\n  // Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n  // License: https://github.com/jasondavies/science.js/blob/master/LICENSE\n\n  function loess(data, x, y, bandwidth) {\n    const [xv, yv, ux, uy] = points(data, x, y, true),\n          n = xv.length,\n          bw = Math.max(2, ~~(bandwidth * n)),\n          // # nearest neighbors\n    yhat = new Float64Array(n),\n          residuals = new Float64Array(n),\n          robustWeights = new Float64Array(n).fill(1);\n\n    for (let iter = -1; ++iter <= maxiters;) {\n      const interval = [0, bw - 1];\n\n      for (let i = 0; i < n; ++i) {\n        const dx = xv[i],\n              i0 = interval[0],\n              i1 = interval[1],\n              edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;\n        let W = 0,\n            X = 0,\n            Y = 0,\n            XY = 0,\n            X2 = 0;\n        const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n        for (let k = i0; k <= i1; ++k) {\n          const xk = xv[k],\n                yk = yv[k],\n                w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n                xkw = xk * w;\n          W += w;\n          X += xkw;\n          Y += yk * w;\n          XY += yk * xkw;\n          X2 += xk * xkw;\n        } // linear regression fit\n\n\n        const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n        yhat[i] = a + b * dx;\n        residuals[i] = Math.abs(yv[i] - yhat[i]);\n        updateInterval(xv, i + 1, interval);\n      }\n\n      if (iter === maxiters) {\n        break;\n      }\n\n      const medianResidual = median(residuals);\n      if (Math.abs(medianResidual) < epsilon$5) break;\n\n      for (let i = 0, arg, w; i < n; ++i) {\n        arg = residuals[i] / (6 * medianResidual); // default to epsilon (rather than zero) for large deviations\n        // keeping weights tiny but non-zero prevents singularites\n\n        robustWeights[i] = arg >= 1 ? epsilon$5 : (w = 1 - arg * arg) * w;\n      }\n    }\n\n    return output$1(xv, yhat, ux, uy);\n  } // weighting kernel for local regression\n\n\n  function tricube(x) {\n    return (x = 1 - x * x * x) * x * x;\n  } // advance sliding window interval of nearest neighbors\n\n\n  function updateInterval(xv, i, interval) {\n    const val = xv[i];\n    let left = interval[0],\n        right = interval[1] + 1;\n    if (right >= xv.length) return; // step right if distance to new right edge is <= distance to old left edge\n    // step when distance is equal to ensure movement over duplicate x values\n\n    while (i > left && xv[right] - val <= val - xv[left]) {\n      interval[0] = ++left;\n      interval[1] = right;\n      ++right;\n    }\n  } // generate smoothed output points\n  // average points with repeated x values\n\n\n  function output$1(xv, yhat, ux, uy) {\n    const n = xv.length,\n          out = [];\n    let i = 0,\n        cnt = 0,\n        prev = [],\n        v;\n\n    for (; i < n; ++i) {\n      v = xv[i] + ux;\n\n      if (prev[0] === v) {\n        // average output values via online update\n        prev[1] += (yhat[i] - prev[1]) / ++cnt;\n      } else {\n        // add new output point\n        cnt = 0;\n        prev[1] += uy;\n        prev = [v, yhat[i]];\n        out.push(prev);\n      }\n    }\n\n    prev[1] += uy;\n    return out;\n  } // subdivide up to accuracy of 0.1 degrees\n\n\n  const MIN_RADIANS = 0.1 * Math.PI / 180; // Adaptively sample an interpolated function over a domain extent\n\n  function sampleCurve(f, extent, minSteps, maxSteps) {\n    minSteps = minSteps || 25;\n    maxSteps = Math.max(minSteps, maxSteps || 200);\n\n    const point = x => [x, f(x)],\n          minX = extent[0],\n          maxX = extent[1],\n          span = maxX - minX,\n          stop = span / maxSteps,\n          prev = [point(minX)],\n          next = [];\n\n    if (minSteps === maxSteps) {\n      // no adaptation, sample uniform grid directly and return\n      for (let i = 1; i < maxSteps; ++i) {\n        prev.push(point(minX + i / minSteps * span));\n      }\n\n      prev.push(point(maxX));\n      return prev;\n    } else {\n      // sample minimum points on uniform grid\n      // then move on to perform adaptive refinement\n      next.push(point(maxX));\n\n      for (let i = minSteps; --i > 0;) {\n        next.push(point(minX + i / minSteps * span));\n      }\n    }\n\n    let p0 = prev[0],\n        p1 = next[next.length - 1];\n\n    while (p1) {\n      // midpoint for potential curve subdivision\n      const pm = point((p0[0] + p1[0]) / 2);\n\n      if (pm[0] - p0[0] >= stop && angleDelta(p0, pm, p1) > MIN_RADIANS) {\n        // maximum resolution has not yet been met, and\n        // subdivision midpoint sufficiently different from endpoint\n        // save subdivision, push midpoint onto the visitation stack\n        next.push(pm);\n      } else {\n        // subdivision midpoint sufficiently similar to endpoint\n        // skip subdivision, store endpoint, move to next point on the stack\n        p0 = p1;\n        prev.push(p1);\n        next.pop();\n      }\n\n      p1 = next[next.length - 1];\n    }\n\n    return prev;\n  }\n\n  function angleDelta(p, q, r) {\n    const a0 = Math.atan2(r[1] - p[1], r[0] - p[0]),\n          a1 = Math.atan2(q[1] - p[1], q[0] - p[0]);\n    return Math.abs(a0 - a1);\n  }\n\n  function multikey(f) {\n    return x => {\n      const n = f.length;\n      let i = 1,\n          k = String(f[0](x));\n\n      for (; i < n; ++i) {\n        k += '|' + f[i](x);\n      }\n\n      return k;\n    };\n  }\n\n  function groupkey(fields) {\n    return !fields || !fields.length ? function () {\n      return '';\n    } : fields.length === 1 ? fields[0] : multikey(fields);\n  }\n\n  function measureName(op, field, as) {\n    return as || op + (!field ? '' : '_' + field);\n  }\n\n  const noop$4 = () => {};\n\n  const base_op = {\n    init: noop$4,\n    add: noop$4,\n    rem: noop$4,\n    idx: 0\n  };\n  const AggregateOps = {\n    values: {\n      init: m => m.cell.store = true,\n      value: m => m.cell.data.values(),\n      idx: -1\n    },\n    count: {\n      value: m => m.cell.num\n    },\n    __count__: {\n      value: m => m.missing + m.valid\n    },\n    missing: {\n      value: m => m.missing\n    },\n    valid: {\n      value: m => m.valid\n    },\n    sum: {\n      init: m => m.sum = 0,\n      value: m => m.sum,\n      add: (m, v) => m.sum += +v,\n      rem: (m, v) => m.sum -= v\n    },\n    product: {\n      init: m => m.product = 1,\n      value: m => m.valid ? m.product : undefined,\n      add: (m, v) => m.product *= v,\n      rem: (m, v) => m.product /= v\n    },\n    mean: {\n      init: m => m.mean = 0,\n      value: m => m.valid ? m.mean : undefined,\n      add: (m, v) => (m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),\n      rem: (m, v) => (m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)\n    },\n    average: {\n      value: m => m.valid ? m.mean : undefined,\n      req: ['mean'],\n      idx: 1\n    },\n    variance: {\n      init: m => m.dev = 0,\n      value: m => m.valid > 1 ? m.dev / (m.valid - 1) : undefined,\n      add: (m, v) => m.dev += m.mean_d * (v - m.mean),\n      rem: (m, v) => m.dev -= m.mean_d * (v - m.mean),\n      req: ['mean'],\n      idx: 1\n    },\n    variancep: {\n      value: m => m.valid > 1 ? m.dev / m.valid : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stdev: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stdevp: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stderr: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    distinct: {\n      value: m => m.cell.data.distinct(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    ci0: {\n      value: m => m.cell.data.ci0(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    ci1: {\n      value: m => m.cell.data.ci1(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    median: {\n      value: m => m.cell.data.q2(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    q1: {\n      value: m => m.cell.data.q1(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    q3: {\n      value: m => m.cell.data.q3(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    min: {\n      init: m => m.min = undefined,\n      value: m => m.min = Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min,\n      add: (m, v) => {\n        if (v < m.min || m.min === undefined) m.min = v;\n      },\n      rem: (m, v) => {\n        if (v <= m.min) m.min = NaN;\n      },\n      req: ['values'],\n      idx: 4\n    },\n    max: {\n      init: m => m.max = undefined,\n      value: m => m.max = Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max,\n      add: (m, v) => {\n        if (v > m.max || m.max === undefined) m.max = v;\n      },\n      rem: (m, v) => {\n        if (v >= m.max) m.max = NaN;\n      },\n      req: ['values'],\n      idx: 4\n    },\n    argmin: {\n      init: m => m.argmin = undefined,\n      value: m => m.argmin || m.cell.data.argmin(m.get),\n      add: (m, v, t) => {\n        if (v < m.min) m.argmin = t;\n      },\n      rem: (m, v) => {\n        if (v <= m.min) m.argmin = undefined;\n      },\n      req: ['min', 'values'],\n      idx: 3\n    },\n    argmax: {\n      init: m => m.argmax = undefined,\n      value: m => m.argmax || m.cell.data.argmax(m.get),\n      add: (m, v, t) => {\n        if (v > m.max) m.argmax = t;\n      },\n      rem: (m, v) => {\n        if (v >= m.max) m.argmax = undefined;\n      },\n      req: ['max', 'values'],\n      idx: 3\n    }\n  };\n  const ValidAggregateOps = Object.keys(AggregateOps);\n\n  function measure(key, value) {\n    return out => extend$1({\n      name: key,\n      out: out || key\n    }, base_op, value);\n  }\n\n  ValidAggregateOps.forEach(key => {\n    AggregateOps[key] = measure(key, AggregateOps[key]);\n  });\n\n  function createMeasure(op, name) {\n    return AggregateOps[op](name);\n  }\n\n  function compareIndex(a, b) {\n    return a.idx - b.idx;\n  }\n\n  function resolve(agg) {\n    const map = {};\n    agg.forEach(a => map[a.name] = a);\n\n    const getreqs = a => {\n      if (!a.req) return;\n      a.req.forEach(key => {\n        if (!map[key]) getreqs(map[key] = AggregateOps[key]());\n      });\n    };\n\n    agg.forEach(getreqs);\n    return Object.values(map).sort(compareIndex);\n  }\n\n  function init() {\n    this.valid = 0;\n    this.missing = 0;\n\n    this._ops.forEach(op => op.init(this));\n  }\n\n  function add$2(v, t) {\n    if (v == null || v === '') {\n      ++this.missing;\n      return;\n    }\n\n    if (v !== v) return;\n    ++this.valid;\n\n    this._ops.forEach(op => op.add(this, v, t));\n  }\n\n  function rem(v, t) {\n    if (v == null || v === '') {\n      --this.missing;\n      return;\n    }\n\n    if (v !== v) return;\n    --this.valid;\n\n    this._ops.forEach(op => op.rem(this, v, t));\n  }\n\n  function set$3(t) {\n    this._out.forEach(op => t[op.out] = op.value(this));\n\n    return t;\n  }\n\n  function compileMeasures(agg, field) {\n    const get = field || identity$6,\n          ops = resolve(agg),\n          out = agg.slice().sort(compareIndex);\n\n    function ctr(cell) {\n      this._ops = ops;\n      this._out = out;\n      this.cell = cell;\n      this.init();\n    }\n\n    ctr.prototype.init = init;\n    ctr.prototype.add = add$2;\n    ctr.prototype.rem = rem;\n    ctr.prototype.set = set$3;\n    ctr.prototype.get = get;\n    ctr.fields = agg.map(op => op.out);\n    return ctr;\n  }\n\n  function TupleStore(key) {\n    this._key = key ? field$1(key) : tupleid;\n    this.reset();\n  }\n\n  const prototype$1 = TupleStore.prototype;\n\n  prototype$1.reset = function () {\n    this._add = [];\n    this._rem = [];\n    this._ext = null;\n    this._get = null;\n    this._q = null;\n  };\n\n  prototype$1.add = function (v) {\n    this._add.push(v);\n  };\n\n  prototype$1.rem = function (v) {\n    this._rem.push(v);\n  };\n\n  prototype$1.values = function () {\n    this._get = null;\n    if (this._rem.length === 0) return this._add;\n    const a = this._add,\n          r = this._rem,\n          k = this._key,\n          n = a.length,\n          m = r.length,\n          x = Array(n - m),\n          map = {};\n    let i, j, v; // use unique key field to clear removed values\n\n    for (i = 0; i < m; ++i) {\n      map[k(r[i])] = 1;\n    }\n\n    for (i = 0, j = 0; i < n; ++i) {\n      if (map[k(v = a[i])]) {\n        map[k(v)] = 0;\n      } else {\n        x[j++] = v;\n      }\n    }\n\n    this._rem = [];\n    return this._add = x;\n  }; // memoizing statistics methods\n\n\n  prototype$1.distinct = function (get) {\n    const v = this.values(),\n          map = {};\n    let n = v.length,\n        count = 0,\n        s;\n\n    while (--n >= 0) {\n      s = get(v[n]) + '';\n\n      if (!has$1(map, s)) {\n        map[s] = 1;\n        ++count;\n      }\n    }\n\n    return count;\n  };\n\n  prototype$1.extent = function (get) {\n    if (this._get !== get || !this._ext) {\n      const v = this.values(),\n            i = extentIndex(v, get);\n      this._ext = [v[i[0]], v[i[1]]];\n      this._get = get;\n    }\n\n    return this._ext;\n  };\n\n  prototype$1.argmin = function (get) {\n    return this.extent(get)[0] || {};\n  };\n\n  prototype$1.argmax = function (get) {\n    return this.extent(get)[1] || {};\n  };\n\n  prototype$1.min = function (get) {\n    const m = this.extent(get)[0];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype$1.max = function (get) {\n    const m = this.extent(get)[1];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype$1.quartile = function (get) {\n    if (this._get !== get || !this._q) {\n      this._q = quartiles(this.values(), get);\n      this._get = get;\n    }\n\n    return this._q;\n  };\n\n  prototype$1.q1 = function (get) {\n    return this.quartile(get)[0];\n  };\n\n  prototype$1.q2 = function (get) {\n    return this.quartile(get)[1];\n  };\n\n  prototype$1.q3 = function (get) {\n    return this.quartile(get)[2];\n  };\n\n  prototype$1.ci = function (get) {\n    if (this._get !== get || !this._ci) {\n      this._ci = bootstrapCI(this.values(), 1000, 0.05, get);\n      this._get = get;\n    }\n\n    return this._ci;\n  };\n\n  prototype$1.ci0 = function (get) {\n    return this.ci(get)[0];\n  };\n\n  prototype$1.ci1 = function (get) {\n    return this.ci(get)[1];\n  };\n  /**\n   * Group-by aggregation operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n   * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n   * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n   * @param {boolean} [params.cross=false] - A flag indicating that the full\n   *   cross-product of groupby values should be generated, including empty cells.\n   *   If true, the drop parameter is ignored and empty cells are retained.\n   * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n   */\n\n\n  function Aggregate$1(params) {\n    Transform.call(this, null, params);\n    this._adds = []; // array of added output tuples\n\n    this._mods = []; // array of modified output tuples\n\n    this._alen = 0; // number of active added tuples\n\n    this._mlen = 0; // number of active modified tuples\n\n    this._drop = true; // should empty aggregation cells be removed\n\n    this._cross = false; // produce full cross-product of group-by values\n\n    this._dims = []; // group-by dimension accessors\n\n    this._dnames = []; // group-by dimension names\n\n    this._measures = []; // collection of aggregation monoids\n\n    this._countOnly = false; // flag indicating only count aggregation\n\n    this._counts = null; // collection of count fields\n\n    this._prev = null; // previous aggregation cells\n\n    this._inputs = null; // array of dependent input tuple field names\n\n    this._outputs = null; // array of output tuple field names\n  }\n\n  Aggregate$1.Definition = {\n    'type': 'Aggregate',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidAggregateOps\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'drop',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'cross',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  inherits(Aggregate$1, Transform, {\n    transform(_, pulse) {\n      const aggr = this,\n            out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n            mod = _.modified();\n\n      aggr.stamp = out.stamp;\n\n      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n        aggr._prev = aggr.value;\n        aggr.value = mod ? aggr.init(_) : {};\n        pulse.visit(pulse.SOURCE, t => aggr.add(t));\n      } else {\n        aggr.value = aggr.value || aggr.init(_);\n        pulse.visit(pulse.REM, t => aggr.rem(t));\n        pulse.visit(pulse.ADD, t => aggr.add(t));\n      } // Indicate output fields and return aggregate tuples.\n\n\n      out.modifies(aggr._outputs); // Should empty cells be dropped?\n\n      aggr._drop = _.drop !== false; // If domain cross-product requested, generate empty cells as needed\n      // and ensure that empty cells are not dropped\n\n      if (_.cross && aggr._dims.length > 1) {\n        aggr._drop = false;\n        aggr.cross();\n      }\n\n      if (pulse.clean() && aggr._drop) {\n        out.clean(true).runAfter(() => this.clean());\n      }\n\n      return aggr.changes(out);\n    },\n\n    cross() {\n      const aggr = this,\n            curr = aggr.value,\n            dims = aggr._dnames,\n            vals = dims.map(() => ({})),\n            n = dims.length; // collect all group-by domain values\n\n      function collect(cells) {\n        let key, i, t, v;\n\n        for (key in cells) {\n          t = cells[key].tuple;\n\n          for (i = 0; i < n; ++i) {\n            vals[i][v = t[dims[i]]] = v;\n          }\n        }\n      }\n\n      collect(aggr._prev);\n      collect(curr); // iterate over key cross-product, create cells as needed\n\n      function generate(base, tuple, index) {\n        const name = dims[index],\n              v = vals[index++];\n\n        for (const k in v) {\n          const key = base ? base + '|' + k : k;\n          tuple[name] = v[k];\n          if (index < n) generate(key, tuple, index);else if (!curr[key]) aggr.cell(key, tuple);\n        }\n      }\n\n      generate('', {}, 0);\n    },\n\n    init(_) {\n      // initialize input and output fields\n      const inputs = this._inputs = [],\n            outputs = this._outputs = [],\n            inputMap = {};\n\n      function inputVisit(get) {\n        const fields = array$5(accessorFields(get)),\n              n = fields.length;\n        let i = 0,\n            f;\n\n        for (; i < n; ++i) {\n          if (!inputMap[f = fields[i]]) {\n            inputMap[f] = 1;\n            inputs.push(f);\n          }\n        }\n      } // initialize group-by dimensions\n\n\n      this._dims = array$5(_.groupby);\n      this._dnames = this._dims.map(d => {\n        const dname = accessorName(d);\n        inputVisit(d);\n        outputs.push(dname);\n        return dname;\n      });\n      this.cellkey = _.key ? _.key : groupkey(this._dims); // initialize aggregate measures\n\n      this._countOnly = true;\n      this._counts = [];\n      this._measures = [];\n      const fields = _.fields || [null],\n            ops = _.ops || ['count'],\n            as = _.as || [],\n            n = fields.length,\n            map = {};\n      let field, op, m, mname, outname, i;\n\n      if (n !== ops.length) {\n        error('Unmatched number of fields and aggregate ops.');\n      }\n\n      for (i = 0; i < n; ++i) {\n        field = fields[i];\n        op = ops[i];\n\n        if (field == null && op !== 'count') {\n          error('Null aggregate field specified.');\n        }\n\n        mname = accessorName(field);\n        outname = measureName(op, mname, as[i]);\n        outputs.push(outname);\n\n        if (op === 'count') {\n          this._counts.push(outname);\n\n          continue;\n        }\n\n        m = map[mname];\n\n        if (!m) {\n          inputVisit(field);\n          m = map[mname] = [];\n          m.field = field;\n\n          this._measures.push(m);\n        }\n\n        if (op !== 'count') this._countOnly = false;\n        m.push(createMeasure(op, outname));\n      }\n\n      this._measures = this._measures.map(m => compileMeasures(m, m.field));\n      return {}; // aggregation cells (this.value)\n    },\n\n    // -- Cell Management -----\n    cellkey: groupkey(),\n\n    cell(key, t) {\n      let cell = this.value[key];\n\n      if (!cell) {\n        cell = this.value[key] = this.newcell(key, t);\n        this._adds[this._alen++] = cell;\n      } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n        cell.stamp = this.stamp;\n        this._adds[this._alen++] = cell;\n      } else if (cell.stamp < this.stamp) {\n        cell.stamp = this.stamp;\n        this._mods[this._mlen++] = cell;\n      }\n\n      return cell;\n    },\n\n    newcell(key, t) {\n      const cell = {\n        key: key,\n        num: 0,\n        agg: null,\n        tuple: this.newtuple(t, this._prev && this._prev[key]),\n        stamp: this.stamp,\n        store: false\n      };\n\n      if (!this._countOnly) {\n        const measures = this._measures,\n              n = measures.length;\n        cell.agg = Array(n);\n\n        for (let i = 0; i < n; ++i) {\n          cell.agg[i] = new measures[i](cell);\n        }\n      }\n\n      if (cell.store) {\n        cell.data = new TupleStore();\n      }\n\n      return cell;\n    },\n\n    newtuple(t, p) {\n      const names = this._dnames,\n            dims = this._dims,\n            n = dims.length,\n            x = {};\n\n      for (let i = 0; i < n; ++i) {\n        x[names[i]] = dims[i](t);\n      }\n\n      return p ? replace$1(p.tuple, x) : ingest$1(x);\n    },\n\n    clean() {\n      const cells = this.value;\n\n      for (const key in cells) {\n        if (cells[key].num === 0) {\n          delete cells[key];\n        }\n      }\n    },\n\n    // -- Process Tuples -----\n    add(t) {\n      const key = this.cellkey(t),\n            cell = this.cell(key, t);\n      cell.num += 1;\n      if (this._countOnly) return;\n      if (cell.store) cell.data.add(t);\n      const agg = cell.agg;\n\n      for (let i = 0, n = agg.length; i < n; ++i) {\n        agg[i].add(agg[i].get(t), t);\n      }\n    },\n\n    rem(t) {\n      const key = this.cellkey(t),\n            cell = this.cell(key, t);\n      cell.num -= 1;\n      if (this._countOnly) return;\n      if (cell.store) cell.data.rem(t);\n      const agg = cell.agg;\n\n      for (let i = 0, n = agg.length; i < n; ++i) {\n        agg[i].rem(agg[i].get(t), t);\n      }\n    },\n\n    celltuple(cell) {\n      const tuple = cell.tuple,\n            counts = this._counts; // consolidate stored values\n\n      if (cell.store) {\n        cell.data.values();\n      } // update tuple properties\n\n\n      for (let i = 0, n = counts.length; i < n; ++i) {\n        tuple[counts[i]] = cell.num;\n      }\n\n      if (!this._countOnly) {\n        const agg = cell.agg;\n\n        for (let i = 0, n = agg.length; i < n; ++i) {\n          agg[i].set(tuple);\n        }\n      }\n\n      return tuple;\n    },\n\n    changes(out) {\n      const adds = this._adds,\n            mods = this._mods,\n            prev = this._prev,\n            drop = this._drop,\n            add = out.add,\n            rem = out.rem,\n            mod = out.mod;\n      let cell, key, i, n;\n      if (prev) for (key in prev) {\n        cell = prev[key];\n        if (!drop || cell.num) rem.push(cell.tuple);\n      }\n\n      for (i = 0, n = this._alen; i < n; ++i) {\n        add.push(this.celltuple(adds[i]));\n        adds[i] = null; // for garbage collection\n      }\n\n      for (i = 0, n = this._mlen; i < n; ++i) {\n        cell = mods[i];\n        (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n        mods[i] = null; // for garbage collection\n      }\n\n      this._alen = this._mlen = 0; // reset list of active cells\n\n      this._prev = null;\n      return out;\n    }\n\n  });\n  const EPSILON$1 = 1e-14;\n  /**\n   * Generates a binning function for discretizing data.\n   * @constructor\n   * @param {object} params - The parameters for this operator. The\n   *   provided values should be valid options for the {@link bin} function.\n   * @param {function(object): *} params.field - The data field to bin.\n   */\n\n  function Bin(params) {\n    Transform.call(this, null, params);\n  }\n\n  Bin.Definition = {\n    'type': 'Bin',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'interval',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'anchor',\n      'type': 'number'\n    }, {\n      'name': 'maxbins',\n      'type': 'number',\n      'default': 20\n    }, {\n      'name': 'base',\n      'type': 'number',\n      'default': 10\n    }, {\n      'name': 'divide',\n      'type': 'number',\n      'array': true,\n      'default': [5, 2]\n    }, {\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2,\n      'required': true\n    }, {\n      'name': 'span',\n      'type': 'number'\n    }, {\n      'name': 'step',\n      'type': 'number'\n    }, {\n      'name': 'steps',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'minstep',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'nice',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'name',\n      'type': 'string'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['bin0', 'bin1']\n    }]\n  };\n  inherits(Bin, Transform, {\n    transform(_, pulse) {\n      const band = _.interval !== false,\n            bins = this._bins(_),\n            start = bins.start,\n            step = bins.step,\n            as = _.as || ['bin0', 'bin1'],\n            b0 = as[0],\n            b1 = as[1];\n\n      let flag;\n\n      if (_.modified()) {\n        pulse = pulse.reflow(true);\n        flag = pulse.SOURCE;\n      } else {\n        flag = pulse.modified(accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n      }\n\n      pulse.visit(flag, band ? t => {\n        const v = bins(t); // minimum bin value (inclusive)\n\n        t[b0] = v; // maximum bin value (exclusive)\n        // use convoluted math for better floating point agreement\n        // see https://github.com/vega/vega/issues/830\n        // infinite values propagate through this formula! #2227\n\n        t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n      } : t => t[b0] = bins(t));\n      return pulse.modifies(band ? as : b0);\n    },\n\n    _bins(_) {\n      if (this.value && !_.modified()) {\n        return this.value;\n      }\n\n      const field = _.field,\n            bins = bin(_),\n            step = bins.step;\n      let start = bins.start,\n          stop = start + Math.ceil((bins.stop - start) / step) * step,\n          a,\n          d;\n\n      if ((a = _.anchor) != null) {\n        d = a - (start + step * Math.floor((a - start) / step));\n        start += d;\n        stop += d;\n      }\n\n      const f = function (t) {\n        let v = toNumber(field(t));\n        return v == null ? null : v < start ? -Infinity : v > stop ? +Infinity : (v = Math.max(start, Math.min(v, stop - step)), start + step * Math.floor(EPSILON$1 + (v - start) / step));\n      };\n\n      f.start = start;\n      f.stop = bins.stop;\n      f.step = step;\n      return this.value = accessor(f, accessorFields(field), _.name || 'bin_' + accessorName(field));\n    }\n\n  });\n\n  function SortedList(idFunc, source, input) {\n    const $ = idFunc;\n    let data = source || [],\n        add = input || [],\n        rem = {},\n        cnt = 0;\n    return {\n      add: t => add.push(t),\n      remove: t => rem[$(t)] = ++cnt,\n      size: () => data.length,\n      data: (compare, resort) => {\n        if (cnt) {\n          data = data.filter(t => !rem[$(t)]);\n          rem = {};\n          cnt = 0;\n        }\n\n        if (resort && compare) {\n          data.sort(compare);\n        }\n\n        if (add.length) {\n          data = compare ? merge$3(compare, data, add.sort(compare)) : data.concat(add);\n          add = [];\n        }\n\n        return data;\n      }\n    };\n  }\n  /**\n   * Collects all data tuples that pass through this operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for additionally sorting the collected tuples.\n   */\n\n\n  function Collect$1(params) {\n    Transform.call(this, [], params);\n  }\n\n  Collect$1.Definition = {\n    'type': 'Collect',\n    'metadata': {\n      'source': true\n    },\n    'params': [{\n      'name': 'sort',\n      'type': 'compare'\n    }]\n  };\n  inherits(Collect$1, Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.ALL),\n            list = SortedList(tupleid, this.value, out.materialize(out.ADD).add),\n            sort = _.sort,\n            mod = pulse.changed() || sort && (_.modified('sort') || pulse.modified(sort.fields));\n      out.visit(out.REM, list.remove);\n      this.modified(mod);\n      this.value = out.source = list.data(stableCompare(sort), mod); // propagate tree root if defined\n\n      if (pulse.source && pulse.source.root) {\n        this.value.root = pulse.source.root;\n      }\n\n      return out;\n    }\n\n  });\n  /**\n   * Generates a comparator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string|function>} params.fields - The fields to compare.\n   * @param {Array<string>} [params.orders] - The sort orders.\n   *   Each entry should be one of \"ascending\" (default) or \"descending\".\n   */\n\n  function Compare$1(params) {\n    Operator.call(this, null, update$5, params);\n  }\n\n  inherits(Compare$1, Operator);\n\n  function update$5(_) {\n    return this.value && !_.modified() ? this.value : compare$1(_.fields, _.orders);\n  }\n  /**\n   * Count regexp-defined pattern occurrences in a text field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the text field.\n   * @param {string} [params.pattern] - RegExp string defining the text pattern.\n   * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n   * @param {string} [params.stopwords] - RegExp string of words to ignore.\n   */\n\n\n  function CountPattern(params) {\n    Transform.call(this, null, params);\n  }\n\n  CountPattern.Definition = {\n    'type': 'CountPattern',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'case',\n      'type': 'enum',\n      'values': ['upper', 'lower', 'mixed'],\n      'default': 'mixed'\n    }, {\n      'name': 'pattern',\n      'type': 'string',\n      'default': '[\\\\w\"]+'\n    }, {\n      'name': 'stopwords',\n      'type': 'string',\n      'default': ''\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['text', 'count']\n    }]\n  };\n\n  function tokenize(text, tcase, match) {\n    switch (tcase) {\n      case 'upper':\n        text = text.toUpperCase();\n        break;\n\n      case 'lower':\n        text = text.toLowerCase();\n        break;\n    }\n\n    return text.match(match);\n  }\n\n  inherits(CountPattern, Transform, {\n    transform(_, pulse) {\n      const process = update => tuple => {\n        var tokens = tokenize(get(tuple), _.case, match) || [],\n            t;\n\n        for (var i = 0, n = tokens.length; i < n; ++i) {\n          if (!stop.test(t = tokens[i])) update(t);\n        }\n      };\n\n      const init = this._parameterCheck(_, pulse),\n            counts = this._counts,\n            match = this._match,\n            stop = this._stop,\n            get = _.field,\n            as = _.as || ['text', 'count'],\n            add = process(t => counts[t] = 1 + (counts[t] || 0)),\n            rem = process(t => counts[t] -= 1);\n\n      if (init) {\n        pulse.visit(pulse.SOURCE, add);\n      } else {\n        pulse.visit(pulse.ADD, add);\n        pulse.visit(pulse.REM, rem);\n      }\n\n      return this._finish(pulse, as); // generate output tuples\n    },\n\n    _parameterCheck(_, pulse) {\n      let init = false;\n\n      if (_.modified('stopwords') || !this._stop) {\n        this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n        init = true;\n      }\n\n      if (_.modified('pattern') || !this._match) {\n        this._match = new RegExp(_.pattern || '[\\\\w\\']+', 'g');\n        init = true;\n      }\n\n      if (_.modified('field') || pulse.modified(_.field.fields)) {\n        init = true;\n      }\n\n      if (init) this._counts = {};\n      return init;\n    },\n\n    _finish(pulse, as) {\n      const counts = this._counts,\n            tuples = this._tuples || (this._tuples = {}),\n            text = as[0],\n            count = as[1],\n            out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n      let w, t, c;\n\n      for (w in counts) {\n        t = tuples[w];\n        c = counts[w] || 0;\n\n        if (!t && c) {\n          tuples[w] = t = ingest$1({});\n          t[text] = w;\n          t[count] = c;\n          out.add.push(t);\n        } else if (c === 0) {\n          if (t) out.rem.push(t);\n          counts[w] = null;\n          tuples[w] = null;\n        } else if (t[count] !== c) {\n          t[count] = c;\n          out.mod.push(t);\n        }\n      }\n\n      return out.modifies(as);\n    }\n\n  });\n  /**\n   * Perform a cross-product of a tuple stream with itself.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object):boolean} [params.filter] - An optional filter\n   *   function for selectively including tuples in the cross product.\n   * @param {Array<string>} [params.as] - The names of the output fields.\n   */\n\n  function Cross(params) {\n    Transform.call(this, null, params);\n  }\n\n  Cross.Definition = {\n    'type': 'Cross',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'filter',\n      'type': 'expr'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['a', 'b']\n    }]\n  };\n  inherits(Cross, Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            as = _.as || ['a', 'b'],\n            a = as[0],\n            b = as[1],\n            reset = !this.value || pulse.changed(pulse.ADD_REM) || _.modified('as') || _.modified('filter');\n\n      let data = this.value;\n\n      if (reset) {\n        if (data) out.rem = data;\n        data = pulse.materialize(pulse.SOURCE).source;\n        out.add = this.value = cross(data, a, b, _.filter || truthy);\n      } else {\n        out.mod = data;\n      }\n\n      out.source = this.value;\n      return out.modifies(as);\n    }\n\n  });\n\n  function cross(input, a, b, filter) {\n    var data = [],\n        t = {},\n        n = input.length,\n        i = 0,\n        j,\n        left;\n\n    for (; i < n; ++i) {\n      t[a] = left = input[i];\n\n      for (j = 0; j < n; ++j) {\n        t[b] = input[j];\n\n        if (filter(t)) {\n          data.push(ingest$1(t));\n          t = {};\n          t[a] = left;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  const Distributions = {\n    kde: kde,\n    mixture: mixture$1,\n    normal: gaussian,\n    lognormal: lognormal,\n    uniform: uniform\n  };\n  const DISTRIBUTIONS = 'distributions',\n        FUNCTION = 'function',\n        FIELD = 'field';\n  /**\n   * Parse a parameter object for a probability distribution.\n   * @param {object} def - The distribution parameter object.\n   * @param {function():Array<object>} - A method for requesting\n   *   source data. Used for distributions (such as KDE) that\n   *   require sample data points. This method will only be\n   *   invoked if the 'from' parameter for a target data source\n   *   is not provided. Typically this method returns backing\n   *   source data for a Pulse object.\n   * @return {object} - The output distribution object.\n   */\n\n  function parse$3(def, data) {\n    const func = def[FUNCTION];\n\n    if (!has$1(Distributions, func)) {\n      error('Unknown distribution function: ' + func);\n    }\n\n    const d = Distributions[func]();\n\n    for (const name in def) {\n      // if data field, extract values\n      if (name === FIELD) {\n        d.data((def.from || data()).map(def[name]));\n      } // if distribution mixture, recurse to parse each definition\n      else if (name === DISTRIBUTIONS) {\n          d[name](def[name].map(_ => parse$3(_, data)));\n        } // otherwise, simply set the parameter\n        else if (typeof d[name] === FUNCTION) {\n            d[name](def[name]);\n          }\n    }\n\n    return d;\n  }\n  /**\n   * Grid sample points for a probability density. Given a distribution and\n   * a sampling extent, will generate points suitable for plotting either\n   * PDF (probability density function) or CDF (cumulative distribution\n   * function) curves.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.distribution - The probability distribution. This\n   *   is an object parameter dependent on the distribution type.\n   * @param {string} [params.method='pdf'] - The distribution method to sample.\n   *   One of 'pdf' or 'cdf'.\n   * @param {Array<number>} [params.extent] - The [min, max] extent over which\n   *   to sample the distribution. This argument is required in most cases, but\n   *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n   *   that returns numerical sample points from which the extent can be deduced.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n\n\n  function Density(params) {\n    Transform.call(this, null, params);\n  }\n\n  const distributions = [{\n    'key': {\n      'function': 'normal'\n    },\n    'params': [{\n      'name': 'mean',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'stdev',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'lognormal'\n    },\n    'params': [{\n      'name': 'mean',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'stdev',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'uniform'\n    },\n    'params': [{\n      'name': 'min',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'max',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'kde'\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'from',\n      'type': 'data'\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'default': 0\n    }]\n  }];\n  const mixture = {\n    'key': {\n      'function': 'mixture'\n    },\n    'params': [{\n      'name': 'distributions',\n      'type': 'param',\n      'array': true,\n      'params': distributions\n    }, {\n      'name': 'weights',\n      'type': 'number',\n      'array': true\n    }]\n  };\n  Density.Definition = {\n    'type': 'Density',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'steps',\n      'type': 'number'\n    }, {\n      'name': 'minsteps',\n      'type': 'number',\n      'default': 25\n    }, {\n      'name': 'maxsteps',\n      'type': 'number',\n      'default': 200\n    }, {\n      'name': 'method',\n      'type': 'string',\n      'default': 'pdf',\n      'values': ['pdf', 'cdf']\n    }, {\n      'name': 'distribution',\n      'type': 'param',\n      'params': distributions.concat(mixture)\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['value', 'density']\n    }]\n  };\n  inherits(Density, Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n      if (!this.value || pulse.changed() || _.modified()) {\n        const dist = parse$3(_.distribution, source$1(pulse)),\n              minsteps = _.steps || _.minsteps || 25,\n              maxsteps = _.steps || _.maxsteps || 200;\n        let method = _.method || 'pdf';\n\n        if (method !== 'pdf' && method !== 'cdf') {\n          error('Invalid density method: ' + method);\n        }\n\n        if (!_.extent && !dist.data) {\n          error('Missing density extent parameter.');\n        }\n\n        method = dist[method];\n        const as = _.as || ['value', 'density'],\n              domain = _.extent || extent(dist.data()),\n              values = sampleCurve(method, domain, minsteps, maxsteps).map(v => {\n          const tuple = {};\n          tuple[as[0]] = v[0];\n          tuple[as[1]] = v[1];\n          return ingest$1(tuple);\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n\n      return out;\n    }\n\n  });\n\n  function source$1(pulse) {\n    return () => pulse.materialize(pulse.SOURCE).source;\n  }\n\n  function fieldNames(fields, as) {\n    if (!fields) return null;\n    return fields.map((f, i) => as[i] || accessorName(f));\n  }\n\n  function partition$1$1(data, groupby, field) {\n    const groups = [],\n          get = f => f(t);\n\n    let map, i, n, t, k, g; // partition data points into groups\n\n    if (groupby == null) {\n      groups.push(data.map(field));\n    } else {\n      for (map = {}, i = 0, n = data.length; i < n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n\n        if (!g) {\n          map[k] = g = [];\n          g.dims = k;\n          groups.push(g);\n        }\n\n        g.push(field(t));\n      }\n    }\n\n    return groups;\n  }\n\n  const Output$5 = 'bin';\n  /**\n   * Dot density binning for dot plot construction.\n   * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n   * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to bin.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {number} [params.step] - The step size (bin width) within which dots should be\n   *   stacked. Defaults to 1/30 of the extent of the data *field*.\n   * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n   *   stacks should be smoothed to reduce variance.\n   */\n\n  function DotBin(params) {\n    Transform.call(this, null, params);\n  }\n\n  DotBin.Definition = {\n    'type': 'DotBin',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number'\n    }, {\n      'name': 'smooth',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': Output$5\n    }]\n  };\n\n  const autostep = (data, field) => span(extent(data, field)) / 30;\n\n  inherits(DotBin, Transform, {\n    transform(_, pulse) {\n      if (this.value && !(_.modified() || pulse.changed())) {\n        return pulse; // early exit\n      }\n\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition$1$1(pulse.source, _.groupby, identity$6),\n            smooth = _.smooth || false,\n            field = _.field,\n            step = _.step || autostep(source, field),\n            sort = stableCompare((a, b) => field(a) - field(b)),\n            as = _.as || Output$5,\n            n = groups.length; // compute dotplot bins per group\n\n      let min = Infinity,\n          max = -Infinity,\n          i = 0,\n          j;\n\n      for (; i < n; ++i) {\n        const g = groups[i].sort(sort);\n        j = -1;\n\n        for (const v of dotbin(g, step, smooth, field)) {\n          if (v < min) min = v;\n          if (v > max) max = v;\n          g[++j][as] = v;\n        }\n      }\n\n      this.value = {\n        start: min,\n        stop: max,\n        step: step\n      };\n      return pulse.reflow(true).modifies(as);\n    }\n\n  });\n  /**\n   * Wraps an expression function with access to external parameters.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function} params.expr - The expression function. The\n   *  function should accept both a datum and a parameter object.\n   *  This operator's value will be a new function that wraps the\n   *  expression function with access to this operator's parameters.\n   */\n\n  function Expression$1(params) {\n    Operator.call(this, null, update$4, params);\n    this.modified(true);\n  }\n\n  inherits(Expression$1, Operator);\n\n  function update$4(_) {\n    const expr = _.expr;\n    return this.value && !_.modified('expr') ? this.value : accessor(datum => expr(datum, _), accessorFields(expr), accessorName(expr));\n  }\n  /**\n   * Computes extents (min/max) for a data field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field over which to compute extends.\n   */\n\n\n  function Extent(params) {\n    Transform.call(this, [undefined, undefined], params);\n  }\n\n  Extent.Definition = {\n    'type': 'Extent',\n    'metadata': {},\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }]\n  };\n  inherits(Extent, Transform, {\n    transform(_, pulse) {\n      const extent = this.value,\n            field = _.field,\n            mod = pulse.changed() || pulse.modified(field.fields) || _.modified('field');\n\n      let min = extent[0],\n          max = extent[1];\n\n      if (mod || min == null) {\n        min = +Infinity;\n        max = -Infinity;\n      }\n\n      pulse.visit(mod ? pulse.SOURCE : pulse.ADD, t => {\n        const v = toNumber(field(t));\n\n        if (v != null) {\n          // NaNs will fail all comparisons!\n          if (v < min) min = v;\n          if (v > max) max = v;\n        }\n      });\n\n      if (!Number.isFinite(min) || !Number.isFinite(max)) {\n        let name = accessorName(field);\n        if (name) name = ` for field \"${name}\"`;\n        pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);\n        min = max = undefined;\n      }\n\n      this.value = [min, max];\n    }\n\n  });\n  /**\n   * Provides a bridge between a parent transform and a target subflow that\n   * consumes only a subset of the tuples that pass through the parent.\n   * @constructor\n   * @param {Pulse} pulse - A pulse to use as the value of this operator.\n   * @param {Transform} parent - The parent transform (typically a Facet instance).\n   */\n\n  function Subflow(pulse, parent) {\n    Operator.call(this, pulse);\n    this.parent = parent;\n    this.count = 0;\n  }\n\n  inherits(Subflow, Operator, {\n    /**\n     * Routes pulses from this subflow to a target transform.\n     * @param {Transform} target - A transform that receives the subflow of tuples.\n     */\n    connect(target) {\n      this.detachSubflow = target.detachSubflow;\n      this.targets().add(target);\n      return target.source = this;\n    },\n\n    /**\n     * Add an 'add' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being added.\n     */\n    add(t) {\n      this.count += 1;\n      this.value.add.push(t);\n    },\n\n    /**\n     * Add a 'rem' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being removed.\n     */\n    rem(t) {\n      this.count -= 1;\n      this.value.rem.push(t);\n    },\n\n    /**\n     * Add a 'mod' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being modified.\n     */\n    mod(t) {\n      this.value.mod.push(t);\n    },\n\n    /**\n     * Re-initialize this operator's pulse value.\n     * @param {Pulse} pulse - The pulse to copy from.\n     * @see Pulse.init\n     */\n    init(pulse) {\n      this.value.init(pulse, pulse.NO_SOURCE);\n    },\n\n    /**\n     * Evaluate this operator. This method overrides the\n     * default behavior to simply return the contained pulse value.\n     * @return {Pulse}\n     */\n    evaluate() {\n      // assert: this.value.stamp === pulse.stamp\n      return this.value;\n    }\n\n  });\n  /**\n   * Facets a dataflow into a set of subflows based on a key.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): *} params.key - The key field to facet by.\n   */\n\n  function Facet$1(params) {\n    Transform.call(this, {}, params);\n    this._keys = fastmap(); // cache previously calculated key values\n    // keep track of active subflows, use as targets array for listeners\n    // this allows us to limit propagation to only updated subflows\n\n    const a = this._targets = [];\n    a.active = 0;\n\n    a.forEach = f => {\n      for (let i = 0, n = a.active; i < n; ++i) {\n        f(a[i], i, a);\n      }\n    };\n  }\n\n  inherits(Facet$1, Transform, {\n    activate(flow) {\n      this._targets[this._targets.active++] = flow;\n    },\n\n    // parent argument provided by PreFacet subclass\n    subflow(key, flow, pulse, parent) {\n      const flows = this.value;\n      let sf = has$1(flows, key) && flows[key],\n          df,\n          p;\n\n      if (!sf) {\n        p = parent || (p = this._group[key]) && p.tuple;\n        df = pulse.dataflow;\n        sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);\n        df.add(sf).connect(flow(df, key, p));\n        flows[key] = sf;\n        this.activate(sf);\n      } else if (sf.value.stamp < pulse.stamp) {\n        sf.init(pulse);\n        this.activate(sf);\n      }\n\n      return sf;\n    },\n\n    clean() {\n      const flows = this.value;\n      let detached = 0;\n\n      for (const key in flows) {\n        if (flows[key].count === 0) {\n          const detach = flows[key].detachSubflow;\n          if (detach) detach();\n          delete flows[key];\n          ++detached;\n        }\n      } // remove inactive targets from the active targets array\n\n\n      if (detached) {\n        const active = this._targets.filter(sf => sf && sf.count > 0);\n\n        this.initTargets(active);\n      }\n    },\n\n    initTargets(act) {\n      const a = this._targets,\n            n = a.length,\n            m = act ? act.length : 0;\n      let i = 0;\n\n      for (; i < m; ++i) {\n        a[i] = act[i];\n      }\n\n      for (; i < n && a[i] != null; ++i) {\n        a[i] = null; // ensure old flows can be garbage collected\n      }\n\n      a.active = m;\n    },\n\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            key = _.key,\n            flow = _.subflow,\n            cache = this._keys,\n            rekey = _.modified('key'),\n            subflow = key => this.subflow(key, flow, pulse);\n\n      this._group = _.group || {};\n      this.initTargets(); // reset list of active subflows\n\n      pulse.visit(pulse.REM, t => {\n        const id = tupleid(t),\n              k = cache.get(id);\n\n        if (k !== undefined) {\n          cache.delete(id);\n          subflow(k).rem(t);\n        }\n      });\n      pulse.visit(pulse.ADD, t => {\n        const k = key(t);\n        cache.set(tupleid(t), k);\n        subflow(k).add(t);\n      });\n\n      if (rekey || pulse.modified(key.fields)) {\n        pulse.visit(pulse.MOD, t => {\n          const id = tupleid(t),\n                k0 = cache.get(id),\n                k1 = key(t);\n\n          if (k0 === k1) {\n            subflow(k1).mod(t);\n          } else {\n            cache.set(id, k1);\n            subflow(k0).rem(t);\n            subflow(k1).add(t);\n          }\n        });\n      } else if (pulse.changed(pulse.MOD)) {\n        pulse.visit(pulse.MOD, t => {\n          subflow(cache.get(tupleid(t))).mod(t);\n        });\n      }\n\n      if (rekey) {\n        pulse.visit(pulse.REFLOW, t => {\n          const id = tupleid(t),\n                k0 = cache.get(id),\n                k1 = key(t);\n\n          if (k0 !== k1) {\n            cache.set(id, k1);\n            subflow(k0).rem(t);\n            subflow(k1).add(t);\n          }\n        });\n      }\n\n      if (pulse.clean()) {\n        df.runAfter(() => {\n          this.clean();\n          cache.clean();\n        });\n      } else if (cache.empty > df.cleanThreshold) {\n        df.runAfter(cache.clean);\n      }\n\n      return pulse;\n    }\n\n  });\n  /**\n   * Generates one or more field accessor functions.\n   * If the 'name' parameter is an array, an array of field accessors\n   * will be created and the 'as' parameter will be ignored.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.name - The field name(s) to access.\n   * @param {string} params.as - The accessor function name.\n   */\n\n  function Field$1(params) {\n    Operator.call(this, null, update$3, params);\n  }\n\n  inherits(Field$1, Operator);\n\n  function update$3(_) {\n    return this.value && !_.modified() ? this.value : isArray(_.name) ? array$5(_.name).map(f => field$1(f)) : field$1(_.name, _.as);\n  }\n  /**\n   * Filters data tuples according to a predicate function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The predicate expression function\n   *   that determines a tuple's filter status. Truthy values pass the filter.\n   */\n\n\n  function Filter(params) {\n    Transform.call(this, fastmap(), params);\n  }\n\n  Filter.Definition = {\n    'type': 'Filter',\n    'metadata': {\n      'changes': true\n    },\n    'params': [{\n      'name': 'expr',\n      'type': 'expr',\n      'required': true\n    }]\n  };\n  inherits(Filter, Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            cache = this.value,\n            // cache ids of filtered tuples\n      output = pulse.fork(),\n            add = output.add,\n            rem = output.rem,\n            mod = output.mod,\n            test = _.expr;\n      let isMod = true;\n      pulse.visit(pulse.REM, t => {\n        const id = tupleid(t);\n        if (!cache.has(id)) rem.push(t);else cache.delete(id);\n      });\n      pulse.visit(pulse.ADD, t => {\n        if (test(t, _)) add.push(t);else cache.set(tupleid(t), 1);\n      });\n\n      function revisit(t) {\n        const id = tupleid(t),\n              b = test(t, _),\n              s = cache.get(id);\n\n        if (b && s) {\n          cache.delete(id);\n          add.push(t);\n        } else if (!b && !s) {\n          cache.set(id, 1);\n          rem.push(t);\n        } else if (isMod && b && !s) {\n          mod.push(t);\n        }\n      }\n\n      pulse.visit(pulse.MOD, revisit);\n\n      if (_.modified()) {\n        isMod = false;\n        pulse.visit(pulse.REFLOW, revisit);\n      }\n\n      if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n      return output;\n    }\n\n  });\n  /**\n   * Flattens array-typed field values into new data objects.\n   * If multiple fields are specified, they are treated as parallel arrays,\n   * with output values included for each matching index (or null if missing).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of field\n   *   accessors for the tuple fields that should be flattened.\n   * @param {string} [params.index] - Optional output field name for index\n   *   value. If unspecified, no index field is included in the output.\n   * @param {Array<string>} [params.as] - Output field names for flattened\n   *   array fields. Any unspecified fields will use the field name provided\n   *   by the fields accessors.\n   */\n\n  function Flatten(params) {\n    Transform.call(this, [], params);\n  }\n\n  Flatten.Definition = {\n    'type': 'Flatten',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'index',\n      'type': 'string'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }]\n  };\n  inherits(Flatten, Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            as = fieldNames(fields, _.as || []),\n            index = _.index || null,\n            m = as.length; // remove any previous results\n\n      out.rem = this.value; // generate flattened tuples\n\n      pulse.visit(pulse.SOURCE, t => {\n        const arrays = fields.map(f => f(t)),\n              maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0);\n        let i = 0,\n            j,\n            d,\n            v;\n\n        for (; i < maxlen; ++i) {\n          d = derive(t);\n\n          for (j = 0; j < m; ++j) {\n            d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n          }\n\n          if (index) {\n            d[index] = i;\n          }\n\n          out.add.push(d);\n        }\n      });\n      this.value = out.source = out.add;\n      if (index) out.modifies(index);\n      return out.modifies(as);\n    }\n\n  });\n  /**\n   * Folds one more tuple fields into multiple tuples in which the field\n   * name and values are available under new 'key' and 'value' fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.fields - An array of field accessors\n   *   for the tuple fields that should be folded.\n   * @param {Array<string>} [params.as] - Output field names for folded key\n   *   and value fields, defaults to ['key', 'value'].\n   */\n\n  function Fold(params) {\n    Transform.call(this, [], params);\n  }\n\n  Fold.Definition = {\n    'type': 'Fold',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['key', 'value']\n    }]\n  };\n  inherits(Fold, Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            fnames = fields.map(accessorName),\n            as = _.as || ['key', 'value'],\n            k = as[0],\n            v = as[1],\n            n = fields.length;\n      out.rem = this.value;\n      pulse.visit(pulse.SOURCE, t => {\n        for (let i = 0, d; i < n; ++i) {\n          d = derive(t);\n          d[k] = fnames[i];\n          d[v] = fields[i](t);\n          out.add.push(d);\n        }\n      });\n      this.value = out.source = out.add;\n      return out.modifies(as);\n    }\n\n  });\n  /**\n   * Invokes a function for each data tuple and saves the results as a new field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n   * @param {string} params.as - The field name under which to save the result.\n   * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n   *   added tuples only, and does not update in response to modifications.\n   */\n\n  function Formula(params) {\n    Transform.call(this, null, params);\n  }\n\n  Formula.Definition = {\n    'type': 'Formula',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'expr',\n      'type': 'expr',\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'required': true\n    }, {\n      'name': 'initonly',\n      'type': 'boolean'\n    }]\n  };\n  inherits(Formula, Transform, {\n    transform(_, pulse) {\n      const func = _.expr,\n            as = _.as,\n            mod = _.modified(),\n            flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD : pulse.ADD;\n\n      if (mod) {\n        // parameters updated, need to reflow\n        pulse = pulse.materialize().reflow(true);\n      }\n\n      if (!_.initonly) {\n        pulse.modifies(as);\n      }\n\n      return pulse.visit(flag, t => t[as] = func(t, _));\n    }\n\n  });\n  /**\n   * Generates data tuples using a provided generator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Parameters): object} params.generator - A tuple generator\n   *   function. This function is given the operator parameters as input.\n   *   Changes to any additional parameters will not trigger re-calculation\n   *   of previously generated tuples. Only future tuples are affected.\n   * @param {number} params.size - The number of tuples to produce.\n   */\n\n  function Generate(params) {\n    Transform.call(this, [], params);\n  }\n\n  inherits(Generate, Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.ALL),\n            gen = _.generator;\n      let data = this.value,\n          num = _.size - data.length,\n          add,\n          rem,\n          t;\n\n      if (num > 0) {\n        // need more tuples, generate and add\n        for (add = []; --num >= 0;) {\n          add.push(t = ingest$1(gen(_)));\n          data.push(t);\n        }\n\n        out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;\n      } else {\n        // need fewer tuples, remove\n        rem = data.slice(0, -num);\n        out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;\n        data = data.slice(-num);\n      }\n\n      out.source = this.value = data;\n      return out;\n    }\n\n  });\n  const Methods$1 = {\n    value: 'value',\n    median: median,\n    mean: mean,\n    min: min$2,\n    max: max$2\n  };\n  const Empty$1 = [];\n  /**\n   * Impute missing values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to impute.\n   * @param {Array<function(object): *>} [params.groupby] - An array of\n   *   accessors to determine series within which to perform imputation.\n   * @param {function(object): *} params.key - An accessor for a key value.\n   *   Each key value should be unique within a group. New tuples will be\n   *   imputed for any key values that are not found within a group.\n   * @param {Array<*>} [params.keyvals] - Optional array of required key\n   *   values. New tuples will be imputed for any key values that are not\n   *   found within a group. In addition, these values will be automatically\n   *   augmented with the key values observed in the input data.\n   * @param {string} [method='value'] - The imputation method to use. One of\n   *   'value', 'mean', 'median', 'max', 'min'.\n   * @param {*} [value=0] - The constant value to use for imputation\n   *   when using method 'value'.\n   */\n\n  function Impute(params) {\n    Transform.call(this, [], params);\n  }\n\n  Impute.Definition = {\n    'type': 'Impute',\n    'metadata': {\n      'changes': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'key',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'keyvals',\n      'array': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'value',\n      'values': ['value', 'mean', 'median', 'max', 'min']\n    }, {\n      'name': 'value',\n      'default': 0\n    }]\n  };\n\n  function getValue(_) {\n    var m = _.method || Methods$1.value,\n        v;\n\n    if (Methods$1[m] == null) {\n      error('Unrecognized imputation method: ' + m);\n    } else if (m === Methods$1.value) {\n      v = _.value !== undefined ? _.value : 0;\n      return () => v;\n    } else {\n      return Methods$1[m];\n    }\n  }\n\n  function getField$1(_) {\n    const f = _.field;\n    return t => t ? f(t) : NaN;\n  }\n\n  inherits(Impute, Transform, {\n    transform(_, pulse) {\n      var out = pulse.fork(pulse.ALL),\n          impute = getValue(_),\n          field = getField$1(_),\n          fName = accessorName(_.field),\n          kName = accessorName(_.key),\n          gNames = (_.groupby || []).map(accessorName),\n          groups = partition$4(pulse.source, _.groupby, _.key, _.keyvals),\n          curr = [],\n          prev = this.value,\n          m = groups.domain.length,\n          group,\n          value,\n          gVals,\n          kVal,\n          g,\n          i,\n          j,\n          l,\n          n,\n          t;\n\n      for (g = 0, l = groups.length; g < l; ++g) {\n        group = groups[g];\n        gVals = group.values;\n        value = NaN; // add tuples for missing values\n\n        for (j = 0; j < m; ++j) {\n          if (group[j] != null) continue;\n          kVal = groups.domain[j];\n          t = {\n            _impute: true\n          };\n\n          for (i = 0, n = gVals.length; i < n; ++i) t[gNames[i]] = gVals[i];\n\n          t[kName] = kVal;\n          t[fName] = Number.isNaN(value) ? value = impute(group, field) : value;\n          curr.push(ingest$1(t));\n        }\n      } // update pulse with imputed tuples\n\n\n      if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n      if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n      this.value = curr;\n      return out;\n    }\n\n  });\n\n  function partition$4(data, groupby, key, keyvals) {\n    var get = f => f(t),\n        groups = [],\n        domain = keyvals ? keyvals.slice() : [],\n        kMap = {},\n        gMap = {},\n        gVals,\n        gKey,\n        group,\n        i,\n        j,\n        k,\n        n,\n        t;\n\n    domain.forEach((k, i) => kMap[k] = i + 1);\n\n    for (i = 0, n = data.length; i < n; ++i) {\n      t = data[i];\n      k = key(t);\n      j = kMap[k] || (kMap[k] = domain.push(k));\n      gKey = (gVals = groupby ? groupby.map(get) : Empty$1) + '';\n\n      if (!(group = gMap[gKey])) {\n        group = gMap[gKey] = [];\n        groups.push(group);\n        group.values = gVals;\n      }\n\n      group[j - 1] = t;\n    }\n\n    groups.domain = domain;\n    return groups;\n  }\n  /**\n   * Extend input tuples with aggregate values.\n   * Calcuates aggregate values and joins them with the input stream.\n   * @constructor\n   */\n\n\n  function JoinAggregate(params) {\n    Aggregate$1.call(this, params);\n  }\n\n  JoinAggregate.Definition = {\n    'type': 'JoinAggregate',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidAggregateOps\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  inherits(JoinAggregate, Aggregate$1, {\n    transform(_, pulse) {\n      const aggr = this,\n            mod = _.modified();\n\n      let cells; // process all input tuples to calculate aggregates\n\n      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n        cells = aggr.value = mod ? aggr.init(_) : {};\n        pulse.visit(pulse.SOURCE, t => aggr.add(t));\n      } else {\n        cells = aggr.value = aggr.value || this.init(_);\n        pulse.visit(pulse.REM, t => aggr.rem(t));\n        pulse.visit(pulse.ADD, t => aggr.add(t));\n      } // update aggregation cells\n\n\n      aggr.changes(); // write aggregate values to input tuples\n\n      pulse.visit(pulse.SOURCE, t => {\n        extend$1(t, cells[aggr.cellkey(t)].tuple);\n      });\n      return pulse.reflow(mod).modifies(this._outputs);\n    },\n\n    changes() {\n      const adds = this._adds,\n            mods = this._mods;\n      let i, n;\n\n      for (i = 0, n = this._alen; i < n; ++i) {\n        this.celltuple(adds[i]);\n        adds[i] = null; // for garbage collection\n      }\n\n      for (i = 0, n = this._mlen; i < n; ++i) {\n        this.celltuple(mods[i]);\n        mods[i] = null; // for garbage collection\n      }\n\n      this._alen = this._mlen = 0; // reset list of active cells\n    }\n\n  });\n  /**\n   * Compute kernel density estimates (KDE) for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   to estimate.\n   * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n   *   If zero or unspecified, the bandwidth is automatically determined.\n   * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n   *   output values should be probability estimates (false, default) or\n   *   smoothed counts (true).\n   * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n   *   density (false) or cumulative distribution (true) should be generated.\n   * @param {Array<number>} [params.extent] - The domain extent over which to\n   *   plot the density. If unspecified, the [min, max] data extent is used.\n   * @param {string} [params.resolve='independent'] - Indicates how parameters for\n   *   multiple densities should be resolved. If \"independent\" (the default), each\n   *   density may have its own domain extent and dynamic number of curve sample\n   *   steps. If \"shared\", the KDE transform will ensure that all densities are\n   *   defined over a shared domain and curve steps, enabling stacking.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n\n  function KDE(params) {\n    Transform.call(this, null, params);\n  }\n\n  KDE.Definition = {\n    'type': 'KDE',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'cumulative',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'counts',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'resolve',\n      'type': 'enum',\n      'values': ['shared', 'independent'],\n      'default': 'independent'\n    }, {\n      'name': 'steps',\n      'type': 'number'\n    }, {\n      'name': 'minsteps',\n      'type': 'number',\n      'default': 25\n    }, {\n      'name': 'maxsteps',\n      'type': 'number',\n      'default': 200\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['value', 'density']\n    }]\n  };\n  inherits(KDE, Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n      if (!this.value || pulse.changed() || _.modified()) {\n        const source = pulse.materialize(pulse.SOURCE).source,\n              groups = partition$1$1(source, _.groupby, _.field),\n              names = (_.groupby || []).map(accessorName),\n              bandwidth = _.bandwidth,\n              method = _.cumulative ? 'cdf' : 'pdf',\n              as = _.as || ['value', 'density'],\n              values = [];\n        let domain = _.extent,\n            minsteps = _.steps || _.minsteps || 25,\n            maxsteps = _.steps || _.maxsteps || 200;\n\n        if (method !== 'pdf' && method !== 'cdf') {\n          error('Invalid density method: ' + method);\n        }\n\n        if (_.resolve === 'shared') {\n          if (!domain) domain = extent(source, _.field);\n          minsteps = maxsteps = _.steps || maxsteps;\n        }\n\n        groups.forEach(g => {\n          const density = kde(g, bandwidth)[method],\n                scale = _.counts ? g.length : 1,\n                local = domain || extent(g);\n          sampleCurve(density, local, minsteps, maxsteps).forEach(v => {\n            const t = {};\n\n            for (let i = 0; i < names.length; ++i) {\n              t[names[i]] = g.dims[i];\n            }\n\n            t[as[0]] = v[0];\n            t[as[1]] = v[1] * scale;\n            values.push(ingest$1(t));\n          });\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n\n      return out;\n    }\n\n  });\n  /**\n   * Generates a key function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string>} params.fields - The field name(s) for the key function.\n   * @param {boolean} params.flat - A boolean flag indicating if the field names\n   *  should be treated as flat property names, side-stepping nested field\n   *  lookups normally indicated by dot or bracket notation.\n   */\n\n  function Key$1(params) {\n    Operator.call(this, null, update$2, params);\n  }\n\n  inherits(Key$1, Operator);\n\n  function update$2(_) {\n    return this.value && !_.modified() ? this.value : key(_.fields, _.flat);\n  }\n  /**\n   * Load and parse data from an external source. Marshalls parameter\n   * values and then invokes the Dataflow request method.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.url - The URL to load from.\n   * @param {object} params.format - The data format options.\n   */\n\n\n  function Load$1(params) {\n    Transform.call(this, [], params);\n    this._pending = null;\n  }\n\n  inherits(Load$1, Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow;\n\n      if (this._pending) {\n        // update state and return pulse\n        return output(this, pulse, this._pending);\n      }\n\n      if (stop(_)) return pulse.StopPropagation;\n\n      if (_.values) {\n        // parse and ingest values, return output pulse\n        return output(this, pulse, df.parse(_.values, _.format));\n      } else if (_.async) {\n        // return promise for non-blocking async loading\n        const p = df.request(_.url, _.format).then(res => {\n          this._pending = array$5(res.data);\n          return df => df.touch(this);\n        });\n        return {\n          async: p\n        };\n      } else {\n        // return promise for synchronous loading\n        return df.request(_.url, _.format).then(res => output(this, pulse, array$5(res.data)));\n      }\n    }\n\n  });\n\n  function stop(_) {\n    return _.modified('async') && !(_.modified('values') || _.modified('url') || _.modified('format'));\n  }\n\n  function output(op, pulse, data) {\n    data.forEach(ingest$1);\n    const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n    out.rem = op.value;\n    op.value = out.source = out.add = data;\n    op._pending = null;\n    if (out.rem.length) out.clean(true);\n    return out;\n  }\n  /**\n   * Extend tuples by joining them with values from a lookup table.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Map} params.index - The lookup table map.\n   * @param {Array<function(object): *} params.fields - The fields to lookup.\n   * @param {Array<string>} params.as - Output field names for each lookup value.\n   * @param {*} [params.default] - A default value to use if lookup fails.\n   */\n\n\n  function Lookup(params) {\n    Transform.call(this, {}, params);\n  }\n\n  Lookup.Definition = {\n    'type': 'Lookup',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'index',\n      'type': 'index',\n      'params': [{\n        'name': 'from',\n        'type': 'data',\n        'required': true\n      }, {\n        'name': 'key',\n        'type': 'field',\n        'required': true\n      }]\n    }, {\n      'name': 'values',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }, {\n      'name': 'default',\n      'default': null\n    }]\n  };\n  inherits(Lookup, Transform, {\n    transform(_, pulse) {\n      const keys = _.fields,\n            index = _.index,\n            values = _.values,\n            defaultValue = _.default == null ? null : _.default,\n            reset = _.modified(),\n            n = keys.length;\n\n      let flag = reset ? pulse.SOURCE : pulse.ADD,\n          out = pulse,\n          as = _.as,\n          set,\n          m,\n          mods;\n\n      if (values) {\n        m = values.length;\n\n        if (n > 1 && !as) {\n          error('Multi-field lookup requires explicit \"as\" parameter.');\n        }\n\n        if (as && as.length !== n * m) {\n          error('The \"as\" parameter has too few output field names.');\n        }\n\n        as = as || values.map(accessorName);\n\n        set = function (t) {\n          for (var i = 0, k = 0, j, v; i < n; ++i) {\n            v = index.get(keys[i](t));\n            if (v == null) for (j = 0; j < m; ++j, ++k) t[as[k]] = defaultValue;else for (j = 0; j < m; ++j, ++k) t[as[k]] = values[j](v);\n          }\n        };\n      } else {\n        if (!as) {\n          error('Missing output field names.');\n        }\n\n        set = function (t) {\n          for (var i = 0, v; i < n; ++i) {\n            v = index.get(keys[i](t));\n            t[as[i]] = v == null ? defaultValue : v;\n          }\n        };\n      }\n\n      if (reset) {\n        out = pulse.reflow(true);\n      } else {\n        mods = keys.some(k => pulse.modified(k.fields));\n        flag |= mods ? pulse.MOD : 0;\n      }\n\n      pulse.visit(flag, set);\n      return out.modifies(as);\n    }\n\n  });\n  /**\n   * Computes global min/max extents over a collection of extents.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<number>>} params.extents - The input extents.\n   */\n\n  function MultiExtent$1(params) {\n    Operator.call(this, null, update$1, params);\n  }\n\n  inherits(MultiExtent$1, Operator);\n\n  function update$1(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    const ext = _.extents,\n          n = ext.length;\n    let min = +Infinity,\n        max = -Infinity,\n        i,\n        e;\n\n    for (i = 0; i < n; ++i) {\n      e = ext[i];\n      if (e[0] < min) min = e[0];\n      if (e[1] > max) max = e[1];\n    }\n\n    return [min, max];\n  }\n  /**\n   * Merge a collection of value arrays.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<*>>} params.values - The input value arrrays.\n   */\n\n\n  function MultiValues$1(params) {\n    Operator.call(this, null, update, params);\n  }\n\n  inherits(MultiValues$1, Operator);\n\n  function update(_) {\n    return this.value && !_.modified() ? this.value : _.values.reduce((data, _) => data.concat(_), []);\n  }\n  /**\n   * Operator whose value is simply its parameter hash. This operator is\n   * useful for enabling reactive updates to values of nested objects.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n\n  function Params$2(params) {\n    Transform.call(this, null, params);\n  }\n\n  inherits(Params$2, Transform, {\n    transform(_, pulse) {\n      this.modified(_.modified());\n      this.value = _;\n      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n    }\n\n  });\n  /**\n   * Aggregate and pivot selected field values to become new fields.\n   * This operator is useful to construction cross-tabulations.\n   * @constructor\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n   * @param {function(object): *} params.field - The field to pivot on. The unique\n   *  values of this field become new field names in the output stream.\n   * @param {function(object): *} params.value - The field to populate pivoted fields.\n   *  The aggregate values of this field become the values of the new pivoted fields.\n   * @param {string} [params.op] - The aggregation operation for the value field,\n   *  applied per cell in the output stream. The default is \"sum\".\n   * @param {number} [params.limit] - An optional parameter indicating the maximum\n   *  number of pivoted fields to generate. The pivoted field names are sorted in\n   *  ascending order prior to enforcing the limit.\n   */\n\n  function Pivot(params) {\n    Aggregate$1.call(this, params);\n  }\n\n  Pivot.Definition = {\n    'type': 'Pivot',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'value',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'op',\n      'type': 'enum',\n      'values': ValidAggregateOps,\n      'default': 'sum'\n    }, {\n      'name': 'limit',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  inherits(Pivot, Aggregate$1, {\n    _transform: Aggregate$1.prototype.transform,\n\n    transform(_, pulse) {\n      return this._transform(aggregateParams(_, pulse), pulse);\n    }\n\n  }); // Shoehorn a pivot transform into an aggregate transform!\n  // First collect all unique pivot field values.\n  // Then generate aggregate fields for each output pivot field.\n\n  function aggregateParams(_, pulse) {\n    const key = _.field,\n          value = _.value,\n          op = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n          fields = accessorFields(key).concat(accessorFields(value)),\n          keys = pivotKeys(key, _.limit || 0, pulse); // if data stream content changes, pivot fields may change\n    // flag parameter modification to ensure re-initialization\n\n    if (pulse.changed()) _.set('__pivot__', null, null, true);\n    return {\n      key: _.key,\n      groupby: _.groupby,\n      ops: keys.map(() => op),\n      fields: keys.map(k => get$4(k, key, value, fields)),\n      as: keys.map(k => k + ''),\n      modified: _.modified.bind(_)\n    };\n  } // Generate aggregate field accessor.\n  // Output NaN for non-existent values; aggregator will ignore!\n\n\n  function get$4(k, key, value, fields) {\n    return accessor(d => key(d) === k ? value(d) : NaN, fields, k + '');\n  } // Collect (and optionally limit) all unique pivot values.\n\n\n  function pivotKeys(key, limit, pulse) {\n    const map = {},\n          list = [];\n    pulse.visit(pulse.SOURCE, t => {\n      const k = key(t);\n\n      if (!map[k]) {\n        map[k] = 1;\n        list.push(k);\n      }\n    });\n    list.sort(ascending$3);\n    return limit ? list.slice(0, limit) : list;\n  }\n  /**\n   * Partitions pre-faceted data into tuple subflows.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): Array<object>} params.field - The field\n   *   accessor for an array of subflow tuple objects.\n   */\n\n\n  function PreFacet$1(params) {\n    Facet$1.call(this, params);\n  }\n\n  inherits(PreFacet$1, Facet$1, {\n    transform(_, pulse) {\n      const flow = _.subflow,\n            field = _.field,\n            subflow = t => this.subflow(tupleid(t), flow, pulse, t);\n\n      if (_.modified('field') || field && pulse.modified(accessorFields(field))) {\n        error('PreFacet does not support field modification.');\n      }\n\n      this.initTargets(); // reset list of active subflows\n\n      if (field) {\n        pulse.visit(pulse.MOD, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.mod(_));\n        });\n        pulse.visit(pulse.ADD, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.add(ingest$1(_)));\n        });\n        pulse.visit(pulse.REM, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.rem(_));\n        });\n      } else {\n        pulse.visit(pulse.MOD, t => subflow(t).mod(t));\n        pulse.visit(pulse.ADD, t => subflow(t).add(t));\n        pulse.visit(pulse.REM, t => subflow(t).rem(t));\n      }\n\n      if (pulse.clean()) {\n        pulse.runAfter(() => this.clean());\n      }\n\n      return pulse;\n    }\n\n  });\n  /**\n   * Performs a relational projection, copying selected fields from source\n   * tuples to a new set of derived tuples.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *} params.fields - The fields to project,\n   *   as an array of field accessors. If unspecified, all fields will be\n   *   copied with names unchanged.\n   * @param {Array<string>} [params.as] - Output field names for each projected\n   *   field. Any unspecified fields will use the field name provided by\n   *   the field accessor.\n   */\n\n  function Project(params) {\n    Transform.call(this, null, params);\n  }\n\n  Project.Definition = {\n    'type': 'Project',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }]\n  };\n  inherits(Project, Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            as = fieldNames(_.fields, _.as || []),\n            derive = fields ? (s, t) => project(s, t, fields, as) : rederive;\n      let lut;\n\n      if (this.value) {\n        lut = this.value;\n      } else {\n        pulse = pulse.addAll();\n        lut = this.value = {};\n      }\n\n      pulse.visit(pulse.REM, t => {\n        const id = tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n      pulse.visit(pulse.ADD, t => {\n        const dt = derive(t, ingest$1({}));\n        lut[tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n      pulse.visit(pulse.MOD, t => {\n        out.mod.push(derive(t, lut[tupleid(t)]));\n      });\n      return out;\n    }\n\n  });\n\n  function project(s, t, fields, as) {\n    for (let i = 0, n = fields.length; i < n; ++i) {\n      t[as[i]] = fields[i](s);\n    }\n\n    return t;\n  }\n  /**\n   * Proxy the value of another operator as a pure signal value.\n   * Ensures no tuples are propagated.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {*} params.value - The value to proxy, becomes the value of this operator.\n   */\n\n\n  function Proxy$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  inherits(Proxy$1, Transform, {\n    transform(_, pulse) {\n      this.value = _.value;\n      return _.modified('value') ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n    }\n\n  });\n  /**\n   * Generates sample quantile values from an input data stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   over which to calculate quantile values.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {Array<number>} [params.probs] - An array of probabilities in\n   *   the range (0, 1) for which to compute quantile values. If not specified,\n   *   the *step* parameter will be used.\n   * @param {Array<number>} [params.step=0.01] - A probability step size for\n   *   sampling quantile values. All values from one-half the step size up to\n   *   1 (exclusive) will be sampled. This parameter is only used if the\n   *   *quantiles* parameter is not provided.\n   */\n\n  function Quantile$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  Quantile$1.Definition = {\n    'type': 'Quantile',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'probs',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 0.01\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['prob', 'value']\n    }]\n  };\n  const EPSILON$2 = 1e-14;\n  inherits(Quantile$1, Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n            as = _.as || ['prob', 'value'];\n\n      if (this.value && !_.modified() && !pulse.changed()) {\n        out.source = this.value;\n        return out;\n      }\n\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition$1$1(source, _.groupby, _.field),\n            names = (_.groupby || []).map(accessorName),\n            values = [],\n            step = _.step || 0.01,\n            p = _.probs || range$1$1(step / 2, 1 - EPSILON$2, step),\n            n = p.length;\n      groups.forEach(g => {\n        const q = quantiles(g, p);\n\n        for (let i = 0; i < n; ++i) {\n          const t = {};\n\n          for (let i = 0; i < names.length; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n\n          t[as[0]] = p[i];\n          t[as[1]] = q[i];\n          values.push(ingest$1(t));\n        }\n      });\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n      return out;\n    }\n\n  });\n  /**\n   * Relays a data stream between data processing pipelines.\n   * If the derive parameter is set, this transform will create derived\n   * copies of observed tuples. This provides derived data streams in which\n   * modifications to the tuples do not pollute an upstream data source.\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.derive=false] - Boolean flag indicating if\n   *   the transform should make derived copies of incoming tuples.\n   * @constructor\n   */\n\n  function Relay$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  inherits(Relay$1, Transform, {\n    transform(_, pulse) {\n      let out, lut;\n\n      if (this.value) {\n        lut = this.value;\n      } else {\n        out = pulse = pulse.addAll();\n        lut = this.value = {};\n      }\n\n      if (_.derive) {\n        out = pulse.fork(pulse.NO_SOURCE);\n        pulse.visit(pulse.REM, t => {\n          const id = tupleid(t);\n          out.rem.push(lut[id]);\n          lut[id] = null;\n        });\n        pulse.visit(pulse.ADD, t => {\n          const dt = derive(t);\n          lut[tupleid(t)] = dt;\n          out.add.push(dt);\n        });\n        pulse.visit(pulse.MOD, t => {\n          const dt = lut[tupleid(t)];\n\n          for (const k in t) {\n            dt[k] = t[k]; // down stream writes may overwrite re-derived tuples\n            // conservatively mark all source fields as modified\n\n            out.modifies(k);\n          }\n\n          out.mod.push(dt);\n        });\n      }\n\n      return out;\n    }\n\n  });\n  /**\n   * Samples tuples passing through this operator.\n   * Uses reservoir sampling to maintain a representative sample.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.size=1000] - The maximum number of samples.\n   */\n\n  function Sample(params) {\n    Transform.call(this, [], params);\n    this.count = 0;\n  }\n\n  Sample.Definition = {\n    'type': 'Sample',\n    'metadata': {},\n    'params': [{\n      'name': 'size',\n      'type': 'number',\n      'default': 1000\n    }]\n  };\n  inherits(Sample, Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            mod = _.modified('size'),\n            num = _.size,\n            map = this.value.reduce((m, t) => (m[tupleid(t)] = 1, m), {});\n\n      let res = this.value,\n          cnt = this.count,\n          cap = 0; // sample reservoir update function\n\n      function update(t) {\n        let p, idx;\n\n        if (res.length < num) {\n          res.push(t);\n        } else {\n          idx = ~~((cnt + 1) * exports.random());\n\n          if (idx < res.length && idx >= cap) {\n            p = res[idx];\n            if (map[tupleid(p)]) out.rem.push(p); // eviction\n\n            res[idx] = t;\n          }\n        }\n\n        ++cnt;\n      }\n\n      if (pulse.rem.length) {\n        // find all tuples that should be removed, add to output\n        pulse.visit(pulse.REM, t => {\n          const id = tupleid(t);\n\n          if (map[id]) {\n            map[id] = -1;\n            out.rem.push(t);\n          }\n\n          --cnt;\n        }); // filter removed tuples out of the sample reservoir\n\n        res = res.filter(t => map[tupleid(t)] !== -1);\n      }\n\n      if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n        // replenish sample if backing data source is available\n        cap = cnt = res.length;\n        pulse.visit(pulse.SOURCE, t => {\n          // update, but skip previously sampled tuples\n          if (!map[tupleid(t)]) update(t);\n        });\n        cap = -1;\n      }\n\n      if (mod && res.length > num) {\n        const n = res.length - num;\n\n        for (let i = 0; i < n; ++i) {\n          map[tupleid(res[i])] = -1;\n          out.rem.push(res[i]);\n        }\n\n        res = res.slice(n);\n      }\n\n      if (pulse.mod.length) {\n        // propagate modified tuples in the sample reservoir\n        pulse.visit(pulse.MOD, t => {\n          if (map[tupleid(t)]) out.mod.push(t);\n        });\n      }\n\n      if (pulse.add.length) {\n        // update sample reservoir\n        pulse.visit(pulse.ADD, update);\n      }\n\n      if (pulse.add.length || cap < 0) {\n        // output newly added tuples\n        out.add = res.filter(t => !map[tupleid(t)]);\n      }\n\n      this.count = cnt;\n      this.value = out.source = res;\n      return out;\n    }\n\n  });\n  /**\n   * Generates data tuples for a specified sequence range of numbers.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} params.start - The first number in the sequence.\n   * @param {number} params.stop - The last number (exclusive) in the sequence.\n   * @param {number} [params.step=1] - The step size between numbers in the sequence.\n   */\n\n  function Sequence(params) {\n    Transform.call(this, null, params);\n  }\n\n  Sequence.Definition = {\n    'type': 'Sequence',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'start',\n      'type': 'number',\n      'required': true\n    }, {\n      'name': 'stop',\n      'type': 'number',\n      'required': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 1\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': 'data'\n    }]\n  };\n  inherits(Sequence, Transform, {\n    transform(_, pulse) {\n      if (this.value && !_.modified()) return;\n      const out = pulse.materialize().fork(pulse.MOD),\n            as = _.as || 'data';\n      out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n      this.value = range$1$1(_.start, _.stop, _.step || 1).map(v => {\n        const t = {};\n        t[as] = v;\n        return ingest$1(t);\n      });\n      out.add = pulse.add.concat(this.value);\n      return out;\n    }\n\n  });\n  /**\n   * Propagates a new pulse without any tuples so long as the input\n   * pulse contains some added, removed or modified tuples.\n   * @param {object} params - The parameters for this operator.\n   * @constructor\n   */\n\n  function Sieve$1(params) {\n    Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n\n  inherits(Sieve$1, Transform, {\n    transform(_, pulse) {\n      this.value = pulse.source;\n      return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n    }\n\n  });\n  /**\n   * Discretize dates to specific time units.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The data field containing date/time values.\n   */\n\n  function TimeUnit(params) {\n    Transform.call(this, null, params);\n  }\n\n  const OUTPUT = ['unit0', 'unit1'];\n  TimeUnit.Definition = {\n    'type': 'TimeUnit',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'interval',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'units',\n      'type': 'enum',\n      'values': TIME_UNITS,\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 1\n    }, {\n      'name': 'maxbins',\n      'type': 'number',\n      'default': 40\n    }, {\n      'name': 'extent',\n      'type': 'date',\n      'array': true\n    }, {\n      'name': 'timezone',\n      'type': 'enum',\n      'default': 'local',\n      'values': ['local', 'utc']\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': OUTPUT\n    }]\n  };\n  inherits(TimeUnit, Transform, {\n    transform(_, pulse) {\n      const field = _.field,\n            band = _.interval !== false,\n            utc = _.timezone === 'utc',\n            floor = this._floor(_, pulse),\n            offset = (utc ? utcInterval : timeInterval)(floor.unit).offset,\n            as = _.as || OUTPUT,\n            u0 = as[0],\n            u1 = as[1],\n            step = floor.step;\n\n      let min = floor.start || Infinity,\n          max = floor.stop || -Infinity,\n          flag = pulse.ADD;\n\n      if (_.modified() || pulse.modified(accessorFields(field))) {\n        pulse = pulse.reflow(true);\n        flag = pulse.SOURCE;\n        min = Infinity;\n        max = -Infinity;\n      }\n\n      pulse.visit(flag, t => {\n        const v = field(t);\n        let a, b;\n\n        if (v == null) {\n          t[u0] = null;\n          if (band) t[u1] = null;\n        } else {\n          t[u0] = a = b = floor(v);\n          if (band) t[u1] = b = offset(a, step);\n          if (a < min) min = a;\n          if (b > max) max = b;\n        }\n      });\n      floor.start = min;\n      floor.stop = max;\n      return pulse.modifies(band ? as : u0);\n    },\n\n    _floor(_, pulse) {\n      const utc = _.timezone === 'utc'; // get parameters\n\n      const {\n        units,\n        step\n      } = _.units ? {\n        units: _.units,\n        step: _.step || 1\n      } : bin$1({\n        extent: _.extent || extent(pulse.materialize(pulse.SOURCE).source, _.field),\n        maxbins: _.maxbins\n      }); // check / standardize time units\n\n      const tunits = timeUnits(units),\n            prev = this.value || {},\n            floor = (utc ? utcFloor : timeFloor)(tunits, step);\n      floor.unit = peek$1(tunits);\n      floor.units = tunits;\n      floor.step = step;\n      floor.start = prev.start;\n      floor.stop = prev.stop;\n      return this.value = floor;\n    }\n\n  });\n  /**\n   * An index that maps from unique, string-coerced, field values to tuples.\n   * Assumes that the field serves as a unique key with no duplicate values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field accessor to index.\n   */\n\n  function TupleIndex(params) {\n    Transform.call(this, fastmap(), params);\n  }\n\n  inherits(TupleIndex, Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            field = _.field,\n            index = this.value,\n            set = t => index.set(field(t), t);\n\n      let mod = true;\n\n      if (_.modified('field') || pulse.modified(field.fields)) {\n        index.clear();\n        pulse.visit(pulse.SOURCE, set);\n      } else if (pulse.changed()) {\n        pulse.visit(pulse.REM, t => index.delete(field(t)));\n        pulse.visit(pulse.ADD, set);\n      } else {\n        mod = false;\n      }\n\n      this.modified(mod);\n      if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n      return pulse.fork();\n    }\n\n  });\n  /**\n   * Extracts an array of values. Assumes the source data has already been\n   * reduced as needed (e.g., by an upstream Aggregate transform).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The domain field to extract.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for sorting the values. The comparator will be\n   *   applied to backing tuples prior to value extraction.\n   */\n\n  function Values$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  inherits(Values$1, Transform, {\n    transform(_, pulse) {\n      const run = !this.value || _.modified('field') || _.modified('sort') || pulse.changed() || _.sort && pulse.modified(_.sort.fields);\n\n      if (run) {\n        this.value = (_.sort ? pulse.source.slice().sort(stableCompare(_.sort)) : pulse.source).map(_.field);\n      }\n    }\n\n  });\n\n  function WindowOp(op, field, param, as) {\n    const fn = WindowOps[op](field, param);\n    return {\n      init: fn.init || zero$2,\n      update: function (w, t) {\n        t[as] = fn.next(w);\n      }\n    };\n  }\n\n  const WindowOps = {\n    row_number: function () {\n      return {\n        next: w => w.index + 1\n      };\n    },\n    rank: function () {\n      let rank;\n      return {\n        init: () => rank = 1,\n        next: w => {\n          const i = w.index,\n                data = w.data;\n          return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;\n        }\n      };\n    },\n    dense_rank: function () {\n      let drank;\n      return {\n        init: () => drank = 1,\n        next: w => {\n          const i = w.index,\n                d = w.data;\n          return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;\n        }\n      };\n    },\n    percent_rank: function () {\n      const rank = WindowOps.rank(),\n            next = rank.next;\n      return {\n        init: rank.init,\n        next: w => (next(w) - 1) / (w.data.length - 1)\n      };\n    },\n    cume_dist: function () {\n      let cume;\n      return {\n        init: () => cume = 0,\n        next: w => {\n          const d = w.data,\n                c = w.compare;\n          let i = w.index;\n\n          if (cume < i) {\n            while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n\n            cume = i;\n          }\n\n          return (1 + cume) / d.length;\n        }\n      };\n    },\n    ntile: function (field, num) {\n      num = +num;\n      if (!(num > 0)) error('ntile num must be greater than zero.');\n      const cume = WindowOps.cume_dist(),\n            next = cume.next;\n      return {\n        init: cume.init,\n        next: w => Math.ceil(num * next(w))\n      };\n    },\n    lag: function (field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          const i = w.index - offset;\n          return i >= 0 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    lead: function (field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          const i = w.index + offset,\n                d = w.data;\n          return i < d.length ? field(d[i]) : null;\n        }\n      };\n    },\n    first_value: function (field) {\n      return {\n        next: w => field(w.data[w.i0])\n      };\n    },\n    last_value: function (field) {\n      return {\n        next: w => field(w.data[w.i1 - 1])\n      };\n    },\n    nth_value: function (field, nth) {\n      nth = +nth;\n      if (!(nth > 0)) error('nth_value nth must be greater than zero.');\n      return {\n        next: w => {\n          const i = w.i0 + (nth - 1);\n          return i < w.i1 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    prev_value: function (field) {\n      let prev;\n      return {\n        init: () => prev = null,\n        next: w => {\n          const v = field(w.data[w.index]);\n          return v != null ? prev = v : prev;\n        }\n      };\n    },\n    next_value: function (field) {\n      let v, i;\n      return {\n        init: () => (v = null, i = -1),\n        next: w => {\n          const d = w.data;\n          return w.index <= i ? v : (i = find$2(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);\n        }\n      };\n    }\n  };\n\n  function find$2(field, data, index) {\n    for (let n = data.length; index < n; ++index) {\n      const v = field(data[index]);\n      if (v != null) return index;\n    }\n\n    return -1;\n  }\n\n  const ValidWindowOps = Object.keys(WindowOps);\n\n  function WindowState(_) {\n    const ops = array$5(_.ops),\n          fields = array$5(_.fields),\n          params = array$5(_.params),\n          as = array$5(_.as),\n          outputs = this.outputs = [],\n          windows = this.windows = [],\n          inputs = {},\n          map = {},\n          counts = [],\n          measures = [];\n    let countOnly = true;\n\n    function visitInputs(f) {\n      array$5(accessorFields(f)).forEach(_ => inputs[_] = 1);\n    }\n\n    visitInputs(_.sort);\n    ops.forEach((op, i) => {\n      const field = fields[i],\n            mname = accessorName(field),\n            name = measureName(op, mname, as[i]);\n      visitInputs(field);\n      outputs.push(name); // Window operation\n\n      if (has$1(WindowOps, op)) {\n        windows.push(WindowOp(op, fields[i], params[i], name));\n      } // Aggregate operation\n      else {\n          if (field == null && op !== 'count') {\n            error('Null aggregate field specified.');\n          }\n\n          if (op === 'count') {\n            counts.push(name);\n            return;\n          }\n\n          countOnly = false;\n          let m = map[mname];\n\n          if (!m) {\n            m = map[mname] = [];\n            m.field = field;\n            measures.push(m);\n          }\n\n          m.push(createMeasure(op, name));\n        }\n    });\n\n    if (counts.length || measures.length) {\n      this.cell = cell(measures, counts, countOnly);\n    }\n\n    this.inputs = Object.keys(inputs);\n  }\n\n  const prototype = WindowState.prototype;\n\n  prototype.init = function () {\n    this.windows.forEach(_ => _.init());\n    if (this.cell) this.cell.init();\n  };\n\n  prototype.update = function (w, t) {\n    const cell = this.cell,\n          wind = this.windows,\n          data = w.data,\n          m = wind && wind.length;\n    let j;\n\n    if (cell) {\n      for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);\n\n      for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);\n\n      cell.set(t);\n    }\n\n    for (j = 0; j < m; ++j) wind[j].update(w, t);\n  };\n\n  function cell(measures, counts, countOnly) {\n    measures = measures.map(m => compileMeasures(m, m.field));\n    const cell = {\n      num: 0,\n      agg: null,\n      store: false,\n      count: counts\n    };\n\n    if (!countOnly) {\n      var n = measures.length,\n          a = cell.agg = Array(n),\n          i = 0;\n\n      for (; i < n; ++i) a[i] = new measures[i](cell);\n    }\n\n    if (cell.store) {\n      var store = cell.data = new TupleStore();\n    }\n\n    cell.add = function (t) {\n      cell.num += 1;\n      if (countOnly) return;\n      if (store) store.add(t);\n\n      for (let i = 0; i < n; ++i) {\n        a[i].add(a[i].get(t), t);\n      }\n    };\n\n    cell.rem = function (t) {\n      cell.num -= 1;\n      if (countOnly) return;\n      if (store) store.rem(t);\n\n      for (let i = 0; i < n; ++i) {\n        a[i].rem(a[i].get(t), t);\n      }\n    };\n\n    cell.set = function (t) {\n      let i, n; // consolidate stored values\n\n      if (store) store.values(); // update tuple properties\n\n      for (i = 0, n = counts.length; i < n; ++i) t[counts[i]] = cell.num;\n\n      if (!countOnly) for (i = 0, n = a.length; i < n; ++i) a[i].set(t);\n    };\n\n    cell.init = function () {\n      cell.num = 0;\n      if (store) store.reset();\n\n      for (let i = 0; i < n; ++i) a[i].init();\n    };\n\n    return cell;\n  }\n  /**\n   * Perform window calculations and write results to the input stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n   * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors\n   *   for data fields to use as inputs to window operations.\n   * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n   * @param {Array<string>} [params.as] - An array of output field names for window operations.\n   * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n   * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n   *   number alone, ignoring peers with identical sort values. If false (default),\n   *   the window boundaries will be adjusted to include peer values.\n   */\n\n\n  function Window(params) {\n    Transform.call(this, {}, params);\n    this._mlen = 0;\n    this._mods = [];\n  }\n\n  Window.Definition = {\n    'type': 'Window',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidWindowOps.concat(ValidAggregateOps)\n    }, {\n      'name': 'params',\n      'type': 'number',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'frame',\n      'type': 'number',\n      'null': true,\n      'array': true,\n      'length': 2,\n      'default': [null, 0]\n    }, {\n      'name': 'ignorePeers',\n      'type': 'boolean',\n      'default': false\n    }]\n  };\n  inherits(Window, Transform, {\n    transform(_, pulse) {\n      this.stamp = pulse.stamp;\n\n      const mod = _.modified(),\n            cmp = stableCompare(_.sort),\n            key = groupkey(_.groupby),\n            group = t => this.group(key(t)); // initialize window state\n\n\n      let state = this.state;\n\n      if (!state || mod) {\n        state = this.state = new WindowState(_);\n      } // partition input tuples\n\n\n      if (mod || pulse.modified(state.inputs)) {\n        this.value = {};\n        pulse.visit(pulse.SOURCE, t => group(t).add(t));\n      } else {\n        pulse.visit(pulse.REM, t => group(t).remove(t));\n        pulse.visit(pulse.ADD, t => group(t).add(t));\n      } // perform window calculations for each modified partition\n\n\n      for (let i = 0, n = this._mlen; i < n; ++i) {\n        processPartition(this._mods[i], state, cmp, _);\n      }\n\n      this._mlen = 0;\n      this._mods = []; // TODO don't reflow everything?\n\n      return pulse.reflow(mod).modifies(state.outputs);\n    },\n\n    group(key) {\n      let group = this.value[key];\n\n      if (!group) {\n        group = this.value[key] = SortedList(tupleid);\n        group.stamp = -1;\n      }\n\n      if (group.stamp < this.stamp) {\n        group.stamp = this.stamp;\n        this._mods[this._mlen++] = group;\n      }\n\n      return group;\n    }\n\n  });\n\n  function processPartition(list, state, cmp, _) {\n    const sort = _.sort,\n          range = sort && !_.ignorePeers,\n          frame = _.frame || [null, 0],\n          data = list.data(cmp),\n          // use cmp for stable sort\n    n = data.length,\n          b = range ? bisector$1(sort) : null,\n          w = {\n      i0: 0,\n      i1: 0,\n      p0: 0,\n      p1: 0,\n      index: 0,\n      data: data,\n      compare: sort || constant$4(-1)\n    };\n    state.init();\n\n    for (let i = 0; i < n; ++i) {\n      setWindow(w, frame, i, n);\n      if (range) adjustRange(w, b);\n      state.update(w, data[i]);\n    }\n  }\n\n  function setWindow(w, f, i, n) {\n    w.p0 = w.i0;\n    w.p1 = w.i1;\n    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n    w.index = i;\n  } // if frame type is 'range', adjust window for peer values\n\n\n  function adjustRange(w, bisect) {\n    const r0 = w.i0,\n          r1 = w.i1 - 1,\n          c = w.compare,\n          d = w.data,\n          n = d.length - 1;\n    if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);\n    if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);\n  }\n\n  var tx = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    aggregate: Aggregate$1,\n    bin: Bin,\n    collect: Collect$1,\n    compare: Compare$1,\n    countpattern: CountPattern,\n    cross: Cross,\n    density: Density,\n    dotbin: DotBin,\n    expression: Expression$1,\n    extent: Extent,\n    facet: Facet$1,\n    field: Field$1,\n    filter: Filter,\n    flatten: Flatten,\n    fold: Fold,\n    formula: Formula,\n    generate: Generate,\n    impute: Impute,\n    joinaggregate: JoinAggregate,\n    kde: KDE,\n    key: Key$1,\n    load: Load$1,\n    lookup: Lookup,\n    multiextent: MultiExtent$1,\n    multivalues: MultiValues$1,\n    params: Params$2,\n    pivot: Pivot,\n    prefacet: PreFacet$1,\n    project: Project,\n    proxy: Proxy$1,\n    quantile: Quantile$1,\n    relay: Relay$1,\n    sample: Sample,\n    sequence: Sequence,\n    sieve: Sieve$1,\n    subflow: Subflow,\n    timeunit: TimeUnit,\n    tupleindex: TupleIndex,\n    values: Values$1,\n    window: Window\n  });\n\n  const pi$3 = Math.PI,\n        tau$3 = 2 * pi$3,\n        epsilon$4 = 1e-6,\n        tauEpsilon = tau$3 - epsilon$4;\n\n  function Path$1() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n\n    this._ = \"\";\n  }\n\n  function path$3() {\n    return new Path$1();\n  }\n\n  Path$1.prototype = path$3.prototype = {\n    constructor: Path$1,\n    moveTo: function (x, y) {\n      this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n    },\n    closePath: function () {\n      if (this._x1 !== null) {\n        this._x1 = this._x0, this._y1 = this._y0;\n        this._ += \"Z\";\n      }\n    },\n    lineTo: function (x, y) {\n      this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n    },\n    quadraticCurveTo: function (x1, y1, x, y) {\n      this._ += \"Q\" + +x1 + \",\" + +y1 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n    },\n    bezierCurveTo: function (x1, y1, x2, y2, x, y) {\n      this._ += \"C\" + +x1 + \",\" + +y1 + \",\" + +x2 + \",\" + +y2 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n    },\n    arcTo: function (x1, y1, x2, y2, r) {\n      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n      var x0 = this._x1,\n          y0 = this._y1,\n          x21 = x2 - x1,\n          y21 = y2 - y1,\n          x01 = x0 - x1,\n          y01 = y0 - y1,\n          l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.\n\n      if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x1,y1).\n\n      if (this._x1 === null) {\n        this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n      } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n      else if (!(l01_2 > epsilon$4)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n        // Equivalently, is (x1,y1) coincident with (x2,y2)?\n        // Or, is the radius zero? Line to (x1,y1).\n        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$4) || !r) {\n            this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n          } // Otherwise, draw an arc!\n          else {\n              var x20 = x2 - x0,\n                  y20 = y2 - y0,\n                  l21_2 = x21 * x21 + y21 * y21,\n                  l20_2 = x20 * x20 + y20 * y20,\n                  l21 = Math.sqrt(l21_2),\n                  l01 = Math.sqrt(l01_2),\n                  l = r * Math.tan((pi$3 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n                  t01 = l / l01,\n                  t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.\n\n              if (Math.abs(t01 - 1) > epsilon$4) {\n                this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n              }\n\n              this._ += \"A\" + r + \",\" + r + \",0,0,\" + +(y01 * x20 > x01 * y20) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n            }\n    },\n    arc: function (x, y, r, a0, a1, ccw) {\n      x = +x, y = +y, r = +r, ccw = !!ccw;\n      var dx = r * Math.cos(a0),\n          dy = r * Math.sin(a0),\n          x0 = x + dx,\n          y0 = y + dy,\n          cw = 1 ^ ccw,\n          da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.\n\n      if (r < 0) throw new Error(\"negative radius: \" + r); // Is this path empty? Move to (x0,y0).\n\n      if (this._x1 === null) {\n        this._ += \"M\" + x0 + \",\" + y0;\n      } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n      else if (Math.abs(this._x1 - x0) > epsilon$4 || Math.abs(this._y1 - y0) > epsilon$4) {\n          this._ += \"L\" + x0 + \",\" + y0;\n        } // Is this arc empty? We\u2019re done.\n\n\n      if (!r) return; // Does the angle go the wrong way? Flip the direction.\n\n      if (da < 0) da = da % tau$3 + tau$3; // Is this a complete circle? Draw two arcs to complete the circle.\n\n      if (da > tauEpsilon) {\n        this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n      } // Is this arc non-empty? Draw an arc!\n      else if (da > epsilon$4) {\n          this._ += \"A\" + r + \",\" + r + \",0,\" + +(da >= pi$3) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n        }\n    },\n    rect: function (x, y, w, h) {\n      this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + +w + \"v\" + +h + \"h\" + -w + \"Z\";\n    },\n    toString: function () {\n      return this._;\n    }\n  };\n\n  function constant$3 (x) {\n    return function constant() {\n      return x;\n    };\n  }\n\n  var abs$2 = Math.abs;\n  var atan2$1 = Math.atan2;\n  var cos$2 = Math.cos;\n  var max$1 = Math.max;\n  var min$1 = Math.min;\n  var sin$2 = Math.sin;\n  var sqrt$3 = Math.sqrt;\n  var epsilon$3 = 1e-12;\n  var pi$2 = Math.PI;\n  var halfPi$2 = pi$2 / 2;\n  var tau$2 = 2 * pi$2;\n  function acos$1(x) {\n    return x > 1 ? 0 : x < -1 ? pi$2 : Math.acos(x);\n  }\n  function asin$2(x) {\n    return x >= 1 ? halfPi$2 : x <= -1 ? -halfPi$2 : Math.asin(x);\n  }\n\n  function arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n\n  function arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n\n  function arcStartAngle(d) {\n    return d.startAngle;\n  }\n\n  function arcEndAngle(d) {\n    return d.endAngle;\n  }\n\n  function arcPadAngle(d) {\n    return d && d.padAngle; // Note: optional!\n  }\n\n  function intersect$3(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var x10 = x1 - x0,\n        y10 = y1 - y0,\n        x32 = x3 - x2,\n        y32 = y3 - y2,\n        t = y32 * x10 - x32 * y10;\n    if (t * t < epsilon$3) return;\n    t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\n    return [x0 + t * x10, y0 + t * y10];\n  } // Compute perpendicular offset line of length rc.\n  // http://mathworld.wolfram.com/Circle-LineIntersection.html\n\n\n  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n    var x01 = x0 - x1,\n        y01 = y0 - y1,\n        lo = (cw ? rc : -rc) / sqrt$3(x01 * x01 + y01 * y01),\n        ox = lo * y01,\n        oy = -lo * x01,\n        x11 = x0 + ox,\n        y11 = y0 + oy,\n        x10 = x1 + ox,\n        y10 = y1 + oy,\n        x00 = (x11 + x10) / 2,\n        y00 = (y11 + y10) / 2,\n        dx = x10 - x11,\n        dy = y10 - y11,\n        d2 = dx * dx + dy * dy,\n        r = r1 - rc,\n        D = x11 * y10 - x10 * y11,\n        d = (dy < 0 ? -1 : 1) * sqrt$3(max$1(0, r * r * d2 - D * D)),\n        cx0 = (D * dy - dx * d) / d2,\n        cy0 = (-D * dx - dy * d) / d2,\n        cx1 = (D * dy + dx * d) / d2,\n        cy1 = (-D * dx + dy * d) / d2,\n        dx0 = cx0 - x00,\n        dy0 = cy0 - y00,\n        dx1 = cx1 - x00,\n        dy1 = cy1 - y00; // Pick the closer of the two intersection points.\n    // TODO Is there a faster way to determine which intersection to use?\n\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return {\n      cx: cx0,\n      cy: cy0,\n      x01: -ox,\n      y01: -oy,\n      x11: cx0 * (r1 / r - 1),\n      y11: cy0 * (r1 / r - 1)\n    };\n  }\n\n  function arc$2$1 () {\n    var innerRadius = arcInnerRadius,\n        outerRadius = arcOuterRadius,\n        cornerRadius = constant$3(0),\n        padRadius = null,\n        startAngle = arcStartAngle,\n        endAngle = arcEndAngle,\n        padAngle = arcPadAngle,\n        context = null;\n\n    function arc() {\n      var buffer,\n          r,\n          r0 = +innerRadius.apply(this, arguments),\n          r1 = +outerRadius.apply(this, arguments),\n          a0 = startAngle.apply(this, arguments) - halfPi$2,\n          a1 = endAngle.apply(this, arguments) - halfPi$2,\n          da = abs$2(a1 - a0),\n          cw = a1 > a0;\n      if (!context) context = buffer = path$3(); // Ensure that the outer radius is always larger than the inner radius.\n\n      if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?\n\n      if (!(r1 > epsilon$3)) context.moveTo(0, 0); // Or is it a circle or annulus?\n      else if (da > tau$2 - epsilon$3) {\n          context.moveTo(r1 * cos$2(a0), r1 * sin$2(a0));\n          context.arc(0, 0, r1, a0, a1, !cw);\n\n          if (r0 > epsilon$3) {\n            context.moveTo(r0 * cos$2(a1), r0 * sin$2(a1));\n            context.arc(0, 0, r0, a1, a0, cw);\n          }\n        } // Or is it a circular or annular sector?\n        else {\n            var a01 = a0,\n                a11 = a1,\n                a00 = a0,\n                a10 = a1,\n                da0 = da,\n                da1 = da,\n                ap = padAngle.apply(this, arguments) / 2,\n                rp = ap > epsilon$3 && (padRadius ? +padRadius.apply(this, arguments) : sqrt$3(r0 * r0 + r1 * r1)),\n                rc = min$1(abs$2(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n                rc0 = rc,\n                rc1 = rc,\n                t0,\n                t1; // Apply padding? Note that since r1 \u2265 r0, da1 \u2265 da0.\n\n            if (rp > epsilon$3) {\n              var p0 = asin$2(rp / r0 * sin$2(ap)),\n                  p1 = asin$2(rp / r1 * sin$2(ap));\n              if ((da0 -= p0 * 2) > epsilon$3) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n              if ((da1 -= p1 * 2) > epsilon$3) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n            }\n\n            var x01 = r1 * cos$2(a01),\n                y01 = r1 * sin$2(a01),\n                x10 = r0 * cos$2(a10),\n                y10 = r0 * sin$2(a10); // Apply rounded corners?\n\n            if (rc > epsilon$3) {\n              var x11 = r1 * cos$2(a11),\n                  y11 = r1 * sin$2(a11),\n                  x00 = r0 * cos$2(a00),\n                  y00 = r0 * sin$2(a00),\n                  oc; // Restrict the corner radius according to the sector angle.\n\n              if (da < pi$2 && (oc = intersect$3(x01, y01, x00, y00, x11, y11, x10, y10))) {\n                var ax = x01 - oc[0],\n                    ay = y01 - oc[1],\n                    bx = x11 - oc[0],\n                    by = y11 - oc[1],\n                    kc = 1 / sin$2(acos$1((ax * bx + ay * by) / (sqrt$3(ax * ax + ay * ay) * sqrt$3(bx * bx + by * by))) / 2),\n                    lc = sqrt$3(oc[0] * oc[0] + oc[1] * oc[1]);\n                rc0 = min$1(rc, (r0 - lc) / (kc - 1));\n                rc1 = min$1(rc, (r1 - lc) / (kc + 1));\n              }\n            } // Is the sector collapsed to a line?\n\n\n            if (!(da1 > epsilon$3)) context.moveTo(x01, y01); // Does the sector\u2019s outer ring have rounded corners?\n            else if (rc1 > epsilon$3) {\n                t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n                t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n                context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?\n\n                if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.\n                else {\n                    context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);\n                    context.arc(0, 0, r1, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n                    context.arc(t1.cx, t1.cy, rc1, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);\n                  }\n              } // Or is the outer ring just a circular arc?\n              else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it\u2019s a circular sector?\n            // Or perhaps it\u2019s an annular sector collapsed due to padding?\n\n            if (!(r0 > epsilon$3) || !(da0 > epsilon$3)) context.lineTo(x10, y10); // Does the sector\u2019s inner ring (or point) have rounded corners?\n            else if (rc0 > epsilon$3) {\n                t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n                t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n                context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?\n\n                if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.\n                else {\n                    context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);\n                    context.arc(0, 0, r0, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n                    context.arc(t1.cx, t1.cy, rc0, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);\n                  }\n              } // Or is the inner ring just a circular arc?\n              else context.arc(0, 0, r0, a10, a00, cw);\n          }\n      context.closePath();\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    arc.centroid = function () {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$2 / 2;\n      return [cos$2(a) * r, sin$2(a) * r];\n    };\n\n    arc.innerRadius = function (_) {\n      return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant$3(+_), arc) : innerRadius;\n    };\n\n    arc.outerRadius = function (_) {\n      return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant$3(+_), arc) : outerRadius;\n    };\n\n    arc.cornerRadius = function (_) {\n      return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant$3(+_), arc) : cornerRadius;\n    };\n\n    arc.padRadius = function (_) {\n      return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant$3(+_), arc) : padRadius;\n    };\n\n    arc.startAngle = function (_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$3(+_), arc) : startAngle;\n    };\n\n    arc.endAngle = function (_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$3(+_), arc) : endAngle;\n    };\n\n    arc.padAngle = function (_) {\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$3(+_), arc) : padAngle;\n    };\n\n    arc.context = function (_) {\n      return arguments.length ? (context = _ == null ? null : _, arc) : context;\n    };\n\n    return arc;\n  }\n\n  function array$4 (x) {\n    return typeof x === \"object\" && \"length\" in x ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n  }\n\n  function Linear$1(context) {\n    this._context = context;\n  }\n\n  Linear$1.prototype = {\n    areaStart: function () {\n      this._line = 0;\n    },\n    areaEnd: function () {\n      this._line = NaN;\n    },\n    lineStart: function () {\n      this._point = 0;\n    },\n    lineEnd: function () {\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function (x, y) {\n      x = +x, y = +y;\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n          break;\n\n        case 1:\n          this._point = 2;\n        // proceed\n\n        default:\n          this._context.lineTo(x, y);\n\n          break;\n      }\n    }\n  };\n  function curveLinear (context) {\n    return new Linear$1(context);\n  }\n\n  function x$3(p) {\n    return p[0];\n  }\n  function y$3(p) {\n    return p[1];\n  }\n\n  function line$2$1 (x, y) {\n    var defined = constant$3(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n    x = typeof x === \"function\" ? x : x === undefined ? x$3 : constant$3(x);\n    y = typeof y === \"function\" ? y : y === undefined ? y$3 : constant$3(y);\n\n    function line(data) {\n      var i,\n          n = (data = array$4(data)).length,\n          d,\n          defined0 = false,\n          buffer;\n      if (context == null) output = curve(buffer = path$3());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) output.lineStart();else output.lineEnd();\n        }\n\n        if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    line.x = function (_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$3(+_), line) : x;\n    };\n\n    line.y = function (_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$3(+_), line) : y;\n    };\n\n    line.defined = function (_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$3(!!_), line) : defined;\n    };\n\n    line.curve = function (_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n    };\n\n    line.context = function (_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n    };\n\n    return line;\n  }\n\n  function area$2$1 (x0, y0, y1) {\n    var x1 = null,\n        defined = constant$3(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n    x0 = typeof x0 === \"function\" ? x0 : x0 === undefined ? x$3 : constant$3(+x0);\n    y0 = typeof y0 === \"function\" ? y0 : y0 === undefined ? constant$3(0) : constant$3(+y0);\n    y1 = typeof y1 === \"function\" ? y1 : y1 === undefined ? y$3 : constant$3(+y1);\n\n    function area(data) {\n      var i,\n          j,\n          k,\n          n = (data = array$4(data)).length,\n          d,\n          defined0 = false,\n          buffer,\n          x0z = new Array(n),\n          y0z = new Array(n);\n      if (context == null) output = curve(buffer = path$3());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) {\n            j = i;\n            output.areaStart();\n            output.lineStart();\n          } else {\n            output.lineEnd();\n            output.lineStart();\n\n            for (k = i - 1; k >= j; --k) {\n              output.point(x0z[k], y0z[k]);\n            }\n\n            output.lineEnd();\n            output.areaEnd();\n          }\n        }\n\n        if (defined0) {\n          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n        }\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    function arealine() {\n      return line$2$1().defined(defined).curve(curve).context(context);\n    }\n\n    area.x = function (_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$3(+_), x1 = null, area) : x0;\n    };\n\n    area.x0 = function (_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$3(+_), area) : x0;\n    };\n\n    area.x1 = function (_) {\n      return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$3(+_), area) : x1;\n    };\n\n    area.y = function (_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$3(+_), y1 = null, area) : y0;\n    };\n\n    area.y0 = function (_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$3(+_), area) : y0;\n    };\n\n    area.y1 = function (_) {\n      return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$3(+_), area) : y1;\n    };\n\n    area.lineX0 = area.lineY0 = function () {\n      return arealine().x(x0).y(y0);\n    };\n\n    area.lineY1 = function () {\n      return arealine().x(x0).y(y1);\n    };\n\n    area.lineX1 = function () {\n      return arealine().x(x1).y(y0);\n    };\n\n    area.defined = function (_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$3(!!_), area) : defined;\n    };\n\n    area.curve = function (_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n    };\n\n    area.context = function (_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n    };\n\n    return area;\n  }\n\n  var circle$1 = {\n    draw: function (context, size) {\n      var r = Math.sqrt(size / pi$2);\n      context.moveTo(r, 0);\n      context.arc(0, 0, r, 0, tau$2);\n    }\n  };\n\n  function symbol$2 (type, size) {\n    var context = null;\n    type = typeof type === \"function\" ? type : constant$3(type || circle$1);\n    size = typeof size === \"function\" ? size : constant$3(size === undefined ? 64 : +size);\n\n    function symbol() {\n      var buffer;\n      if (!context) context = buffer = path$3();\n      type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    symbol.type = function (_) {\n      return arguments.length ? (type = typeof _ === \"function\" ? _ : constant$3(_), symbol) : type;\n    };\n\n    symbol.size = function (_) {\n      return arguments.length ? (size = typeof _ === \"function\" ? _ : constant$3(+_), symbol) : size;\n    };\n\n    symbol.context = function (_) {\n      return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n    };\n\n    return symbol;\n  }\n\n  function noop$3 () {}\n\n  function point$5(that, x, y) {\n    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);\n  }\n  function Basis(context) {\n    this._context = context;\n  }\n  Basis.prototype = {\n    areaStart: function () {\n      this._line = 0;\n    },\n    areaEnd: function () {\n      this._line = NaN;\n    },\n    lineStart: function () {\n      this._x0 = this._x1 = this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function () {\n      switch (this._point) {\n        case 3:\n          point$5(this, this._x1, this._y1);\n        // proceed\n\n        case 2:\n          this._context.lineTo(this._x1, this._y1);\n\n          break;\n      }\n\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function (x, y) {\n      x = +x, y = +y;\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n          break;\n\n        case 1:\n          this._point = 2;\n          break;\n\n        case 2:\n          this._point = 3;\n\n          this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);\n\n        // proceed\n\n        default:\n          point$5(this, x, y);\n          break;\n      }\n\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n  function curveBasis (context) {\n    return new Basis(context);\n  }\n\n  function BasisClosed(context) {\n    this._context = context;\n  }\n\n  BasisClosed.prototype = {\n    areaStart: noop$3,\n    areaEnd: noop$3,\n    lineStart: function () {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function () {\n      switch (this._point) {\n        case 1:\n          {\n            this._context.moveTo(this._x2, this._y2);\n\n            this._context.closePath();\n\n            break;\n          }\n\n        case 2:\n          {\n            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n\n            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n\n            this._context.closePath();\n\n            break;\n          }\n\n        case 3:\n          {\n            this.point(this._x2, this._y2);\n            this.point(this._x3, this._y3);\n            this.point(this._x4, this._y4);\n            break;\n          }\n      }\n    },\n    point: function (x, y) {\n      x = +x, y = +y;\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          this._x2 = x, this._y2 = y;\n          break;\n\n        case 1:\n          this._point = 2;\n          this._x3 = x, this._y3 = y;\n          break;\n\n        case 2:\n          this._point = 3;\n          this._x4 = x, this._y4 = y;\n\n          this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);\n\n          break;\n\n        default:\n          point$5(this, x, y);\n          break;\n      }\n\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n  function curveBasisClosed (context) {\n    return new BasisClosed(context);\n  }\n\n  function BasisOpen(context) {\n    this._context = context;\n  }\n\n  BasisOpen.prototype = {\n    areaStart: function () {\n      this._line = 0;\n    },\n    areaEnd: function () {\n      this._line = NaN;\n    },\n    lineStart: function () {\n      this._x0 = this._x1 = this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function () {\n      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function (x, y) {\n      x = +x, y = +y;\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          break;\n\n        case 1:\n          this._point = 2;\n          break;\n\n        case 2:\n          this._point = 3;\n          var x0 = (this._x0 + 4 * this._x1 + x) / 6,\n              y0 = (this._y0 + 4 * this._y1 + y) / 6;\n          this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);\n          break;\n\n        case 3:\n          this._point = 4;\n        // proceed\n\n        default:\n          point$5(this, x, y);\n          break;\n      }\n\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n  function curveBasisOpen (context) {\n    return new BasisOpen(context);\n  }\n\n  function Bundle(context, beta) {\n    this._basis = new Basis(context);\n    this._beta = beta;\n  }\n\n  Bundle.prototype = {\n    lineStart: function () {\n      this._x = [];\n      this._y = [];\n\n      this._basis.lineStart();\n    },\n    lineEnd: function () {\n      var x = this._x,\n          y = this._y,\n          j = x.length - 1;\n\n      if (j > 0) {\n        var x0 = x[0],\n            y0 = y[0],\n            dx = x[j] - x0,\n            dy = y[j] - y0,\n            i = -1,\n            t;\n\n        while (++i <= j) {\n          t = i / j;\n\n          this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));\n        }\n      }\n\n      this._x = this._y = null;\n\n      this._basis.lineEnd();\n    },\n    point: function (x, y) {\n      this._x.push(+x);\n\n      this._y.push(+y);\n    }\n  };\n  var curveBundle = (function custom(beta) {\n    function bundle(context) {\n      return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n    }\n\n    bundle.beta = function (beta) {\n      return custom(+beta);\n    };\n\n    return bundle;\n  })(0.85);\n\n  function point$4(that, x, y) {\n    that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);\n  }\n  function Cardinal(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n  Cardinal.prototype = {\n    areaStart: function () {\n      this._line = 0;\n    },\n    areaEnd: function () {\n      this._line = NaN;\n    },\n    lineStart: function () {\n      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function () {\n      switch (this._point) {\n        case 2:\n          this._context.lineTo(this._x2, this._y2);\n\n          break;\n\n        case 3:\n          point$4(this, this._x1, this._y1);\n          break;\n      }\n\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function (x, y) {\n      x = +x, y = +y;\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n          break;\n\n        case 1:\n          this._point = 2;\n          this._x1 = x, this._y1 = y;\n          break;\n\n        case 2:\n          this._point = 3;\n        // proceed\n\n        default:\n          point$4(this, x, y);\n          break;\n      }\n\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n  var curveCardinal = (function custom(tension) {\n    function cardinal(context) {\n      return new Cardinal(context, tension);\n    }\n\n    cardinal.tension = function (tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function CardinalClosed(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n  CardinalClosed.prototype = {\n    areaStart: noop$3,\n    areaEnd: noop$3,\n    lineStart: function () {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function () {\n      switch (this._point) {\n        case 1:\n          {\n            this._context.moveTo(this._x3, this._y3);\n\n            this._context.closePath();\n\n            break;\n          }\n\n        case 2:\n          {\n            this._context.lineTo(this._x3, this._y3);\n\n            this._context.closePath();\n\n            break;\n          }\n\n        case 3:\n          {\n            this.point(this._x3, this._y3);\n            this.point(this._x4, this._y4);\n            this.point(this._x5, this._y5);\n            break;\n          }\n      }\n    },\n    point: function (x, y) {\n      x = +x, y = +y;\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          this._x3 = x, this._y3 = y;\n          break;\n\n        case 1:\n          this._point = 2;\n\n          this._context.moveTo(this._x4 = x, this._y4 = y);\n\n          break;\n\n        case 2:\n          this._point = 3;\n          this._x5 = x, this._y5 = y;\n          break;\n\n        default:\n          point$4(this, x, y);\n          break;\n      }\n\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n  var curveCardinalClosed = (function custom(tension) {\n    function cardinal(context) {\n      return new CardinalClosed(context, tension);\n    }\n\n    cardinal.tension = function (tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function CardinalOpen(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n  CardinalOpen.prototype = {\n    areaStart: function () {\n      this._line = 0;\n    },\n    areaEnd: function () {\n      this._line = NaN;\n    },\n    lineStart: function () {\n      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function () {\n      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function (x, y) {\n      x = +x, y = +y;\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          break;\n\n        case 1:\n          this._point = 2;\n          break;\n\n        case 2:\n          this._point = 3;\n          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);\n          break;\n\n        case 3:\n          this._point = 4;\n        // proceed\n\n        default:\n          point$4(this, x, y);\n          break;\n      }\n\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n  var curveCardinalOpen = (function custom(tension) {\n    function cardinal(context) {\n      return new CardinalOpen(context, tension);\n    }\n\n    cardinal.tension = function (tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function point$3(that, x, y) {\n    var x1 = that._x1,\n        y1 = that._y1,\n        x2 = that._x2,\n        y2 = that._y2;\n\n    if (that._l01_a > epsilon$3) {\n      var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n          n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n    }\n\n    if (that._l23_a > epsilon$3) {\n      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n          m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n    }\n\n    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n  }\n\n  function CatmullRom(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRom.prototype = {\n    areaStart: function () {\n      this._line = 0;\n    },\n    areaEnd: function () {\n      this._line = NaN;\n    },\n    lineStart: function () {\n      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n    },\n    lineEnd: function () {\n      switch (this._point) {\n        case 2:\n          this._context.lineTo(this._x2, this._y2);\n\n          break;\n\n        case 3:\n          this.point(this._x2, this._y2);\n          break;\n      }\n\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function (x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n          break;\n\n        case 1:\n          this._point = 2;\n          break;\n\n        case 2:\n          this._point = 3;\n        // proceed\n\n        default:\n          point$3(this, x, y);\n          break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n  var curveCatmullRom = (function custom(alpha) {\n    function catmullRom(context) {\n      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n    }\n\n    catmullRom.alpha = function (alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function CatmullRomClosed(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomClosed.prototype = {\n    areaStart: noop$3,\n    areaEnd: noop$3,\n    lineStart: function () {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n    },\n    lineEnd: function () {\n      switch (this._point) {\n        case 1:\n          {\n            this._context.moveTo(this._x3, this._y3);\n\n            this._context.closePath();\n\n            break;\n          }\n\n        case 2:\n          {\n            this._context.lineTo(this._x3, this._y3);\n\n            this._context.closePath();\n\n            break;\n          }\n\n        case 3:\n          {\n            this.point(this._x3, this._y3);\n            this.point(this._x4, this._y4);\n            this.point(this._x5, this._y5);\n            break;\n          }\n      }\n    },\n    point: function (x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          this._x3 = x, this._y3 = y;\n          break;\n\n        case 1:\n          this._point = 2;\n\n          this._context.moveTo(this._x4 = x, this._y4 = y);\n\n          break;\n\n        case 2:\n          this._point = 3;\n          this._x5 = x, this._y5 = y;\n          break;\n\n        default:\n          point$3(this, x, y);\n          break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n  var curveCatmullRomClosed = (function custom(alpha) {\n    function catmullRom(context) {\n      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n    }\n\n    catmullRom.alpha = function (alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function CatmullRomOpen(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomOpen.prototype = {\n    areaStart: function () {\n      this._line = 0;\n    },\n    areaEnd: function () {\n      this._line = NaN;\n    },\n    lineStart: function () {\n      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n    },\n    lineEnd: function () {\n      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function (x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          break;\n\n        case 1:\n          this._point = 2;\n          break;\n\n        case 2:\n          this._point = 3;\n          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);\n          break;\n\n        case 3:\n          this._point = 4;\n        // proceed\n\n        default:\n          point$3(this, x, y);\n          break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n  var curveCatmullRomOpen = (function custom(alpha) {\n    function catmullRom(context) {\n      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n    }\n\n    catmullRom.alpha = function (alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function LinearClosed(context) {\n    this._context = context;\n  }\n\n  LinearClosed.prototype = {\n    areaStart: noop$3,\n    areaEnd: noop$3,\n    lineStart: function () {\n      this._point = 0;\n    },\n    lineEnd: function () {\n      if (this._point) this._context.closePath();\n    },\n    point: function (x, y) {\n      x = +x, y = +y;\n      if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);\n    }\n  };\n  function curveLinearClosed (context) {\n    return new LinearClosed(context);\n  }\n\n  function sign$1(x) {\n    return x < 0 ? -1 : 1;\n  } // Calculate the slopes of the tangents (Hermite-type interpolation) based on\n  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n  // NOV(II), P. 443, 1990.\n\n\n  function slope3(that, x2, y2) {\n    var h0 = that._x1 - that._x0,\n        h1 = x2 - that._x1,\n        s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n        s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n        p = (s0 * h1 + s1 * h0) / (h0 + h1);\n    return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n  } // Calculate a one-sided slope.\n\n\n  function slope2(that, t) {\n    var h = that._x1 - that._x0;\n    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n  } // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n  // \"you can express cubic Hermite interpolation in terms of cubic B\u00e9zier curves\n  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n\n\n  function point$2(that, t0, t1) {\n    var x0 = that._x0,\n        y0 = that._y0,\n        x1 = that._x1,\n        y1 = that._y1,\n        dx = (x1 - x0) / 3;\n\n    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n  }\n\n  function MonotoneX(context) {\n    this._context = context;\n  }\n\n  MonotoneX.prototype = {\n    areaStart: function () {\n      this._line = 0;\n    },\n    areaEnd: function () {\n      this._line = NaN;\n    },\n    lineStart: function () {\n      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function () {\n      switch (this._point) {\n        case 2:\n          this._context.lineTo(this._x1, this._y1);\n\n          break;\n\n        case 3:\n          point$2(this, this._t0, slope2(this, this._t0));\n          break;\n      }\n\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function (x, y) {\n      var t1 = NaN;\n      x = +x, y = +y;\n      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n          break;\n\n        case 1:\n          this._point = 2;\n          break;\n\n        case 2:\n          this._point = 3;\n          point$2(this, slope2(this, t1 = slope3(this, x, y)), t1);\n          break;\n\n        default:\n          point$2(this, this._t0, t1 = slope3(this, x, y));\n          break;\n      }\n\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n      this._t0 = t1;\n    }\n  };\n\n  function MonotoneY(context) {\n    this._context = new ReflectContext(context);\n  }\n\n  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {\n    MonotoneX.prototype.point.call(this, y, x);\n  };\n\n  function ReflectContext(context) {\n    this._context = context;\n  }\n\n  ReflectContext.prototype = {\n    moveTo: function (x, y) {\n      this._context.moveTo(y, x);\n    },\n    closePath: function () {\n      this._context.closePath();\n    },\n    lineTo: function (x, y) {\n      this._context.lineTo(y, x);\n    },\n    bezierCurveTo: function (x1, y1, x2, y2, x, y) {\n      this._context.bezierCurveTo(y1, x1, y2, x2, y, x);\n    }\n  };\n  function monotoneX(context) {\n    return new MonotoneX(context);\n  }\n  function monotoneY(context) {\n    return new MonotoneY(context);\n  }\n\n  function Natural(context) {\n    this._context = context;\n  }\n\n  Natural.prototype = {\n    areaStart: function () {\n      this._line = 0;\n    },\n    areaEnd: function () {\n      this._line = NaN;\n    },\n    lineStart: function () {\n      this._x = [];\n      this._y = [];\n    },\n    lineEnd: function () {\n      var x = this._x,\n          y = this._y,\n          n = x.length;\n\n      if (n) {\n        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n\n        if (n === 2) {\n          this._context.lineTo(x[1], y[1]);\n        } else {\n          var px = controlPoints(x),\n              py = controlPoints(y);\n\n          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n          }\n        }\n      }\n\n      if (this._line || this._line !== 0 && n === 1) this._context.closePath();\n      this._line = 1 - this._line;\n      this._x = this._y = null;\n    },\n    point: function (x, y) {\n      this._x.push(+x);\n\n      this._y.push(+y);\n    }\n  }; // See https://www.particleincell.com/2012/bezier-splines/ for derivation.\n\n  function controlPoints(x) {\n    var i,\n        n = x.length - 1,\n        m,\n        a = new Array(n),\n        b = new Array(n),\n        r = new Array(n);\n    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n\n    for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n\n    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n\n    for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n\n    a[n - 1] = r[n - 1] / b[n - 1];\n\n    for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n\n    b[n - 1] = (x[n] + a[n - 1]) / 2;\n\n    for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n\n    return [a, b];\n  }\n\n  function curveNatural (context) {\n    return new Natural(context);\n  }\n\n  function Step(context, t) {\n    this._context = context;\n    this._t = t;\n  }\n\n  Step.prototype = {\n    areaStart: function () {\n      this._line = 0;\n    },\n    areaEnd: function () {\n      this._line = NaN;\n    },\n    lineStart: function () {\n      this._x = this._y = NaN;\n      this._point = 0;\n    },\n    lineEnd: function () {\n      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n    },\n    point: function (x, y) {\n      x = +x, y = +y;\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;\n          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n          break;\n\n        case 1:\n          this._point = 2;\n        // proceed\n\n        default:\n          {\n            if (this._t <= 0) {\n              this._context.lineTo(this._x, y);\n\n              this._context.lineTo(x, y);\n            } else {\n              var x1 = this._x * (1 - this._t) + x * this._t;\n\n              this._context.lineTo(x1, this._y);\n\n              this._context.lineTo(x1, y);\n            }\n\n            break;\n          }\n      }\n\n      this._x = x, this._y = y;\n    }\n  };\n  function curveStep (context) {\n    return new Step(context, 0.5);\n  }\n  function stepBefore(context) {\n    return new Step(context, 0);\n  }\n  function stepAfter(context) {\n    return new Step(context, 1);\n  }\n\n  function domCanvas(w, h) {\n    if (typeof document !== 'undefined' && document.createElement) {\n      const c = document.createElement('canvas');\n\n      if (c && c.getContext) {\n        c.width = w;\n        c.height = h;\n        return c;\n      }\n    }\n\n    return null;\n  }\n\n  const domImage = () => typeof Image !== 'undefined' ? Image : null;\n\n  function initRange(domain, range) {\n    switch (arguments.length) {\n      case 0:\n        break;\n\n      case 1:\n        this.range(domain);\n        break;\n\n      default:\n        this.range(range).domain(domain);\n        break;\n    }\n\n    return this;\n  }\n  function initInterpolator(domain, interpolator) {\n    switch (arguments.length) {\n      case 0:\n        break;\n\n      case 1:\n        {\n          if (typeof domain === \"function\") this.interpolator(domain);else this.range(domain);\n          break;\n        }\n\n      default:\n        {\n          this.domain(domain);\n          if (typeof interpolator === \"function\") this.interpolator(interpolator);else this.range(interpolator);\n          break;\n        }\n    }\n\n    return this;\n  }\n\n  const implicit = Symbol(\"implicit\");\n  function ordinal() {\n    var index = new Map(),\n        domain = [],\n        range = [],\n        unknown = implicit;\n\n    function scale(d) {\n      var key = d + \"\",\n          i = index.get(key);\n\n      if (!i) {\n        if (unknown !== implicit) return unknown;\n        index.set(key, i = domain.push(d));\n      }\n\n      return range[(i - 1) % range.length];\n    }\n\n    scale.domain = function (_) {\n      if (!arguments.length) return domain.slice();\n      domain = [], index = new Map();\n\n      for (const value of _) {\n        const key = value + \"\";\n        if (index.has(key)) continue;\n        index.set(key, domain.push(value));\n      }\n\n      return scale;\n    };\n\n    scale.range = function (_) {\n      return arguments.length ? (range = Array.from(_), scale) : range.slice();\n    };\n\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.copy = function () {\n      return ordinal(domain, range).unknown(unknown);\n    };\n\n    initRange.apply(scale, arguments);\n    return scale;\n  }\n\n  function define (constructor, factory, prototype) {\n    constructor.prototype = factory.prototype = prototype;\n    prototype.constructor = constructor;\n  }\n  function extend(parent, definition) {\n    var prototype = Object.create(parent.prototype);\n\n    for (var key in definition) prototype[key] = definition[key];\n\n    return prototype;\n  }\n\n  function Color() {}\n  var darker = 0.7;\n  var brighter = 1 / darker;\n  var reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n      reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n      reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n      reHex = /^#([0-9a-f]{3,8})$/,\n      reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n      reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n      reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n      reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n      reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n      reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n  var named = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32\n  };\n  define(Color, color$2, {\n    copy: function (channels) {\n      return Object.assign(new this.constructor(), this, channels);\n    },\n    displayable: function () {\n      return this.rgb().displayable();\n    },\n    hex: color_formatHex,\n    // Deprecated! Use color.formatHex.\n    formatHex: color_formatHex,\n    formatHsl: color_formatHsl,\n    formatRgb: color_formatRgb,\n    toString: color_formatRgb\n  });\n\n  function color_formatHex() {\n    return this.rgb().formatHex();\n  }\n\n  function color_formatHsl() {\n    return hslConvert(this).formatHsl();\n  }\n\n  function color_formatRgb() {\n    return this.rgb().formatRgb();\n  }\n\n  function color$2(format) {\n    var m, l;\n    format = (format + \"\").trim().toLowerCase();\n    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n    : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00\n    : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n    : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000\n    : null // invalid hex\n    ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n    : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n    : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n    : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n    : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n    : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n    : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n    : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0) : null;\n  }\n\n  function rgbn(n) {\n    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n  }\n\n  function rgba(r, g, b, a) {\n    if (a <= 0) r = g = b = NaN;\n    return new Rgb(r, g, b, a);\n  }\n\n  function rgbConvert(o) {\n    if (!(o instanceof Color)) o = color$2(o);\n    if (!o) return new Rgb();\n    o = o.rgb();\n    return new Rgb(o.r, o.g, o.b, o.opacity);\n  }\n  function rgb$1(r, g, b, opacity) {\n    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n  }\n  function Rgb(r, g, b, opacity) {\n    this.r = +r;\n    this.g = +g;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n  define(Rgb, rgb$1, extend(Color, {\n    brighter: function (k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    darker: function (k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    rgb: function () {\n      return this;\n    },\n    displayable: function () {\n      return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;\n    },\n    hex: rgb_formatHex,\n    // Deprecated! Use color.formatHex.\n    formatHex: rgb_formatHex,\n    formatRgb: rgb_formatRgb,\n    toString: rgb_formatRgb\n  }));\n\n  function rgb_formatHex() {\n    return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n  }\n\n  function rgb_formatRgb() {\n    var a = this.opacity;\n    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"rgb(\" : \"rgba(\") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n\n  function hex(value) {\n    value = Math.max(0, Math.min(255, Math.round(value) || 0));\n    return (value < 16 ? \"0\" : \"\") + value.toString(16);\n  }\n\n  function hsla(h, s, l, a) {\n    if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;\n    return new Hsl(h, s, l, a);\n  }\n\n  function hslConvert(o) {\n    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Color)) o = color$2(o);\n    if (!o) return new Hsl();\n    if (o instanceof Hsl) return o;\n    o = o.rgb();\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        h = NaN,\n        s = max - min,\n        l = (max + min) / 2;\n\n    if (s) {\n      if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;\n      s /= l < 0.5 ? max + min : 2 - max - min;\n      h *= 60;\n    } else {\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n\n    return new Hsl(h, s, l, o.opacity);\n  }\n  function hsl$2(h, s, l, opacity) {\n    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hsl(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hsl, hsl$2, extend(Color, {\n    brighter: function (k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function (k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function () {\n      var h = this.h % 360 + (this.h < 0) * 360,\n          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n          l = this.l,\n          m2 = l + (l < 0.5 ? l : 1 - l) * s,\n          m1 = 2 * l - m2;\n      return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);\n    },\n    displayable: function () {\n      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;\n    },\n    formatHsl: function () {\n      var a = this.opacity;\n      a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n      return (a === 1 ? \"hsl(\" : \"hsla(\") + (this.h || 0) + \", \" + (this.s || 0) * 100 + \"%, \" + (this.l || 0) * 100 + \"%\" + (a === 1 ? \")\" : \", \" + a + \")\");\n    }\n  }));\n  /* From FvD 13.37, CSS Color Module Level 3 */\n\n  function hsl2rgb(h, m1, m2) {\n    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;\n  }\n\n  const radians$1 = Math.PI / 180;\n  const degrees$2 = 180 / Math.PI;\n\n  const K = 18,\n        Xn = 0.96422,\n        Yn = 1,\n        Zn = 0.82521,\n        t0 = 4 / 29,\n        t1 = 6 / 29,\n        t2 = 3 * t1 * t1,\n        t3 = t1 * t1 * t1;\n\n  function labConvert(o) {\n    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n    if (o instanceof Hcl) return hcl2lab(o);\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var r = rgb2lrgb(o.r),\n        g = rgb2lrgb(o.g),\n        b = rgb2lrgb(o.b),\n        y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),\n        x,\n        z;\n    if (r === g && g === b) x = z = y;else {\n      x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\n      z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\n    }\n    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n  }\n  function lab$1(l, a, b, opacity) {\n    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n  }\n  function Lab(l, a, b, opacity) {\n    this.l = +l;\n    this.a = +a;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n  define(Lab, lab$1, extend(Color, {\n    brighter: function (k) {\n      return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    darker: function (k) {\n      return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    rgb: function () {\n      var y = (this.l + 16) / 116,\n          x = isNaN(this.a) ? y : y + this.a / 500,\n          z = isNaN(this.b) ? y : y - this.b / 200;\n      x = Xn * lab2xyz(x);\n      y = Yn * lab2xyz(y);\n      z = Zn * lab2xyz(z);\n      return new Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);\n    }\n  }));\n\n  function xyz2lab(t) {\n    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n  }\n\n  function lab2xyz(t) {\n    return t > t1 ? t * t * t : t2 * (t - t0);\n  }\n\n  function lrgb2rgb(x) {\n    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n  }\n\n  function rgb2lrgb(x) {\n    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n  }\n\n  function hclConvert(o) {\n    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n    if (!(o instanceof Lab)) o = labConvert(o);\n    if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);\n    var h = Math.atan2(o.b, o.a) * degrees$2;\n    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n  }\n  function hcl$2(h, c, l, opacity) {\n    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n  }\n  function Hcl(h, c, l, opacity) {\n    this.h = +h;\n    this.c = +c;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  function hcl2lab(o) {\n    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\n    var h = o.h * radians$1;\n    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n  }\n\n  define(Hcl, hcl$2, extend(Color, {\n    brighter: function (k) {\n      return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\n    },\n    darker: function (k) {\n      return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\n    },\n    rgb: function () {\n      return hcl2lab(this).rgb();\n    }\n  }));\n\n  var A = -0.14861,\n      B = +1.78277,\n      C$1 = -0.29227,\n      D = -0.90649,\n      E = +1.97294,\n      ED = E * D,\n      EB = E * B,\n      BC_DA = B * C$1 - D * A;\n\n  function cubehelixConvert(o) {\n    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n        bl = b - l,\n        k = (E * (g - l) - C$1 * bl) / D,\n        s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),\n        // NaN if l=0 or l=1\n    h = s ? Math.atan2(k, bl) * degrees$2 - 120 : NaN;\n    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n  }\n\n  function cubehelix$2(h, s, l, opacity) {\n    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n  }\n  function Cubehelix(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n  define(Cubehelix, cubehelix$2, extend(Color, {\n    brighter: function (k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function (k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function () {\n      var h = isNaN(this.h) ? 0 : (this.h + 120) * radians$1,\n          l = +this.l,\n          a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n          cosh = Math.cos(h),\n          sinh = Math.sin(h);\n      return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C$1 * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);\n    }\n  }));\n\n  function basis(t1, v0, v1, v2, v3) {\n    var t2 = t1 * t1,\n        t3 = t2 * t1;\n    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;\n  }\n  function basis$1 (values) {\n    var n = values.length - 1;\n    return function (t) {\n      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n          v1 = values[i],\n          v2 = values[i + 1],\n          v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n          v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n      return basis((t - i / n) * n, v0, v1, v2, v3);\n    };\n  }\n\n  function basisClosed (values) {\n    var n = values.length;\n    return function (t) {\n      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n          v0 = values[(i + n - 1) % n],\n          v1 = values[i % n],\n          v2 = values[(i + 1) % n],\n          v3 = values[(i + 2) % n];\n      return basis((t - i / n) * n, v0, v1, v2, v3);\n    };\n  }\n\n  var constant$2 = (x => () => x);\n\n  function linear$1(a, d) {\n    return function (t) {\n      return a + t * d;\n    };\n  }\n\n  function exponential(a, b, y) {\n    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {\n      return Math.pow(a + t * b, y);\n    };\n  }\n\n  function hue$1(a, b) {\n    var d = b - a;\n    return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);\n  }\n  function gamma(y) {\n    return (y = +y) === 1 ? nogamma : function (a, b) {\n      return b - a ? exponential(a, b, y) : constant$2(isNaN(a) ? b : a);\n    };\n  }\n  function nogamma(a, b) {\n    var d = b - a;\n    return d ? linear$1(a, d) : constant$2(isNaN(a) ? b : a);\n  }\n\n  var rgb = (function rgbGamma(y) {\n    var color = gamma(y);\n\n    function rgb(start, end) {\n      var r = color((start = rgb$1(start)).r, (end = rgb$1(end)).r),\n          g = color(start.g, end.g),\n          b = color(start.b, end.b),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function (t) {\n        start.r = r(t);\n        start.g = g(t);\n        start.b = b(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    rgb.gamma = rgbGamma;\n    return rgb;\n  })(1);\n\n  function rgbSpline(spline) {\n    return function (colors) {\n      var n = colors.length,\n          r = new Array(n),\n          g = new Array(n),\n          b = new Array(n),\n          i,\n          color;\n\n      for (i = 0; i < n; ++i) {\n        color = rgb$1(colors[i]);\n        r[i] = color.r || 0;\n        g[i] = color.g || 0;\n        b[i] = color.b || 0;\n      }\n\n      r = spline(r);\n      g = spline(g);\n      b = spline(b);\n      color.opacity = 1;\n      return function (t) {\n        color.r = r(t);\n        color.g = g(t);\n        color.b = b(t);\n        return color + \"\";\n      };\n    };\n  }\n\n  var rgbBasis = rgbSpline(basis$1);\n  var rgbBasisClosed = rgbSpline(basisClosed);\n\n  function numberArray (a, b) {\n    if (!b) b = [];\n    var n = a ? Math.min(b.length, a.length) : 0,\n        c = b.slice(),\n        i;\n    return function (t) {\n      for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n\n      return c;\n    };\n  }\n  function isNumberArray(x) {\n    return ArrayBuffer.isView(x) && !(x instanceof DataView);\n  }\n\n  function array$3 (a, b) {\n    return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n  }\n  function genericArray(a, b) {\n    var nb = b ? b.length : 0,\n        na = a ? Math.min(nb, a.length) : 0,\n        x = new Array(na),\n        c = new Array(nb),\n        i;\n\n    for (i = 0; i < na; ++i) x[i] = interpolate$1(a[i], b[i]);\n\n    for (; i < nb; ++i) c[i] = b[i];\n\n    return function (t) {\n      for (i = 0; i < na; ++i) c[i] = x[i](t);\n\n      return c;\n    };\n  }\n\n  function date$1 (a, b) {\n    var d = new Date();\n    return a = +a, b = +b, function (t) {\n      return d.setTime(a * (1 - t) + b * t), d;\n    };\n  }\n\n  function interpolateNumber (a, b) {\n    return a = +a, b = +b, function (t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n\n  function object (a, b) {\n    var i = {},\n        c = {},\n        k;\n    if (a === null || typeof a !== \"object\") a = {};\n    if (b === null || typeof b !== \"object\") b = {};\n\n    for (k in b) {\n      if (k in a) {\n        i[k] = interpolate$1(a[k], b[k]);\n      } else {\n        c[k] = b[k];\n      }\n    }\n\n    return function (t) {\n      for (k in i) c[k] = i[k](t);\n\n      return c;\n    };\n  }\n\n  var reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n      reB = new RegExp(reA.source, \"g\");\n\n  function zero$1(b) {\n    return function () {\n      return b;\n    };\n  }\n\n  function one$1(b) {\n    return function (t) {\n      return b(t) + \"\";\n    };\n  }\n\n  function string (a, b) {\n    var bi = reA.lastIndex = reB.lastIndex = 0,\n        // scan index for next number in b\n    am,\n        // current match in a\n    bm,\n        // current match in b\n    bs,\n        // string preceding current number in b, if any\n    i = -1,\n        // index in s\n    s = [],\n        // string constants and placeholders\n    q = []; // number interpolators\n    // Coerce inputs to strings.\n\n    a = a + \"\", b = b + \"\"; // Interpolate pairs of numbers in a & b.\n\n    while ((am = reA.exec(a)) && (bm = reB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        // a string precedes the next number in b\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; // coalesce with previous string\n        else s[++i] = bs;\n      }\n\n      if ((am = am[0]) === (bm = bm[0])) {\n        // numbers in a & b match\n        if (s[i]) s[i] += bm; // coalesce with previous string\n        else s[++i] = bm;\n      } else {\n        // interpolate non-matching numbers\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: interpolateNumber(am, bm)\n        });\n      }\n\n      bi = reB.lastIndex;\n    } // Add remains of b.\n\n\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    } // Special optimization for only a single match.\n    // Otherwise, interpolate each of the numbers and rejoin the string.\n\n\n    return s.length < 2 ? q[0] ? one$1(q[0].x) : zero$1(b) : (b = q.length, function (t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n\n      return s.join(\"\");\n    });\n  }\n\n  function interpolate$1 (a, b) {\n    var t = typeof b,\n        c;\n    return b == null || t === \"boolean\" ? constant$2(b) : (t === \"number\" ? interpolateNumber : t === \"string\" ? (c = color$2(b)) ? (b = c, rgb) : string : b instanceof color$2 ? rgb : b instanceof Date ? date$1 : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object : interpolateNumber)(a, b);\n  }\n\n  function discrete$1 (range) {\n    var n = range.length;\n    return function (t) {\n      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n    };\n  }\n\n  function hue (a, b) {\n    var i = hue$1(+a, +b);\n    return function (t) {\n      var x = i(t);\n      return x - 360 * Math.floor(x / 360);\n    };\n  }\n\n  function interpolateRound (a, b) {\n    return a = +a, b = +b, function (t) {\n      return Math.round(a * (1 - t) + b * t);\n    };\n  }\n\n  var degrees$1 = 180 / Math.PI;\n  var identity$3 = {\n    translateX: 0,\n    translateY: 0,\n    rotate: 0,\n    skewX: 0,\n    scaleX: 1,\n    scaleY: 1\n  };\n  function decompose (a, b, c, d, e, f) {\n    var scaleX, scaleY, skewX;\n    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n    return {\n      translateX: e,\n      translateY: f,\n      rotate: Math.atan2(b, a) * degrees$1,\n      skewX: Math.atan(skewX) * degrees$1,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var svgNode;\n  /* eslint-disable no-undef */\n\n  function parseCss(value) {\n    const m = new (typeof DOMMatrix === \"function\" ? DOMMatrix : WebKitCSSMatrix)(value + \"\");\n    return m.isIdentity ? identity$3 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n  }\n  function parseSvg(value) {\n    if (value == null) return identity$3;\n    if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    svgNode.setAttribute(\"transform\", value);\n    if (!(value = svgNode.transform.baseVal.consolidate())) return identity$3;\n    value = value.matrix;\n    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n  }\n\n  function interpolateTransform(parse, pxComma, pxParen, degParen) {\n    function pop(s) {\n      return s.length ? s.pop() + \" \" : \"\";\n    }\n\n    function translate(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n        q.push({\n          i: i - 4,\n          x: interpolateNumber(xa, xb)\n        }, {\n          i: i - 2,\n          x: interpolateNumber(ya, yb)\n        });\n      } else if (xb || yb) {\n        s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n      }\n    }\n\n    function rotate(a, b, s, q) {\n      if (a !== b) {\n        if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path\n\n        q.push({\n          i: s.push(pop(s) + \"rotate(\", null, degParen) - 2,\n          x: interpolateNumber(a, b)\n        });\n      } else if (b) {\n        s.push(pop(s) + \"rotate(\" + b + degParen);\n      }\n    }\n\n    function skewX(a, b, s, q) {\n      if (a !== b) {\n        q.push({\n          i: s.push(pop(s) + \"skewX(\", null, degParen) - 2,\n          x: interpolateNumber(a, b)\n        });\n      } else if (b) {\n        s.push(pop(s) + \"skewX(\" + b + degParen);\n      }\n    }\n\n    function scale(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n        q.push({\n          i: i - 4,\n          x: interpolateNumber(xa, xb)\n        }, {\n          i: i - 2,\n          x: interpolateNumber(ya, yb)\n        });\n      } else if (xb !== 1 || yb !== 1) {\n        s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n      }\n    }\n\n    return function (a, b) {\n      var s = [],\n          // string constants and placeholders\n      q = []; // number interpolators\n\n      a = parse(a), b = parse(b);\n      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n      rotate(a.rotate, b.rotate, s, q);\n      skewX(a.skewX, b.skewX, s, q);\n      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n      a = b = null; // gc\n\n      return function (t) {\n        var i = -1,\n            n = q.length,\n            o;\n\n        while (++i < n) s[(o = q[i]).i] = o.x(t);\n\n        return s.join(\"\");\n      };\n    };\n  }\n\n  var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\n  var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n\n  var epsilon2$1 = 1e-12;\n\n  function cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n\n  function sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n\n  function tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n\n  var zoom = (function zoomRho(rho, rho2, rho4) {\n    // p0 = [ux0, uy0, w0]\n    // p1 = [ux1, uy1, w1]\n    function zoom(p0, p1) {\n      var ux0 = p0[0],\n          uy0 = p0[1],\n          w0 = p0[2],\n          ux1 = p1[0],\n          uy1 = p1[1],\n          w1 = p1[2],\n          dx = ux1 - ux0,\n          dy = uy1 - uy0,\n          d2 = dx * dx + dy * dy,\n          i,\n          S; // Special case for u0 \u2245 u1.\n\n      if (d2 < epsilon2$1) {\n        S = Math.log(w1 / w0) / rho;\n\n        i = function (t) {\n          return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];\n        };\n      } // General case.\n      else {\n          var d1 = Math.sqrt(d2),\n              b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n              b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n              r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n              r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n          S = (r1 - r0) / rho;\n\n          i = function (t) {\n            var s = t * S,\n                coshr0 = cosh(r0),\n                u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n            return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];\n          };\n        }\n\n      i.duration = S * 1000 * rho / Math.SQRT2;\n      return i;\n    }\n\n    zoom.rho = function (_) {\n      var _1 = Math.max(1e-3, +_),\n          _2 = _1 * _1,\n          _4 = _2 * _2;\n\n      return zoomRho(_1, _2, _4);\n    };\n\n    return zoom;\n  })(Math.SQRT2, 2, 4);\n\n  function hsl(hue) {\n    return function (start, end) {\n      var h = hue((start = hsl$2(start)).h, (end = hsl$2(end)).h),\n          s = nogamma(start.s, end.s),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function (t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    };\n  }\n\n  var hsl$1 = hsl(hue$1);\n  var hslLong = hsl(nogamma);\n\n  function lab(start, end) {\n    var l = nogamma((start = lab$1(start)).l, (end = lab$1(end)).l),\n        a = nogamma(start.a, end.a),\n        b = nogamma(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function (t) {\n      start.l = l(t);\n      start.a = a(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  function hcl(hue) {\n    return function (start, end) {\n      var h = hue((start = hcl$2(start)).h, (end = hcl$2(end)).h),\n          c = nogamma(start.c, end.c),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function (t) {\n        start.h = h(t);\n        start.c = c(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    };\n  }\n\n  var hcl$1 = hcl(hue$1);\n  var hclLong = hcl(nogamma);\n\n  function cubehelix(hue) {\n    return function cubehelixGamma(y) {\n      y = +y;\n\n      function cubehelix(start, end) {\n        var h = hue((start = cubehelix$2(start)).h, (end = cubehelix$2(end)).h),\n            s = nogamma(start.s, end.s),\n            l = nogamma(start.l, end.l),\n            opacity = nogamma(start.opacity, end.opacity);\n        return function (t) {\n          start.h = h(t);\n          start.s = s(t);\n          start.l = l(Math.pow(t, y));\n          start.opacity = opacity(t);\n          return start + \"\";\n        };\n      }\n\n      cubehelix.gamma = cubehelixGamma;\n      return cubehelix;\n    }(1);\n  }\n\n  var cubehelix$1 = cubehelix(hue$1);\n  var cubehelixLong = cubehelix(nogamma);\n\n  function piecewise(interpolate, values) {\n    if (values === undefined) values = interpolate, interpolate = interpolate$1;\n    var i = 0,\n        n = values.length - 1,\n        v = values[0],\n        I = new Array(n < 0 ? 0 : n);\n\n    while (i < n) I[i] = interpolate(v, v = values[++i]);\n\n    return function (t) {\n      var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));\n      return I[i](t - i);\n    };\n  }\n\n  function quantize$2 (interpolator, n) {\n    var samples = new Array(n);\n\n    for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n\n    return samples;\n  }\n\n  var $$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    interpolate: interpolate$1,\n    interpolateArray: array$3,\n    interpolateBasis: basis$1,\n    interpolateBasisClosed: basisClosed,\n    interpolateDate: date$1,\n    interpolateDiscrete: discrete$1,\n    interpolateHue: hue,\n    interpolateNumber: interpolateNumber,\n    interpolateNumberArray: numberArray,\n    interpolateObject: object,\n    interpolateRound: interpolateRound,\n    interpolateString: string,\n    interpolateTransformCss: interpolateTransformCss,\n    interpolateTransformSvg: interpolateTransformSvg,\n    interpolateZoom: zoom,\n    interpolateRgb: rgb,\n    interpolateRgbBasis: rgbBasis,\n    interpolateRgbBasisClosed: rgbBasisClosed,\n    interpolateHsl: hsl$1,\n    interpolateHslLong: hslLong,\n    interpolateLab: lab,\n    interpolateHcl: hcl$1,\n    interpolateHclLong: hclLong,\n    interpolateCubehelix: cubehelix$1,\n    interpolateCubehelixLong: cubehelixLong,\n    piecewise: piecewise,\n    quantize: quantize$2\n  });\n\n  function constants(x) {\n    return function () {\n      return x;\n    };\n  }\n\n  function number$5(x) {\n    return +x;\n  }\n\n  var unit = [0, 1];\n  function identity$2(x) {\n    return x;\n  }\n\n  function normalize(a, b) {\n    return (b -= a = +a) ? function (x) {\n      return (x - a) / b;\n    } : constants(isNaN(b) ? NaN : 0.5);\n  }\n\n  function clamper(a, b) {\n    var t;\n    if (a > b) t = a, a = b, b = t;\n    return function (x) {\n      return Math.max(a, Math.min(b, x));\n    };\n  } // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n  // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\n\n\n  function bimap(domain, range, interpolate) {\n    var d0 = domain[0],\n        d1 = domain[1],\n        r0 = range[0],\n        r1 = range[1];\n    if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n    return function (x) {\n      return r0(d0(x));\n    };\n  }\n\n  function polymap(domain, range, interpolate) {\n    var j = Math.min(domain.length, range.length) - 1,\n        d = new Array(j),\n        r = new Array(j),\n        i = -1; // Reverse descending domains.\n\n    if (domain[j] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n\n    while (++i < j) {\n      d[i] = normalize(domain[i], domain[i + 1]);\n      r[i] = interpolate(range[i], range[i + 1]);\n    }\n\n    return function (x) {\n      var i = bisectRight$1(domain, x, 1, j) - 1;\n      return r[i](d[i](x));\n    };\n  }\n\n  function copy$2(source, target) {\n    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());\n  }\n  function transformer$3() {\n    var domain = unit,\n        range = unit,\n        interpolate = interpolate$1,\n        transform,\n        untransform,\n        unknown,\n        clamp = identity$2,\n        piecewise,\n        output,\n        input;\n\n    function rescale() {\n      var n = Math.min(domain.length, range.length);\n      if (clamp !== identity$2) clamp = clamper(domain[0], domain[n - 1]);\n      piecewise = n > 2 ? polymap : bimap;\n      output = input = null;\n      return scale;\n    }\n\n    function scale(x) {\n      return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n    }\n\n    scale.invert = function (y) {\n      return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n    };\n\n    scale.domain = function (_) {\n      return arguments.length ? (domain = Array.from(_, number$5), rescale()) : domain.slice();\n    };\n\n    scale.range = function (_) {\n      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n    };\n\n    scale.rangeRound = function (_) {\n      return range = Array.from(_), interpolate = interpolateRound, rescale();\n    };\n\n    scale.clamp = function (_) {\n      return arguments.length ? (clamp = _ ? true : identity$2, rescale()) : clamp !== identity$2;\n    };\n\n    scale.interpolate = function (_) {\n      return arguments.length ? (interpolate = _, rescale()) : interpolate;\n    };\n\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    return function (t, u) {\n      transform = t, untransform = u;\n      return rescale();\n    };\n  }\n  function continuous$1() {\n    return transformer$3()(identity$2, identity$2);\n  }\n\n  function tickFormat$1(start, stop, count, specifier) {\n    var step = tickStep(start, stop, count),\n        precision;\n    specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n\n    switch (specifier.type) {\n      case \"s\":\n        {\n          var value = Math.max(Math.abs(start), Math.abs(stop));\n          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n          return formatPrefix(specifier, value);\n        }\n\n      case \"\":\n      case \"e\":\n      case \"g\":\n      case \"p\":\n      case \"r\":\n        {\n          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n          break;\n        }\n\n      case \"f\":\n      case \"%\":\n        {\n          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n          break;\n        }\n    }\n\n    return format$3(specifier);\n  }\n\n  function linearish(scale) {\n    var domain = scale.domain;\n\n    scale.ticks = function (count) {\n      var d = domain();\n      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n    };\n\n    scale.tickFormat = function (count, specifier) {\n      var d = domain();\n      return tickFormat$1(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n    };\n\n    scale.nice = function (count) {\n      if (count == null) count = 10;\n      var d = domain();\n      var i0 = 0;\n      var i1 = d.length - 1;\n      var start = d[i0];\n      var stop = d[i1];\n      var prestep;\n      var step;\n      var maxIter = 10;\n\n      if (stop < start) {\n        step = start, start = stop, stop = step;\n        step = i0, i0 = i1, i1 = step;\n      }\n\n      while (maxIter-- > 0) {\n        step = tickIncrement(start, stop, count);\n\n        if (step === prestep) {\n          d[i0] = start;\n          d[i1] = stop;\n          return domain(d);\n        } else if (step > 0) {\n          start = Math.floor(start / step) * step;\n          stop = Math.ceil(stop / step) * step;\n        } else if (step < 0) {\n          start = Math.ceil(start * step) / step;\n          stop = Math.floor(stop * step) / step;\n        } else {\n          break;\n        }\n\n        prestep = step;\n      }\n\n      return scale;\n    };\n\n    return scale;\n  }\n  function linear() {\n    var scale = continuous$1();\n\n    scale.copy = function () {\n      return copy$2(scale, linear());\n    };\n\n    initRange.apply(scale, arguments);\n    return linearish(scale);\n  }\n\n  function identity$1(domain) {\n    var unknown;\n\n    function scale(x) {\n      return x == null || isNaN(x = +x) ? unknown : x;\n    }\n\n    scale.invert = scale;\n\n    scale.domain = scale.range = function (_) {\n      return arguments.length ? (domain = Array.from(_, number$5), scale) : domain.slice();\n    };\n\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.copy = function () {\n      return identity$1(domain).unknown(unknown);\n    };\n\n    domain = arguments.length ? Array.from(domain, number$5) : [0, 1];\n    return linearish(scale);\n  }\n\n  function nice(domain, interval) {\n    domain = domain.slice();\n    var i0 = 0,\n        i1 = domain.length - 1,\n        x0 = domain[i0],\n        x1 = domain[i1],\n        t;\n\n    if (x1 < x0) {\n      t = i0, i0 = i1, i1 = t;\n      t = x0, x0 = x1, x1 = t;\n    }\n\n    domain[i0] = interval.floor(x0);\n    domain[i1] = interval.ceil(x1);\n    return domain;\n  }\n\n  function transformLog(x) {\n    return Math.log(x);\n  }\n\n  function transformExp(x) {\n    return Math.exp(x);\n  }\n\n  function transformLogn(x) {\n    return -Math.log(-x);\n  }\n\n  function transformExpn(x) {\n    return -Math.exp(-x);\n  }\n\n  function pow10(x) {\n    return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n  }\n\n  function powp(base) {\n    return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {\n      return Math.pow(base, x);\n    };\n  }\n\n  function logp(base) {\n    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {\n      return Math.log(x) / base;\n    });\n  }\n\n  function reflect(f) {\n    return function (x) {\n      return -f(-x);\n    };\n  }\n\n  function loggish(transform) {\n    var scale = transform(transformLog, transformExp),\n        domain = scale.domain,\n        base = 10,\n        logs,\n        pows;\n\n    function rescale() {\n      logs = logp(base), pows = powp(base);\n\n      if (domain()[0] < 0) {\n        logs = reflect(logs), pows = reflect(pows);\n        transform(transformLogn, transformExpn);\n      } else {\n        transform(transformLog, transformExp);\n      }\n\n      return scale;\n    }\n\n    scale.base = function (_) {\n      return arguments.length ? (base = +_, rescale()) : base;\n    };\n\n    scale.domain = function (_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n\n    scale.ticks = function (count) {\n      var d = domain(),\n          u = d[0],\n          v = d[d.length - 1],\n          r;\n      if (r = v < u) i = u, u = v, v = i;\n      var i = logs(u),\n          j = logs(v),\n          p,\n          k,\n          t,\n          n = count == null ? 10 : +count,\n          z = [];\n\n      if (!(base % 1) && j - i < n) {\n        i = Math.floor(i), j = Math.ceil(j);\n        if (u > 0) for (; i <= j; ++i) {\n          for (k = 1, p = pows(i); k < base; ++k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        } else for (; i <= j; ++i) {\n          for (k = base - 1, p = pows(i); k >= 1; --k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        }\n        if (z.length * 2 < n) z = ticks(u, v, n);\n      } else {\n        z = ticks(i, j, Math.min(j - i, n)).map(pows);\n      }\n\n      return r ? z.reverse() : z;\n    };\n\n    scale.tickFormat = function (count, specifier) {\n      if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n      if (typeof specifier !== \"function\") specifier = format$3(specifier);\n      if (count === Infinity) return specifier;\n      if (count == null) count = 10;\n      var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n\n      return function (d) {\n        var i = d / pows(Math.round(logs(d)));\n        if (i * base < base - 0.5) i *= base;\n        return i <= k ? specifier(d) : \"\";\n      };\n    };\n\n    scale.nice = function () {\n      return domain(nice(domain(), {\n        floor: function (x) {\n          return pows(Math.floor(logs(x)));\n        },\n        ceil: function (x) {\n          return pows(Math.ceil(logs(x)));\n        }\n      }));\n    };\n\n    return scale;\n  }\n  function log$2() {\n    var scale = loggish(transformer$3()).domain([1, 10]);\n\n    scale.copy = function () {\n      return copy$2(scale, log$2()).base(scale.base());\n    };\n\n    initRange.apply(scale, arguments);\n    return scale;\n  }\n\n  function transformSymlog(c) {\n    return function (x) {\n      return Math.sign(x) * Math.log1p(Math.abs(x / c));\n    };\n  }\n\n  function transformSymexp(c) {\n    return function (x) {\n      return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n    };\n  }\n\n  function symlogish(transform) {\n    var c = 1,\n        scale = transform(transformSymlog(c), transformSymexp(c));\n\n    scale.constant = function (_) {\n      return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\n    };\n\n    return linearish(scale);\n  }\n  function symlog() {\n    var scale = symlogish(transformer$3());\n\n    scale.copy = function () {\n      return copy$2(scale, symlog()).constant(scale.constant());\n    };\n\n    return initRange.apply(scale, arguments);\n  }\n\n  function transformPow(exponent) {\n    return function (x) {\n      return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n    };\n  }\n\n  function transformSqrt(x) {\n    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\n  }\n\n  function transformSquare(x) {\n    return x < 0 ? -x * x : x * x;\n  }\n\n  function powish(transform) {\n    var scale = transform(identity$2, identity$2),\n        exponent = 1;\n\n    function rescale() {\n      return exponent === 1 ? transform(identity$2, identity$2) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));\n    }\n\n    scale.exponent = function (_) {\n      return arguments.length ? (exponent = +_, rescale()) : exponent;\n    };\n\n    return linearish(scale);\n  }\n  function pow$2() {\n    var scale = powish(transformer$3());\n\n    scale.copy = function () {\n      return copy$2(scale, pow$2()).exponent(scale.exponent());\n    };\n\n    initRange.apply(scale, arguments);\n    return scale;\n  }\n  function sqrt$2() {\n    return pow$2.apply(null, arguments).exponent(0.5);\n  }\n\n  function quantile() {\n    var domain = [],\n        range = [],\n        thresholds = [],\n        unknown;\n\n    function rescale() {\n      var i = 0,\n          n = Math.max(1, range.length);\n      thresholds = new Array(n - 1);\n\n      while (++i < n) thresholds[i - 1] = quantileSorted(domain, i / n);\n\n      return scale;\n    }\n\n    function scale(x) {\n      return x == null || isNaN(x = +x) ? unknown : range[bisectRight$1(thresholds, x)];\n    }\n\n    scale.invertExtent = function (y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];\n    };\n\n    scale.domain = function (_) {\n      if (!arguments.length) return domain.slice();\n      domain = [];\n\n      for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n\n      domain.sort(ascending$2);\n      return rescale();\n    };\n\n    scale.range = function (_) {\n      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n    };\n\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.quantiles = function () {\n      return thresholds.slice();\n    };\n\n    scale.copy = function () {\n      return quantile().domain(domain).range(range).unknown(unknown);\n    };\n\n    return initRange.apply(scale, arguments);\n  }\n\n  function quantize$1() {\n    var x0 = 0,\n        x1 = 1,\n        n = 1,\n        domain = [0.5],\n        range = [0, 1],\n        unknown;\n\n    function scale(x) {\n      return x != null && x <= x ? range[bisectRight$1(domain, x, 0, n)] : unknown;\n    }\n\n    function rescale() {\n      var i = -1;\n      domain = new Array(n);\n\n      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n\n      return scale;\n    }\n\n    scale.domain = function (_) {\n      return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];\n    };\n\n    scale.range = function (_) {\n      return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();\n    };\n\n    scale.invertExtent = function (y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];\n    };\n\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : scale;\n    };\n\n    scale.thresholds = function () {\n      return domain.slice();\n    };\n\n    scale.copy = function () {\n      return quantize$1().domain([x0, x1]).range(range).unknown(unknown);\n    };\n\n    return initRange.apply(linearish(scale), arguments);\n  }\n\n  function threshold() {\n    var domain = [0.5],\n        range = [0, 1],\n        unknown,\n        n = 1;\n\n    function scale(x) {\n      return x != null && x <= x ? range[bisectRight$1(domain, x, 0, n)] : unknown;\n    }\n\n    scale.domain = function (_) {\n      return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n    };\n\n    scale.range = function (_) {\n      return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n    };\n\n    scale.invertExtent = function (y) {\n      var i = range.indexOf(y);\n      return [domain[i - 1], domain[i]];\n    };\n\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.copy = function () {\n      return threshold().domain(domain).range(range).unknown(unknown);\n    };\n\n    return initRange.apply(scale, arguments);\n  }\n\n  var durationSecond = 1000,\n      durationMinute = durationSecond * 60,\n      durationHour = durationMinute * 60,\n      durationDay = durationHour * 24,\n      durationWeek = durationDay * 7,\n      durationMonth = durationDay * 30,\n      durationYear = durationDay * 365;\n\n  function date(t) {\n    return new Date(t);\n  }\n\n  function number$4(t) {\n    return t instanceof Date ? +t : +new Date(+t);\n  }\n\n  function calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n    var scale = continuous$1(),\n        invert = scale.invert,\n        domain = scale.domain;\n    var formatMillisecond = format(\".%L\"),\n        formatSecond = format(\":%S\"),\n        formatMinute = format(\"%I:%M\"),\n        formatHour = format(\"%I %p\"),\n        formatDay = format(\"%a %d\"),\n        formatWeek = format(\"%b %d\"),\n        formatMonth = format(\"%B\"),\n        formatYear = format(\"%Y\");\n    var tickIntervals = [[second, 1, durationSecond], [second, 5, 5 * durationSecond], [second, 15, 15 * durationSecond], [second, 30, 30 * durationSecond], [minute, 1, durationMinute], [minute, 5, 5 * durationMinute], [minute, 15, 15 * durationMinute], [minute, 30, 30 * durationMinute], [hour, 1, durationHour], [hour, 3, 3 * durationHour], [hour, 6, 6 * durationHour], [hour, 12, 12 * durationHour], [day, 1, durationDay], [day, 2, 2 * durationDay], [week, 1, durationWeek], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];\n\n    function tickFormat(date) {\n      return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);\n    }\n\n    function tickInterval(interval, start, stop) {\n      if (interval == null) interval = 10; // If a desired tick count is specified, pick a reasonable tick interval\n      // based on the extent of the domain and a rough estimate of tick size.\n      // Otherwise, assume interval is already a time interval and use it.\n\n      if (typeof interval === \"number\") {\n        var target = Math.abs(stop - start) / interval,\n            i = bisector$1(function (i) {\n          return i[2];\n        }).right(tickIntervals, target),\n            step;\n\n        if (i === tickIntervals.length) {\n          step = tickStep(start / durationYear, stop / durationYear, interval);\n          interval = year;\n        } else if (i) {\n          i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n          step = i[1];\n          interval = i[0];\n        } else {\n          step = Math.max(tickStep(start, stop, interval), 1);\n          interval = millisecond;\n        }\n\n        return interval.every(step);\n      }\n\n      return interval;\n    }\n\n    scale.invert = function (y) {\n      return new Date(invert(y));\n    };\n\n    scale.domain = function (_) {\n      return arguments.length ? domain(Array.from(_, number$4)) : domain().map(date);\n    };\n\n    scale.ticks = function (interval) {\n      var d = domain(),\n          t0 = d[0],\n          t1 = d[d.length - 1],\n          r = t1 < t0,\n          t;\n      if (r) t = t0, t0 = t1, t1 = t;\n      t = tickInterval(interval, t0, t1);\n      t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n\n      return r ? t.reverse() : t;\n    };\n\n    scale.tickFormat = function (count, specifier) {\n      return specifier == null ? tickFormat : format(specifier);\n    };\n\n    scale.nice = function (interval) {\n      var d = domain();\n      return (interval = tickInterval(interval, d[0], d[d.length - 1])) ? domain(nice(d, interval)) : scale;\n    };\n\n    scale.copy = function () {\n      return copy$2(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n    };\n\n    return scale;\n  }\n  function time$1() {\n    return initRange.apply(calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat$1).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n  }\n\n  function utcTime() {\n    return initRange.apply(calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, utcFormat$1).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\n  }\n\n  function transformer$2() {\n    var x0 = 0,\n        x1 = 1,\n        t0,\n        t1,\n        k10,\n        transform,\n        interpolator = identity$2,\n        clamp = false,\n        unknown;\n\n    function scale(x) {\n      return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\n    }\n\n    scale.domain = function (_) {\n      return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\n    };\n\n    scale.clamp = function (_) {\n      return arguments.length ? (clamp = !!_, scale) : clamp;\n    };\n\n    scale.interpolator = function (_) {\n      return arguments.length ? (interpolator = _, scale) : interpolator;\n    };\n\n    function range(interpolate) {\n      return function (_) {\n        var r0, r1;\n        return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];\n      };\n    }\n\n    scale.range = range(interpolate$1);\n    scale.rangeRound = range(interpolateRound);\n\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    return function (t) {\n      transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\n      return scale;\n    };\n  }\n\n  function copy$1(source, target) {\n    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());\n  }\n  function sequential() {\n    var scale = linearish(transformer$2()(identity$2));\n\n    scale.copy = function () {\n      return copy$1(scale, sequential());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n  function sequentialLog() {\n    var scale = loggish(transformer$2()).domain([1, 10]);\n\n    scale.copy = function () {\n      return copy$1(scale, sequentialLog()).base(scale.base());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n  function sequentialSymlog() {\n    var scale = symlogish(transformer$2());\n\n    scale.copy = function () {\n      return copy$1(scale, sequentialSymlog()).constant(scale.constant());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n  function sequentialPow() {\n    var scale = powish(transformer$2());\n\n    scale.copy = function () {\n      return copy$1(scale, sequentialPow()).exponent(scale.exponent());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n  function sequentialSqrt() {\n    return sequentialPow.apply(null, arguments).exponent(0.5);\n  }\n\n  function transformer$1() {\n    var x0 = 0,\n        x1 = 0.5,\n        x2 = 1,\n        s = 1,\n        t0,\n        t1,\n        t2,\n        k10,\n        k21,\n        interpolator = identity$2,\n        transform,\n        clamp = false,\n        unknown;\n\n    function scale(x) {\n      return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\n    }\n\n    scale.domain = function (_) {\n      return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];\n    };\n\n    scale.clamp = function (_) {\n      return arguments.length ? (clamp = !!_, scale) : clamp;\n    };\n\n    scale.interpolator = function (_) {\n      return arguments.length ? (interpolator = _, scale) : interpolator;\n    };\n\n    function range(interpolate) {\n      return function (_) {\n        var r0, r1, r2;\n        return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];\n      };\n    }\n\n    scale.range = range(interpolate$1);\n    scale.rangeRound = range(interpolateRound);\n\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    return function (t) {\n      transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;\n      return scale;\n    };\n  }\n\n  function diverging() {\n    var scale = linearish(transformer$1()(identity$2));\n\n    scale.copy = function () {\n      return copy$1(scale, diverging());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n  function divergingLog() {\n    var scale = loggish(transformer$1()).domain([0.1, 1, 10]);\n\n    scale.copy = function () {\n      return copy$1(scale, divergingLog()).base(scale.base());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n  function divergingSymlog() {\n    var scale = symlogish(transformer$1());\n\n    scale.copy = function () {\n      return copy$1(scale, divergingSymlog()).constant(scale.constant());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n  function divergingPow() {\n    var scale = powish(transformer$1());\n\n    scale.copy = function () {\n      return copy$1(scale, divergingPow()).exponent(scale.exponent());\n    };\n\n    return initInterpolator.apply(scale, arguments);\n  }\n  function divergingSqrt() {\n    return divergingPow.apply(null, arguments).exponent(0.5);\n  }\n\n  function bandSpace(count, paddingInner, paddingOuter) {\n    const space = count - paddingInner + paddingOuter * 2;\n    return count ? space > 0 ? space : 1 : 0;\n  }\n\n  const Identity = 'identity';\n  const Linear = 'linear';\n  const Log = 'log';\n  const Pow = 'pow';\n  const Sqrt = 'sqrt';\n  const Symlog = 'symlog';\n  const Time = 'time';\n  const UTC = 'utc';\n  const Sequential = 'sequential';\n  const Diverging = 'diverging';\n  const Quantile = 'quantile';\n  const Quantize = 'quantize';\n  const Threshold = 'threshold';\n  const Ordinal = 'ordinal';\n  const Point = 'point';\n  const Band = 'band';\n  const BinOrdinal = 'bin-ordinal'; // categories\n\n  const Continuous = 'continuous';\n  const Discrete$1 = 'discrete';\n  const Discretizing = 'discretizing';\n  const Interpolating = 'interpolating';\n  const Temporal = 'temporal';\n\n  function invertRange(scale) {\n    return function (_) {\n      let lo = _[0],\n          hi = _[1],\n          t;\n\n      if (hi < lo) {\n        t = lo;\n        lo = hi;\n        hi = t;\n      }\n\n      return [scale.invert(lo), scale.invert(hi)];\n    };\n  }\n\n  function invertRangeExtent(scale) {\n    return function (_) {\n      const range = scale.range();\n      let lo = _[0],\n          hi = _[1],\n          min = -1,\n          max,\n          t,\n          i,\n          n;\n\n      if (hi < lo) {\n        t = lo;\n        lo = hi;\n        hi = t;\n      }\n\n      for (i = 0, n = range.length; i < n; ++i) {\n        if (range[i] >= lo && range[i] <= hi) {\n          if (min < 0) min = i;\n          max = i;\n        }\n      }\n\n      if (min < 0) return undefined;\n      lo = scale.invertExtent(range[min]);\n      hi = scale.invertExtent(range[max]);\n      return [lo[0] === undefined ? lo[1] : lo[0], hi[1] === undefined ? hi[0] : hi[1]];\n    };\n  }\n\n  function band() {\n    const scale = ordinal().unknown(undefined),\n          domain = scale.domain,\n          ordinalRange = scale.range;\n    let range$1 = [0, 1],\n        step,\n        bandwidth,\n        round = false,\n        paddingInner = 0,\n        paddingOuter = 0,\n        align = 0.5;\n    delete scale.unknown;\n\n    function rescale() {\n      const n = domain().length,\n            reverse = range$1[1] < range$1[0],\n            stop = range$1[1 - reverse],\n            space = bandSpace(n, paddingInner, paddingOuter);\n      let start = range$1[reverse - 0];\n      step = (stop - start) / (space || 1);\n\n      if (round) {\n        step = Math.floor(step);\n      }\n\n      start += (stop - start - step * (n - paddingInner)) * align;\n      bandwidth = step * (1 - paddingInner);\n\n      if (round) {\n        start = Math.round(start);\n        bandwidth = Math.round(bandwidth);\n      }\n\n      const values = range$1$1(n).map(i => start + step * i);\n      return ordinalRange(reverse ? values.reverse() : values);\n    }\n\n    scale.domain = function (_) {\n      if (arguments.length) {\n        domain(_);\n        return rescale();\n      } else {\n        return domain();\n      }\n    };\n\n    scale.range = function (_) {\n      if (arguments.length) {\n        range$1 = [+_[0], +_[1]];\n        return rescale();\n      } else {\n        return range$1.slice();\n      }\n    };\n\n    scale.rangeRound = function (_) {\n      range$1 = [+_[0], +_[1]];\n      round = true;\n      return rescale();\n    };\n\n    scale.bandwidth = function () {\n      return bandwidth;\n    };\n\n    scale.step = function () {\n      return step;\n    };\n\n    scale.round = function (_) {\n      if (arguments.length) {\n        round = !!_;\n        return rescale();\n      } else {\n        return round;\n      }\n    };\n\n    scale.padding = function (_) {\n      if (arguments.length) {\n        paddingOuter = Math.max(0, Math.min(1, _));\n        paddingInner = paddingOuter;\n        return rescale();\n      } else {\n        return paddingInner;\n      }\n    };\n\n    scale.paddingInner = function (_) {\n      if (arguments.length) {\n        paddingInner = Math.max(0, Math.min(1, _));\n        return rescale();\n      } else {\n        return paddingInner;\n      }\n    };\n\n    scale.paddingOuter = function (_) {\n      if (arguments.length) {\n        paddingOuter = Math.max(0, Math.min(1, _));\n        return rescale();\n      } else {\n        return paddingOuter;\n      }\n    };\n\n    scale.align = function (_) {\n      if (arguments.length) {\n        align = Math.max(0, Math.min(1, _));\n        return rescale();\n      } else {\n        return align;\n      }\n    };\n\n    scale.invertRange = function (_) {\n      // bail if range has null or undefined values\n      if (_[0] == null || _[1] == null) return;\n      const reverse = range$1[1] < range$1[0],\n            values = reverse ? ordinalRange().reverse() : ordinalRange(),\n            n = values.length - 1;\n      let lo = +_[0],\n          hi = +_[1],\n          a,\n          b,\n          t; // bail if either range endpoint is invalid\n\n      if (lo !== lo || hi !== hi) return; // order range inputs, bail if outside of scale range\n\n      if (hi < lo) {\n        t = lo;\n        lo = hi;\n        hi = t;\n      }\n\n      if (hi < values[0] || lo > range$1[1 - reverse]) return; // binary search to index into scale range\n\n      a = Math.max(0, bisectRight$1(values, lo) - 1);\n      b = lo === hi ? a : bisectRight$1(values, hi) - 1; // increment index a if lo is within padding gap\n\n      if (lo - values[a] > bandwidth + 1e-10) ++a;\n\n      if (reverse) {\n        // map + swap\n        t = a;\n        a = n - b;\n        b = n - t;\n      }\n\n      return a > b ? undefined : domain().slice(a, b + 1);\n    };\n\n    scale.invert = function (_) {\n      const value = scale.invertRange([_, _]);\n      return value ? value[0] : value;\n    };\n\n    scale.copy = function () {\n      return band().domain(domain()).range(range$1).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);\n    };\n\n    return rescale();\n  }\n\n  function pointish(scale) {\n    const copy = scale.copy;\n    scale.padding = scale.paddingOuter;\n    delete scale.paddingInner;\n\n    scale.copy = function () {\n      return pointish(copy());\n    };\n\n    return scale;\n  }\n\n  function point$1() {\n    return pointish(band().paddingInner(1));\n  }\n\n  var map = Array.prototype.map;\n\n  function numbers(_) {\n    return map.call(_, toNumber);\n  }\n\n  const slice$1 = Array.prototype.slice;\n\n  function scaleBinOrdinal() {\n    let domain = [],\n        range = [];\n\n    function scale(x) {\n      return x == null || x !== x ? undefined : range[(bisectRight$1(domain, x) - 1) % range.length];\n    }\n\n    scale.domain = function (_) {\n      if (arguments.length) {\n        domain = numbers(_);\n        return scale;\n      } else {\n        return domain.slice();\n      }\n    };\n\n    scale.range = function (_) {\n      if (arguments.length) {\n        range = slice$1.call(_);\n        return scale;\n      } else {\n        return range.slice();\n      }\n    };\n\n    scale.tickFormat = function (count, specifier) {\n      return tickFormat$1(domain[0], peek$1(domain), count == null ? 10 : count, specifier);\n    };\n\n    scale.copy = function () {\n      return scaleBinOrdinal().domain(scale.domain()).range(scale.range());\n    };\n\n    return scale;\n  }\n\n  const scales = {};\n  /**\n   * Augment scales with their type and needed inverse methods.\n   */\n\n  function create$2(type, constructor, metadata) {\n    const ctr = function scale() {\n      const s = constructor();\n\n      if (!s.invertRange) {\n        s.invertRange = s.invert ? invertRange(s) : s.invertExtent ? invertRangeExtent(s) : undefined;\n      }\n\n      s.type = type;\n      return s;\n    };\n\n    ctr.metadata = toSet(array$5(metadata));\n    return ctr;\n  }\n\n  function scale$4(type, scale, metadata) {\n    if (arguments.length > 1) {\n      scales[type] = create$2(type, scale, metadata);\n      return this;\n    } else {\n      return isValidScaleType(type) ? scales[type] : undefined;\n    }\n  } // identity scale\n\n\n  scale$4(Identity, identity$1); // continuous scales\n\n  scale$4(Linear, linear, Continuous);\n  scale$4(Log, log$2, [Continuous, Log]);\n  scale$4(Pow, pow$2, Continuous);\n  scale$4(Sqrt, sqrt$2, Continuous);\n  scale$4(Symlog, symlog, Continuous);\n  scale$4(Time, time$1, [Continuous, Temporal]);\n  scale$4(UTC, utcTime, [Continuous, Temporal]); // sequential scales\n\n  scale$4(Sequential, sequential, [Continuous, Interpolating]); // backwards compat\n\n  scale$4(`${Sequential}-${Linear}`, sequential, [Continuous, Interpolating]);\n  scale$4(`${Sequential}-${Log}`, sequentialLog, [Continuous, Interpolating, Log]);\n  scale$4(`${Sequential}-${Pow}`, sequentialPow, [Continuous, Interpolating]);\n  scale$4(`${Sequential}-${Sqrt}`, sequentialSqrt, [Continuous, Interpolating]);\n  scale$4(`${Sequential}-${Symlog}`, sequentialSymlog, [Continuous, Interpolating]); // diverging scales\n\n  scale$4(`${Diverging}-${Linear}`, diverging, [Continuous, Interpolating]);\n  scale$4(`${Diverging}-${Log}`, divergingLog, [Continuous, Interpolating, Log]);\n  scale$4(`${Diverging}-${Pow}`, divergingPow, [Continuous, Interpolating]);\n  scale$4(`${Diverging}-${Sqrt}`, divergingSqrt, [Continuous, Interpolating]);\n  scale$4(`${Diverging}-${Symlog}`, divergingSymlog, [Continuous, Interpolating]); // discretizing scales\n\n  scale$4(Quantile, quantile, [Discretizing, Quantile]);\n  scale$4(Quantize, quantize$1, Discretizing);\n  scale$4(Threshold, threshold, Discretizing); // discrete scales\n\n  scale$4(BinOrdinal, scaleBinOrdinal, [Discrete$1, Discretizing]);\n  scale$4(Ordinal, ordinal, Discrete$1);\n  scale$4(Band, band, Discrete$1);\n  scale$4(Point, point$1, Discrete$1);\n\n  function isValidScaleType(type) {\n    return has$1(scales, type);\n  }\n\n  function hasType(key, type) {\n    const s = scales[key];\n    return s && s.metadata[type];\n  }\n\n  function isContinuous(key) {\n    return hasType(key, Continuous);\n  }\n\n  function isDiscrete(key) {\n    return hasType(key, Discrete$1);\n  }\n\n  function isDiscretizing(key) {\n    return hasType(key, Discretizing);\n  }\n\n  function isLogarithmic(key) {\n    return hasType(key, Log);\n  }\n\n  function isTemporal(key) {\n    return hasType(key, Temporal);\n  }\n\n  function isInterpolating(key) {\n    return hasType(key, Interpolating);\n  }\n\n  function isQuantile(key) {\n    return hasType(key, Quantile);\n  }\n\n  const scaleProps = ['clamp', 'base', 'constant', 'exponent'];\n\n  function interpolateRange(interpolator, range) {\n    const start = range[0],\n          span = peek$1(range) - start;\n    return function (i) {\n      return interpolator(start + i * span);\n    };\n  }\n\n  function interpolateColors(colors, type, gamma) {\n    return piecewise(interpolate(type || 'rgb', gamma), colors);\n  }\n\n  function quantizeInterpolator(interpolator, count) {\n    const samples = new Array(count),\n          n = count + 1;\n\n    for (let i = 0; i < count;) samples[i] = interpolator(++i / n);\n\n    return samples;\n  }\n\n  function scaleFraction(scale$1, min, max) {\n    const delta = max - min;\n    let i, t, s;\n\n    if (!delta || !Number.isFinite(delta)) {\n      return constant$4(0.5);\n    } else {\n      i = (t = scale$1.type).indexOf('-');\n      t = i < 0 ? t : t.slice(i + 1);\n      s = scale$4(t)().domain([min, max]).range([0, 1]);\n      scaleProps.forEach(m => scale$1[m] ? s[m](scale$1[m]()) : 0);\n      return s;\n    }\n  }\n\n  function interpolate(type, gamma) {\n    const interp = $$1[method(type)];\n    return gamma != null && interp && interp.gamma ? interp.gamma(gamma) : interp;\n  }\n\n  function method(type) {\n    return 'interpolate' + type.toLowerCase().split('-').map(s => s[0].toUpperCase() + s.slice(1)).join('');\n  }\n\n  const continuous = {\n    blues: 'cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90',\n    greens: 'd3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429',\n    greys: 'e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e',\n    oranges: 'fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303',\n    purples: 'e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c',\n    reds: 'fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13',\n    blueGreen: 'd5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429',\n    bluePurple: 'ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71',\n    greenBlue: 'd3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1',\n    orangeRed: 'fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403',\n    purpleBlue: 'dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281',\n    purpleBlueGreen: 'dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353',\n    purpleRed: 'dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a',\n    redPurple: 'fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174',\n    yellowGreen: 'e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034',\n    yellowOrangeBrown: 'feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204',\n    yellowOrangeRed: 'fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225',\n    blueOrange: '134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07',\n    brownBlueGreen: '704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147',\n    purpleGreen: '5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29',\n    purpleOrange: '4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07',\n    redBlue: '8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85',\n    redGrey: '8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434',\n    yellowGreenBlue: 'eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185',\n    redYellowBlue: 'a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695',\n    redYellowGreen: 'a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837',\n    pinkYellowGreen: '8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419',\n    spectral: '9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2',\n    viridis: '440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725',\n    magma: '0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf',\n    inferno: '0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4',\n    plasma: '0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921',\n    cividis: '00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647',\n    rainbow: '6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa',\n    sinebow: 'ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040',\n    turbo: '23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00',\n    browns: 'eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632',\n    tealBlues: 'bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985',\n    teals: 'bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667',\n    warmGreys: 'dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e',\n    goldGreen: 'f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36',\n    goldOrange: 'f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26',\n    goldRed: 'f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e',\n    lightGreyRed: 'efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b',\n    lightGreyTeal: 'e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc',\n    lightMulti: 'e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c',\n    lightOrange: 'f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b',\n    lightTealBlue: 'e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988',\n    darkBlue: '3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff',\n    darkGold: '3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff',\n    darkGreen: '3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa',\n    darkMulti: '3737371f5287197d8c29a86995ce3fffe800ffffff',\n    darkRed: '3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c'\n  };\n  const discrete = {\n    category10: '1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf',\n    category20: '1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5',\n    category20b: '393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6',\n    category20c: '3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9',\n    tableau10: '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac',\n    tableau20: '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5',\n    accent: '7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666',\n    dark2: '1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666',\n    paired: 'a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928',\n    pastel1: 'fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2',\n    pastel2: 'b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc',\n    set1: 'e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999',\n    set2: '66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3',\n    set3: '8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f'\n  };\n\n  function colors(palette) {\n    const n = palette.length / 6 | 0,\n          c = new Array(n);\n\n    for (let i = 0; i < n;) {\n      c[i] = '#' + palette.slice(i * 6, ++i * 6);\n    }\n\n    return c;\n  }\n\n  function apply(_, f) {\n    for (const k in _) scheme(k, f(_[k]));\n  }\n\n  const schemes = {};\n  apply(discrete, colors);\n  apply(continuous, _ => interpolateColors(colors(_)));\n\n  function scheme(name, scheme) {\n    name = name && name.toLowerCase();\n\n    if (arguments.length > 1) {\n      schemes[name] = scheme;\n      return this;\n    } else {\n      return schemes[name];\n    }\n  }\n\n  const SymbolLegend = 'symbol';\n  const DiscreteLegend = 'discrete';\n  const GradientLegend = 'gradient';\n\n  const defaultFormatter = value => isArray(value) ? value.map(v => String(v)) : String(value);\n\n  const ascending$1 = (a, b) => a[1] - b[1];\n\n  const descending = (a, b) => b[1] - a[1];\n  /**\n   * Determine the tick count or interval function.\n   * @param {Scale} scale - The scale for which to generate tick values.\n   * @param {*} count - The desired tick count or interval specifier.\n   * @param {number} minStep - The desired minimum step between tick values.\n   * @return {*} - The tick count or interval function.\n   */\n\n\n  function tickCount(scale, count, minStep) {\n    let step;\n\n    if (isNumber$1(count)) {\n      if (scale.bins) {\n        count = Math.max(count, scale.bins.length);\n      }\n\n      if (minStep != null) {\n        count = Math.min(count, Math.floor(span(scale.domain()) / minStep || 1));\n      }\n    }\n\n    if (isObject(count)) {\n      step = count.step;\n      count = count.interval;\n    }\n\n    if (isString(count)) {\n      count = scale.type === Time ? timeInterval(count) : scale.type == UTC ? utcInterval(count) : error('Only time and utc scales accept interval strings.');\n      if (step) count = count.every(step);\n    }\n\n    return count;\n  }\n  /**\n   * Filter a set of candidate tick values, ensuring that only tick values\n   * that lie within the scale range are included.\n   * @param {Scale} scale - The scale for which to generate tick values.\n   * @param {Array<*>} ticks - The candidate tick values.\n   * @param {*} count - The tick count or interval function.\n   * @return {Array<*>} - The filtered tick values.\n   */\n\n\n  function validTicks(scale, ticks, count) {\n    let range = scale.range(),\n        lo = range[0],\n        hi = peek$1(range),\n        cmp = ascending$1;\n\n    if (lo > hi) {\n      range = hi;\n      hi = lo;\n      lo = range;\n      cmp = descending;\n    }\n\n    lo = Math.floor(lo);\n    hi = Math.ceil(hi); // filter ticks to valid values within the range\n    // additionally sort ticks in range order (#2579)\n\n    ticks = ticks.map(v => [v, scale(v)]).filter(_ => lo <= _[1] && _[1] <= hi).sort(cmp).map(_ => _[0]);\n\n    if (count > 0 && ticks.length > 1) {\n      const endpoints = [ticks[0], peek$1(ticks)];\n\n      while (ticks.length > count && ticks.length >= 3) {\n        ticks = ticks.filter((_, i) => !(i % 2));\n      }\n\n      if (ticks.length < 3) {\n        ticks = endpoints;\n      }\n    }\n\n    return ticks;\n  }\n  /**\n   * Generate tick values for the given scale and approximate tick count or\n   * interval value. If the scale has a 'ticks' method, it will be used to\n   * generate the ticks, with the count argument passed as a parameter. If the\n   * scale lacks a 'ticks' method, the full scale domain will be returned.\n   * @param {Scale} scale - The scale for which to generate tick values.\n   * @param {*} [count] - The approximate number of desired ticks.\n   * @return {Array<*>} - The generated tick values.\n   */\n\n\n  function tickValues(scale, count) {\n    return scale.bins ? validTicks(scale, scale.bins) : scale.ticks ? scale.ticks(count) : scale.domain();\n  }\n  /**\n   * Generate a label format function for a scale. If the scale has a\n   * 'tickFormat' method, it will be used to generate the formatter, with the\n   * count and specifier arguments passed as parameters. If the scale lacks a\n   * 'tickFormat' method, the returned formatter performs simple string coercion.\n   * If the input scale is a logarithmic scale and the format specifier does not\n   * indicate a desired decimal precision, a special variable precision formatter\n   * that automatically trims trailing zeroes will be generated.\n   * @param {Scale} scale - The scale for which to generate the label formatter.\n   * @param {*} [count] - The approximate number of desired ticks.\n   * @param {string} [specifier] - The format specifier. Must be a legal d3\n   *   specifier string (see https://github.com/d3/d3-format#formatSpecifier) or\n   *   time multi-format specifier object.\n   * @return {function(*):string} - The generated label formatter.\n   */\n\n\n  function tickFormat(locale, scale, count, specifier, formatType, noSkip) {\n    const type = scale.type;\n    let format = defaultFormatter;\n\n    if (type === Time || formatType === Time) {\n      format = locale.timeFormat(specifier);\n    } else if (type === UTC || formatType === UTC) {\n      format = locale.utcFormat(specifier);\n    } else if (isLogarithmic(type)) {\n      const varfmt = locale.formatFloat(specifier);\n\n      if (noSkip || scale.bins) {\n        format = varfmt;\n      } else {\n        const test = tickLog(scale, count, false);\n\n        format = _ => test(_) ? varfmt(_) : '';\n      }\n    } else if (scale.tickFormat) {\n      // if d3 scale has tickFormat, it must be continuous\n      const d = scale.domain();\n      format = locale.formatSpan(d[0], d[d.length - 1], count, specifier);\n    } else if (specifier) {\n      format = locale.format(specifier);\n    }\n\n    return format;\n  }\n\n  function tickLog(scale, count, values) {\n    const ticks = tickValues(scale, count),\n          base = scale.base(),\n          logb = Math.log(base),\n          k = Math.max(1, base * count / ticks.length); // apply d3-scale's log format filter criteria\n\n    const test = d => {\n      let i = d / Math.pow(base, Math.round(Math.log(d) / logb));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k;\n    };\n\n    return values ? ticks.filter(test) : test;\n  }\n\n  const symbols$1 = {\n    [Quantile]: 'quantiles',\n    [Quantize]: 'thresholds',\n    [Threshold]: 'domain'\n  };\n  const formats = {\n    [Quantile]: 'quantiles',\n    [Quantize]: 'domain'\n  };\n\n  function labelValues(scale, count) {\n    return scale.bins ? binValues(scale.bins) : scale.type === Log ? tickLog(scale, count, true) : symbols$1[scale.type] ? thresholdValues(scale[symbols$1[scale.type]]()) : tickValues(scale, count);\n  }\n\n  function thresholdFormat(locale, scale, specifier) {\n    const _ = scale[formats[scale.type]](),\n          n = _.length;\n\n    let d = n > 1 ? _[1] - _[0] : _[0],\n        i;\n\n    for (i = 1; i < n; ++i) {\n      d = Math.min(d, _[i] - _[i - 1]);\n    } // tickCount = 3 ticks times 10 for increased resolution\n\n\n    return locale.formatSpan(0, d, 3 * 10, specifier);\n  }\n\n  function thresholdValues(thresholds) {\n    const values = [-Infinity].concat(thresholds);\n    values.max = +Infinity;\n    return values;\n  }\n\n  function binValues(bins) {\n    const values = bins.slice(0, -1);\n    values.max = peek$1(bins);\n    return values;\n  }\n\n  const isDiscreteRange = scale => symbols$1[scale.type] || scale.bins;\n\n  function labelFormat(locale, scale, count, type, specifier, formatType, noSkip) {\n    const format = formats[scale.type] && formatType !== Time && formatType !== UTC ? thresholdFormat(locale, scale, specifier) : tickFormat(locale, scale, count, specifier, formatType, noSkip);\n    return type === SymbolLegend && isDiscreteRange(scale) ? formatRange(format) : type === DiscreteLegend ? formatDiscrete(format) : formatPoint(format);\n  }\n\n  const formatRange = format => (value, index, array) => {\n    const limit = get$3(array[index + 1], get$3(array.max, +Infinity)),\n          lo = formatValue$1(value, format),\n          hi = formatValue$1(limit, format);\n    return lo && hi ? lo + ' \\u2013 ' + hi : hi ? '< ' + hi : '\\u2265 ' + lo;\n  };\n\n  const get$3 = (value, dflt) => value != null ? value : dflt;\n\n  const formatDiscrete = format => (value, index) => index ? format(value) : null;\n\n  const formatPoint = format => value => format(value);\n\n  const formatValue$1 = (value, format) => Number.isFinite(value) ? format(value) : null;\n\n  function labelFraction(scale) {\n    const domain = scale.domain(),\n          count = domain.length - 1;\n    let lo = +domain[0],\n        hi = +peek$1(domain),\n        span = hi - lo;\n\n    if (scale.type === Threshold) {\n      const adjust = count ? span / count : 0.1;\n      lo -= adjust;\n      hi += adjust;\n      span = hi - lo;\n    }\n\n    return value => (value - lo) / span;\n  }\n\n  function format$1(locale, scale, specifier, formatType) {\n    const type = formatType || scale.type; // replace abbreviated time specifiers to improve screen reader experience\n\n    if (isString(specifier) && isTemporal(type)) {\n      specifier = specifier.replace(/%a/g, '%A').replace(/%b/g, '%B');\n    }\n\n    return !specifier && type === Time ? locale.timeFormat('%A, %d %B %Y, %X') : !specifier && type === UTC ? locale.utcFormat('%A, %d %B %Y, %X UTC') : labelFormat(locale, scale, 5, null, specifier, formatType, true);\n  }\n\n  function domainCaption(locale, scale, opt) {\n    opt = opt || {};\n    const max = Math.max(3, opt.maxlen || 7),\n          fmt = format$1(locale, scale, opt.format, opt.formatType); // if scale breaks domain into bins, describe boundaries\n\n    if (isDiscretizing(scale.type)) {\n      const v = labelValues(scale).slice(1).map(fmt),\n            n = v.length;\n      return `${n} boundar${n === 1 ? 'y' : 'ies'}: ${v.join(', ')}`;\n    } // if scale domain is discrete, list values\n    else if (isDiscrete(scale.type)) {\n        const d = scale.domain(),\n              n = d.length,\n              v = n > max ? d.slice(0, max - 2).map(fmt).join(', ') + ', ending with ' + d.slice(-1).map(fmt) : d.map(fmt).join(', ');\n        return `${n} value${n === 1 ? '' : 's'}: ${v}`;\n      } // if scale domain is continuous, describe value range\n      else {\n          const d = scale.domain();\n          return `values from ${fmt(d[0])} to ${fmt(peek$1(d))}`;\n        }\n  }\n\n  let gradient_id = 0;\n\n  function resetSVGGradientId() {\n    gradient_id = 0;\n  }\n\n  const patternPrefix = 'p_';\n\n  function isGradient(value) {\n    return value && value.gradient;\n  }\n\n  function gradientRef(g, defs, base) {\n    const type = g.gradient;\n    let id = g.id,\n        prefix = type === 'radial' ? patternPrefix : ''; // check id, assign default values as needed\n\n    if (!id) {\n      id = g.id = 'gradient_' + gradient_id++;\n\n      if (type === 'radial') {\n        g.x1 = get$2(g.x1, 0.5);\n        g.y1 = get$2(g.y1, 0.5);\n        g.r1 = get$2(g.r1, 0);\n        g.x2 = get$2(g.x2, 0.5);\n        g.y2 = get$2(g.y2, 0.5);\n        g.r2 = get$2(g.r2, 0.5);\n        prefix = patternPrefix;\n      } else {\n        g.x1 = get$2(g.x1, 0);\n        g.y1 = get$2(g.y1, 0);\n        g.x2 = get$2(g.x2, 1);\n        g.y2 = get$2(g.y2, 0);\n      }\n    } // register definition\n\n\n    defs[id] = g; // return url reference\n\n    return 'url(' + (base || '') + '#' + prefix + id + ')';\n  }\n\n  function get$2(val, def) {\n    return val != null ? val : def;\n  }\n\n  function Gradient$1(p0, p1) {\n    var stops = [],\n        gradient;\n    return gradient = {\n      gradient: 'linear',\n      x1: p0 ? p0[0] : 0,\n      y1: p0 ? p0[1] : 0,\n      x2: p1 ? p1[0] : 1,\n      y2: p1 ? p1[1] : 0,\n      stops: stops,\n      stop: function (offset, color) {\n        stops.push({\n          offset: offset,\n          color: color\n        });\n        return gradient;\n      }\n    };\n  }\n\n  const lookup$4 = {\n    'basis': {\n      curve: curveBasis\n    },\n    'basis-closed': {\n      curve: curveBasisClosed\n    },\n    'basis-open': {\n      curve: curveBasisOpen\n    },\n    'bundle': {\n      curve: curveBundle,\n      tension: 'beta',\n      value: 0.85\n    },\n    'cardinal': {\n      curve: curveCardinal,\n      tension: 'tension',\n      value: 0\n    },\n    'cardinal-open': {\n      curve: curveCardinalOpen,\n      tension: 'tension',\n      value: 0\n    },\n    'cardinal-closed': {\n      curve: curveCardinalClosed,\n      tension: 'tension',\n      value: 0\n    },\n    'catmull-rom': {\n      curve: curveCatmullRom,\n      tension: 'alpha',\n      value: 0.5\n    },\n    'catmull-rom-closed': {\n      curve: curveCatmullRomClosed,\n      tension: 'alpha',\n      value: 0.5\n    },\n    'catmull-rom-open': {\n      curve: curveCatmullRomOpen,\n      tension: 'alpha',\n      value: 0.5\n    },\n    'linear': {\n      curve: curveLinear\n    },\n    'linear-closed': {\n      curve: curveLinearClosed\n    },\n    'monotone': {\n      horizontal: monotoneY,\n      vertical: monotoneX\n    },\n    'natural': {\n      curve: curveNatural\n    },\n    'step': {\n      curve: curveStep\n    },\n    'step-after': {\n      curve: stepAfter\n    },\n    'step-before': {\n      curve: stepBefore\n    }\n  };\n\n  function curves(type, orientation, tension) {\n    var entry = has$1(lookup$4, type) && lookup$4[type],\n        curve = null;\n\n    if (entry) {\n      curve = entry.curve || entry[orientation || 'vertical'];\n\n      if (entry.tension && tension != null) {\n        curve = curve[entry.tension](tension);\n      }\n    }\n\n    return curve;\n  } // Path parsing and rendering code adapted from fabric.js -- Thanks!\n\n\n  const cmdlen = {\n    m: 2,\n    l: 2,\n    h: 1,\n    v: 1,\n    c: 6,\n    s: 4,\n    q: 4,\n    t: 2,\n    a: 7\n  },\n        regexp = [/([MLHVCSQTAZmlhvcsqtaz])/g, /###/, /(\\.\\d+)(\\.\\d)/g, /(\\d)([-+])/g, /\\s|,|###/];\n\n  function pathParse(pathstr) {\n    const result = [];\n    let curr, chunks, parsed, param, cmd, len, i, j, n, m; // First, break path into command sequence\n\n    const path = pathstr.slice().replace(regexp[0], '###$1').split(regexp[1]).slice(1); // Next, parse each command in turn\n\n    for (i = 0, n = path.length; i < n; ++i) {\n      curr = path[i];\n      chunks = curr.slice(1).trim().replace(regexp[2], '$1###$2').replace(regexp[3], '$1###$2').split(regexp[4]);\n      cmd = curr.charAt(0);\n      parsed = [cmd];\n\n      for (j = 0, m = chunks.length; j < m; ++j) {\n        if ((param = +chunks[j]) === param) {\n          // not NaN\n          parsed.push(param);\n        }\n      }\n\n      len = cmdlen[cmd.toLowerCase()];\n\n      if (parsed.length - 1 > len) {\n        const m = parsed.length;\n        j = 1;\n        result.push([cmd].concat(parsed.slice(j, j += len))); // handle implicit lineTo (#2803)\n\n        cmd = cmd === 'M' ? 'L' : cmd === 'm' ? 'l' : cmd;\n\n        for (; j < m; j += len) {\n          result.push([cmd].concat(parsed.slice(j, j + len)));\n        }\n      } else {\n        result.push(parsed);\n      }\n    }\n\n    return result;\n  }\n\n  const DegToRad = Math.PI / 180;\n  const Epsilon = 1e-14;\n  const HalfPi = Math.PI / 2;\n  const Tau = Math.PI * 2;\n  const HalfSqrt3 = Math.sqrt(3) / 2;\n  var segmentCache = {};\n  var bezierCache = {};\n  var join$1 = [].join; // Copied from Inkscape svgtopdf, thanks!\n\n  function segments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {\n    const key = join$1.call(arguments);\n\n    if (segmentCache[key]) {\n      return segmentCache[key];\n    }\n\n    const th = rotateX * DegToRad;\n    const sin_th = Math.sin(th);\n    const cos_th = Math.cos(th);\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n    const px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;\n    const py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;\n    let pl = px * px / (rx * rx) + py * py / (ry * ry);\n\n    if (pl > 1) {\n      pl = Math.sqrt(pl);\n      rx *= pl;\n      ry *= pl;\n    }\n\n    const a00 = cos_th / rx;\n    const a01 = sin_th / rx;\n    const a10 = -sin_th / ry;\n    const a11 = cos_th / ry;\n    const x0 = a00 * ox + a01 * oy;\n    const y0 = a10 * ox + a11 * oy;\n    const x1 = a00 * x + a01 * y;\n    const y1 = a10 * x + a11 * y;\n    const d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);\n    let sfactor_sq = 1 / d - 0.25;\n    if (sfactor_sq < 0) sfactor_sq = 0;\n    let sfactor = Math.sqrt(sfactor_sq);\n    if (sweep == large) sfactor = -sfactor;\n    const xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);\n    const yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);\n    const th0 = Math.atan2(y0 - yc, x0 - xc);\n    const th1 = Math.atan2(y1 - yc, x1 - xc);\n    let th_arc = th1 - th0;\n\n    if (th_arc < 0 && sweep === 1) {\n      th_arc += Tau;\n    } else if (th_arc > 0 && sweep === 0) {\n      th_arc -= Tau;\n    }\n\n    const segs = Math.ceil(Math.abs(th_arc / (HalfPi + 0.001)));\n    const result = [];\n\n    for (let i = 0; i < segs; ++i) {\n      const th2 = th0 + i * th_arc / segs;\n      const th3 = th0 + (i + 1) * th_arc / segs;\n      result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];\n    }\n\n    return segmentCache[key] = result;\n  }\n\n  function bezier(params) {\n    const key = join$1.call(params);\n\n    if (bezierCache[key]) {\n      return bezierCache[key];\n    }\n\n    var cx = params[0],\n        cy = params[1],\n        th0 = params[2],\n        th1 = params[3],\n        rx = params[4],\n        ry = params[5],\n        sin_th = params[6],\n        cos_th = params[7];\n    const a00 = cos_th * rx;\n    const a01 = -sin_th * ry;\n    const a10 = sin_th * rx;\n    const a11 = cos_th * ry;\n    const cos_th0 = Math.cos(th0);\n    const sin_th0 = Math.sin(th0);\n    const cos_th1 = Math.cos(th1);\n    const sin_th1 = Math.sin(th1);\n    const th_half = 0.5 * (th1 - th0);\n    const sin_th_h2 = Math.sin(th_half * 0.5);\n    const t = 8 / 3 * sin_th_h2 * sin_th_h2 / Math.sin(th_half);\n    const x1 = cx + cos_th0 - t * sin_th0;\n    const y1 = cy + sin_th0 + t * cos_th0;\n    const x3 = cx + cos_th1;\n    const y3 = cy + sin_th1;\n    const x2 = x3 + t * sin_th1;\n    const y2 = y3 - t * cos_th1;\n    return bezierCache[key] = [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];\n  }\n\n  const temp = ['l', 0, 0, 0, 0, 0, 0, 0];\n\n  function scale$1$1(current, sX, sY) {\n    const c = temp[0] = current[0];\n\n    if (c === 'a' || c === 'A') {\n      temp[1] = sX * current[1];\n      temp[2] = sY * current[2];\n      temp[3] = current[3];\n      temp[4] = current[4];\n      temp[5] = current[5];\n      temp[6] = sX * current[6];\n      temp[7] = sY * current[7];\n    } else if (c === 'h' || c === 'H') {\n      temp[1] = sX * current[1];\n    } else if (c === 'v' || c === 'V') {\n      temp[1] = sY * current[1];\n    } else {\n      for (var i = 1, n = current.length; i < n; ++i) {\n        temp[i] = (i % 2 == 1 ? sX : sY) * current[i];\n      }\n    }\n\n    return temp;\n  }\n\n  function pathRender(context, path, l, t, sX, sY) {\n    var current,\n        // current instruction\n    previous = null,\n        x = 0,\n        // current x\n    y = 0,\n        // current y\n    controlX = 0,\n        // current control point x\n    controlY = 0,\n        // current control point y\n    tempX,\n        tempY,\n        tempControlX,\n        tempControlY;\n    if (l == null) l = 0;\n    if (t == null) t = 0;\n    if (sX == null) sX = 1;\n    if (sY == null) sY = sX;\n    if (context.beginPath) context.beginPath();\n\n    for (var i = 0, len = path.length; i < len; ++i) {\n      current = path[i];\n\n      if (sX !== 1 || sY !== 1) {\n        current = scale$1$1(current, sX, sY);\n      }\n\n      switch (current[0]) {\n        // first letter\n        case 'l':\n          // lineto, relative\n          x += current[1];\n          y += current[2];\n          context.lineTo(x + l, y + t);\n          break;\n\n        case 'L':\n          // lineto, absolute\n          x = current[1];\n          y = current[2];\n          context.lineTo(x + l, y + t);\n          break;\n\n        case 'h':\n          // horizontal lineto, relative\n          x += current[1];\n          context.lineTo(x + l, y + t);\n          break;\n\n        case 'H':\n          // horizontal lineto, absolute\n          x = current[1];\n          context.lineTo(x + l, y + t);\n          break;\n\n        case 'v':\n          // vertical lineto, relative\n          y += current[1];\n          context.lineTo(x + l, y + t);\n          break;\n\n        case 'V':\n          // verical lineto, absolute\n          y = current[1];\n          context.lineTo(x + l, y + t);\n          break;\n\n        case 'm':\n          // moveTo, relative\n          x += current[1];\n          y += current[2];\n          context.moveTo(x + l, y + t);\n          break;\n\n        case 'M':\n          // moveTo, absolute\n          x = current[1];\n          y = current[2];\n          context.moveTo(x + l, y + t);\n          break;\n\n        case 'c':\n          // bezierCurveTo, relative\n          tempX = x + current[5];\n          tempY = y + current[6];\n          controlX = x + current[3];\n          controlY = y + current[4];\n          context.bezierCurveTo(x + current[1] + l, // x1\n          y + current[2] + t, // y1\n          controlX + l, // x2\n          controlY + t, // y2\n          tempX + l, tempY + t);\n          x = tempX;\n          y = tempY;\n          break;\n\n        case 'C':\n          // bezierCurveTo, absolute\n          x = current[5];\n          y = current[6];\n          controlX = current[3];\n          controlY = current[4];\n          context.bezierCurveTo(current[1] + l, current[2] + t, controlX + l, controlY + t, x + l, y + t);\n          break;\n\n        case 's':\n          // shorthand cubic bezierCurveTo, relative\n          // transform to absolute x,y\n          tempX = x + current[3];\n          tempY = y + current[4]; // calculate reflection of previous control points\n\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n          context.bezierCurveTo(controlX + l, controlY + t, x + current[1] + l, y + current[2] + t, tempX + l, tempY + t); // set control point to 2nd one of this command\n          // the first control point is assumed to be the reflection of\n          // the second control point on the previous command relative\n          // to the current point.\n\n          controlX = x + current[1];\n          controlY = y + current[2];\n          x = tempX;\n          y = tempY;\n          break;\n\n        case 'S':\n          // shorthand cubic bezierCurveTo, absolute\n          tempX = current[3];\n          tempY = current[4]; // calculate reflection of previous control points\n\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n          context.bezierCurveTo(controlX + l, controlY + t, current[1] + l, current[2] + t, tempX + l, tempY + t);\n          x = tempX;\n          y = tempY; // set control point to 2nd one of this command\n          // the first control point is assumed to be the reflection of\n          // the second control point on the previous command relative\n          // to the current point.\n\n          controlX = current[1];\n          controlY = current[2];\n          break;\n\n        case 'q':\n          // quadraticCurveTo, relative\n          // transform to absolute x,y\n          tempX = x + current[3];\n          tempY = y + current[4];\n          controlX = x + current[1];\n          controlY = y + current[2];\n          context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);\n          x = tempX;\n          y = tempY;\n          break;\n\n        case 'Q':\n          // quadraticCurveTo, absolute\n          tempX = current[3];\n          tempY = current[4];\n          context.quadraticCurveTo(current[1] + l, current[2] + t, tempX + l, tempY + t);\n          x = tempX;\n          y = tempY;\n          controlX = current[1];\n          controlY = current[2];\n          break;\n\n        case 't':\n          // shorthand quadraticCurveTo, relative\n          // transform to absolute x,y\n          tempX = x + current[1];\n          tempY = y + current[2];\n\n          if (previous[0].match(/[QqTt]/) === null) {\n            // If there is no previous command or if the previous command was not a Q, q, T or t,\n            // assume the control point is coincident with the current point\n            controlX = x;\n            controlY = y;\n          } else if (previous[0] === 't') {\n            // calculate reflection of previous control points for t\n            controlX = 2 * x - tempControlX;\n            controlY = 2 * y - tempControlY;\n          } else if (previous[0] === 'q') {\n            // calculate reflection of previous control points for q\n            controlX = 2 * x - controlX;\n            controlY = 2 * y - controlY;\n          }\n\n          tempControlX = controlX;\n          tempControlY = controlY;\n          context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);\n          x = tempX;\n          y = tempY;\n          controlX = x + current[1];\n          controlY = y + current[2];\n          break;\n\n        case 'T':\n          tempX = current[1];\n          tempY = current[2]; // calculate reflection of previous control points\n\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n          context.quadraticCurveTo(controlX + l, controlY + t, tempX + l, tempY + t);\n          x = tempX;\n          y = tempY;\n          break;\n\n        case 'a':\n          drawArc(context, x + l, y + t, [current[1], current[2], current[3], current[4], current[5], current[6] + x + l, current[7] + y + t]);\n          x += current[6];\n          y += current[7];\n          break;\n\n        case 'A':\n          drawArc(context, x + l, y + t, [current[1], current[2], current[3], current[4], current[5], current[6] + l, current[7] + t]);\n          x = current[6];\n          y = current[7];\n          break;\n\n        case 'z':\n        case 'Z':\n          context.closePath();\n          break;\n      }\n\n      previous = current;\n    }\n  }\n\n  function drawArc(context, x, y, coords) {\n    const seg = segments(coords[5], // end x\n    coords[6], // end y\n    coords[0], // radius x\n    coords[1], // radius y\n    coords[3], // large flag\n    coords[4], // sweep flag\n    coords[2], // rotation\n    x, y);\n\n    for (let i = 0; i < seg.length; ++i) {\n      const bez = bezier(seg[i]);\n      context.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);\n    }\n  }\n\n  const Tan30 = 0.5773502691896257;\n  const builtins = {\n    'circle': {\n      draw: function (context, size) {\n        const r = Math.sqrt(size) / 2;\n        context.moveTo(r, 0);\n        context.arc(0, 0, r, 0, Tau);\n      }\n    },\n    'cross': {\n      draw: function (context, size) {\n        var r = Math.sqrt(size) / 2,\n            s = r / 2.5;\n        context.moveTo(-r, -s);\n        context.lineTo(-r, s);\n        context.lineTo(-s, s);\n        context.lineTo(-s, r);\n        context.lineTo(s, r);\n        context.lineTo(s, s);\n        context.lineTo(r, s);\n        context.lineTo(r, -s);\n        context.lineTo(s, -s);\n        context.lineTo(s, -r);\n        context.lineTo(-s, -r);\n        context.lineTo(-s, -s);\n        context.closePath();\n      }\n    },\n    'diamond': {\n      draw: function (context, size) {\n        const r = Math.sqrt(size) / 2;\n        context.moveTo(-r, 0);\n        context.lineTo(0, -r);\n        context.lineTo(r, 0);\n        context.lineTo(0, r);\n        context.closePath();\n      }\n    },\n    'square': {\n      draw: function (context, size) {\n        var w = Math.sqrt(size),\n            x = -w / 2;\n        context.rect(x, x, w, w);\n      }\n    },\n    'arrow': {\n      draw: function (context, size) {\n        var r = Math.sqrt(size) / 2,\n            s = r / 7,\n            t = r / 2.5,\n            v = r / 8;\n        context.moveTo(-s, r);\n        context.lineTo(s, r);\n        context.lineTo(s, -v);\n        context.lineTo(t, -v);\n        context.lineTo(0, -r);\n        context.lineTo(-t, -v);\n        context.lineTo(-s, -v);\n        context.closePath();\n      }\n    },\n    'wedge': {\n      draw: function (context, size) {\n        var r = Math.sqrt(size) / 2,\n            h = HalfSqrt3 * r,\n            o = h - r * Tan30,\n            b = r / 4;\n        context.moveTo(0, -h - o);\n        context.lineTo(-b, h - o);\n        context.lineTo(b, h - o);\n        context.closePath();\n      }\n    },\n    'triangle': {\n      draw: function (context, size) {\n        var r = Math.sqrt(size) / 2,\n            h = HalfSqrt3 * r,\n            o = h - r * Tan30;\n        context.moveTo(0, -h - o);\n        context.lineTo(-r, h - o);\n        context.lineTo(r, h - o);\n        context.closePath();\n      }\n    },\n    'triangle-up': {\n      draw: function (context, size) {\n        var r = Math.sqrt(size) / 2,\n            h = HalfSqrt3 * r;\n        context.moveTo(0, -h);\n        context.lineTo(-r, h);\n        context.lineTo(r, h);\n        context.closePath();\n      }\n    },\n    'triangle-down': {\n      draw: function (context, size) {\n        var r = Math.sqrt(size) / 2,\n            h = HalfSqrt3 * r;\n        context.moveTo(0, h);\n        context.lineTo(-r, -h);\n        context.lineTo(r, -h);\n        context.closePath();\n      }\n    },\n    'triangle-right': {\n      draw: function (context, size) {\n        var r = Math.sqrt(size) / 2,\n            h = HalfSqrt3 * r;\n        context.moveTo(h, 0);\n        context.lineTo(-h, -r);\n        context.lineTo(-h, r);\n        context.closePath();\n      }\n    },\n    'triangle-left': {\n      draw: function (context, size) {\n        var r = Math.sqrt(size) / 2,\n            h = HalfSqrt3 * r;\n        context.moveTo(-h, 0);\n        context.lineTo(h, -r);\n        context.lineTo(h, r);\n        context.closePath();\n      }\n    },\n    'stroke': {\n      draw: function (context, size) {\n        const r = Math.sqrt(size) / 2;\n        context.moveTo(-r, 0);\n        context.lineTo(r, 0);\n      }\n    }\n  };\n\n  function symbols(_) {\n    return has$1(builtins, _) ? builtins[_] : customSymbol(_);\n  }\n\n  var custom = {};\n\n  function customSymbol(path) {\n    if (!has$1(custom, path)) {\n      const parsed = pathParse(path);\n      custom[path] = {\n        draw: function (context, size) {\n          pathRender(context, parsed, 0, 0, Math.sqrt(size) / 2);\n        }\n      };\n    }\n\n    return custom[path];\n  }\n\n  const C = 0.448084975506; // C = 1 - c\n\n  function rectangleX(d) {\n    return d.x;\n  }\n\n  function rectangleY(d) {\n    return d.y;\n  }\n\n  function rectangleWidth(d) {\n    return d.width;\n  }\n\n  function rectangleHeight(d) {\n    return d.height;\n  }\n\n  function number$3(_) {\n    return typeof _ === 'function' ? _ : () => +_;\n  }\n\n  function clamp(value, min, max) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  function vg_rect() {\n    var x = rectangleX,\n        y = rectangleY,\n        width = rectangleWidth,\n        height = rectangleHeight,\n        crTL = number$3(0),\n        crTR = crTL,\n        crBL = crTL,\n        crBR = crTL,\n        context = null;\n\n    function rectangle(_, x0, y0) {\n      var buffer,\n          x1 = x0 != null ? x0 : +x.call(this, _),\n          y1 = y0 != null ? y0 : +y.call(this, _),\n          w = +width.call(this, _),\n          h = +height.call(this, _),\n          s = Math.min(w, h) / 2,\n          tl = clamp(+crTL.call(this, _), 0, s),\n          tr = clamp(+crTR.call(this, _), 0, s),\n          bl = clamp(+crBL.call(this, _), 0, s),\n          br = clamp(+crBR.call(this, _), 0, s);\n      if (!context) context = buffer = path$3();\n\n      if (tl <= 0 && tr <= 0 && bl <= 0 && br <= 0) {\n        context.rect(x1, y1, w, h);\n      } else {\n        var x2 = x1 + w,\n            y2 = y1 + h;\n        context.moveTo(x1 + tl, y1);\n        context.lineTo(x2 - tr, y1);\n        context.bezierCurveTo(x2 - C * tr, y1, x2, y1 + C * tr, x2, y1 + tr);\n        context.lineTo(x2, y2 - br);\n        context.bezierCurveTo(x2, y2 - C * br, x2 - C * br, y2, x2 - br, y2);\n        context.lineTo(x1 + bl, y2);\n        context.bezierCurveTo(x1 + C * bl, y2, x1, y2 - C * bl, x1, y2 - bl);\n        context.lineTo(x1, y1 + tl);\n        context.bezierCurveTo(x1, y1 + C * tl, x1 + C * tl, y1, x1 + tl, y1);\n        context.closePath();\n      }\n\n      if (buffer) {\n        context = null;\n        return buffer + '' || null;\n      }\n    }\n\n    rectangle.x = function (_) {\n      if (arguments.length) {\n        x = number$3(_);\n        return rectangle;\n      } else {\n        return x;\n      }\n    };\n\n    rectangle.y = function (_) {\n      if (arguments.length) {\n        y = number$3(_);\n        return rectangle;\n      } else {\n        return y;\n      }\n    };\n\n    rectangle.width = function (_) {\n      if (arguments.length) {\n        width = number$3(_);\n        return rectangle;\n      } else {\n        return width;\n      }\n    };\n\n    rectangle.height = function (_) {\n      if (arguments.length) {\n        height = number$3(_);\n        return rectangle;\n      } else {\n        return height;\n      }\n    };\n\n    rectangle.cornerRadius = function (tl, tr, br, bl) {\n      if (arguments.length) {\n        crTL = number$3(tl);\n        crTR = tr != null ? number$3(tr) : crTL;\n        crBR = br != null ? number$3(br) : crTL;\n        crBL = bl != null ? number$3(bl) : crTR;\n        return rectangle;\n      } else {\n        return crTL;\n      }\n    };\n\n    rectangle.context = function (_) {\n      if (arguments.length) {\n        context = _ == null ? null : _;\n        return rectangle;\n      } else {\n        return context;\n      }\n    };\n\n    return rectangle;\n  }\n\n  function vg_trail() {\n    var x,\n        y,\n        size,\n        defined,\n        context = null,\n        ready,\n        x1,\n        y1,\n        r1;\n\n    function point(x2, y2, w2) {\n      const r2 = w2 / 2;\n\n      if (ready) {\n        var ux = y1 - y2,\n            uy = x2 - x1;\n\n        if (ux || uy) {\n          // get normal vector\n          var ud = Math.sqrt(ux * ux + uy * uy),\n              rx = (ux /= ud) * r1,\n              ry = (uy /= ud) * r1,\n              t = Math.atan2(uy, ux); // draw segment\n\n          context.moveTo(x1 - rx, y1 - ry);\n          context.lineTo(x2 - ux * r2, y2 - uy * r2);\n          context.arc(x2, y2, r2, t - Math.PI, t);\n          context.lineTo(x1 + rx, y1 + ry);\n          context.arc(x1, y1, r1, t, t + Math.PI);\n        } else {\n          context.arc(x2, y2, r2, 0, Tau);\n        }\n\n        context.closePath();\n      } else {\n        ready = 1;\n      }\n\n      x1 = x2;\n      y1 = y2;\n      r1 = r2;\n    }\n\n    function trail(data) {\n      var i,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer;\n      if (context == null) context = buffer = path$3();\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) ready = 0;\n        }\n\n        if (defined0) point(+x(d, i, data), +y(d, i, data), +size(d, i, data));\n      }\n\n      if (buffer) {\n        context = null;\n        return buffer + '' || null;\n      }\n    }\n\n    trail.x = function (_) {\n      if (arguments.length) {\n        x = _;\n        return trail;\n      } else {\n        return x;\n      }\n    };\n\n    trail.y = function (_) {\n      if (arguments.length) {\n        y = _;\n        return trail;\n      } else {\n        return y;\n      }\n    };\n\n    trail.size = function (_) {\n      if (arguments.length) {\n        size = _;\n        return trail;\n      } else {\n        return size;\n      }\n    };\n\n    trail.defined = function (_) {\n      if (arguments.length) {\n        defined = _;\n        return trail;\n      } else {\n        return defined;\n      }\n    };\n\n    trail.context = function (_) {\n      if (arguments.length) {\n        if (_ == null) {\n          context = null;\n        } else {\n          context = _;\n        }\n\n        return trail;\n      } else {\n        return context;\n      }\n    };\n\n    return trail;\n  }\n\n  function value$1(a, b) {\n    return a != null ? a : b;\n  }\n\n  const x$2 = item => item.x || 0,\n        y$2 = item => item.y || 0,\n        w = item => item.width || 0,\n        h = item => item.height || 0,\n        xw = item => (item.x || 0) + (item.width || 0),\n        yh = item => (item.y || 0) + (item.height || 0),\n        sa = item => item.startAngle || 0,\n        ea = item => item.endAngle || 0,\n        pa = item => item.padAngle || 0,\n        ir = item => item.innerRadius || 0,\n        or = item => item.outerRadius || 0,\n        cr = item => item.cornerRadius || 0,\n        tl = item => value$1(item.cornerRadiusTopLeft, item.cornerRadius) || 0,\n        tr = item => value$1(item.cornerRadiusTopRight, item.cornerRadius) || 0,\n        br = item => value$1(item.cornerRadiusBottomRight, item.cornerRadius) || 0,\n        bl = item => value$1(item.cornerRadiusBottomLeft, item.cornerRadius) || 0,\n        sz = item => value$1(item.size, 64),\n        ts = item => item.size || 1,\n        def = item => !(item.defined === false),\n        type = item => symbols(item.shape || 'circle');\n\n  const arcShape = arc$2$1().startAngle(sa).endAngle(ea).padAngle(pa).innerRadius(ir).outerRadius(or).cornerRadius(cr),\n        areavShape = area$2$1().x(x$2).y1(y$2).y0(yh).defined(def),\n        areahShape = area$2$1().y(y$2).x1(x$2).x0(xw).defined(def),\n        lineShape = line$2$1().x(x$2).y(y$2).defined(def),\n        rectShape = vg_rect().x(x$2).y(y$2).width(w).height(h).cornerRadius(tl, tr, br, bl),\n        symbolShape = symbol$2().type(type).size(sz),\n        trailShape = vg_trail().x(x$2).y(y$2).defined(def).size(ts);\n\n  function hasCornerRadius(item) {\n    return item.cornerRadius || item.cornerRadiusTopLeft || item.cornerRadiusTopRight || item.cornerRadiusBottomRight || item.cornerRadiusBottomLeft;\n  }\n\n  function arc$1(context, item) {\n    return arcShape.context(context)(item);\n  }\n\n  function area$1(context, items) {\n    const item = items[0],\n          interp = item.interpolate || 'linear';\n    return (item.orient === 'horizontal' ? areahShape : areavShape).curve(curves(interp, item.orient, item.tension)).context(context)(items);\n  }\n\n  function line$1(context, items) {\n    const item = items[0],\n          interp = item.interpolate || 'linear';\n    return lineShape.curve(curves(interp, item.orient, item.tension)).context(context)(items);\n  }\n\n  function rectangle(context, item, x, y) {\n    return rectShape.context(context)(item, x, y);\n  }\n\n  function shape$1(context, item) {\n    return (item.mark.shape || item.shape).context(context)(item);\n  }\n\n  function symbol$1(context, item) {\n    return symbolShape.context(context)(item);\n  }\n\n  function trail$1(context, items) {\n    return trailShape.context(context)(items);\n  }\n\n  var clip_id = 1;\n\n  function resetSVGClipId() {\n    clip_id = 1;\n  }\n\n  function clip$1$1(renderer, item, size) {\n    var clip = item.clip,\n        defs = renderer._defs,\n        id = item.clip_id || (item.clip_id = 'clip' + clip_id++),\n        c = defs.clipping[id] || (defs.clipping[id] = {\n      id: id\n    });\n\n    if (isFunction(clip)) {\n      c.path = clip(null);\n    } else if (hasCornerRadius(size)) {\n      c.path = rectangle(null, size, 0, 0);\n    } else {\n      c.width = size.width || 0;\n      c.height = size.height || 0;\n    }\n\n    return 'url(#' + id + ')';\n  }\n\n  function Bounds(b) {\n    this.clear();\n    if (b) this.union(b);\n  }\n\n  Bounds.prototype = {\n    clone() {\n      return new Bounds(this);\n    },\n\n    clear() {\n      this.x1 = +Number.MAX_VALUE;\n      this.y1 = +Number.MAX_VALUE;\n      this.x2 = -Number.MAX_VALUE;\n      this.y2 = -Number.MAX_VALUE;\n      return this;\n    },\n\n    empty() {\n      return this.x1 === +Number.MAX_VALUE && this.y1 === +Number.MAX_VALUE && this.x2 === -Number.MAX_VALUE && this.y2 === -Number.MAX_VALUE;\n    },\n\n    equals(b) {\n      return this.x1 === b.x1 && this.y1 === b.y1 && this.x2 === b.x2 && this.y2 === b.y2;\n    },\n\n    set(x1, y1, x2, y2) {\n      if (x2 < x1) {\n        this.x2 = x1;\n        this.x1 = x2;\n      } else {\n        this.x1 = x1;\n        this.x2 = x2;\n      }\n\n      if (y2 < y1) {\n        this.y2 = y1;\n        this.y1 = y2;\n      } else {\n        this.y1 = y1;\n        this.y2 = y2;\n      }\n\n      return this;\n    },\n\n    add(x, y) {\n      if (x < this.x1) this.x1 = x;\n      if (y < this.y1) this.y1 = y;\n      if (x > this.x2) this.x2 = x;\n      if (y > this.y2) this.y2 = y;\n      return this;\n    },\n\n    expand(d) {\n      this.x1 -= d;\n      this.y1 -= d;\n      this.x2 += d;\n      this.y2 += d;\n      return this;\n    },\n\n    round() {\n      this.x1 = Math.floor(this.x1);\n      this.y1 = Math.floor(this.y1);\n      this.x2 = Math.ceil(this.x2);\n      this.y2 = Math.ceil(this.y2);\n      return this;\n    },\n\n    scale(s) {\n      this.x1 *= s;\n      this.y1 *= s;\n      this.x2 *= s;\n      this.y2 *= s;\n      return this;\n    },\n\n    translate(dx, dy) {\n      this.x1 += dx;\n      this.x2 += dx;\n      this.y1 += dy;\n      this.y2 += dy;\n      return this;\n    },\n\n    rotate(angle, x, y) {\n      const p = this.rotatedPoints(angle, x, y);\n      return this.clear().add(p[0], p[1]).add(p[2], p[3]).add(p[4], p[5]).add(p[6], p[7]);\n    },\n\n    rotatedPoints(angle, x, y) {\n      var {\n        x1,\n        y1,\n        x2,\n        y2\n      } = this,\n          cos = Math.cos(angle),\n          sin = Math.sin(angle),\n          cx = x - x * cos + y * sin,\n          cy = y - x * sin - y * cos;\n      return [cos * x1 - sin * y1 + cx, sin * x1 + cos * y1 + cy, cos * x1 - sin * y2 + cx, sin * x1 + cos * y2 + cy, cos * x2 - sin * y1 + cx, sin * x2 + cos * y1 + cy, cos * x2 - sin * y2 + cx, sin * x2 + cos * y2 + cy];\n    },\n\n    union(b) {\n      if (b.x1 < this.x1) this.x1 = b.x1;\n      if (b.y1 < this.y1) this.y1 = b.y1;\n      if (b.x2 > this.x2) this.x2 = b.x2;\n      if (b.y2 > this.y2) this.y2 = b.y2;\n      return this;\n    },\n\n    intersect(b) {\n      if (b.x1 > this.x1) this.x1 = b.x1;\n      if (b.y1 > this.y1) this.y1 = b.y1;\n      if (b.x2 < this.x2) this.x2 = b.x2;\n      if (b.y2 < this.y2) this.y2 = b.y2;\n      return this;\n    },\n\n    encloses(b) {\n      return b && this.x1 <= b.x1 && this.x2 >= b.x2 && this.y1 <= b.y1 && this.y2 >= b.y2;\n    },\n\n    alignsWith(b) {\n      return b && (this.x1 == b.x1 || this.x2 == b.x2 || this.y1 == b.y1 || this.y2 == b.y2);\n    },\n\n    intersects(b) {\n      return b && !(this.x2 < b.x1 || this.x1 > b.x2 || this.y2 < b.y1 || this.y1 > b.y2);\n    },\n\n    contains(x, y) {\n      return !(x < this.x1 || x > this.x2 || y < this.y1 || y > this.y2);\n    },\n\n    width() {\n      return this.x2 - this.x1;\n    },\n\n    height() {\n      return this.y2 - this.y1;\n    }\n\n  };\n\n  function Item(mark) {\n    this.mark = mark;\n    this.bounds = this.bounds || new Bounds();\n  }\n\n  function GroupItem(mark) {\n    Item.call(this, mark);\n    this.items = this.items || [];\n  }\n\n  inherits(GroupItem, Item);\n\n  function ResourceLoader(customLoader) {\n    this._pending = 0;\n    this._loader = customLoader || loader();\n  }\n\n  function increment(loader) {\n    loader._pending += 1;\n  }\n\n  function decrement(loader) {\n    loader._pending -= 1;\n  }\n\n  ResourceLoader.prototype = {\n    pending() {\n      return this._pending;\n    },\n\n    sanitizeURL(uri) {\n      const loader = this;\n      increment(loader);\n      return loader._loader.sanitize(uri, {\n        context: 'href'\n      }).then(opt => {\n        decrement(loader);\n        return opt;\n      }).catch(() => {\n        decrement(loader);\n        return null;\n      });\n    },\n\n    loadImage(uri) {\n      const loader = this,\n            Image = domImage();\n      increment(loader);\n      return loader._loader.sanitize(uri, {\n        context: 'image'\n      }).then(opt => {\n        const url = opt.href;\n        if (!url || !Image) throw {\n          url: url\n        };\n        const img = new Image(); // set crossOrigin only if cors is defined; empty string sets anonymous mode\n        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin\n\n        const cors = has$1(opt, 'crossOrigin') ? opt.crossOrigin : 'anonymous';\n        if (cors != null) img.crossOrigin = cors; // attempt to load image resource\n\n        img.onload = () => decrement(loader);\n\n        img.onerror = () => decrement(loader);\n\n        img.src = url;\n        return img;\n      }).catch(e => {\n        decrement(loader);\n        return {\n          complete: false,\n          width: 0,\n          height: 0,\n          src: e && e.url || ''\n        };\n      });\n    },\n\n    ready() {\n      const loader = this;\n      return new Promise(accept => {\n        function poll(value) {\n          if (!loader.pending()) accept(value);else setTimeout(() => {\n            poll(true);\n          }, 10);\n        }\n\n        poll(false);\n      });\n    }\n\n  };\n\n  function boundStroke(bounds, item, miter) {\n    if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {\n      const sw = item.strokeWidth != null ? +item.strokeWidth : 1;\n      bounds.expand(sw + (miter ? miterAdjustment(item, sw) : 0));\n    }\n\n    return bounds;\n  }\n\n  function miterAdjustment(item, strokeWidth) {\n    // TODO: more sophisticated adjustment? Or miter support in boundContext?\n    return item.strokeJoin && item.strokeJoin !== 'miter' ? 0 : strokeWidth;\n  }\n\n  const circleThreshold = Tau - 1e-8;\n  let bounds, lx, ly, rot, ma, mb, mc, md;\n\n  const add$1 = (x, y) => bounds.add(x, y);\n\n  const addL = (x, y) => add$1(lx = x, ly = y);\n\n  const addX = x => add$1(x, bounds.y1);\n\n  const addY = y => add$1(bounds.x1, y);\n\n  const px = (x, y) => ma * x + mc * y;\n\n  const py = (x, y) => mb * x + md * y;\n\n  const addp = (x, y) => add$1(px(x, y), py(x, y));\n\n  const addpL = (x, y) => addL(px(x, y), py(x, y));\n\n  function boundContext(_, deg) {\n    bounds = _;\n\n    if (deg) {\n      rot = deg * DegToRad;\n      ma = md = Math.cos(rot);\n      mb = Math.sin(rot);\n      mc = -mb;\n    } else {\n      ma = md = 1;\n      rot = mb = mc = 0;\n    }\n\n    return context$1;\n  }\n\n  const context$1 = {\n    beginPath() {},\n\n    closePath() {},\n\n    moveTo: addpL,\n    lineTo: addpL,\n\n    rect(x, y, w, h) {\n      if (rot) {\n        addp(x + w, y);\n        addp(x + w, y + h);\n        addp(x, y + h);\n        addpL(x, y);\n      } else {\n        add$1(x + w, y + h);\n        addL(x, y);\n      }\n    },\n\n    quadraticCurveTo(x1, y1, x2, y2) {\n      const px1 = px(x1, y1),\n            py1 = py(x1, y1),\n            px2 = px(x2, y2),\n            py2 = py(x2, y2);\n      quadExtrema(lx, px1, px2, addX);\n      quadExtrema(ly, py1, py2, addY);\n      addL(px2, py2);\n    },\n\n    bezierCurveTo(x1, y1, x2, y2, x3, y3) {\n      const px1 = px(x1, y1),\n            py1 = py(x1, y1),\n            px2 = px(x2, y2),\n            py2 = py(x2, y2),\n            px3 = px(x3, y3),\n            py3 = py(x3, y3);\n      cubicExtrema(lx, px1, px2, px3, addX);\n      cubicExtrema(ly, py1, py2, py3, addY);\n      addL(px3, py3);\n    },\n\n    arc(cx, cy, r, sa, ea, ccw) {\n      sa += rot;\n      ea += rot; // store last point on path\n\n      lx = r * Math.cos(ea) + cx;\n      ly = r * Math.sin(ea) + cy;\n\n      if (Math.abs(ea - sa) > circleThreshold) {\n        // treat as full circle\n        add$1(cx - r, cy - r);\n        add$1(cx + r, cy + r);\n      } else {\n        const update = a => add$1(r * Math.cos(a) + cx, r * Math.sin(a) + cy);\n\n        let s, i; // sample end points\n\n        update(sa);\n        update(ea); // sample interior points aligned with 90 degrees\n\n        if (ea !== sa) {\n          sa = sa % Tau;\n          if (sa < 0) sa += Tau;\n          ea = ea % Tau;\n          if (ea < 0) ea += Tau;\n\n          if (ea < sa) {\n            ccw = !ccw; // flip direction\n\n            s = sa;\n            sa = ea;\n            ea = s; // swap end-points\n          }\n\n          if (ccw) {\n            ea -= Tau;\n            s = sa - sa % HalfPi;\n\n            for (i = 0; i < 4 && s > ea; ++i, s -= HalfPi) update(s);\n          } else {\n            s = sa - sa % HalfPi + HalfPi;\n\n            for (i = 0; i < 4 && s < ea; ++i, s = s + HalfPi) update(s);\n          }\n        }\n      }\n    }\n\n  };\n\n  function quadExtrema(x0, x1, x2, cb) {\n    const t = (x0 - x1) / (x0 + x2 - 2 * x1);\n    if (0 < t && t < 1) cb(x0 + (x1 - x0) * t);\n  }\n\n  function cubicExtrema(x0, x1, x2, x3, cb) {\n    const a = x3 - x0 + 3 * x1 - 3 * x2,\n          b = x0 + x2 - 2 * x1,\n          c = x0 - x1;\n    let t0 = 0,\n        t1 = 0,\n        r; // solve for parameter t\n\n    if (Math.abs(a) > Epsilon) {\n      // quadratic equation\n      r = b * b + c * a;\n\n      if (r >= 0) {\n        r = Math.sqrt(r);\n        t0 = (-b + r) / a;\n        t1 = (-b - r) / a;\n      }\n    } else {\n      // linear equation\n      t0 = 0.5 * c / b;\n    } // calculate position\n\n\n    if (0 < t0 && t0 < 1) cb(cubic(t0, x0, x1, x2, x3));\n    if (0 < t1 && t1 < 1) cb(cubic(t1, x0, x1, x2, x3));\n  }\n\n  function cubic(t, x0, x1, x2, x3) {\n    const s = 1 - t,\n          s2 = s * s,\n          t2 = t * t;\n    return s2 * s * x0 + 3 * s2 * t * x1 + 3 * s * t2 * x2 + t2 * t * x3;\n  }\n\n  var context$2 = (context$2 = domCanvas(1, 1)) ? context$2.getContext('2d') : null;\n  const b = new Bounds();\n\n  function intersectPath(draw) {\n    return function (item, brush) {\n      // rely on (inaccurate) bounds intersection if no context\n      if (!context$2) return true; // add path to offscreen graphics context\n\n      draw(context$2, item); // get bounds intersection region\n\n      b.clear().union(item.bounds).intersect(brush).round();\n      const {\n        x1,\n        y1,\n        x2,\n        y2\n      } = b; // iterate over intersection region\n      // perform fine grained inclusion test\n\n      for (let y = y1; y <= y2; ++y) {\n        for (let x = x1; x <= x2; ++x) {\n          if (context$2.isPointInPath(x, y)) {\n            return true;\n          }\n        }\n      } // false if no hits in intersection region\n\n\n      return false;\n    };\n  }\n\n  function intersectPoint(item, box) {\n    return box.contains(item.x || 0, item.y || 0);\n  }\n\n  function intersectRect(item, box) {\n    const x = item.x || 0,\n          y = item.y || 0,\n          w = item.width || 0,\n          h = item.height || 0;\n    return box.intersects(b.set(x, y, x + w, y + h));\n  }\n\n  function intersectRule(item, box) {\n    const x = item.x || 0,\n          y = item.y || 0,\n          x2 = item.x2 != null ? item.x2 : x,\n          y2 = item.y2 != null ? item.y2 : y;\n    return intersectBoxLine(box, x, y, x2, y2);\n  }\n\n  function intersectBoxLine(box, x, y, u, v) {\n    const {\n      x1,\n      y1,\n      x2,\n      y2\n    } = box,\n          dx = u - x,\n          dy = v - y;\n    let t0 = 0,\n        t1 = 1,\n        p,\n        q,\n        r,\n        e;\n\n    for (e = 0; e < 4; ++e) {\n      if (e === 0) {\n        p = -dx;\n        q = -(x1 - x);\n      }\n\n      if (e === 1) {\n        p = dx;\n        q = x2 - x;\n      }\n\n      if (e === 2) {\n        p = -dy;\n        q = -(y1 - y);\n      }\n\n      if (e === 3) {\n        p = dy;\n        q = y2 - y;\n      }\n\n      if (Math.abs(p) < 1e-10 && q < 0) return false;\n      r = q / p;\n\n      if (p < 0) {\n        if (r > t1) return false;else if (r > t0) t0 = r;\n      } else if (p > 0) {\n        if (r < t0) return false;else if (r < t1) t1 = r;\n      }\n    }\n\n    return true;\n  }\n\n  function blend(context, item) {\n    context.globalCompositeOperation = item.blend || 'source-over';\n  }\n\n  function value$2(value, dflt) {\n    return value == null ? dflt : value;\n  }\n\n  function addStops(gradient, stops) {\n    const n = stops.length;\n\n    for (let i = 0; i < n; ++i) {\n      gradient.addColorStop(stops[i].offset, stops[i].color);\n    }\n\n    return gradient;\n  }\n\n  function gradient$1(context, spec, bounds) {\n    const w = bounds.width(),\n          h = bounds.height();\n    let gradient;\n\n    if (spec.gradient === 'radial') {\n      gradient = context.createRadialGradient(bounds.x1 + value$2(spec.x1, 0.5) * w, bounds.y1 + value$2(spec.y1, 0.5) * h, Math.max(w, h) * value$2(spec.r1, 0), bounds.x1 + value$2(spec.x2, 0.5) * w, bounds.y1 + value$2(spec.y2, 0.5) * h, Math.max(w, h) * value$2(spec.r2, 0.5));\n    } else {\n      // linear gradient\n      const x1 = value$2(spec.x1, 0),\n            y1 = value$2(spec.y1, 0),\n            x2 = value$2(spec.x2, 1),\n            y2 = value$2(spec.y2, 0);\n\n      if (x1 === x2 || y1 === y2 || w === h) {\n        // axis aligned: use normal gradient\n        gradient = context.createLinearGradient(bounds.x1 + x1 * w, bounds.y1 + y1 * h, bounds.x1 + x2 * w, bounds.y1 + y2 * h);\n      } else {\n        // not axis aligned: render gradient into a pattern (#2365)\n        // this allows us to use normalized bounding box coordinates\n        const image = domCanvas(Math.ceil(w), Math.ceil(h)),\n              ictx = image.getContext('2d');\n        ictx.scale(w, h);\n        ictx.fillStyle = addStops(ictx.createLinearGradient(x1, y1, x2, y2), spec.stops);\n        ictx.fillRect(0, 0, w, h);\n        return context.createPattern(image, 'no-repeat');\n      }\n    }\n\n    return addStops(gradient, spec.stops);\n  }\n\n  function color$1(context, item, value) {\n    return isGradient(value) ? gradient$1(context, value, item.bounds) : value;\n  }\n\n  function fill(context, item, opacity) {\n    opacity *= item.fillOpacity == null ? 1 : item.fillOpacity;\n\n    if (opacity > 0) {\n      context.globalAlpha = opacity;\n      context.fillStyle = color$1(context, item, item.fill);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  var Empty = [];\n\n  function stroke(context, item, opacity) {\n    var lw = (lw = item.strokeWidth) != null ? lw : 1;\n    if (lw <= 0) return false;\n    opacity *= item.strokeOpacity == null ? 1 : item.strokeOpacity;\n\n    if (opacity > 0) {\n      context.globalAlpha = opacity;\n      context.strokeStyle = color$1(context, item, item.stroke);\n      context.lineWidth = lw;\n      context.lineCap = item.strokeCap || 'butt';\n      context.lineJoin = item.strokeJoin || 'miter';\n      context.miterLimit = item.strokeMiterLimit || 10;\n\n      if (context.setLineDash) {\n        context.setLineDash(item.strokeDash || Empty);\n        context.lineDashOffset = item.strokeDashOffset || 0;\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function compare(a, b) {\n    return a.zindex - b.zindex || a.index - b.index;\n  }\n\n  function zorder(scene) {\n    if (!scene.zdirty) return scene.zitems;\n    var items = scene.items,\n        output = [],\n        item,\n        i,\n        n;\n\n    for (i = 0, n = items.length; i < n; ++i) {\n      item = items[i];\n      item.index = i;\n      if (item.zindex) output.push(item);\n    }\n\n    scene.zdirty = false;\n    return scene.zitems = output.sort(compare);\n  }\n\n  function visit(scene, visitor) {\n    var items = scene.items,\n        i,\n        n;\n    if (!items || !items.length) return;\n    const zitems = zorder(scene);\n\n    if (zitems && zitems.length) {\n      for (i = 0, n = items.length; i < n; ++i) {\n        if (!items[i].zindex) visitor(items[i]);\n      }\n\n      items = zitems;\n    }\n\n    for (i = 0, n = items.length; i < n; ++i) {\n      visitor(items[i]);\n    }\n  }\n\n  function pickVisit(scene, visitor) {\n    var items = scene.items,\n        hit,\n        i;\n    if (!items || !items.length) return null;\n    const zitems = zorder(scene);\n    if (zitems && zitems.length) items = zitems;\n\n    for (i = items.length; --i >= 0;) {\n      if (hit = visitor(items[i])) return hit;\n    }\n\n    if (items === zitems) {\n      for (items = scene.items, i = items.length; --i >= 0;) {\n        if (!items[i].zindex) {\n          if (hit = visitor(items[i])) return hit;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  function drawAll(path) {\n    return function (context, scene, bounds) {\n      visit(scene, item => {\n        if (!bounds || bounds.intersects(item.bounds)) {\n          drawPath(path, context, item, item);\n        }\n      });\n    };\n  }\n\n  function drawOne(path) {\n    return function (context, scene, bounds) {\n      if (scene.items.length && (!bounds || bounds.intersects(scene.bounds))) {\n        drawPath(path, context, scene.items[0], scene.items);\n      }\n    };\n  }\n\n  function drawPath(path, context, item, items) {\n    var opacity = item.opacity == null ? 1 : item.opacity;\n    if (opacity === 0) return;\n    if (path(context, items)) return;\n    blend(context, item);\n\n    if (item.fill && fill(context, item, opacity)) {\n      context.fill();\n    }\n\n    if (item.stroke && stroke(context, item, opacity)) {\n      context.stroke();\n    }\n  }\n\n  function pick$1(test) {\n    test = test || truthy;\n    return function (context, scene, x, y, gx, gy) {\n      x *= context.pixelRatio;\n      y *= context.pixelRatio;\n      return pickVisit(scene, item => {\n        const b = item.bounds; // first hit test against bounding box\n\n        if (b && !b.contains(gx, gy) || !b) return; // if in bounding box, perform more careful test\n\n        if (test(context, item, x, y, gx, gy)) return item;\n      });\n    };\n  }\n\n  function hitPath(path, filled) {\n    return function (context, o, x, y) {\n      var item = Array.isArray(o) ? o[0] : o,\n          fill = filled == null ? item.fill : filled,\n          stroke = item.stroke && context.isPointInStroke,\n          lw,\n          lc;\n\n      if (stroke) {\n        lw = item.strokeWidth;\n        lc = item.strokeCap;\n        context.lineWidth = lw != null ? lw : 1;\n        context.lineCap = lc != null ? lc : 'butt';\n      }\n\n      return path(context, o) ? false : fill && context.isPointInPath(x, y) || stroke && context.isPointInStroke(x, y);\n    };\n  }\n\n  function pickPath(path) {\n    return pick$1(hitPath(path));\n  }\n\n  function translate$1(x, y) {\n    return 'translate(' + x + ',' + y + ')';\n  }\n\n  function rotate(a) {\n    return 'rotate(' + a + ')';\n  }\n\n  function scale$3(scaleX, scaleY) {\n    return 'scale(' + scaleX + ',' + scaleY + ')';\n  }\n\n  function translateItem(item) {\n    return translate$1(item.x || 0, item.y || 0);\n  }\n\n  function rotateItem(item) {\n    return translate$1(item.x || 0, item.y || 0) + (item.angle ? ' ' + rotate(item.angle) : '');\n  }\n\n  function transformItem(item) {\n    return translate$1(item.x || 0, item.y || 0) + (item.angle ? ' ' + rotate(item.angle) : '') + (item.scaleX || item.scaleY ? ' ' + scale$3(item.scaleX || 1, item.scaleY || 1) : '');\n  }\n\n  function markItemPath(type, shape, isect) {\n    function attr(emit, item) {\n      emit('transform', rotateItem(item));\n      emit('d', shape(null, item));\n    }\n\n    function bound(bounds, item) {\n      shape(boundContext(bounds, item.angle), item);\n      return boundStroke(bounds, item).translate(item.x || 0, item.y || 0);\n    }\n\n    function draw(context, item) {\n      var x = item.x || 0,\n          y = item.y || 0,\n          a = item.angle || 0;\n      context.translate(x, y);\n      if (a) context.rotate(a *= DegToRad);\n      context.beginPath();\n      shape(context, item);\n      if (a) context.rotate(-a);\n      context.translate(-x, -y);\n    }\n\n    return {\n      type: type,\n      tag: 'path',\n      nested: false,\n      attr: attr,\n      bound: bound,\n      draw: drawAll(draw),\n      pick: pickPath(draw),\n      isect: isect || intersectPath(draw)\n    };\n  }\n\n  var arc$2 = markItemPath('arc', arc$1);\n\n  function pickArea(a, p) {\n    var v = a[0].orient === 'horizontal' ? p[1] : p[0],\n        z = a[0].orient === 'horizontal' ? 'y' : 'x',\n        i = a.length,\n        min = +Infinity,\n        hit,\n        d;\n\n    while (--i >= 0) {\n      if (a[i].defined === false) continue;\n      d = Math.abs(a[i][z] - v);\n\n      if (d < min) {\n        min = d;\n        hit = a[i];\n      }\n    }\n\n    return hit;\n  }\n\n  function pickLine(a, p) {\n    var t = Math.pow(a[0].strokeWidth || 1, 2),\n        i = a.length,\n        dx,\n        dy,\n        dd;\n\n    while (--i >= 0) {\n      if (a[i].defined === false) continue;\n      dx = a[i].x - p[0];\n      dy = a[i].y - p[1];\n      dd = dx * dx + dy * dy;\n      if (dd < t) return a[i];\n    }\n\n    return null;\n  }\n\n  function pickTrail(a, p) {\n    var i = a.length,\n        dx,\n        dy,\n        dd;\n\n    while (--i >= 0) {\n      if (a[i].defined === false) continue;\n      dx = a[i].x - p[0];\n      dy = a[i].y - p[1];\n      dd = dx * dx + dy * dy;\n      dx = a[i].size || 1;\n      if (dd < dx * dx) return a[i];\n    }\n\n    return null;\n  }\n\n  function markMultiItemPath(type, shape, tip) {\n    function attr(emit, item) {\n      var items = item.mark.items;\n      if (items.length) emit('d', shape(null, items));\n    }\n\n    function bound(bounds, mark) {\n      var items = mark.items;\n\n      if (items.length === 0) {\n        return bounds;\n      } else {\n        shape(boundContext(bounds), items);\n        return boundStroke(bounds, items[0]);\n      }\n    }\n\n    function draw(context, items) {\n      context.beginPath();\n      shape(context, items);\n    }\n\n    const hit = hitPath(draw);\n\n    function pick(context, scene, x, y, gx, gy) {\n      var items = scene.items,\n          b = scene.bounds;\n\n      if (!items || !items.length || b && !b.contains(gx, gy)) {\n        return null;\n      }\n\n      x *= context.pixelRatio;\n      y *= context.pixelRatio;\n      return hit(context, items, x, y) ? items[0] : null;\n    }\n\n    return {\n      type: type,\n      tag: 'path',\n      nested: true,\n      attr: attr,\n      bound: bound,\n      draw: drawOne(draw),\n      pick: pick,\n      isect: intersectPoint,\n      tip: tip\n    };\n  }\n\n  var area$2 = markMultiItemPath('area', area$1, pickArea);\n\n  function clip$2(context, scene) {\n    var clip = scene.clip;\n    context.save();\n\n    if (isFunction(clip)) {\n      context.beginPath();\n      clip(context);\n      context.clip();\n    } else {\n      clipGroup(context, scene.group);\n    }\n  }\n\n  function clipGroup(context, group) {\n    context.beginPath();\n    hasCornerRadius(group) ? rectangle(context, group, 0, 0) : context.rect(0, 0, group.width || 0, group.height || 0);\n    context.clip();\n  }\n\n  function offset$1(item) {\n    const sw = value$2(item.strokeWidth, 1);\n    return item.strokeOffset != null ? item.strokeOffset : item.stroke && sw > 0.5 && sw < 1.5 ? 0.5 - Math.abs(sw - 1) : 0;\n  }\n\n  function attr$5(emit, item) {\n    emit('transform', translateItem(item));\n  }\n\n  function emitRectangle(emit, item) {\n    const off = offset$1(item);\n    emit('d', rectangle(null, item, off, off));\n  }\n\n  function background$1(emit, item) {\n    emit('class', 'background');\n    emit('aria-hidden', true);\n    emitRectangle(emit, item);\n  }\n\n  function foreground(emit, item) {\n    emit('class', 'foreground');\n    emit('aria-hidden', true);\n\n    if (item.strokeForeground) {\n      emitRectangle(emit, item);\n    } else {\n      emit('d', '');\n    }\n  }\n\n  function content(emit, item, renderer) {\n    const url = item.clip ? clip$1$1(renderer, item, item) : null;\n    emit('clip-path', url);\n  }\n\n  function bound$5(bounds, group) {\n    if (!group.clip && group.items) {\n      const items = group.items,\n            m = items.length;\n\n      for (let j = 0; j < m; ++j) {\n        bounds.union(items[j].bounds);\n      }\n    }\n\n    if ((group.clip || group.width || group.height) && !group.noBound) {\n      bounds.add(0, 0).add(group.width || 0, group.height || 0);\n    }\n\n    boundStroke(bounds, group);\n    return bounds.translate(group.x || 0, group.y || 0);\n  }\n\n  function rectanglePath(context, group, x, y) {\n    const off = offset$1(group);\n    context.beginPath();\n    rectangle(context, group, (x || 0) + off, (y || 0) + off);\n  }\n\n  const hitBackground = hitPath(rectanglePath);\n  const hitForeground = hitPath(rectanglePath, false);\n  const hitCorner = hitPath(rectanglePath, true);\n\n  function draw$4(context, scene, bounds) {\n    visit(scene, group => {\n      const gx = group.x || 0,\n            gy = group.y || 0,\n            fore = group.strokeForeground,\n            opacity = group.opacity == null ? 1 : group.opacity; // draw group background\n\n      if ((group.stroke || group.fill) && opacity) {\n        rectanglePath(context, group, gx, gy);\n        blend(context, group);\n\n        if (group.fill && fill(context, group, opacity)) {\n          context.fill();\n        }\n\n        if (group.stroke && !fore && stroke(context, group, opacity)) {\n          context.stroke();\n        }\n      } // setup graphics context, set clip and bounds\n\n\n      context.save();\n      context.translate(gx, gy);\n      if (group.clip) clipGroup(context, group);\n      if (bounds) bounds.translate(-gx, -gy); // draw group contents\n\n      visit(group, item => {\n        this.draw(context, item, bounds);\n      }); // restore graphics context\n\n      if (bounds) bounds.translate(gx, gy);\n      context.restore(); // draw group foreground\n\n      if (fore && group.stroke && opacity) {\n        rectanglePath(context, group, gx, gy);\n        blend(context, group);\n\n        if (stroke(context, group, opacity)) {\n          context.stroke();\n        }\n      }\n    });\n  }\n\n  function pick(context, scene, x, y, gx, gy) {\n    if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {\n      return null;\n    }\n\n    const cx = x * context.pixelRatio,\n          cy = y * context.pixelRatio;\n    return pickVisit(scene, group => {\n      let hit, dx, dy; // first hit test bounding box\n\n      const b = group.bounds;\n      if (b && !b.contains(gx, gy)) return; // passed bounds check, test rectangular clip\n\n      dx = group.x || 0;\n      dy = group.y || 0;\n      const dw = dx + (group.width || 0),\n            dh = dy + (group.height || 0),\n            c = group.clip;\n      if (c && (gx < dx || gx > dw || gy < dy || gy > dh)) return; // adjust coordinate system\n\n      context.save();\n      context.translate(dx, dy);\n      dx = gx - dx;\n      dy = gy - dy; // test background for rounded corner clip\n\n      if (c && hasCornerRadius(group) && !hitCorner(context, group, cx, cy)) {\n        context.restore();\n        return null;\n      }\n\n      const fore = group.strokeForeground,\n            ix = scene.interactive !== false; // hit test against group foreground\n\n      if (ix && fore && group.stroke && hitForeground(context, group, cx, cy)) {\n        context.restore();\n        return group;\n      } // hit test against contained marks\n\n\n      hit = pickVisit(group, mark => pickMark(mark, dx, dy) ? this.pick(mark, x, y, dx, dy) : null); // hit test against group background\n\n      if (!hit && ix && (group.fill || !fore && group.stroke) && hitBackground(context, group, cx, cy)) {\n        hit = group;\n      } // restore state and return\n\n\n      context.restore();\n      return hit || null;\n    });\n  }\n\n  function pickMark(mark, x, y) {\n    return (mark.interactive !== false || mark.marktype === 'group') && mark.bounds && mark.bounds.contains(x, y);\n  }\n\n  var group = {\n    type: 'group',\n    tag: 'g',\n    nested: false,\n    attr: attr$5,\n    bound: bound$5,\n    draw: draw$4,\n    pick: pick,\n    isect: intersectRect,\n    content: content,\n    background: background$1,\n    foreground: foreground\n  };\n  var metadata = {\n    'xmlns': 'http://www.w3.org/2000/svg',\n    'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n    'version': '1.1'\n  };\n\n  function getImage(item, renderer) {\n    var image = item.image;\n\n    if (!image || item.url && item.url !== image.url) {\n      image = {\n        complete: false,\n        width: 0,\n        height: 0\n      };\n      renderer.loadImage(item.url).then(image => {\n        item.image = image;\n        item.image.url = item.url;\n      });\n    }\n\n    return image;\n  }\n\n  function imageWidth(item, image) {\n    return item.width != null ? item.width : !image || !image.width ? 0 : item.aspect !== false && item.height ? item.height * image.width / image.height : image.width;\n  }\n\n  function imageHeight(item, image) {\n    return item.height != null ? item.height : !image || !image.height ? 0 : item.aspect !== false && item.width ? item.width * image.height / image.width : image.height;\n  }\n\n  function imageXOffset(align, w) {\n    return align === 'center' ? w / 2 : align === 'right' ? w : 0;\n  }\n\n  function imageYOffset(baseline, h) {\n    return baseline === 'middle' ? h / 2 : baseline === 'bottom' ? h : 0;\n  }\n\n  function attr$4(emit, item, renderer) {\n    const img = getImage(item, renderer),\n          w = imageWidth(item, img),\n          h = imageHeight(item, img),\n          x = (item.x || 0) - imageXOffset(item.align, w),\n          y = (item.y || 0) - imageYOffset(item.baseline, h),\n          i = !img.src && img.toDataURL ? img.toDataURL() : img.src || '';\n    emit('href', i, metadata['xmlns:xlink'], 'xlink:href');\n    emit('transform', translate$1(x, y));\n    emit('width', w);\n    emit('height', h);\n    emit('preserveAspectRatio', item.aspect === false ? 'none' : 'xMidYMid');\n  }\n\n  function bound$4(bounds, item) {\n    const img = item.image,\n          w = imageWidth(item, img),\n          h = imageHeight(item, img),\n          x = (item.x || 0) - imageXOffset(item.align, w),\n          y = (item.y || 0) - imageYOffset(item.baseline, h);\n    return bounds.set(x, y, x + w, y + h);\n  }\n\n  function draw$3(context, scene, bounds) {\n    visit(scene, item => {\n      if (bounds && !bounds.intersects(item.bounds)) return; // bounds check\n\n      const img = getImage(item, this);\n      let w = imageWidth(item, img);\n      let h = imageHeight(item, img);\n      if (w === 0 || h === 0) return; // early exit\n\n      let x = (item.x || 0) - imageXOffset(item.align, w),\n          y = (item.y || 0) - imageYOffset(item.baseline, h),\n          opacity,\n          ar0,\n          ar1,\n          t;\n\n      if (item.aspect !== false) {\n        ar0 = img.width / img.height;\n        ar1 = item.width / item.height;\n\n        if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {\n          if (ar1 < ar0) {\n            t = w / ar0;\n            y += (h - t) / 2;\n            h = t;\n          } else {\n            t = h * ar0;\n            x += (w - t) / 2;\n            w = t;\n          }\n        }\n      }\n\n      if (img.complete || img.toDataURL) {\n        blend(context, item);\n        context.globalAlpha = (opacity = item.opacity) != null ? opacity : 1;\n        context.imageSmoothingEnabled = item.smooth !== false;\n        context.drawImage(img, x, y, w, h);\n      }\n    });\n  }\n\n  var image = {\n    type: 'image',\n    tag: 'image',\n    nested: false,\n    attr: attr$4,\n    bound: bound$4,\n    draw: draw$3,\n    pick: pick$1(),\n    isect: truthy,\n    // bounds check is sufficient\n    get: getImage,\n    xOffset: imageXOffset,\n    yOffset: imageYOffset\n  };\n  var line$2 = markMultiItemPath('line', line$1, pickLine);\n\n  function attr$3(emit, item) {\n    var sx = item.scaleX || 1,\n        sy = item.scaleY || 1;\n\n    if (sx !== 1 || sy !== 1) {\n      emit('vector-effect', 'non-scaling-stroke');\n    }\n\n    emit('transform', transformItem(item));\n    emit('d', item.path);\n  }\n\n  function path$1(context, item) {\n    var path = item.path;\n    if (path == null) return true;\n    var x = item.x || 0,\n        y = item.y || 0,\n        sx = item.scaleX || 1,\n        sy = item.scaleY || 1,\n        a = (item.angle || 0) * DegToRad,\n        cache = item.pathCache;\n\n    if (!cache || cache.path !== path) {\n      (item.pathCache = cache = pathParse(path)).path = path;\n    }\n\n    if (a && context.rotate && context.translate) {\n      context.translate(x, y);\n      context.rotate(a);\n      pathRender(context, cache, 0, 0, sx, sy);\n      context.rotate(-a);\n      context.translate(-x, -y);\n    } else {\n      pathRender(context, cache, x, y, sx, sy);\n    }\n  }\n\n  function bound$3(bounds, item) {\n    return path$1(boundContext(bounds, item.angle), item) ? bounds.set(0, 0, 0, 0) : boundStroke(bounds, item, true);\n  }\n\n  var path$2 = {\n    type: 'path',\n    tag: 'path',\n    nested: false,\n    attr: attr$3,\n    bound: bound$3,\n    draw: drawAll(path$1),\n    pick: pickPath(path$1),\n    isect: intersectPath(path$1)\n  };\n\n  function attr$2(emit, item) {\n    emit('d', rectangle(null, item));\n  }\n\n  function bound$2(bounds, item) {\n    var x, y;\n    return boundStroke(bounds.set(x = item.x || 0, y = item.y || 0, x + item.width || 0, y + item.height || 0), item);\n  }\n\n  function draw$2(context, item) {\n    context.beginPath();\n    rectangle(context, item);\n  }\n\n  var rect = {\n    type: 'rect',\n    tag: 'path',\n    nested: false,\n    attr: attr$2,\n    bound: bound$2,\n    draw: drawAll(draw$2),\n    pick: pickPath(draw$2),\n    isect: intersectRect\n  };\n\n  function attr$1(emit, item) {\n    emit('transform', translateItem(item));\n    emit('x2', item.x2 != null ? item.x2 - (item.x || 0) : 0);\n    emit('y2', item.y2 != null ? item.y2 - (item.y || 0) : 0);\n  }\n\n  function bound$1(bounds, item) {\n    var x1, y1;\n    return boundStroke(bounds.set(x1 = item.x || 0, y1 = item.y || 0, item.x2 != null ? item.x2 : x1, item.y2 != null ? item.y2 : y1), item);\n  }\n\n  function path(context, item, opacity) {\n    var x1, y1, x2, y2;\n\n    if (item.stroke && stroke(context, item, opacity)) {\n      x1 = item.x || 0;\n      y1 = item.y || 0;\n      x2 = item.x2 != null ? item.x2 : x1;\n      y2 = item.y2 != null ? item.y2 : y1;\n      context.beginPath();\n      context.moveTo(x1, y1);\n      context.lineTo(x2, y2);\n      return true;\n    }\n\n    return false;\n  }\n\n  function draw$1(context, scene, bounds) {\n    visit(scene, item => {\n      if (bounds && !bounds.intersects(item.bounds)) return; // bounds check\n\n      var opacity = item.opacity == null ? 1 : item.opacity;\n\n      if (opacity && path(context, item, opacity)) {\n        blend(context, item);\n        context.stroke();\n      }\n    });\n  }\n\n  function hit$1(context, item, x, y) {\n    if (!context.isPointInStroke) return false;\n    return path(context, item, 1) && context.isPointInStroke(x, y);\n  }\n\n  var rule$1 = {\n    type: 'rule',\n    tag: 'line',\n    nested: false,\n    attr: attr$1,\n    bound: bound$1,\n    draw: draw$1,\n    pick: pick$1(hit$1),\n    isect: intersectRule\n  };\n  var shape = markItemPath('shape', shape$1);\n  var symbol = markItemPath('symbol', symbol$1, intersectPoint);\n  const widthCache = lruCache();\n  var textMetrics = {\n    height: fontSize,\n    measureWidth: measureWidth,\n    estimateWidth: estimateWidth,\n    width: estimateWidth,\n    canvas: useCanvas\n  };\n  useCanvas(true);\n\n  function useCanvas(use) {\n    textMetrics.width = use && context$2 ? measureWidth : estimateWidth;\n  } // make simple estimate if no canvas is available\n\n\n  function estimateWidth(item, text) {\n    return _estimateWidth(textValue(item, text), fontSize(item));\n  }\n\n  function _estimateWidth(text, currentFontHeight) {\n    return ~~(0.8 * text.length * currentFontHeight);\n  } // measure text width if canvas is available\n\n\n  function measureWidth(item, text) {\n    return fontSize(item) <= 0 || !(text = textValue(item, text)) ? 0 : _measureWidth(text, font(item));\n  }\n\n  function _measureWidth(text, currentFont) {\n    const key = `(${currentFont}) ${text}`;\n    let width = widthCache.get(key);\n\n    if (width === undefined) {\n      context$2.font = currentFont;\n      width = context$2.measureText(text).width;\n      widthCache.set(key, width);\n    }\n\n    return width;\n  }\n\n  function fontSize(item) {\n    return item.fontSize != null ? +item.fontSize || 0 : 11;\n  }\n\n  function lineHeight(item) {\n    return item.lineHeight != null ? item.lineHeight : fontSize(item) + 2;\n  }\n\n  function lineArray(_) {\n    return isArray(_) ? _.length > 1 ? _ : _[0] : _;\n  }\n\n  function textLines(item) {\n    return lineArray(item.lineBreak && item.text && !isArray(item.text) ? item.text.split(item.lineBreak) : item.text);\n  }\n\n  function multiLineOffset(item) {\n    const tl = textLines(item);\n    return (isArray(tl) ? tl.length - 1 : 0) * lineHeight(item);\n  }\n\n  function textValue(item, line) {\n    const text = line == null ? '' : (line + '').trim();\n    return item.limit > 0 && text.length ? truncate(item, text) : text;\n  }\n\n  function widthGetter(item) {\n    if (textMetrics.width === measureWidth) {\n      // we are using canvas\n      const currentFont = font(item);\n      return text => _measureWidth(text, currentFont);\n    } else {\n      // we are relying on estimates\n      const currentFontHeight = fontSize(item);\n      return text => _estimateWidth(text, currentFontHeight);\n    }\n  }\n\n  function truncate(item, text) {\n    var limit = +item.limit,\n        width = widthGetter(item);\n    if (width(text) < limit) return text;\n    var ellipsis = item.ellipsis || '\\u2026',\n        rtl = item.dir === 'rtl',\n        lo = 0,\n        hi = text.length,\n        mid;\n    limit -= width(ellipsis);\n\n    if (rtl) {\n      while (lo < hi) {\n        mid = lo + hi >>> 1;\n        if (width(text.slice(mid)) > limit) lo = mid + 1;else hi = mid;\n      }\n\n      return ellipsis + text.slice(lo);\n    } else {\n      while (lo < hi) {\n        mid = 1 + (lo + hi >>> 1);\n        if (width(text.slice(0, mid)) < limit) lo = mid;else hi = mid - 1;\n      }\n\n      return text.slice(0, lo) + ellipsis;\n    }\n  }\n\n  function fontFamily(item, quote) {\n    var font = item.font;\n    return (quote && font ? String(font).replace(/\"/g, '\\'') : font) || 'sans-serif';\n  }\n\n  function font(item, quote) {\n    return '' + (item.fontStyle ? item.fontStyle + ' ' : '') + (item.fontVariant ? item.fontVariant + ' ' : '') + (item.fontWeight ? item.fontWeight + ' ' : '') + fontSize(item) + 'px ' + fontFamily(item, quote);\n  }\n\n  function offset$2(item) {\n    // perform our own font baseline calculation\n    // why? not all browsers support SVG 1.1 'alignment-baseline' :(\n    // this also ensures consistent layout across renderers\n    var baseline = item.baseline,\n        h = fontSize(item);\n    return Math.round(baseline === 'top' ? 0.79 * h : baseline === 'middle' ? 0.30 * h : baseline === 'bottom' ? -0.21 * h : baseline === 'line-top' ? 0.29 * h + 0.5 * lineHeight(item) : baseline === 'line-bottom' ? 0.29 * h - 0.5 * lineHeight(item) : 0);\n  }\n\n  const textAlign = {\n    'left': 'start',\n    'center': 'middle',\n    'right': 'end'\n  };\n  const tempBounds$1 = new Bounds();\n\n  function anchorPoint(item) {\n    var x = item.x || 0,\n        y = item.y || 0,\n        r = item.radius || 0,\n        t;\n\n    if (r) {\n      t = (item.theta || 0) - HalfPi;\n      x += r * Math.cos(t);\n      y += r * Math.sin(t);\n    }\n\n    tempBounds$1.x1 = x;\n    tempBounds$1.y1 = y;\n    return tempBounds$1;\n  }\n\n  function attr(emit, item) {\n    var dx = item.dx || 0,\n        dy = (item.dy || 0) + offset$2(item),\n        p = anchorPoint(item),\n        x = p.x1,\n        y = p.y1,\n        a = item.angle || 0,\n        t;\n    emit('text-anchor', textAlign[item.align] || 'start');\n\n    if (a) {\n      t = translate$1(x, y) + ' ' + rotate(a);\n      if (dx || dy) t += ' ' + translate$1(dx, dy);\n    } else {\n      t = translate$1(x + dx, y + dy);\n    }\n\n    emit('transform', t);\n  }\n\n  function bound(bounds, item, mode) {\n    var h = textMetrics.height(item),\n        a = item.align,\n        p = anchorPoint(item),\n        x = p.x1,\n        y = p.y1,\n        dx = item.dx || 0,\n        dy = (item.dy || 0) + offset$2(item) - Math.round(0.8 * h),\n        // use 4/5 offset\n    tl = textLines(item),\n        w; // get dimensions\n\n    if (isArray(tl)) {\n      // multi-line text\n      h += lineHeight(item) * (tl.length - 1);\n      w = tl.reduce((w, t) => Math.max(w, textMetrics.width(item, t)), 0);\n    } else {\n      // single-line text\n      w = textMetrics.width(item, tl);\n    } // horizontal alignment\n\n\n    if (a === 'center') {\n      dx -= w / 2;\n    } else if (a === 'right') {\n      dx -= w;\n    } else ;\n\n    bounds.set(dx += x, dy += y, dx + w, dy + h);\n\n    if (item.angle && !mode) {\n      bounds.rotate(item.angle * DegToRad, x, y);\n    } else if (mode === 2) {\n      return bounds.rotatedPoints(item.angle * DegToRad, x, y);\n    }\n\n    return bounds;\n  }\n\n  function draw$5(context, scene, bounds) {\n    visit(scene, item => {\n      var opacity = item.opacity == null ? 1 : item.opacity,\n          p,\n          x,\n          y,\n          i,\n          lh,\n          tl,\n          str;\n      if (bounds && !bounds.intersects(item.bounds) || // bounds check\n      opacity === 0 || item.fontSize <= 0 || item.text == null || item.text.length === 0) return;\n      context.font = font(item);\n      context.textAlign = item.align || 'left';\n      p = anchorPoint(item);\n      x = p.x1, y = p.y1;\n\n      if (item.angle) {\n        context.save();\n        context.translate(x, y);\n        context.rotate(item.angle * DegToRad);\n        x = y = 0; // reset x, y\n      }\n\n      x += item.dx || 0;\n      y += (item.dy || 0) + offset$2(item);\n      tl = textLines(item);\n      blend(context, item);\n\n      if (isArray(tl)) {\n        lh = lineHeight(item);\n\n        for (i = 0; i < tl.length; ++i) {\n          str = textValue(item, tl[i]);\n\n          if (item.fill && fill(context, item, opacity)) {\n            context.fillText(str, x, y);\n          }\n\n          if (item.stroke && stroke(context, item, opacity)) {\n            context.strokeText(str, x, y);\n          }\n\n          y += lh;\n        }\n      } else {\n        str = textValue(item, tl);\n\n        if (item.fill && fill(context, item, opacity)) {\n          context.fillText(str, x, y);\n        }\n\n        if (item.stroke && stroke(context, item, opacity)) {\n          context.strokeText(str, x, y);\n        }\n      }\n\n      if (item.angle) context.restore();\n    });\n  }\n\n  function hit(context, item, x, y, gx, gy) {\n    if (item.fontSize <= 0) return false;\n    if (!item.angle) return true; // bounds sufficient if no rotation\n    // project point into space of unrotated bounds\n\n    var p = anchorPoint(item),\n        ax = p.x1,\n        ay = p.y1,\n        b = bound(tempBounds$1, item, 1),\n        a = -item.angle * DegToRad,\n        cos = Math.cos(a),\n        sin = Math.sin(a),\n        px = cos * gx - sin * gy + (ax - cos * ax + sin * ay),\n        py = sin * gx + cos * gy + (ay - sin * ax - cos * ay);\n    return b.contains(px, py);\n  }\n\n  function intersectText(item, box) {\n    const p = bound(tempBounds$1, item, 2);\n    return intersectBoxLine(box, p[0], p[1], p[2], p[3]) || intersectBoxLine(box, p[0], p[1], p[4], p[5]) || intersectBoxLine(box, p[4], p[5], p[6], p[7]) || intersectBoxLine(box, p[2], p[3], p[6], p[7]);\n  }\n\n  var text = {\n    type: 'text',\n    tag: 'text',\n    nested: false,\n    attr: attr,\n    bound: bound,\n    draw: draw$5,\n    pick: pick$1(hit),\n    isect: intersectText\n  };\n  var trail = markMultiItemPath('trail', trail$1, pickTrail);\n  var Marks = {\n    arc: arc$2,\n    area: area$2,\n    group: group,\n    image: image,\n    line: line$2,\n    path: path$2,\n    rect: rect,\n    rule: rule$1,\n    shape: shape,\n    symbol: symbol,\n    text: text,\n    trail: trail\n  };\n\n  function boundItem$1(item, func, opt) {\n    var type = Marks[item.mark.marktype],\n        bound = func || type.bound;\n    if (type.nested) item = item.mark;\n    return bound(item.bounds || (item.bounds = new Bounds()), item, opt);\n  }\n\n  var DUMMY = {\n    mark: null\n  };\n\n  function boundMark(mark, bounds, opt) {\n    var type = Marks[mark.marktype],\n        bound = type.bound,\n        items = mark.items,\n        hasItems = items && items.length,\n        i,\n        n,\n        item,\n        b;\n\n    if (type.nested) {\n      if (hasItems) {\n        item = items[0];\n      } else {\n        // no items, fake it\n        DUMMY.mark = mark;\n        item = DUMMY;\n      }\n\n      b = boundItem$1(item, bound, opt);\n      bounds = bounds && bounds.union(b) || b;\n      return bounds;\n    }\n\n    bounds = bounds || mark.bounds && mark.bounds.clear() || new Bounds();\n\n    if (hasItems) {\n      for (i = 0, n = items.length; i < n; ++i) {\n        bounds.union(boundItem$1(items[i], bound, opt));\n      }\n    }\n\n    return mark.bounds = bounds;\n  }\n\n  const keys$1 = ['marktype', 'name', 'role', 'interactive', 'clip', 'items', 'zindex', 'x', 'y', 'width', 'height', 'align', 'baseline', // layout\n  'fill', 'fillOpacity', 'opacity', 'blend', // fill\n  'stroke', 'strokeOpacity', 'strokeWidth', 'strokeCap', // stroke\n  'strokeDash', 'strokeDashOffset', // stroke dash\n  'strokeForeground', 'strokeOffset', // group\n  'startAngle', 'endAngle', 'innerRadius', 'outerRadius', // arc\n  'cornerRadius', 'padAngle', // arc, rect\n  'cornerRadiusTopLeft', 'cornerRadiusTopRight', // rect, group\n  'cornerRadiusBottomLeft', 'cornerRadiusBottomRight', 'interpolate', 'tension', 'orient', 'defined', // area, line\n  'url', 'aspect', 'smooth', // image\n  'path', 'scaleX', 'scaleY', // path\n  'x2', 'y2', // rule\n  'size', 'shape', // symbol\n  'text', 'angle', 'theta', 'radius', 'dir', 'dx', 'dy', // text\n  'ellipsis', 'limit', 'lineBreak', 'lineHeight', 'font', 'fontSize', 'fontWeight', 'fontStyle', 'fontVariant', // font\n  'description', 'aria', 'ariaRole', 'ariaRoleDescription' // aria\n  ];\n\n  function sceneToJSON(scene, indent) {\n    return JSON.stringify(scene, keys$1, indent);\n  }\n\n  function sceneFromJSON(json) {\n    const scene = typeof json === 'string' ? JSON.parse(json) : json;\n    return initialize$1(scene);\n  }\n\n  function initialize$1(scene) {\n    var type = scene.marktype,\n        items = scene.items,\n        parent,\n        i,\n        n;\n\n    if (items) {\n      for (i = 0, n = items.length; i < n; ++i) {\n        parent = type ? 'mark' : 'group';\n        items[i][parent] = scene;\n        if (items[i].zindex) items[i][parent].zdirty = true;\n        if ('group' === (type || parent)) initialize$1(items[i]);\n      }\n    }\n\n    if (type) boundMark(scene);\n    return scene;\n  }\n\n  function Scenegraph(scene) {\n    if (arguments.length) {\n      this.root = sceneFromJSON(scene);\n    } else {\n      this.root = createMark({\n        marktype: 'group',\n        name: 'root',\n        role: 'frame'\n      });\n      this.root.items = [new GroupItem(this.root)];\n    }\n  }\n\n  Scenegraph.prototype = {\n    toJSON(indent) {\n      return sceneToJSON(this.root, indent || 0);\n    },\n\n    mark(markdef, group, index) {\n      group = group || this.root.items[0];\n      const mark = createMark(markdef, group);\n      group.items[index] = mark;\n      if (mark.zindex) mark.group.zdirty = true;\n      return mark;\n    }\n\n  };\n\n  function createMark(def, group) {\n    const mark = {\n      bounds: new Bounds(),\n      clip: !!def.clip,\n      group: group,\n      interactive: def.interactive === false ? false : true,\n      items: [],\n      marktype: def.marktype,\n      name: def.name || undefined,\n      role: def.role || undefined,\n      zindex: def.zindex || 0\n    }; // add accessibility properties if defined\n\n    if (def.aria != null) {\n      mark.aria = def.aria;\n    }\n\n    if (def.description) {\n      mark.description = def.description;\n    }\n\n    return mark;\n  } // create a new DOM element\n\n\n  function domCreate(doc, tag, ns) {\n    if (!doc && typeof document !== 'undefined' && document.createElement) {\n      doc = document;\n    }\n\n    return doc ? ns ? doc.createElementNS(ns, tag) : doc.createElement(tag) : null;\n  } // find first child element with matching tag\n\n\n  function domFind(el, tag) {\n    tag = tag.toLowerCase();\n    var nodes = el.childNodes,\n        i = 0,\n        n = nodes.length;\n\n    for (; i < n; ++i) if (nodes[i].tagName.toLowerCase() === tag) {\n      return nodes[i];\n    }\n  } // retrieve child element at given index\n  // create & insert if doesn't exist or if tags do not match\n\n\n  function domChild(el, index, tag, ns) {\n    var a = el.childNodes[index],\n        b;\n\n    if (!a || a.tagName.toLowerCase() !== tag.toLowerCase()) {\n      b = a || null;\n      a = domCreate(el.ownerDocument, tag, ns);\n      el.insertBefore(a, b);\n    }\n\n    return a;\n  } // remove all child elements at or above the given index\n\n\n  function domClear(el, index) {\n    var nodes = el.childNodes,\n        curr = nodes.length;\n\n    while (curr > index) el.removeChild(nodes[--curr]);\n\n    return el;\n  } // generate css class name for mark\n\n\n  function cssClass(mark) {\n    return 'mark-' + mark.marktype + (mark.role ? ' role-' + mark.role : '') + (mark.name ? ' ' + mark.name : '');\n  }\n\n  function point(event, el) {\n    const rect = el.getBoundingClientRect();\n    return [event.clientX - rect.left - (el.clientLeft || 0), event.clientY - rect.top - (el.clientTop || 0)];\n  }\n\n  function resolveItem(item, event, el, origin) {\n    var mark = item && item.mark,\n        mdef,\n        p;\n\n    if (mark && (mdef = Marks[mark.marktype]).tip) {\n      p = point(event, el);\n      p[0] -= origin[0];\n      p[1] -= origin[1];\n\n      while (item = item.mark.group) {\n        p[0] -= item.x || 0;\n        p[1] -= item.y || 0;\n      }\n\n      item = mdef.tip(mark.items, p);\n    }\n\n    return item;\n  }\n  /**\n   * Create a new Handler instance.\n   * @param {object} [customLoader] - Optional loader instance for\n   *   href URL sanitization. If not specified, a standard loader\n   *   instance will be generated.\n   * @param {function} [customTooltip] - Optional tooltip handler\n   *   function for custom tooltip display.\n   * @constructor\n   */\n\n\n  function Handler(customLoader, customTooltip) {\n    this._active = null;\n    this._handlers = {};\n    this._loader = customLoader || loader();\n    this._tooltip = customTooltip || defaultTooltip$1;\n  } // The default tooltip display handler.\n  // Sets the HTML title attribute on the visualization container.\n\n\n  function defaultTooltip$1(handler, event, item, value) {\n    handler.element().setAttribute('title', value || '');\n  }\n\n  Handler.prototype = {\n    /**\n     * Initialize a new Handler instance.\n     * @param {DOMElement} el - The containing DOM element for the display.\n     * @param {Array<number>} origin - The origin of the display, in pixels.\n     *   The coordinate system will be translated to this point.\n     * @param {object} [obj] - Optional context object that should serve as\n     *   the \"this\" context for event callbacks.\n     * @return {Handler} - This handler instance.\n     */\n    initialize(el, origin, obj) {\n      this._el = el;\n      this._obj = obj || null;\n      return this.origin(origin);\n    },\n\n    /**\n     * Returns the parent container element for a visualization.\n     * @return {DOMElement} - The containing DOM element.\n     */\n    element() {\n      return this._el;\n    },\n\n    /**\n     * Returns the scene element (e.g., canvas or SVG) of the visualization\n     * Subclasses must override if the first child is not the scene element.\n     * @return {DOMElement} - The scene (e.g., canvas or SVG) element.\n     */\n    canvas() {\n      return this._el && this._el.firstChild;\n    },\n\n    /**\n     * Get / set the origin coordinates of the visualization.\n     */\n    origin(origin) {\n      if (arguments.length) {\n        this._origin = origin || [0, 0];\n        return this;\n      } else {\n        return this._origin.slice();\n      }\n    },\n\n    /**\n     * Get / set the scenegraph root.\n     */\n    scene(scene) {\n      if (!arguments.length) return this._scene;\n      this._scene = scene;\n      return this;\n    },\n\n    /**\n     * Add an event handler. Subclasses should override this method.\n     */\n    on()\n    /*type, handler*/\n    {},\n\n    /**\n     * Remove an event handler. Subclasses should override this method.\n     */\n    off()\n    /*type, handler*/\n    {},\n\n    /**\n     * Utility method for finding the array index of an event handler.\n     * @param {Array} h - An array of registered event handlers.\n     * @param {string} type - The event type.\n     * @param {function} handler - The event handler instance to find.\n     * @return {number} - The handler's array index or -1 if not registered.\n     */\n    _handlerIndex(h, type, handler) {\n      for (let i = h ? h.length : 0; --i >= 0;) {\n        if (h[i].type === type && (!handler || h[i].handler === handler)) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    /**\n     * Returns an array with registered event handlers.\n     * @param {string} [type] - The event type to query. Any annotations\n     *   are ignored; for example, for the argument \"click.foo\", \".foo\" will\n     *   be ignored and the method returns all \"click\" handlers. If type is\n     *   null or unspecified, this method returns handlers for all types.\n     * @return {Array} - A new array containing all registered event handlers.\n     */\n    handlers(type) {\n      const h = this._handlers,\n            a = [];\n\n      if (type) {\n        a.push(...h[this.eventName(type)]);\n      } else {\n        for (const k in h) {\n          a.push(...h[k]);\n        }\n      }\n\n      return a;\n    },\n\n    /**\n     * Parses an event name string to return the specific event type.\n     * For example, given \"click.foo\" returns \"click\"\n     * @param {string} name - The input event type string.\n     * @return {string} - A string with the event type only.\n     */\n    eventName(name) {\n      const i = name.indexOf('.');\n      return i < 0 ? name : name.slice(0, i);\n    },\n\n    /**\n     * Handle hyperlink navigation in response to an item.href value.\n     * @param {Event} event - The event triggering hyperlink navigation.\n     * @param {Item} item - The scenegraph item.\n     * @param {string} href - The URL to navigate to.\n     */\n    handleHref(event, item, href) {\n      this._loader.sanitize(href, {\n        context: 'href'\n      }).then(opt => {\n        const e = new MouseEvent(event.type, event),\n              a = domCreate(null, 'a');\n\n        for (const name in opt) a.setAttribute(name, opt[name]);\n\n        a.dispatchEvent(e);\n      }).catch(() => {\n        /* do nothing */\n      });\n    },\n\n    /**\n     * Handle tooltip display in response to an item.tooltip value.\n     * @param {Event} event - The event triggering tooltip display.\n     * @param {Item} item - The scenegraph item.\n     * @param {boolean} show - A boolean flag indicating whether\n     *   to show or hide a tooltip for the given item.\n     */\n    handleTooltip(event, item, show) {\n      if (item && item.tooltip != null) {\n        item = resolveItem(item, event, this.canvas(), this._origin);\n        const value = show && item && item.tooltip || null;\n\n        this._tooltip.call(this._obj, this, event, item, value);\n      }\n    },\n\n    /**\n     * Returns the size of a scenegraph item and its position relative\n     * to the viewport.\n     * @param {Item} item - The scenegraph item.\n     * @return {object} - A bounding box object (compatible with the\n     *   DOMRect type) consisting of x, y, width, heigh, top, left,\n     *   right, and bottom properties.\n     */\n    getItemBoundingClientRect(item) {\n      const el = this.canvas();\n      if (!el) return;\n      const rect = el.getBoundingClientRect(),\n            origin = this._origin,\n            bounds = item.bounds,\n            width = bounds.width(),\n            height = bounds.height();\n      let x = bounds.x1 + origin[0] + rect.left,\n          y = bounds.y1 + origin[1] + rect.top; // translate coordinate for each parent group\n\n      while (item.mark && (item = item.mark.group)) {\n        x += item.x || 0;\n        y += item.y || 0;\n      } // return DOMRect-compatible bounding box\n\n\n      return {\n        x,\n        y,\n        width,\n        height,\n        left: x,\n        top: y,\n        right: x + width,\n        bottom: y + height\n      };\n    }\n\n  };\n  /**\n   * Create a new Renderer instance.\n   * @param {object} [loader] - Optional loader instance for\n   *   image and href URL sanitization. If not specified, a\n   *   standard loader instance will be generated.\n   * @constructor\n   */\n\n  function Renderer(loader) {\n    this._el = null;\n    this._bgcolor = null;\n    this._loader = new ResourceLoader(loader);\n  }\n\n  Renderer.prototype = {\n    /**\n     * Initialize a new Renderer instance.\n     * @param {DOMElement} el - The containing DOM element for the display.\n     * @param {number} width - The coordinate width of the display, in pixels.\n     * @param {number} height - The coordinate height of the display, in pixels.\n     * @param {Array<number>} origin - The origin of the display, in pixels.\n     *   The coordinate system will be translated to this point.\n     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply\n     *   the width and height to determine the final pixel size.\n     * @return {Renderer} - This renderer instance.\n     */\n    initialize(el, width, height, origin, scaleFactor) {\n      this._el = el;\n      return this.resize(width, height, origin, scaleFactor);\n    },\n\n    /**\n     * Returns the parent container element for a visualization.\n     * @return {DOMElement} - The containing DOM element.\n     */\n    element() {\n      return this._el;\n    },\n\n    /**\n     * Returns the scene element (e.g., canvas or SVG) of the visualization\n     * Subclasses must override if the first child is not the scene element.\n     * @return {DOMElement} - The scene (e.g., canvas or SVG) element.\n     */\n    canvas() {\n      return this._el && this._el.firstChild;\n    },\n\n    /**\n     * Get / set the background color.\n     */\n    background(bgcolor) {\n      if (arguments.length === 0) return this._bgcolor;\n      this._bgcolor = bgcolor;\n      return this;\n    },\n\n    /**\n     * Resize the display.\n     * @param {number} width - The new coordinate width of the display, in pixels.\n     * @param {number} height - The new coordinate height of the display, in pixels.\n     * @param {Array<number>} origin - The new origin of the display, in pixels.\n     *   The coordinate system will be translated to this point.\n     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply\n     *   the width and height to determine the final pixel size.\n     * @return {Renderer} - This renderer instance;\n     */\n    resize(width, height, origin, scaleFactor) {\n      this._width = width;\n      this._height = height;\n      this._origin = origin || [0, 0];\n      this._scale = scaleFactor || 1;\n      return this;\n    },\n\n    /**\n     * Report a dirty item whose bounds should be redrawn.\n     * This base class method does nothing. Subclasses that perform\n     * incremental should implement this method.\n     * @param {Item} item - The dirty item whose bounds should be redrawn.\n     */\n    dirty()\n    /*item*/\n    {},\n\n    /**\n     * Render an input scenegraph, potentially with a set of dirty items.\n     * This method will perform an immediate rendering with available resources.\n     * The renderer may also need to perform image loading to perform a complete\n     * render. This process can lead to asynchronous re-rendering of the scene\n     * after this method returns. To receive notification when rendering is\n     * complete, use the renderAsync method instead.\n     * @param {object} scene - The root mark of a scenegraph to render.\n     * @return {Renderer} - This renderer instance.\n     */\n    render(scene) {\n      const r = this; // bind arguments into a render call, and cache it\n      // this function may be subsequently called for async redraw\n\n      r._call = function () {\n        r._render(scene);\n      }; // invoke the renderer\n\n\n      r._call(); // clear the cached call for garbage collection\n      // async redraws will stash their own copy\n\n\n      r._call = null;\n      return r;\n    },\n\n    /**\n     * Internal rendering method. Renderer subclasses should override this\n     * method to actually perform rendering.\n     * @param {object} scene - The root mark of a scenegraph to render.\n     */\n    _render()\n    /*scene*/\n    {// subclasses to override\n    },\n\n    /**\n     * Asynchronous rendering method. Similar to render, but returns a Promise\n     * that resolves when all rendering is completed. Sometimes a renderer must\n     * perform image loading to get a complete rendering. The returned\n     * Promise will not resolve until this process completes.\n     * @param {object} scene - The root mark of a scenegraph to render.\n     * @return {Promise} - A Promise that resolves when rendering is complete.\n     */\n    renderAsync(scene) {\n      const r = this.render(scene);\n      return this._ready ? this._ready.then(() => r) : Promise.resolve(r);\n    },\n\n    /**\n     * Internal method for asynchronous resource loading.\n     * Proxies method calls to the ImageLoader, and tracks loading\n     * progress to invoke a re-render once complete.\n     * @param {string} method - The method name to invoke on the ImageLoader.\n     * @param {string} uri - The URI for the requested resource.\n     * @return {Promise} - A Promise that resolves to the requested resource.\n     */\n    _load(method, uri) {\n      var r = this,\n          p = r._loader[method](uri);\n\n      if (!r._ready) {\n        // re-render the scene when loading completes\n        const call = r._call;\n        r._ready = r._loader.ready().then(redraw => {\n          if (redraw) call();\n          r._ready = null;\n        });\n      }\n\n      return p;\n    },\n\n    /**\n     * Sanitize a URL to include as a hyperlink in the rendered scene.\n     * This method proxies a call to ImageLoader.sanitizeURL, but also tracks\n     * image loading progress and invokes a re-render once complete.\n     * @param {string} uri - The URI string to sanitize.\n     * @return {Promise} - A Promise that resolves to the sanitized URL.\n     */\n    sanitizeURL(uri) {\n      return this._load('sanitizeURL', uri);\n    },\n\n    /**\n     * Requests an image to include in the rendered scene.\n     * This method proxies a call to ImageLoader.loadImage, but also tracks\n     * image loading progress and invokes a re-render once complete.\n     * @param {string} uri - The URI string of the image.\n     * @return {Promise} - A Promise that resolves to the loaded Image.\n     */\n    loadImage(uri) {\n      return this._load('loadImage', uri);\n    }\n\n  };\n  const KeyDownEvent = 'keydown';\n  const KeyPressEvent = 'keypress';\n  const KeyUpEvent = 'keyup';\n  const DragEnterEvent = 'dragenter';\n  const DragLeaveEvent = 'dragleave';\n  const DragOverEvent = 'dragover';\n  const MouseDownEvent = 'mousedown';\n  const MouseUpEvent = 'mouseup';\n  const MouseMoveEvent = 'mousemove';\n  const MouseOutEvent = 'mouseout';\n  const MouseOverEvent = 'mouseover';\n  const ClickEvent = 'click';\n  const DoubleClickEvent = 'dblclick';\n  const WheelEvent = 'wheel';\n  const MouseWheelEvent = 'mousewheel';\n  const TouchStartEvent = 'touchstart';\n  const TouchMoveEvent = 'touchmove';\n  const TouchEndEvent = 'touchend';\n  const Events = [KeyDownEvent, KeyPressEvent, KeyUpEvent, DragEnterEvent, DragLeaveEvent, DragOverEvent, MouseDownEvent, MouseUpEvent, MouseMoveEvent, MouseOutEvent, MouseOverEvent, ClickEvent, DoubleClickEvent, WheelEvent, MouseWheelEvent, TouchStartEvent, TouchMoveEvent, TouchEndEvent];\n  const TooltipShowEvent = MouseMoveEvent;\n  const TooltipHideEvent = MouseOutEvent;\n  const HrefEvent = ClickEvent;\n\n  function CanvasHandler(loader, tooltip) {\n    Handler.call(this, loader, tooltip);\n    this._down = null;\n    this._touch = null;\n    this._first = true;\n    this._events = {};\n  }\n\n  const eventBundle = type => type === TouchStartEvent || type === TouchMoveEvent || type === TouchEndEvent ? [TouchStartEvent, TouchMoveEvent, TouchEndEvent] : [type]; // lazily add listeners to the canvas as needed\n\n\n  function eventListenerCheck(handler, type) {\n    eventBundle(type).forEach(_ => addEventListener(handler, _));\n  }\n\n  function addEventListener(handler, type) {\n    const canvas = handler.canvas();\n\n    if (canvas && !handler._events[type]) {\n      handler._events[type] = 1;\n      canvas.addEventListener(type, handler[type] ? evt => handler[type](evt) : evt => handler.fire(type, evt));\n    }\n  }\n\n  function move(moveEvent, overEvent, outEvent) {\n    return function (evt) {\n      const a = this._active,\n            p = this.pickEvent(evt);\n\n      if (p === a) {\n        // active item and picked item are the same\n        this.fire(moveEvent, evt); // fire move\n      } else {\n        // active item and picked item are different\n        if (!a || !a.exit) {\n          // fire out for prior active item\n          // suppress if active item was removed from scene\n          this.fire(outEvent, evt);\n        }\n\n        this._active = p; // set new active item\n\n        this.fire(overEvent, evt); // fire over for new active item\n\n        this.fire(moveEvent, evt); // fire move for new active item\n      }\n    };\n  }\n\n  function inactive(type) {\n    return function (evt) {\n      this.fire(type, evt);\n      this._active = null;\n    };\n  }\n\n  inherits(CanvasHandler, Handler, {\n    initialize(el, origin, obj) {\n      this._canvas = el && domFind(el, 'canvas'); // add minimal events required for proper state management\n\n      [ClickEvent, MouseDownEvent, MouseMoveEvent, MouseOutEvent, DragLeaveEvent].forEach(type => eventListenerCheck(this, type));\n      return Handler.prototype.initialize.call(this, el, origin, obj);\n    },\n\n    // return the backing canvas instance\n    canvas() {\n      return this._canvas;\n    },\n\n    // retrieve the current canvas context\n    context() {\n      return this._canvas.getContext('2d');\n    },\n\n    // supported events\n    events: Events,\n\n    // to keep old versions of firefox happy\n    DOMMouseScroll(evt) {\n      this.fire(MouseWheelEvent, evt);\n    },\n\n    mousemove: move(MouseMoveEvent, MouseOverEvent, MouseOutEvent),\n    dragover: move(DragOverEvent, DragEnterEvent, DragLeaveEvent),\n    mouseout: inactive(MouseOutEvent),\n    dragleave: inactive(DragLeaveEvent),\n\n    mousedown(evt) {\n      this._down = this._active;\n      this.fire(MouseDownEvent, evt);\n    },\n\n    click(evt) {\n      if (this._down === this._active) {\n        this.fire(ClickEvent, evt);\n        this._down = null;\n      }\n    },\n\n    touchstart(evt) {\n      this._touch = this.pickEvent(evt.changedTouches[0]);\n\n      if (this._first) {\n        this._active = this._touch;\n        this._first = false;\n      }\n\n      this.fire(TouchStartEvent, evt, true);\n    },\n\n    touchmove(evt) {\n      this.fire(TouchMoveEvent, evt, true);\n    },\n\n    touchend(evt) {\n      this.fire(TouchEndEvent, evt, true);\n      this._touch = null;\n    },\n\n    // fire an event\n    fire(type, evt, touch) {\n      const a = touch ? this._touch : this._active,\n            h = this._handlers[type]; // set event type relative to scenegraph items\n\n      evt.vegaType = type; // handle hyperlinks and tooltips first\n\n      if (type === HrefEvent && a && a.href) {\n        this.handleHref(evt, a, a.href);\n      } else if (type === TooltipShowEvent || type === TooltipHideEvent) {\n        this.handleTooltip(evt, a, type !== TooltipHideEvent);\n      } // invoke all registered handlers\n\n\n      if (h) {\n        for (let i = 0, len = h.length; i < len; ++i) {\n          h[i].handler.call(this._obj, evt, a);\n        }\n      }\n    },\n\n    // add an event handler\n    on(type, handler) {\n      const name = this.eventName(type),\n            h = this._handlers,\n            i = this._handlerIndex(h[name], type, handler);\n\n      if (i < 0) {\n        eventListenerCheck(this, type);\n        (h[name] || (h[name] = [])).push({\n          type: type,\n          handler: handler\n        });\n      }\n\n      return this;\n    },\n\n    // remove an event handler\n    off(type, handler) {\n      const name = this.eventName(type),\n            h = this._handlers[name],\n            i = this._handlerIndex(h, type, handler);\n\n      if (i >= 0) {\n        h.splice(i, 1);\n      }\n\n      return this;\n    },\n\n    pickEvent(evt) {\n      const p = point(evt, this._canvas),\n            o = this._origin;\n      return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);\n    },\n\n    // find the scenegraph item at the current mouse position\n    // x, y -- the absolute x, y mouse coordinates on the canvas element\n    // gx, gy -- the relative coordinates within the current group\n    pick(scene, x, y, gx, gy) {\n      const g = this.context(),\n            mark = Marks[scene.marktype];\n      return mark.pick.call(this, g, scene, x, y, gx, gy);\n    }\n\n  });\n\n  function devicePixelRatio() {\n    return typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1;\n  }\n\n  var pixelRatio = devicePixelRatio();\n\n  function resize(canvas, width, height, origin, scaleFactor, opt) {\n    const inDOM = typeof HTMLElement !== 'undefined' && canvas instanceof HTMLElement && canvas.parentNode != null,\n          context = canvas.getContext('2d'),\n          ratio = inDOM ? pixelRatio : scaleFactor;\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n\n    for (const key in opt) {\n      context[key] = opt[key];\n    }\n\n    if (inDOM && ratio !== 1) {\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n    }\n\n    context.pixelRatio = ratio;\n    context.setTransform(ratio, 0, 0, ratio, ratio * origin[0], ratio * origin[1]);\n    return canvas;\n  }\n\n  function CanvasRenderer(loader) {\n    Renderer.call(this, loader);\n    this._options = {};\n    this._redraw = false;\n    this._dirty = new Bounds();\n    this._tempb = new Bounds();\n  }\n\n  const base$1 = Renderer.prototype;\n\n  const viewBounds = (origin, width, height) => new Bounds().set(0, 0, width, height).translate(-origin[0], -origin[1]);\n\n  function clipToBounds(g, b, origin) {\n    // expand bounds by 1 pixel, then round to pixel boundaries\n    b.expand(1).round(); // align to base pixel grid in case of non-integer scaling (#2425)\n\n    if (g.pixelRatio % 1) {\n      b.scale(g.pixelRatio).round().scale(1 / g.pixelRatio);\n    } // to avoid artifacts translate if origin has fractional pixels\n\n\n    b.translate(-(origin[0] % 1), -(origin[1] % 1)); // set clip path\n\n    g.beginPath();\n    g.rect(b.x1, b.y1, b.width(), b.height());\n    g.clip();\n    return b;\n  }\n\n  inherits(CanvasRenderer, Renderer, {\n    initialize(el, width, height, origin, scaleFactor, options) {\n      this._options = options || {};\n      this._canvas = this._options.externalContext ? null : domCanvas(1, 1, this._options.type); // instantiate a small canvas\n\n      if (el && this._canvas) {\n        domClear(el, 0).appendChild(this._canvas);\n\n        this._canvas.setAttribute('class', 'marks');\n      } // this method will invoke resize to size the canvas appropriately\n\n\n      return base$1.initialize.call(this, el, width, height, origin, scaleFactor);\n    },\n\n    resize(width, height, origin, scaleFactor) {\n      base$1.resize.call(this, width, height, origin, scaleFactor);\n\n      if (this._canvas) {\n        // configure canvas size and transform\n        resize(this._canvas, this._width, this._height, this._origin, this._scale, this._options.context);\n      } else {\n        // external context needs to be scaled and positioned to origin\n        const ctx = this._options.externalContext;\n        if (!ctx) error('CanvasRenderer is missing a valid canvas or context');\n        ctx.scale(this._scale, this._scale);\n        ctx.translate(this._origin[0], this._origin[1]);\n      }\n\n      this._redraw = true;\n      return this;\n    },\n\n    canvas() {\n      return this._canvas;\n    },\n\n    context() {\n      return this._options.externalContext || (this._canvas ? this._canvas.getContext('2d') : null);\n    },\n\n    dirty(item) {\n      const b = this._tempb.clear().union(item.bounds);\n\n      let g = item.mark.group;\n\n      while (g) {\n        b.translate(g.x || 0, g.y || 0);\n        g = g.mark.group;\n      }\n\n      this._dirty.union(b);\n    },\n\n    _render(scene) {\n      const g = this.context(),\n            o = this._origin,\n            w = this._width,\n            h = this._height,\n            db = this._dirty,\n            vb = viewBounds(o, w, h); // setup\n\n      g.save();\n      const b = this._redraw || db.empty() ? (this._redraw = false, vb.expand(1)) : clipToBounds(g, vb.intersect(db), o);\n      this.clear(-o[0], -o[1], w, h); // render\n\n      this.draw(g, scene, b); // takedown\n\n      g.restore();\n      db.clear();\n      return this;\n    },\n\n    draw(ctx, scene, bounds) {\n      const mark = Marks[scene.marktype];\n      if (scene.clip) clip$2(ctx, scene);\n      mark.draw.call(this, ctx, scene, bounds);\n      if (scene.clip) ctx.restore();\n    },\n\n    clear(x, y, w, h) {\n      const opt = this._options,\n            g = this.context();\n\n      if (opt.type !== 'pdf' && !opt.externalContext) {\n        // calling clear rect voids vector output in pdf mode\n        // and could remove external context content (#2615)\n        g.clearRect(x, y, w, h);\n      }\n\n      if (this._bgcolor != null) {\n        g.fillStyle = this._bgcolor;\n        g.fillRect(x, y, w, h);\n      }\n    }\n\n  });\n\n  function SVGHandler(loader, tooltip) {\n    Handler.call(this, loader, tooltip);\n    const h = this;\n    h._hrefHandler = listener(h, (evt, item) => {\n      if (item && item.href) h.handleHref(evt, item, item.href);\n    });\n    h._tooltipHandler = listener(h, (evt, item) => {\n      h.handleTooltip(evt, item, evt.type !== TooltipHideEvent);\n    });\n  } // wrap an event listener for the SVG DOM\n\n\n  const listener = (context, handler) => evt => {\n    let item = evt.target.__data__;\n    item = Array.isArray(item) ? item[0] : item;\n    evt.vegaType = evt.type;\n    handler.call(context._obj, evt, item);\n  };\n\n  inherits(SVGHandler, Handler, {\n    initialize(el, origin, obj) {\n      let svg = this._svg;\n\n      if (svg) {\n        svg.removeEventListener(HrefEvent, this._hrefHandler);\n        svg.removeEventListener(TooltipShowEvent, this._tooltipHandler);\n        svg.removeEventListener(TooltipHideEvent, this._tooltipHandler);\n      }\n\n      this._svg = svg = el && domFind(el, 'svg');\n\n      if (svg) {\n        svg.addEventListener(HrefEvent, this._hrefHandler);\n        svg.addEventListener(TooltipShowEvent, this._tooltipHandler);\n        svg.addEventListener(TooltipHideEvent, this._tooltipHandler);\n      }\n\n      return Handler.prototype.initialize.call(this, el, origin, obj);\n    },\n\n    canvas() {\n      return this._svg;\n    },\n\n    // add an event handler\n    on(type, handler) {\n      const name = this.eventName(type),\n            h = this._handlers,\n            i = this._handlerIndex(h[name], type, handler);\n\n      if (i < 0) {\n        const x = {\n          type,\n          handler,\n          listener: listener(this, handler)\n        };\n        (h[name] || (h[name] = [])).push(x);\n\n        if (this._svg) {\n          this._svg.addEventListener(name, x.listener);\n        }\n      }\n\n      return this;\n    },\n\n    // remove an event handler\n    off(type, handler) {\n      const name = this.eventName(type),\n            h = this._handlers[name],\n            i = this._handlerIndex(h, type, handler);\n\n      if (i >= 0) {\n        if (this._svg) {\n          this._svg.removeEventListener(name, h[i].listener);\n        }\n\n        h.splice(i, 1);\n      }\n\n      return this;\n    }\n\n  });\n  const ARIA_HIDDEN = 'aria-hidden';\n  const ARIA_LABEL = 'aria-label';\n  const ARIA_ROLE = 'role';\n  const ARIA_ROLEDESCRIPTION = 'aria-roledescription';\n  const GRAPHICS_OBJECT = 'graphics-object';\n  const GRAPHICS_SYMBOL = 'graphics-symbol';\n\n  const bundle = (role, roledesc, label) => ({\n    [ARIA_ROLE]: role,\n    [ARIA_ROLEDESCRIPTION]: roledesc,\n    [ARIA_LABEL]: label || undefined\n  }); // these roles are covered by related roles\n  // we can ignore them, no need to generate attributes\n\n\n  const AriaIgnore = toSet(['axis-domain', 'axis-grid', 'axis-label', 'axis-tick', 'axis-title', 'legend-band', 'legend-entry', 'legend-gradient', 'legend-label', 'legend-title', 'legend-symbol', 'title']); // aria attribute generators for guide roles\n\n  const AriaGuides = {\n    'axis': {\n      desc: 'axis',\n      caption: axisCaption\n    },\n    'legend': {\n      desc: 'legend',\n      caption: legendCaption\n    },\n    'title-text': {\n      desc: 'title',\n      caption: item => `Title text '${titleCaption(item)}'`\n    },\n    'title-subtitle': {\n      desc: 'subtitle',\n      caption: item => `Subtitle text '${titleCaption(item)}'`\n    }\n  }; // aria properties generated for mark item encoding channels\n\n  const AriaEncode = {\n    ariaRole: ARIA_ROLE,\n    ariaRoleDescription: ARIA_ROLEDESCRIPTION,\n    description: ARIA_LABEL\n  };\n\n  function ariaItemAttributes(emit, item) {\n    const hide = item.aria === false;\n    emit(ARIA_HIDDEN, hide || undefined);\n\n    if (hide || item.description == null) {\n      for (const prop in AriaEncode) {\n        emit(AriaEncode[prop], undefined);\n      }\n    } else {\n      const type = item.mark.marktype;\n      emit(ARIA_LABEL, item.description);\n      emit(ARIA_ROLE, item.ariaRole || (type === 'group' ? GRAPHICS_OBJECT : GRAPHICS_SYMBOL));\n      emit(ARIA_ROLEDESCRIPTION, item.ariaRoleDescription || `${type} mark`);\n    }\n  }\n\n  function ariaMarkAttributes(mark) {\n    return mark.aria === false ? {\n      [ARIA_HIDDEN]: true\n    } : AriaIgnore[mark.role] ? null : AriaGuides[mark.role] ? ariaGuide(mark, AriaGuides[mark.role]) : ariaMark(mark);\n  }\n\n  function ariaMark(mark) {\n    const type = mark.marktype;\n    const recurse = type === 'group' || type === 'text' || mark.items.some(_ => _.description != null && _.aria !== false);\n    return bundle(recurse ? GRAPHICS_OBJECT : GRAPHICS_SYMBOL, `${type} mark container`, mark.description);\n  }\n\n  function ariaGuide(mark, opt) {\n    try {\n      const item = mark.items[0],\n            caption = opt.caption || (() => '');\n\n      return bundle(opt.role || GRAPHICS_SYMBOL, opt.desc, item.description || caption(item));\n    } catch (err) {\n      return null;\n    }\n  }\n\n  function titleCaption(item) {\n    return array$5(item.text).join(' ');\n  }\n\n  function axisCaption(item) {\n    const datum = item.datum,\n          orient = item.orient,\n          title = datum.title ? extractTitle(item) : null,\n          ctx = item.context,\n          scale = ctx.scales[datum.scale].value,\n          locale = ctx.dataflow.locale(),\n          type = scale.type,\n          xy = orient === 'left' || orient === 'right' ? 'Y' : 'X';\n    return `${xy}-axis` + (title ? ` titled '${title}'` : '') + ` for a ${isDiscrete(type) ? 'discrete' : type} scale` + ` with ${domainCaption(locale, scale, item)}`;\n  }\n\n  function legendCaption(item) {\n    const datum = item.datum,\n          title = datum.title ? extractTitle(item) : null,\n          type = `${datum.type || ''} legend`.trim(),\n          scales = datum.scales,\n          props = Object.keys(scales),\n          ctx = item.context,\n          scale = ctx.scales[scales[props[0]]].value,\n          locale = ctx.dataflow.locale();\n    return capitalize(type) + (title ? ` titled '${title}'` : '') + ` for ${channelCaption(props)}` + ` with ${domainCaption(locale, scale, item)}`;\n  }\n\n  function extractTitle(item) {\n    try {\n      return array$5(peek$1(item.items).items[0].text).join(' ');\n    } catch (err) {\n      return null;\n    }\n  }\n\n  function channelCaption(props) {\n    props = props.map(p => p + (p === 'fill' || p === 'stroke' ? ' color' : ''));\n    return props.length < 2 ? props[0] : props.slice(0, -1).join(', ') + ' and ' + peek$1(props);\n  }\n\n  function capitalize(s) {\n    return s.length ? s[0].toUpperCase() + s.slice(1) : s;\n  }\n\n  const innerText = val => (val + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n  const attrText = val => innerText(val).replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n\n  function markup() {\n    let buf = '',\n        outer = '',\n        inner = '';\n\n    const stack = [],\n          clear = () => outer = inner = '',\n          push = tag => {\n      if (outer) {\n        buf += `${outer}>${inner}`;\n        clear();\n      }\n\n      stack.push(tag);\n    },\n          attr = (name, value) => {\n      if (value != null) outer += ` ${name}=\"${attrText(value)}\"`;\n      return m;\n    },\n          m = {\n      open(tag, ...attrs) {\n        push(tag);\n        outer = '<' + tag;\n\n        for (const set of attrs) {\n          for (const key in set) attr(key, set[key]);\n        }\n\n        return m;\n      },\n\n      close() {\n        const tag = stack.pop();\n\n        if (outer) {\n          buf += outer + (inner ? `>${inner}</${tag}>` : '/>');\n        } else {\n          buf += `</${tag}>`;\n        }\n\n        clear();\n        return m;\n      },\n\n      attr,\n      text: t => (inner += innerText(t), m),\n      toString: () => buf\n    };\n\n    return m;\n  }\n\n  const serializeXML = node => _serialize(markup(), node) + '';\n\n  function _serialize(m, node) {\n    m.open(node.tagName);\n\n    if (node.hasAttributes()) {\n      const attrs = node.attributes,\n            n = attrs.length;\n\n      for (let i = 0; i < n; ++i) {\n        m.attr(attrs[i].name, attrs[i].value);\n      }\n    }\n\n    if (node.hasChildNodes()) {\n      const children = node.childNodes,\n            n = children.length;\n\n      for (let i = 0; i < n; i++) {\n        const child = children[i];\n        child.nodeType === 3 // text node\n        ? m.text(child.nodeValue) : _serialize(m, child);\n      }\n    }\n\n    return m.close();\n  }\n\n  const styles = {\n    fill: 'fill',\n    fillOpacity: 'fill-opacity',\n    stroke: 'stroke',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    strokeCap: 'stroke-linecap',\n    strokeJoin: 'stroke-linejoin',\n    strokeDash: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeMiterLimit: 'stroke-miterlimit',\n    opacity: 'opacity',\n    blend: 'mix-blend-mode'\n  }; // ensure miter limit default is consistent with canvas (#2498)\n\n  const rootAttributes = {\n    'fill': 'none',\n    'stroke-miterlimit': 10\n  };\n  const RootIndex = 0,\n        xmlns = 'http://www.w3.org/2000/xmlns/',\n        svgns = metadata.xmlns;\n\n  function SVGRenderer(loader) {\n    Renderer.call(this, loader);\n    this._dirtyID = 0;\n    this._dirty = [];\n    this._svg = null;\n    this._root = null;\n    this._defs = null;\n  }\n\n  const base = Renderer.prototype;\n  inherits(SVGRenderer, Renderer, {\n    /**\n     * Initialize a new SVGRenderer instance.\n     * @param {DOMElement} el - The containing DOM element for the display.\n     * @param {number} width - The coordinate width of the display, in pixels.\n     * @param {number} height - The coordinate height of the display, in pixels.\n     * @param {Array<number>} origin - The origin of the display, in pixels.\n     *   The coordinate system will be translated to this point.\n     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply\n     *   the width and height to determine the final pixel size.\n     * @return {SVGRenderer} - This renderer instance.\n     */\n    initialize(el, width, height, origin, scaleFactor) {\n      // create the svg definitions cache\n      this._defs = {};\n\n      this._clearDefs();\n\n      if (el) {\n        this._svg = domChild(el, 0, 'svg', svgns);\n\n        this._svg.setAttributeNS(xmlns, 'xmlns', svgns);\n\n        this._svg.setAttributeNS(xmlns, 'xmlns:xlink', metadata['xmlns:xlink']);\n\n        this._svg.setAttribute('version', metadata['version']);\n\n        this._svg.setAttribute('class', 'marks');\n\n        domClear(el, 1); // set the svg root group\n\n        this._root = domChild(this._svg, RootIndex, 'g', svgns);\n        setAttributes(this._root, rootAttributes); // ensure no additional child elements\n\n        domClear(this._svg, RootIndex + 1);\n      } // set background color if defined\n\n\n      this.background(this._bgcolor);\n      return base.initialize.call(this, el, width, height, origin, scaleFactor);\n    },\n\n    /**\n     * Get / set the background color.\n     */\n    background(bgcolor) {\n      if (arguments.length && this._svg) {\n        this._svg.style.setProperty('background-color', bgcolor);\n      }\n\n      return base.background.apply(this, arguments);\n    },\n\n    /**\n     * Resize the display.\n     * @param {number} width - The new coordinate width of the display, in pixels.\n     * @param {number} height - The new coordinate height of the display, in pixels.\n     * @param {Array<number>} origin - The new origin of the display, in pixels.\n     *   The coordinate system will be translated to this point.\n     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply\n     *   the width and height to determine the final pixel size.\n     * @return {SVGRenderer} - This renderer instance;\n     */\n    resize(width, height, origin, scaleFactor) {\n      base.resize.call(this, width, height, origin, scaleFactor);\n\n      if (this._svg) {\n        setAttributes(this._svg, {\n          width: this._width * this._scale,\n          height: this._height * this._scale,\n          viewBox: `0 0 ${this._width} ${this._height}`\n        });\n\n        this._root.setAttribute('transform', `translate(${this._origin})`);\n      }\n\n      this._dirty = [];\n      return this;\n    },\n\n    /**\n     * Returns the SVG element of the visualization.\n     * @return {DOMElement} - The SVG element.\n     */\n    canvas() {\n      return this._svg;\n    },\n\n    /**\n     * Returns an SVG text string for the rendered content,\n     * or null if this renderer is currently headless.\n     */\n    svg() {\n      const svg = this._svg,\n            bg = this._bgcolor;\n      if (!svg) return null;\n      let node;\n\n      if (bg) {\n        svg.removeAttribute('style');\n        node = domChild(svg, RootIndex, 'rect', svgns);\n        setAttributes(node, {\n          width: this._width,\n          height: this._height,\n          fill: bg\n        });\n      }\n\n      const text = serializeXML(svg);\n\n      if (bg) {\n        svg.removeChild(node);\n\n        this._svg.style.setProperty('background-color', bg);\n      }\n\n      return text;\n    },\n\n    /**\n     * Internal rendering method.\n     * @param {object} scene - The root mark of a scenegraph to render.\n     */\n    _render(scene) {\n      // perform spot updates and re-render markup\n      if (this._dirtyCheck()) {\n        if (this._dirtyAll) this._clearDefs();\n        this.mark(this._root, scene);\n        domClear(this._root, 1);\n      }\n\n      this.defs();\n      this._dirty = [];\n      ++this._dirtyID;\n      return this;\n    },\n\n    // -- Manage rendering of items marked as dirty --\n\n    /**\n     * Flag a mark item as dirty.\n     * @param {Item} item - The mark item.\n     */\n    dirty(item) {\n      if (item.dirty !== this._dirtyID) {\n        item.dirty = this._dirtyID;\n\n        this._dirty.push(item);\n      }\n    },\n\n    /**\n     * Check if a mark item is considered dirty.\n     * @param {Item} item - The mark item.\n     */\n    isDirty(item) {\n      return this._dirtyAll || !item._svg || item.dirty === this._dirtyID;\n    },\n\n    /**\n     * Internal method to check dirty status and, if possible,\n     * make targetted updates without a full rendering pass.\n     */\n    _dirtyCheck() {\n      this._dirtyAll = true;\n      const items = this._dirty;\n      if (!items.length || !this._dirtyID) return true;\n      const id = ++this._dirtyID;\n      let item, mark, type, mdef, i, n, o;\n\n      for (i = 0, n = items.length; i < n; ++i) {\n        item = items[i];\n        mark = item.mark;\n\n        if (mark.marktype !== type) {\n          // memoize mark instance lookup\n          type = mark.marktype;\n          mdef = Marks[type];\n        }\n\n        if (mark.zdirty && mark.dirty !== id) {\n          this._dirtyAll = false;\n          dirtyParents(item, id);\n          mark.items.forEach(i => {\n            i.dirty = id;\n          });\n        }\n\n        if (mark.zdirty) continue; // handle in standard drawing pass\n\n        if (item.exit) {\n          // EXIT\n          if (mdef.nested && mark.items.length) {\n            // if nested mark with remaining points, update instead\n            o = mark.items[0];\n            if (o._svg) this._update(mdef, o._svg, o);\n          } else if (item._svg) {\n            // otherwise remove from DOM\n            o = item._svg.parentNode;\n            if (o) o.removeChild(item._svg);\n          }\n\n          item._svg = null;\n          continue;\n        }\n\n        item = mdef.nested ? mark.items[0] : item;\n        if (item._update === id) continue; // already visited\n\n        if (!item._svg || !item._svg.ownerSVGElement) {\n          // ENTER\n          this._dirtyAll = false;\n          dirtyParents(item, id);\n        } else {\n          // IN-PLACE UPDATE\n          this._update(mdef, item._svg, item);\n        }\n\n        item._update = id;\n      }\n\n      return !this._dirtyAll;\n    },\n\n    // -- Construct & maintain scenegraph to SVG mapping ---\n\n    /**\n     * Render a set of mark items.\n     * @param {SVGElement} el - The parent element in the SVG tree.\n     * @param {object} scene - The mark parent to render.\n     * @param {SVGElement} prev - The previous sibling in the SVG tree.\n     */\n    mark(el, scene, prev) {\n      if (!this.isDirty(scene)) return scene._svg;\n      const svg = this._svg,\n            mdef = Marks[scene.marktype],\n            events = scene.interactive === false ? 'none' : null,\n            isGroup = mdef.tag === 'g';\n      let sibling = null,\n          i = 0;\n      const parent = bind$1(scene, el, prev, 'g', svg);\n      parent.setAttribute('class', cssClass(scene)); // apply aria attributes to parent container element\n\n      const aria = ariaMarkAttributes(scene);\n\n      for (const key in aria) setAttribute(parent, key, aria[key]);\n\n      if (!isGroup) {\n        setAttribute(parent, 'pointer-events', events);\n      }\n\n      setAttribute(parent, 'clip-path', scene.clip ? clip$1$1(this, scene, scene.group) : null);\n\n      const process = item => {\n        const dirty = this.isDirty(item),\n              node = bind$1(item, parent, sibling, mdef.tag, svg);\n\n        if (dirty) {\n          this._update(mdef, node, item);\n\n          if (isGroup) recurse(this, node, item);\n        }\n\n        sibling = node;\n        ++i;\n      };\n\n      if (mdef.nested) {\n        if (scene.items.length) process(scene.items[0]);\n      } else {\n        visit(scene, process);\n      }\n\n      domClear(parent, i);\n      return parent;\n    },\n\n    /**\n     * Update the attributes of an SVG element for a mark item.\n     * @param {object} mdef - The mark definition object\n     * @param {SVGElement} el - The SVG element.\n     * @param {Item} item - The mark item.\n     */\n    _update(mdef, el, item) {\n      // set dom element and values cache\n      // provides access to emit method\n      element$1 = el;\n      values = el.__values__; // apply aria-specific properties\n\n      ariaItemAttributes(emit, item); // apply svg attributes\n\n      mdef.attr(emit, item, this); // some marks need special treatment\n\n      const extra = mark_extras[mdef.type];\n      if (extra) extra.call(this, mdef, el, item); // apply svg style attributes\n      // note: element state may have been modified by 'extra' method\n\n      if (element$1) this.style(element$1, item);\n    },\n\n    /**\n     * Update the presentation attributes of an SVG element for a mark item.\n     * @param {SVGElement} el - The SVG element.\n     * @param {Item} item - The mark item.\n     */\n    style(el, item) {\n      if (item == null) return;\n\n      for (const prop in styles) {\n        let value = prop === 'font' ? fontFamily(item) : item[prop];\n        if (value === values[prop]) continue;\n        const name = styles[prop];\n\n        if (value == null) {\n          el.removeAttribute(name);\n        } else {\n          if (isGradient(value)) {\n            value = gradientRef(value, this._defs.gradient, href());\n          }\n\n          el.setAttribute(name, value + '');\n        }\n\n        values[prop] = value;\n      }\n    },\n\n    /**\n     * Render SVG defs, as needed.\n     * Must be called *after* marks have been processed to ensure the\n     * collected state is current and accurate.\n     */\n    defs() {\n      const svg = this._svg,\n            defs = this._defs;\n      let el = defs.el,\n          index = 0;\n\n      for (const id in defs.gradient) {\n        if (!el) defs.el = el = domChild(svg, RootIndex + 1, 'defs', svgns);\n        index = updateGradient(el, defs.gradient[id], index);\n      }\n\n      for (const id in defs.clipping) {\n        if (!el) defs.el = el = domChild(svg, RootIndex + 1, 'defs', svgns);\n        index = updateClipping(el, defs.clipping[id], index);\n      } // clean-up\n\n\n      if (el) {\n        index === 0 ? (svg.removeChild(el), defs.el = null) : domClear(el, index);\n      }\n    },\n\n    /**\n     * Clear defs caches.\n     */\n    _clearDefs() {\n      const def = this._defs;\n      def.gradient = {};\n      def.clipping = {};\n    }\n\n  }); // mark ancestor chain with a dirty id\n\n  function dirtyParents(item, id) {\n    for (; item && item.dirty !== id; item = item.mark.group) {\n      item.dirty = id;\n\n      if (item.mark && item.mark.dirty !== id) {\n        item.mark.dirty = id;\n      } else return;\n    }\n  } // update gradient definitions\n\n\n  function updateGradient(el, grad, index) {\n    let i, n, stop;\n\n    if (grad.gradient === 'radial') {\n      // SVG radial gradients automatically transform to normalized bbox\n      // coordinates, in a way that is cumbersome to replicate in canvas.\n      // We wrap the radial gradient in a pattern element, allowing us to\n      // maintain a circular gradient that matches what canvas provides.\n      let pt = domChild(el, index++, 'pattern', svgns);\n      setAttributes(pt, {\n        id: patternPrefix + grad.id,\n        viewBox: '0,0,1,1',\n        width: '100%',\n        height: '100%',\n        preserveAspectRatio: 'xMidYMid slice'\n      });\n      pt = domChild(pt, 0, 'rect', svgns);\n      setAttributes(pt, {\n        width: 1,\n        height: 1,\n        fill: `url(${href()}#${grad.id})`\n      });\n      el = domChild(el, index++, 'radialGradient', svgns);\n      setAttributes(el, {\n        id: grad.id,\n        fx: grad.x1,\n        fy: grad.y1,\n        fr: grad.r1,\n        cx: grad.x2,\n        cy: grad.y2,\n        r: grad.r2\n      });\n    } else {\n      el = domChild(el, index++, 'linearGradient', svgns);\n      setAttributes(el, {\n        id: grad.id,\n        x1: grad.x1,\n        x2: grad.x2,\n        y1: grad.y1,\n        y2: grad.y2\n      });\n    }\n\n    for (i = 0, n = grad.stops.length; i < n; ++i) {\n      stop = domChild(el, i, 'stop', svgns);\n      stop.setAttribute('offset', grad.stops[i].offset);\n      stop.setAttribute('stop-color', grad.stops[i].color);\n    }\n\n    domClear(el, i);\n    return index;\n  } // update clipping path definitions\n\n\n  function updateClipping(el, clip, index) {\n    let mask;\n    el = domChild(el, index, 'clipPath', svgns);\n    el.setAttribute('id', clip.id);\n\n    if (clip.path) {\n      mask = domChild(el, 0, 'path', svgns);\n      mask.setAttribute('d', clip.path);\n    } else {\n      mask = domChild(el, 0, 'rect', svgns);\n      setAttributes(mask, {\n        x: 0,\n        y: 0,\n        width: clip.width,\n        height: clip.height\n      });\n    }\n\n    domClear(el, 1);\n    return index + 1;\n  } // Recursively process group contents.\n\n\n  function recurse(renderer, el, group) {\n    el = el.lastChild.previousSibling;\n    let prev,\n        idx = 0;\n    visit(group, item => {\n      prev = renderer.mark(el, item, prev);\n      ++idx;\n    }); // remove any extraneous DOM elements\n\n    domClear(el, 1 + idx);\n  } // Bind a scenegraph item to an SVG DOM element.\n  // Create new SVG elements as needed.\n\n\n  function bind$1(item, el, sibling, tag, svg) {\n    let node = item._svg,\n        doc; // create a new dom node if needed\n\n    if (!node) {\n      doc = el.ownerDocument;\n      node = domCreate(doc, tag, svgns);\n      item._svg = node;\n\n      if (item.mark) {\n        node.__data__ = item;\n        node.__values__ = {\n          fill: 'default'\n        }; // if group, create background, content, and foreground elements\n\n        if (tag === 'g') {\n          const bg = domCreate(doc, 'path', svgns);\n          node.appendChild(bg);\n          bg.__data__ = item;\n          const cg = domCreate(doc, 'g', svgns);\n          node.appendChild(cg);\n          cg.__data__ = item;\n          const fg = domCreate(doc, 'path', svgns);\n          node.appendChild(fg);\n          fg.__data__ = item;\n          fg.__values__ = {\n            fill: 'default'\n          };\n        }\n      }\n    } // (re-)insert if (a) not contained in SVG or (b) sibling order has changed\n\n\n    if (node.ownerSVGElement !== svg || siblingCheck(node, sibling)) {\n      el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);\n    }\n\n    return node;\n  } // check if two nodes are ordered siblings\n\n\n  function siblingCheck(node, sibling) {\n    return node.parentNode && node.parentNode.childNodes.length > 1 && node.previousSibling != sibling; // treat null/undefined the same\n  } // -- Set attributes & styles on SVG elements ---\n\n\n  let element$1 = null,\n      // temp var for current SVG element\n  values = null; // temp var for current values hash\n  // Extra configuration for certain mark types\n\n  const mark_extras = {\n    group(mdef, el, item) {\n      const fg = element$1 = el.childNodes[2];\n      values = fg.__values__;\n      mdef.foreground(emit, item, this);\n      values = el.__values__; // use parent's values hash\n\n      element$1 = el.childNodes[1];\n      mdef.content(emit, item, this);\n      const bg = element$1 = el.childNodes[0];\n      mdef.background(emit, item, this);\n      const value = item.mark.interactive === false ? 'none' : null;\n\n      if (value !== values.events) {\n        setAttribute(fg, 'pointer-events', value);\n        setAttribute(bg, 'pointer-events', value);\n        values.events = value;\n      }\n\n      if (item.strokeForeground && item.stroke) {\n        const fill = item.fill;\n        setAttribute(fg, 'display', null); // set style of background\n\n        this.style(bg, item);\n        setAttribute(bg, 'stroke', null); // set style of foreground\n\n        if (fill) item.fill = null;\n        values = fg.__values__;\n        this.style(fg, item);\n        if (fill) item.fill = fill; // leave element null to prevent downstream styling\n\n        element$1 = null;\n      } else {\n        // ensure foreground is ignored\n        setAttribute(fg, 'display', 'none');\n      }\n    },\n\n    image(mdef, el, item) {\n      if (item.smooth === false) {\n        setStyle(el, 'image-rendering', 'optimizeSpeed');\n        setStyle(el, 'image-rendering', 'pixelated');\n      } else {\n        setStyle(el, 'image-rendering', null);\n      }\n    },\n\n    text(mdef, el, item) {\n      const tl = textLines(item);\n      let key, value, doc, lh;\n\n      if (isArray(tl)) {\n        // multi-line text\n        value = tl.map(_ => textValue(item, _));\n        key = value.join('\\n'); // content cache key\n\n        if (key !== values.text) {\n          domClear(el, 0);\n          doc = el.ownerDocument;\n          lh = lineHeight(item);\n          value.forEach((t, i) => {\n            const ts = domCreate(doc, 'tspan', svgns);\n            ts.__data__ = item; // data binding\n\n            ts.textContent = t;\n\n            if (i) {\n              ts.setAttribute('x', 0);\n              ts.setAttribute('dy', lh);\n            }\n\n            el.appendChild(ts);\n          });\n          values.text = key;\n        }\n      } else {\n        // single-line text\n        value = textValue(item, tl);\n\n        if (value !== values.text) {\n          el.textContent = value;\n          values.text = value;\n        }\n      }\n\n      setAttribute(el, 'font-family', fontFamily(item));\n      setAttribute(el, 'font-size', fontSize(item) + 'px');\n      setAttribute(el, 'font-style', item.fontStyle);\n      setAttribute(el, 'font-variant', item.fontVariant);\n      setAttribute(el, 'font-weight', item.fontWeight);\n    }\n\n  };\n\n  function emit(name, value, ns) {\n    // early exit if value is unchanged\n    if (value === values[name]) return; // use appropriate method given namespace (ns)\n\n    if (ns) {\n      setAttributeNS(element$1, name, value, ns);\n    } else {\n      setAttribute(element$1, name, value);\n    } // note current value for future comparison\n\n\n    values[name] = value;\n  }\n\n  function setStyle(el, name, value) {\n    if (value !== values[name]) {\n      if (value == null) {\n        el.style.removeProperty(name);\n      } else {\n        el.style.setProperty(name, value + '');\n      }\n\n      values[name] = value;\n    }\n  }\n\n  function setAttributes(el, attrs) {\n    for (const key in attrs) {\n      setAttribute(el, key, attrs[key]);\n    }\n  }\n\n  function setAttribute(el, name, value) {\n    if (value != null) {\n      // if value is provided, update DOM attribute\n      el.setAttribute(name, value);\n    } else {\n      // else remove DOM attribute\n      el.removeAttribute(name);\n    }\n  }\n\n  function setAttributeNS(el, name, value, ns) {\n    if (value != null) {\n      // if value is provided, update DOM attribute\n      el.setAttributeNS(ns, name, value);\n    } else {\n      // else remove DOM attribute\n      el.removeAttributeNS(ns, name);\n    }\n  }\n\n  function href() {\n    let loc;\n    return typeof window === 'undefined' ? '' : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length) : loc.href;\n  }\n\n  function SVGStringRenderer(loader) {\n    Renderer.call(this, loader);\n    this._text = null;\n    this._defs = {\n      gradient: {},\n      clipping: {}\n    };\n  }\n\n  inherits(SVGStringRenderer, Renderer, {\n    /**\n     * Returns the rendered SVG text string,\n     * or null if rendering has not yet occurred.\n     */\n    svg() {\n      return this._text;\n    },\n\n    /**\n     * Internal rendering method.\n     * @param {object} scene - The root mark of a scenegraph to render.\n     */\n    _render(scene) {\n      const m = markup(); // svg tag\n\n      m.open('svg', extend$1({}, metadata, {\n        class: 'marks',\n        width: this._width * this._scale,\n        height: this._height * this._scale,\n        viewBox: `0 0 ${this._width} ${this._height}`\n      })); // background, if defined\n\n      const bg = this._bgcolor;\n\n      if (bg && bg !== 'transparent' && bg !== 'none') {\n        m.open('rect', {\n          width: this._width,\n          height: this._height,\n          fill: bg\n        }).close();\n      } // root content group\n\n\n      m.open('g', rootAttributes, {\n        transform: 'translate(' + this._origin + ')'\n      });\n      this.mark(m, scene);\n      m.close(); // </g>\n      // defs\n\n      this.defs(m); // get SVG text string\n\n      this._text = m.close() + '';\n      return this;\n    },\n\n    /**\n     * Render a set of mark items.\n     * @param {object} m - The markup context.\n     * @param {object} scene - The mark parent to render.\n     */\n    mark(m, scene) {\n      const mdef = Marks[scene.marktype],\n            tag = mdef.tag,\n            attrList = [ariaItemAttributes, mdef.attr]; // render opening group tag\n\n      m.open('g', {\n        'class': cssClass(scene),\n        'clip-path': scene.clip ? clip$1$1(this, scene, scene.group) : null\n      }, ariaMarkAttributes(scene), {\n        'pointer-events': tag !== 'g' && scene.interactive === false ? 'none' : null\n      }); // render contained elements\n\n      const process = item => {\n        const href = this.href(item);\n        if (href) m.open('a', href);\n        m.open(tag, this.attr(scene, item, attrList, tag !== 'g' ? tag : null));\n\n        if (tag === 'text') {\n          const tl = textLines(item);\n\n          if (isArray(tl)) {\n            // multi-line text\n            const attrs = {\n              x: 0,\n              dy: lineHeight(item)\n            };\n\n            for (let i = 0; i < tl.length; ++i) {\n              m.open('tspan', i ? attrs : null).text(textValue(item, tl[i])).close();\n            }\n          } else {\n            // single-line text\n            m.text(textValue(item, tl));\n          }\n        } else if (tag === 'g') {\n          const fore = item.strokeForeground,\n                fill = item.fill,\n                stroke = item.stroke;\n\n          if (fore && stroke) {\n            item.stroke = null;\n          }\n\n          m.open('path', this.attr(scene, item, mdef.background, 'bgrect')).close(); // recurse for group content\n\n          m.open('g', this.attr(scene, item, mdef.content));\n          visit(item, scene => this.mark(m, scene));\n          m.close();\n\n          if (fore && stroke) {\n            if (fill) item.fill = null;\n            item.stroke = stroke;\n            m.open('path', this.attr(scene, item, mdef.foreground, 'bgrect')).close();\n            if (fill) item.fill = fill;\n          } else {\n            m.open('path', this.attr(scene, item, mdef.foreground, 'bgfore')).close();\n          }\n        }\n\n        m.close(); // </tag>\n\n        if (href) m.close(); // </a>\n      };\n\n      if (mdef.nested) {\n        if (scene.items && scene.items.length) process(scene.items[0]);\n      } else {\n        visit(scene, process);\n      } // render closing group tag\n\n\n      return m.close(); // </g>\n    },\n\n    /**\n     * Get href attributes for a hyperlinked mark item.\n     * @param {Item} item - The mark item.\n     */\n    href(item) {\n      const href = item.href;\n      let attr;\n\n      if (href) {\n        if (attr = this._hrefs && this._hrefs[href]) {\n          return attr;\n        } else {\n          this.sanitizeURL(href).then(attr => {\n            // rewrite to use xlink namespace\n            attr['xlink:href'] = attr.href;\n            attr.href = null;\n            (this._hrefs || (this._hrefs = {}))[href] = attr;\n          });\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Get an object of SVG attributes for a mark item.\n     * @param {object} scene - The mark parent.\n     * @param {Item} item - The mark item.\n     * @param {array|function} attrs - One or more attribute emitters.\n     * @param {string} tag - The tag being rendered.\n     */\n    attr(scene, item, attrs, tag) {\n      const object = {},\n            emit = (name, value, ns, prefixed) => {\n        object[prefixed || name] = value;\n      }; // apply mark specific attributes\n\n\n      if (Array.isArray(attrs)) {\n        attrs.forEach(fn => fn(emit, item, this));\n      } else {\n        attrs(emit, item, this);\n      } // apply style attributes\n\n\n      if (tag) {\n        style(object, item, scene, tag, this._defs);\n      }\n\n      return object;\n    },\n\n    /**\n     * Render SVG defs, as needed.\n     * Must be called *after* marks have been processed to ensure the\n     * collected state is current and accurate.\n     * @param {object} m - The markup context.\n     */\n    defs(m) {\n      const gradient = this._defs.gradient,\n            clipping = this._defs.clipping,\n            count = Object.keys(gradient).length + Object.keys(clipping).length;\n      if (count === 0) return; // nothing to do\n\n      m.open('defs');\n\n      for (const id in gradient) {\n        const def = gradient[id],\n              stops = def.stops;\n\n        if (def.gradient === 'radial') {\n          // SVG radial gradients automatically transform to normalized bbox\n          // coordinates, in a way that is cumbersome to replicate in canvas.\n          // We wrap the radial gradient in a pattern element, allowing us to\n          // maintain a circular gradient that matches what canvas provides.\n          m.open('pattern', {\n            id: patternPrefix + id,\n            viewBox: '0,0,1,1',\n            width: '100%',\n            height: '100%',\n            preserveAspectRatio: 'xMidYMid slice'\n          });\n          m.open('rect', {\n            width: '1',\n            height: '1',\n            fill: 'url(#' + id + ')'\n          }).close();\n          m.close(); // </pattern>\n\n          m.open('radialGradient', {\n            id: id,\n            fx: def.x1,\n            fy: def.y1,\n            fr: def.r1,\n            cx: def.x2,\n            cy: def.y2,\n            r: def.r2\n          });\n        } else {\n          m.open('linearGradient', {\n            id: id,\n            x1: def.x1,\n            x2: def.x2,\n            y1: def.y1,\n            y2: def.y2\n          });\n        }\n\n        for (let i = 0; i < stops.length; ++i) {\n          m.open('stop', {\n            offset: stops[i].offset,\n            'stop-color': stops[i].color\n          }).close();\n        }\n\n        m.close();\n      }\n\n      for (const id in clipping) {\n        const def = clipping[id];\n        m.open('clipPath', {\n          id: id\n        });\n\n        if (def.path) {\n          m.open('path', {\n            d: def.path\n          }).close();\n        } else {\n          m.open('rect', {\n            x: 0,\n            y: 0,\n            width: def.width,\n            height: def.height\n          }).close();\n        }\n\n        m.close();\n      }\n\n      m.close();\n    }\n\n  }); // Helper function for attr for style presentation attributes\n\n  function style(s, item, scene, tag, defs) {\n    if (item == null) return s;\n\n    if (tag === 'bgrect' && scene.interactive === false) {\n      s['pointer-events'] = 'none';\n    }\n\n    if (tag === 'bgfore') {\n      if (scene.interactive === false) {\n        s['pointer-events'] = 'none';\n      }\n\n      s.display = 'none';\n      if (item.fill !== null) return s;\n    }\n\n    if (tag === 'image' && item.smooth === false) {\n      s.style = 'image-rendering: optimizeSpeed; image-rendering: pixelated;';\n    }\n\n    if (tag === 'text') {\n      s['font-family'] = fontFamily(item);\n      s['font-size'] = fontSize(item) + 'px';\n      s['font-style'] = item.fontStyle;\n      s['font-variant'] = item.fontVariant;\n      s['font-weight'] = item.fontWeight;\n    }\n\n    for (const prop in styles) {\n      let value = item[prop];\n      const name = styles[prop];\n      if (value === 'transparent' && (name === 'fill' || name === 'stroke')) ;else if (value != null) {\n        if (isGradient(value)) {\n          value = gradientRef(value, defs.gradient, '');\n        }\n\n        s[name] = value;\n      }\n    }\n\n    return s;\n  }\n\n  const Canvas = 'canvas';\n  const PNG = 'png';\n  const SVG = 'svg';\n  const None$1 = 'none';\n  const RenderType = {\n    Canvas: Canvas,\n    PNG: PNG,\n    SVG: SVG,\n    None: None$1\n  };\n  const modules = {};\n  modules[Canvas] = modules[PNG] = {\n    renderer: CanvasRenderer,\n    headless: CanvasRenderer,\n    handler: CanvasHandler\n  };\n  modules[SVG] = {\n    renderer: SVGRenderer,\n    headless: SVGStringRenderer,\n    handler: SVGHandler\n  };\n  modules[None$1] = {};\n\n  function renderModule(name, _) {\n    name = String(name || '').toLowerCase();\n\n    if (arguments.length > 1) {\n      modules[name] = _;\n      return this;\n    } else {\n      return modules[name];\n    }\n  }\n\n  function intersect$2(scene, bounds, filter) {\n    const hits = [],\n          // intersection results\n    box = new Bounds().union(bounds),\n          // defensive copy\n    type = scene.marktype;\n    return type ? intersectMark(scene, box, filter, hits) : type === 'group' ? intersectGroup(scene, box, filter, hits) : error('Intersect scene must be mark node or group item.');\n  }\n\n  function intersectMark(mark, box, filter, hits) {\n    if (visitMark(mark, box, filter)) {\n      const items = mark.items,\n            type = mark.marktype,\n            n = items.length;\n      let i = 0;\n\n      if (type === 'group') {\n        for (; i < n; ++i) {\n          intersectGroup(items[i], box, filter, hits);\n        }\n      } else {\n        for (const test = Marks[type].isect; i < n; ++i) {\n          const item = items[i];\n          if (intersectItem(item, box, test)) hits.push(item);\n        }\n      }\n    }\n\n    return hits;\n  }\n\n  function visitMark(mark, box, filter) {\n    // process if bounds intersect and if\n    // (1) mark is a group mark (so we must recurse), or\n    // (2) mark is interactive and passes filter\n    return mark.bounds && box.intersects(mark.bounds) && (mark.marktype === 'group' || mark.interactive !== false && (!filter || filter(mark)));\n  }\n\n  function intersectGroup(group, box, filter, hits) {\n    // test intersect against group\n    // skip groups by default unless filter says otherwise\n    if (filter && filter(group.mark) && intersectItem(group, box, Marks.group.isect)) {\n      hits.push(group);\n    } // recursively test children marks\n    // translate box to group coordinate space\n\n\n    const marks = group.items,\n          n = marks && marks.length;\n\n    if (n) {\n      const x = group.x || 0,\n            y = group.y || 0;\n      box.translate(-x, -y);\n\n      for (let i = 0; i < n; ++i) {\n        intersectMark(marks[i], box, filter, hits);\n      }\n\n      box.translate(x, y);\n    }\n\n    return hits;\n  }\n\n  function intersectItem(item, box, test) {\n    // test bounds enclosure, bounds intersection, then detailed test\n    const bounds = item.bounds;\n    return box.encloses(bounds) || box.intersects(bounds) && test(item, box);\n  }\n\n  const clipBounds = new Bounds();\n\n  function boundClip(mark) {\n    const clip = mark.clip;\n\n    if (isFunction(clip)) {\n      clip(boundContext(clipBounds.clear()));\n    } else if (clip) {\n      clipBounds.set(0, 0, mark.group.width, mark.group.height);\n    } else return;\n\n    mark.bounds.intersect(clipBounds);\n  }\n\n  const TOLERANCE = 1e-9;\n\n  function sceneEqual(a, b, key) {\n    return a === b ? true : key === 'path' ? pathEqual(a, b) : a instanceof Date && b instanceof Date ? +a === +b : isNumber$1(a) && isNumber$1(b) ? Math.abs(a - b) <= TOLERANCE : !a || !b || !isObject(a) && !isObject(b) ? a == b : objectEqual(a, b);\n  }\n\n  function pathEqual(a, b) {\n    return sceneEqual(pathParse(a), pathParse(b));\n  }\n\n  function objectEqual(a, b) {\n    var ka = Object.keys(a),\n        kb = Object.keys(b),\n        key,\n        i;\n    if (ka.length !== kb.length) return false;\n    ka.sort();\n    kb.sort();\n\n    for (i = ka.length - 1; i >= 0; i--) {\n      if (ka[i] != kb[i]) return false;\n    }\n\n    for (i = ka.length - 1; i >= 0; i--) {\n      key = ka[i];\n      if (!sceneEqual(a[key], b[key], key)) return false;\n    }\n\n    return typeof a === typeof b;\n  }\n\n  function resetSVGDefIds() {\n    resetSVGClipId();\n    resetSVGGradientId();\n  }\n\n  const Top$1 = 'top';\n  const Left$1 = 'left';\n  const Right$1 = 'right';\n  const Bottom$1 = 'bottom';\n  const TopLeft = 'top-left';\n  const TopRight = 'top-right';\n  const BottomLeft = 'bottom-left';\n  const BottomRight = 'bottom-right';\n  const Start$1 = 'start';\n  const Middle$1 = 'middle';\n  const End$1 = 'end';\n  const X = 'x';\n  const Y = 'y';\n  const Group = 'group';\n  const AxisRole$1 = 'axis';\n  const TitleRole$1 = 'title';\n  const FrameRole$1 = 'frame';\n  const ScopeRole$1 = 'scope';\n  const LegendRole$1 = 'legend';\n  const RowHeader = 'row-header';\n  const RowFooter = 'row-footer';\n  const RowTitle = 'row-title';\n  const ColHeader = 'column-header';\n  const ColFooter = 'column-footer';\n  const ColTitle = 'column-title';\n  const Padding$1 = 'padding';\n  const Symbols$1 = 'symbol';\n  const Fit = 'fit';\n  const FitX = 'fit-x';\n  const FitY = 'fit-y';\n  const Pad = 'pad';\n  const None = 'none';\n  const All = 'all';\n  const Each = 'each';\n  const Flush = 'flush';\n  const Column = 'column';\n  const Row = 'row';\n  /**\n   * Calculate bounding boxes for scenegraph items.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.mark - The scenegraph mark instance to bound.\n   */\n\n  function Bound$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  inherits(Bound$1, Transform, {\n    transform(_, pulse) {\n      const view = pulse.dataflow,\n            mark = _.mark,\n            type = mark.marktype,\n            entry = Marks[type],\n            bound = entry.bound;\n      let markBounds = mark.bounds,\n          rebound;\n\n      if (entry.nested) {\n        // multi-item marks have a single bounds instance\n        if (mark.items.length) view.dirty(mark.items[0]);\n        markBounds = boundItem(mark, bound);\n        mark.items.forEach(item => {\n          item.bounds.clear().union(markBounds);\n        });\n      } else if (type === Group || _.modified()) {\n        // operator parameters modified -> re-bound all items\n        // updates group bounds in response to modified group content\n        pulse.visit(pulse.MOD, item => view.dirty(item));\n        markBounds.clear();\n        mark.items.forEach(item => markBounds.union(boundItem(item, bound))); // force reflow for axes/legends/titles to propagate any layout changes\n\n        switch (mark.role) {\n          case AxisRole$1:\n          case LegendRole$1:\n          case TitleRole$1:\n            pulse.reflow();\n        }\n      } else {\n        // incrementally update bounds, re-bound mark as needed\n        rebound = pulse.changed(pulse.REM);\n        pulse.visit(pulse.ADD, item => {\n          markBounds.union(boundItem(item, bound));\n        });\n        pulse.visit(pulse.MOD, item => {\n          rebound = rebound || markBounds.alignsWith(item.bounds);\n          view.dirty(item);\n          markBounds.union(boundItem(item, bound));\n        });\n\n        if (rebound) {\n          markBounds.clear();\n          mark.items.forEach(item => markBounds.union(item.bounds));\n        }\n      } // ensure mark bounds do not exceed any clipping region\n\n\n      boundClip(mark);\n      return pulse.modifies('bounds');\n    }\n\n  });\n\n  function boundItem(item, bound, opt) {\n    return bound(item.bounds.clear(), item, opt);\n  }\n\n  const COUNTER_NAME = ':vega_identifier:';\n  /**\n   * Adds a unique identifier to all added tuples.\n   * This transform creates a new signal that serves as an id counter.\n   * As a result, the id counter is shared across all instances of this\n   * transform, generating unique ids across multiple data streams. In\n   * addition, this signal value can be included in a snapshot of the\n   * dataflow state, enabling correct resumption of id allocation.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.as - The field name for the generated identifier.\n   */\n\n  function Identifier$1(params) {\n    Transform.call(this, 0, params);\n  }\n\n  Identifier$1.Definition = {\n    'type': 'Identifier',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'as',\n      'type': 'string',\n      'required': true\n    }]\n  };\n  inherits(Identifier$1, Transform, {\n    transform(_, pulse) {\n      const counter = getCounter(pulse.dataflow),\n            as = _.as;\n      let id = counter.value;\n      pulse.visit(pulse.ADD, t => t[as] = t[as] || ++id);\n      counter.set(this.value = id);\n      return pulse;\n    }\n\n  });\n\n  function getCounter(view) {\n    return view._signals[COUNTER_NAME] || (view._signals[COUNTER_NAME] = view.add(0));\n  }\n  /**\n   * Bind scenegraph items to a scenegraph mark instance.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.markdef - The mark definition for creating the mark.\n   *   This is an object of legal scenegraph mark properties which *must* include\n   *   the 'marktype' property.\n   */\n\n\n  function Mark$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  inherits(Mark$1, Transform, {\n    transform(_, pulse) {\n      let mark = this.value; // acquire mark on first invocation, bind context and group\n\n      if (!mark) {\n        mark = pulse.dataflow.scenegraph().mark(_.markdef, lookup$1$1(_), _.index);\n        mark.group.context = _.context;\n        if (!_.context.group) _.context.group = mark.group;\n        mark.source = this.source; // point to upstream collector\n\n        mark.clip = _.clip;\n        mark.interactive = _.interactive;\n        this.value = mark;\n      } // initialize entering items\n\n\n      const Init = mark.marktype === Group ? GroupItem : Item;\n      pulse.visit(pulse.ADD, item => Init.call(item, mark)); // update clipping and/or interactive status\n\n      if (_.modified('clip') || _.modified('interactive')) {\n        mark.clip = _.clip;\n        mark.interactive = !!_.interactive;\n        mark.zdirty = true; // force scenegraph re-eval\n\n        pulse.reflow();\n      } // bind items array to scenegraph mark\n\n\n      mark.items = pulse.source;\n      return pulse;\n    }\n\n  });\n\n  function lookup$1$1(_) {\n    const g = _.groups,\n          p = _.parent;\n    return g && g.size === 1 ? g.get(Object.keys(g.object)[0]) : g && p ? g.lookup(p) : null;\n  }\n  /**\n   * Analyze items for overlap, changing opacity to hide items with\n   * overlapping bounding boxes. This transform will preserve at least\n   * two items (e.g., first and last) even if overlap persists.\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator\n   *   function for sorting items.\n   * @param {object} [params.method] - The overlap removal method to apply.\n   *   One of 'parity' (default, hide every other item until there is no\n   *   more overlap) or 'greedy' (sequentially scan and hide and items that\n   *   overlap with the last visible item).\n   * @param {object} [params.boundScale] - A scale whose range should be used\n   *   to bound the items. Items exceeding the bounds of the scale range\n   *   will be treated as overlapping. If null or undefined, no bounds check\n   *   will be applied.\n   * @param {object} [params.boundOrient] - The orientation of the scale\n   *   (top, bottom, left, or right) used to bound items. This parameter is\n   *   ignored if boundScale is null or undefined.\n   * @param {object} [params.boundTolerance] - The tolerance in pixels for\n   *   bound inclusion testing (default 1). This specifies by how many pixels\n   *   an item's bounds may exceed the scale range bounds and not be culled.\n   * @constructor\n   */\n\n\n  function Overlap$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  const methods = {\n    parity: items => items.filter((item, i) => i % 2 ? item.opacity = 0 : 1),\n    greedy: (items, sep) => {\n      let a;\n      return items.filter((b, i) => !i || !intersect$1(a.bounds, b.bounds, sep) ? (a = b, 1) : b.opacity = 0);\n    }\n  }; // compute bounding box intersection\n  // including padding pixels of separation\n\n  const intersect$1 = (a, b, sep) => sep > Math.max(b.x1 - a.x2, a.x1 - b.x2, b.y1 - a.y2, a.y1 - b.y2);\n\n  const hasOverlap = (items, pad) => {\n    for (var i = 1, n = items.length, a = items[0].bounds, b; i < n; a = b, ++i) {\n      if (intersect$1(a, b = items[i].bounds, pad)) return true;\n    }\n  };\n\n  const hasBounds = item => {\n    const b = item.bounds;\n    return b.width() > 1 && b.height() > 1;\n  };\n\n  const boundTest = (scale, orient, tolerance) => {\n    var range = scale.range(),\n        b = new Bounds();\n\n    if (orient === Top$1 || orient === Bottom$1) {\n      b.set(range[0], -Infinity, range[1], +Infinity);\n    } else {\n      b.set(-Infinity, range[0], +Infinity, range[1]);\n    }\n\n    b.expand(tolerance || 1);\n    return item => b.encloses(item.bounds);\n  }; // reset all items to be fully opaque\n\n\n  const reset = source => {\n    source.forEach(item => item.opacity = 1);\n    return source;\n  }; // add all tuples to mod, fork pulse if parameters were modified\n  // fork prevents cross-stream tuple pollution (e.g., pulse from scale)\n\n\n  const reflow = (pulse, _) => pulse.reflow(_.modified()).modifies('opacity');\n\n  inherits(Overlap$1, Transform, {\n    transform(_, pulse) {\n      const reduce = methods[_.method] || methods.parity,\n            sep = _.separation || 0;\n      let source = pulse.materialize(pulse.SOURCE).source,\n          items,\n          test;\n      if (!source || !source.length) return;\n\n      if (!_.method) {\n        // early exit if method is falsy\n        if (_.modified('method')) {\n          reset(source);\n          pulse = reflow(pulse, _);\n        }\n\n        return pulse;\n      } // skip labels with no content\n\n\n      source = source.filter(hasBounds); // early exit, nothing to do\n\n      if (!source.length) return;\n\n      if (_.sort) {\n        source = source.slice().sort(_.sort);\n      }\n\n      items = reset(source);\n      pulse = reflow(pulse, _);\n\n      if (items.length >= 3 && hasOverlap(items, sep)) {\n        do {\n          items = reduce(items, sep);\n        } while (items.length >= 3 && hasOverlap(items, sep));\n\n        if (items.length < 3 && !peek$1(source).opacity) {\n          if (items.length > 1) peek$1(items).opacity = 0;\n          peek$1(source).opacity = 1;\n        }\n      }\n\n      if (_.boundScale && _.boundTolerance >= 0) {\n        test = boundTest(_.boundScale, _.boundOrient, +_.boundTolerance);\n        source.forEach(item => {\n          if (!test(item)) item.opacity = 0;\n        });\n      } // re-calculate mark bounds\n\n\n      const bounds = items[0].mark.bounds.clear();\n      source.forEach(item => {\n        if (item.opacity) bounds.union(item.bounds);\n      });\n      return pulse;\n    }\n\n  });\n  /**\n   * Queue modified scenegraph items for rendering.\n   * @constructor\n   */\n\n  function Render$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  inherits(Render$1, Transform, {\n    transform(_, pulse) {\n      const view = pulse.dataflow;\n      pulse.visit(pulse.ALL, item => view.dirty(item)); // set z-index dirty flag as needed\n\n      if (pulse.fields && pulse.fields['zindex']) {\n        const item = pulse.source && pulse.source[0];\n        if (item) item.mark.zdirty = true;\n      }\n    }\n\n  });\n  const tempBounds = new Bounds();\n\n  function set$2(item, property, value) {\n    return item[property] === value ? 0 : (item[property] = value, 1);\n  }\n\n  function isYAxis(mark) {\n    var orient = mark.items[0].orient;\n    return orient === Left$1 || orient === Right$1;\n  }\n\n  function axisIndices(datum) {\n    let index = +datum.grid;\n    return [datum.ticks ? index++ : -1, // ticks index\n    datum.labels ? index++ : -1, // labels index\n    index + +datum.domain // title index\n    ];\n  }\n\n  function axisLayout(view, axis, width, height) {\n    var item = axis.items[0],\n        datum = item.datum,\n        delta = item.translate != null ? item.translate : 0.5,\n        orient = item.orient,\n        indices = axisIndices(datum),\n        range = item.range,\n        offset = item.offset,\n        position = item.position,\n        minExtent = item.minExtent,\n        maxExtent = item.maxExtent,\n        title = datum.title && item.items[indices[2]].items[0],\n        titlePadding = item.titlePadding,\n        bounds = item.bounds,\n        dl = title && multiLineOffset(title),\n        x = 0,\n        y = 0,\n        i,\n        s;\n    tempBounds.clear().union(bounds);\n    bounds.clear();\n    if ((i = indices[0]) > -1) bounds.union(item.items[i].bounds);\n    if ((i = indices[1]) > -1) bounds.union(item.items[i].bounds); // position axis group and title\n\n    switch (orient) {\n      case Top$1:\n        x = position || 0;\n        y = -offset;\n        s = Math.max(minExtent, Math.min(maxExtent, -bounds.y1));\n        bounds.add(0, -s).add(range, 0);\n        if (title) axisTitleLayout(view, title, s, titlePadding, dl, 0, -1, bounds);\n        break;\n\n      case Left$1:\n        x = -offset;\n        y = position || 0;\n        s = Math.max(minExtent, Math.min(maxExtent, -bounds.x1));\n        bounds.add(-s, 0).add(0, range);\n        if (title) axisTitleLayout(view, title, s, titlePadding, dl, 1, -1, bounds);\n        break;\n\n      case Right$1:\n        x = width + offset;\n        y = position || 0;\n        s = Math.max(minExtent, Math.min(maxExtent, bounds.x2));\n        bounds.add(0, 0).add(s, range);\n        if (title) axisTitleLayout(view, title, s, titlePadding, dl, 1, 1, bounds);\n        break;\n\n      case Bottom$1:\n        x = position || 0;\n        y = height + offset;\n        s = Math.max(minExtent, Math.min(maxExtent, bounds.y2));\n        bounds.add(0, 0).add(range, s);\n        if (title) axisTitleLayout(view, title, s, titlePadding, 0, 0, 1, bounds);\n        break;\n\n      default:\n        x = item.x;\n        y = item.y;\n    } // update bounds\n\n\n    boundStroke(bounds.translate(x, y), item);\n\n    if (set$2(item, 'x', x + delta) | set$2(item, 'y', y + delta)) {\n      item.bounds = tempBounds;\n      view.dirty(item);\n      item.bounds = bounds;\n      view.dirty(item);\n    }\n\n    return item.mark.bounds.clear().union(bounds);\n  }\n\n  function axisTitleLayout(view, title, offset, pad, dl, isYAxis, sign, bounds) {\n    const b = title.bounds;\n\n    if (title.auto) {\n      const v = sign * (offset + dl + pad);\n      let dx = 0,\n          dy = 0;\n      view.dirty(title);\n      isYAxis ? dx = (title.x || 0) - (title.x = v) : dy = (title.y || 0) - (title.y = v);\n      title.mark.bounds.clear().union(b.translate(-dx, -dy));\n      view.dirty(title);\n    }\n\n    bounds.union(b);\n  }\n\n  const min = (a, b) => Math.floor(Math.min(a, b));\n\n  const max = (a, b) => Math.ceil(Math.max(a, b));\n\n  function gridLayoutGroups(group) {\n    var groups = group.items,\n        n = groups.length,\n        i = 0,\n        mark,\n        items;\n    const views = {\n      marks: [],\n      rowheaders: [],\n      rowfooters: [],\n      colheaders: [],\n      colfooters: [],\n      rowtitle: null,\n      coltitle: null\n    }; // layout axes, gather legends, collect bounds\n\n    for (; i < n; ++i) {\n      mark = groups[i];\n      items = mark.items;\n\n      if (mark.marktype === Group) {\n        switch (mark.role) {\n          case AxisRole$1:\n          case LegendRole$1:\n          case TitleRole$1:\n            break;\n\n          case RowHeader:\n            views.rowheaders.push(...items);\n            break;\n\n          case RowFooter:\n            views.rowfooters.push(...items);\n            break;\n\n          case ColHeader:\n            views.colheaders.push(...items);\n            break;\n\n          case ColFooter:\n            views.colfooters.push(...items);\n            break;\n\n          case RowTitle:\n            views.rowtitle = items[0];\n            break;\n\n          case ColTitle:\n            views.coltitle = items[0];\n            break;\n\n          default:\n            views.marks.push(...items);\n        }\n      }\n    }\n\n    return views;\n  }\n\n  function bboxFlush(item) {\n    return new Bounds().set(0, 0, item.width || 0, item.height || 0);\n  }\n\n  function bboxFull(item) {\n    const b = item.bounds.clone();\n    return b.empty() ? b.set(0, 0, 0, 0) : b.translate(-(item.x || 0), -(item.y || 0));\n  }\n\n  function get$1(opt, key, d) {\n    const v = isObject(opt) ? opt[key] : opt;\n    return v != null ? v : d !== undefined ? d : 0;\n  }\n\n  function offsetValue$1(v) {\n    return v < 0 ? Math.ceil(-v) : 0;\n  }\n\n  function gridLayout(view, groups, opt) {\n    var dirty = !opt.nodirty,\n        bbox = opt.bounds === Flush ? bboxFlush : bboxFull,\n        bounds = tempBounds.set(0, 0, 0, 0),\n        alignCol = get$1(opt.align, Column),\n        alignRow = get$1(opt.align, Row),\n        padCol = get$1(opt.padding, Column),\n        padRow = get$1(opt.padding, Row),\n        ncols = opt.columns || groups.length,\n        nrows = ncols <= 0 ? 1 : Math.ceil(groups.length / ncols),\n        n = groups.length,\n        xOffset = Array(n),\n        xExtent = Array(ncols),\n        xMax = 0,\n        yOffset = Array(n),\n        yExtent = Array(nrows),\n        yMax = 0,\n        dx = Array(n),\n        dy = Array(n),\n        boxes = Array(n),\n        m,\n        i,\n        c,\n        r,\n        b,\n        g,\n        px,\n        py,\n        x,\n        y,\n        offset;\n\n    for (i = 0; i < ncols; ++i) xExtent[i] = 0;\n\n    for (i = 0; i < nrows; ++i) yExtent[i] = 0; // determine offsets for each group\n\n\n    for (i = 0; i < n; ++i) {\n      g = groups[i];\n      b = boxes[i] = bbox(g);\n      g.x = g.x || 0;\n      dx[i] = 0;\n      g.y = g.y || 0;\n      dy[i] = 0;\n      c = i % ncols;\n      r = ~~(i / ncols);\n      xMax = Math.max(xMax, px = Math.ceil(b.x2));\n      yMax = Math.max(yMax, py = Math.ceil(b.y2));\n      xExtent[c] = Math.max(xExtent[c], px);\n      yExtent[r] = Math.max(yExtent[r], py);\n      xOffset[i] = padCol + offsetValue$1(b.x1);\n      yOffset[i] = padRow + offsetValue$1(b.y1);\n      if (dirty) view.dirty(groups[i]);\n    } // set initial alignment offsets\n\n\n    for (i = 0; i < n; ++i) {\n      if (i % ncols === 0) xOffset[i] = 0;\n      if (i < ncols) yOffset[i] = 0;\n    } // enforce column alignment constraints\n\n\n    if (alignCol === Each) {\n      for (c = 1; c < ncols; ++c) {\n        for (offset = 0, i = c; i < n; i += ncols) {\n          if (offset < xOffset[i]) offset = xOffset[i];\n        }\n\n        for (i = c; i < n; i += ncols) {\n          xOffset[i] = offset + xExtent[c - 1];\n        }\n      }\n    } else if (alignCol === All) {\n      for (offset = 0, i = 0; i < n; ++i) {\n        if (i % ncols && offset < xOffset[i]) offset = xOffset[i];\n      }\n\n      for (i = 0; i < n; ++i) {\n        if (i % ncols) xOffset[i] = offset + xMax;\n      }\n    } else {\n      for (alignCol = false, c = 1; c < ncols; ++c) {\n        for (i = c; i < n; i += ncols) {\n          xOffset[i] += xExtent[c - 1];\n        }\n      }\n    } // enforce row alignment constraints\n\n\n    if (alignRow === Each) {\n      for (r = 1; r < nrows; ++r) {\n        for (offset = 0, i = r * ncols, m = i + ncols; i < m; ++i) {\n          if (offset < yOffset[i]) offset = yOffset[i];\n        }\n\n        for (i = r * ncols; i < m; ++i) {\n          yOffset[i] = offset + yExtent[r - 1];\n        }\n      }\n    } else if (alignRow === All) {\n      for (offset = 0, i = ncols; i < n; ++i) {\n        if (offset < yOffset[i]) offset = yOffset[i];\n      }\n\n      for (i = ncols; i < n; ++i) {\n        yOffset[i] = offset + yMax;\n      }\n    } else {\n      for (alignRow = false, r = 1; r < nrows; ++r) {\n        for (i = r * ncols, m = i + ncols; i < m; ++i) {\n          yOffset[i] += yExtent[r - 1];\n        }\n      }\n    } // perform horizontal grid layout\n\n\n    for (x = 0, i = 0; i < n; ++i) {\n      x = xOffset[i] + (i % ncols ? x : 0);\n      dx[i] += x - groups[i].x;\n    } // perform vertical grid layout\n\n\n    for (c = 0; c < ncols; ++c) {\n      for (y = 0, i = c; i < n; i += ncols) {\n        y += yOffset[i];\n        dy[i] += y - groups[i].y;\n      }\n    } // perform horizontal centering\n\n\n    if (alignCol && get$1(opt.center, Column) && nrows > 1) {\n      for (i = 0; i < n; ++i) {\n        b = alignCol === All ? xMax : xExtent[i % ncols];\n        x = b - boxes[i].x2 - groups[i].x - dx[i];\n        if (x > 0) dx[i] += x / 2;\n      }\n    } // perform vertical centering\n\n\n    if (alignRow && get$1(opt.center, Row) && ncols !== 1) {\n      for (i = 0; i < n; ++i) {\n        b = alignRow === All ? yMax : yExtent[~~(i / ncols)];\n        y = b - boxes[i].y2 - groups[i].y - dy[i];\n        if (y > 0) dy[i] += y / 2;\n      }\n    } // position grid relative to anchor\n\n\n    for (i = 0; i < n; ++i) {\n      bounds.union(boxes[i].translate(dx[i], dy[i]));\n    }\n\n    x = get$1(opt.anchor, X);\n    y = get$1(opt.anchor, Y);\n\n    switch (get$1(opt.anchor, Column)) {\n      case End$1:\n        x -= bounds.width();\n        break;\n\n      case Middle$1:\n        x -= bounds.width() / 2;\n    }\n\n    switch (get$1(opt.anchor, Row)) {\n      case End$1:\n        y -= bounds.height();\n        break;\n\n      case Middle$1:\n        y -= bounds.height() / 2;\n    }\n\n    x = Math.round(x);\n    y = Math.round(y); // update mark positions, bounds, dirty\n\n    bounds.clear();\n\n    for (i = 0; i < n; ++i) {\n      groups[i].mark.bounds.clear();\n    }\n\n    for (i = 0; i < n; ++i) {\n      g = groups[i];\n      g.x += dx[i] += x;\n      g.y += dy[i] += y;\n      bounds.union(g.mark.bounds.union(g.bounds.translate(dx[i], dy[i])));\n      if (dirty) view.dirty(g);\n    }\n\n    return bounds;\n  }\n\n  function trellisLayout(view, group, opt) {\n    var views = gridLayoutGroups(group),\n        groups = views.marks,\n        bbox = opt.bounds === Flush ? boundFlush : boundFull,\n        off = opt.offset,\n        ncols = opt.columns || groups.length,\n        nrows = ncols <= 0 ? 1 : Math.ceil(groups.length / ncols),\n        cells = nrows * ncols,\n        x,\n        y,\n        x2,\n        y2,\n        anchor,\n        band,\n        offset; // -- initial grid layout\n\n    const bounds = gridLayout(view, groups, opt);\n    if (bounds.empty()) bounds.set(0, 0, 0, 0); // empty grid\n    // -- layout grid headers and footers --\n    // perform row header layout\n\n    if (views.rowheaders) {\n      band = get$1(opt.headerBand, Row, null);\n      x = layoutHeaders(view, views.rowheaders, groups, ncols, nrows, -get$1(off, 'rowHeader'), min, 0, bbox, 'x1', 0, ncols, 1, band);\n    } // perform column header layout\n\n\n    if (views.colheaders) {\n      band = get$1(opt.headerBand, Column, null);\n      y = layoutHeaders(view, views.colheaders, groups, ncols, ncols, -get$1(off, 'columnHeader'), min, 1, bbox, 'y1', 0, 1, ncols, band);\n    } // perform row footer layout\n\n\n    if (views.rowfooters) {\n      band = get$1(opt.footerBand, Row, null);\n      x2 = layoutHeaders(view, views.rowfooters, groups, ncols, nrows, get$1(off, 'rowFooter'), max, 0, bbox, 'x2', ncols - 1, ncols, 1, band);\n    } // perform column footer layout\n\n\n    if (views.colfooters) {\n      band = get$1(opt.footerBand, Column, null);\n      y2 = layoutHeaders(view, views.colfooters, groups, ncols, ncols, get$1(off, 'columnFooter'), max, 1, bbox, 'y2', cells - ncols, 1, ncols, band);\n    } // perform row title layout\n\n\n    if (views.rowtitle) {\n      anchor = get$1(opt.titleAnchor, Row);\n      offset = get$1(off, 'rowTitle');\n      offset = anchor === End$1 ? x2 + offset : x - offset;\n      band = get$1(opt.titleBand, Row, 0.5);\n      layoutTitle(view, views.rowtitle, offset, 0, bounds, band);\n    } // perform column title layout\n\n\n    if (views.coltitle) {\n      anchor = get$1(opt.titleAnchor, Column);\n      offset = get$1(off, 'columnTitle');\n      offset = anchor === End$1 ? y2 + offset : y - offset;\n      band = get$1(opt.titleBand, Column, 0.5);\n      layoutTitle(view, views.coltitle, offset, 1, bounds, band);\n    }\n  }\n\n  function boundFlush(item, field) {\n    return field === 'x1' ? item.x || 0 : field === 'y1' ? item.y || 0 : field === 'x2' ? (item.x || 0) + (item.width || 0) : field === 'y2' ? (item.y || 0) + (item.height || 0) : undefined;\n  }\n\n  function boundFull(item, field) {\n    return item.bounds[field];\n  }\n\n  function layoutHeaders(view, headers, groups, ncols, limit, offset, agg, isX, bound, bf, start, stride, back, band) {\n    var n = groups.length,\n        init = 0,\n        edge = 0,\n        i,\n        j,\n        k,\n        m,\n        b,\n        h,\n        g,\n        x,\n        y; // if no groups, early exit and return 0\n\n    if (!n) return init; // compute margin\n\n    for (i = start; i < n; i += stride) {\n      if (groups[i]) init = agg(init, bound(groups[i], bf));\n    } // if no headers, return margin calculation\n\n\n    if (!headers.length) return init; // check if number of headers exceeds number of rows or columns\n\n    if (headers.length > limit) {\n      view.warn('Grid headers exceed limit: ' + limit);\n      headers = headers.slice(0, limit);\n    } // apply offset\n\n\n    init += offset; // clear mark bounds for all headers\n\n    for (j = 0, m = headers.length; j < m; ++j) {\n      view.dirty(headers[j]);\n      headers[j].mark.bounds.clear();\n    } // layout each header\n\n\n    for (i = start, j = 0, m = headers.length; j < m; ++j, i += stride) {\n      h = headers[j];\n      b = h.mark.bounds; // search for nearest group to align to\n      // necessary if table has empty cells\n\n      for (k = i; k >= 0 && (g = groups[k]) == null; k -= back); // assign coordinates and update bounds\n\n\n      if (isX) {\n        x = band == null ? g.x : Math.round(g.bounds.x1 + band * g.bounds.width());\n        y = init;\n      } else {\n        x = init;\n        y = band == null ? g.y : Math.round(g.bounds.y1 + band * g.bounds.height());\n      }\n\n      b.union(h.bounds.translate(x - (h.x || 0), y - (h.y || 0)));\n      h.x = x;\n      h.y = y;\n      view.dirty(h); // update current edge of layout bounds\n\n      edge = agg(edge, b[bf]);\n    }\n\n    return edge;\n  }\n\n  function layoutTitle(view, g, offset, isX, bounds, band) {\n    if (!g) return;\n    view.dirty(g); // compute title coordinates\n\n    var x = offset,\n        y = offset;\n    isX ? x = Math.round(bounds.x1 + band * bounds.width()) : y = Math.round(bounds.y1 + band * bounds.height()); // assign coordinates and update bounds\n\n    g.bounds.translate(x - (g.x || 0), y - (g.y || 0));\n    g.mark.bounds.clear().union(g.bounds);\n    g.x = x;\n    g.y = y; // queue title for redraw\n\n    view.dirty(g);\n  }\n\n  function lookup$3(config, orient) {\n    const opt = config[orient] || {};\n    return (key, d) => opt[key] != null ? opt[key] : config[key] != null ? config[key] : d;\n  } // if legends specify offset directly, use the maximum specified value\n\n\n  function offsets(legends, value) {\n    let max = -Infinity;\n    legends.forEach(item => {\n      if (item.offset != null) max = Math.max(max, item.offset);\n    });\n    return max > -Infinity ? max : value;\n  }\n\n  function legendParams(g, orient, config, xb, yb, w, h) {\n    const _ = lookup$3(config, orient),\n          offset = offsets(g, _('offset', 0)),\n          anchor = _('anchor', Start$1),\n          mult = anchor === End$1 ? 1 : anchor === Middle$1 ? 0.5 : 0;\n\n    const p = {\n      align: Each,\n      bounds: _('bounds', Flush),\n      columns: _('direction') === 'vertical' ? 1 : g.length,\n      padding: _('margin', 8),\n      center: _('center'),\n      nodirty: true\n    };\n\n    switch (orient) {\n      case Left$1:\n        p.anchor = {\n          x: Math.floor(xb.x1) - offset,\n          column: End$1,\n          y: mult * (h || xb.height() + 2 * xb.y1),\n          row: anchor\n        };\n        break;\n\n      case Right$1:\n        p.anchor = {\n          x: Math.ceil(xb.x2) + offset,\n          y: mult * (h || xb.height() + 2 * xb.y1),\n          row: anchor\n        };\n        break;\n\n      case Top$1:\n        p.anchor = {\n          y: Math.floor(yb.y1) - offset,\n          row: End$1,\n          x: mult * (w || yb.width() + 2 * yb.x1),\n          column: anchor\n        };\n        break;\n\n      case Bottom$1:\n        p.anchor = {\n          y: Math.ceil(yb.y2) + offset,\n          x: mult * (w || yb.width() + 2 * yb.x1),\n          column: anchor\n        };\n        break;\n\n      case TopLeft:\n        p.anchor = {\n          x: offset,\n          y: offset\n        };\n        break;\n\n      case TopRight:\n        p.anchor = {\n          x: w - offset,\n          y: offset,\n          column: End$1\n        };\n        break;\n\n      case BottomLeft:\n        p.anchor = {\n          x: offset,\n          y: h - offset,\n          row: End$1\n        };\n        break;\n\n      case BottomRight:\n        p.anchor = {\n          x: w - offset,\n          y: h - offset,\n          column: End$1,\n          row: End$1\n        };\n        break;\n    }\n\n    return p;\n  }\n\n  function legendLayout(view, legend) {\n    var item = legend.items[0],\n        datum = item.datum,\n        orient = item.orient,\n        bounds = item.bounds,\n        x = item.x,\n        y = item.y,\n        w,\n        h; // cache current bounds for later comparison\n\n    item._bounds ? item._bounds.clear().union(bounds) : item._bounds = bounds.clone();\n    bounds.clear(); // adjust legend to accommodate padding and title\n\n    legendGroupLayout(view, item, item.items[0].items[0]); // aggregate bounds to determine size, and include origin\n\n    bounds = legendBounds(item, bounds);\n    w = 2 * item.padding;\n    h = 2 * item.padding;\n\n    if (!bounds.empty()) {\n      w = Math.ceil(bounds.width() + w);\n      h = Math.ceil(bounds.height() + h);\n    }\n\n    if (datum.type === Symbols$1) {\n      legendEntryLayout(item.items[0].items[0].items[0].items);\n    }\n\n    if (orient !== None) {\n      item.x = x = 0;\n      item.y = y = 0;\n    }\n\n    item.width = w;\n    item.height = h;\n    boundStroke(bounds.set(x, y, x + w, y + h), item);\n    item.mark.bounds.clear().union(bounds);\n    return item;\n  }\n\n  function legendBounds(item, b) {\n    // aggregate item bounds\n    item.items.forEach(_ => b.union(_.bounds)); // anchor to legend origin\n\n    b.x1 = item.padding;\n    b.y1 = item.padding;\n    return b;\n  }\n\n  function legendGroupLayout(view, item, entry) {\n    var pad = item.padding,\n        ex = pad - entry.x,\n        ey = pad - entry.y;\n\n    if (!item.datum.title) {\n      if (ex || ey) translate(view, entry, ex, ey);\n    } else {\n      var title = item.items[1].items[0],\n          anchor = title.anchor,\n          tpad = item.titlePadding || 0,\n          tx = pad - title.x,\n          ty = pad - title.y;\n\n      switch (title.orient) {\n        case Left$1:\n          ex += Math.ceil(title.bounds.width()) + tpad;\n          break;\n\n        case Right$1:\n        case Bottom$1:\n          break;\n\n        default:\n          ey += title.bounds.height() + tpad;\n      }\n\n      if (ex || ey) translate(view, entry, ex, ey);\n\n      switch (title.orient) {\n        case Left$1:\n          ty += legendTitleOffset(item, entry, title, anchor, 1, 1);\n          break;\n\n        case Right$1:\n          tx += legendTitleOffset(item, entry, title, End$1, 0, 0) + tpad;\n          ty += legendTitleOffset(item, entry, title, anchor, 1, 1);\n          break;\n\n        case Bottom$1:\n          tx += legendTitleOffset(item, entry, title, anchor, 0, 0);\n          ty += legendTitleOffset(item, entry, title, End$1, -1, 0, 1) + tpad;\n          break;\n\n        default:\n          tx += legendTitleOffset(item, entry, title, anchor, 0, 0);\n      }\n\n      if (tx || ty) translate(view, title, tx, ty); // translate legend if title pushes into negative coordinates\n\n      if ((tx = Math.round(title.bounds.x1 - pad)) < 0) {\n        translate(view, entry, -tx, 0);\n        translate(view, title, -tx, 0);\n      }\n    }\n  }\n\n  function legendTitleOffset(item, entry, title, anchor, y, lr, noBar) {\n    const grad = item.datum.type !== 'symbol',\n          vgrad = title.datum.vgrad,\n          e = grad && (lr || !vgrad) && !noBar ? entry.items[0] : entry,\n          s = e.bounds[y ? 'y2' : 'x2'] - item.padding,\n          u = vgrad && lr ? s : 0,\n          v = vgrad && lr ? 0 : s,\n          o = y <= 0 ? 0 : multiLineOffset(title);\n    return Math.round(anchor === Start$1 ? u : anchor === End$1 ? v - o : 0.5 * (s - o));\n  }\n\n  function translate(view, item, dx, dy) {\n    item.x += dx;\n    item.y += dy;\n    item.bounds.translate(dx, dy);\n    item.mark.bounds.translate(dx, dy);\n    view.dirty(item);\n  }\n\n  function legendEntryLayout(entries) {\n    // get max widths for each column\n    const widths = entries.reduce((w, g) => {\n      w[g.column] = Math.max(g.bounds.x2 - g.x, w[g.column] || 0);\n      return w;\n    }, {}); // set dimensions of legend entry groups\n\n    entries.forEach(g => {\n      g.width = widths[g.column];\n      g.height = g.bounds.y2 - g.y;\n    });\n  }\n\n  function titleLayout(view, mark, width, height, viewBounds) {\n    var group = mark.items[0],\n        frame = group.frame,\n        orient = group.orient,\n        anchor = group.anchor,\n        offset = group.offset,\n        padding = group.padding,\n        title = group.items[0].items[0],\n        subtitle = group.items[1] && group.items[1].items[0],\n        end = orient === Left$1 || orient === Right$1 ? height : width,\n        start = 0,\n        x = 0,\n        y = 0,\n        sx = 0,\n        sy = 0,\n        pos;\n\n    if (frame !== Group) {\n      orient === Left$1 ? (start = viewBounds.y2, end = viewBounds.y1) : orient === Right$1 ? (start = viewBounds.y1, end = viewBounds.y2) : (start = viewBounds.x1, end = viewBounds.x2);\n    } else if (orient === Left$1) {\n      start = height, end = 0;\n    }\n\n    pos = anchor === Start$1 ? start : anchor === End$1 ? end : (start + end) / 2;\n\n    if (subtitle && subtitle.text) {\n      // position subtitle\n      switch (orient) {\n        case Top$1:\n        case Bottom$1:\n          sy = title.bounds.height() + padding;\n          break;\n\n        case Left$1:\n          sx = title.bounds.width() + padding;\n          break;\n\n        case Right$1:\n          sx = -title.bounds.width() - padding;\n          break;\n      }\n\n      tempBounds.clear().union(subtitle.bounds);\n      tempBounds.translate(sx - (subtitle.x || 0), sy - (subtitle.y || 0));\n\n      if (set$2(subtitle, 'x', sx) | set$2(subtitle, 'y', sy)) {\n        view.dirty(subtitle);\n        subtitle.bounds.clear().union(tempBounds);\n        subtitle.mark.bounds.clear().union(tempBounds);\n        view.dirty(subtitle);\n      }\n\n      tempBounds.clear().union(subtitle.bounds);\n    } else {\n      tempBounds.clear();\n    }\n\n    tempBounds.union(title.bounds); // position title group\n\n    switch (orient) {\n      case Top$1:\n        x = pos;\n        y = viewBounds.y1 - tempBounds.height() - offset;\n        break;\n\n      case Left$1:\n        x = viewBounds.x1 - tempBounds.width() - offset;\n        y = pos;\n        break;\n\n      case Right$1:\n        x = viewBounds.x2 + tempBounds.width() + offset;\n        y = pos;\n        break;\n\n      case Bottom$1:\n        x = pos;\n        y = viewBounds.y2 + offset;\n        break;\n\n      default:\n        x = group.x;\n        y = group.y;\n    }\n\n    if (set$2(group, 'x', x) | set$2(group, 'y', y)) {\n      tempBounds.translate(x, y);\n      view.dirty(group);\n      group.bounds.clear().union(tempBounds);\n      mark.bounds.clear().union(tempBounds);\n      view.dirty(group);\n    }\n\n    return group.bounds;\n  }\n  /**\n   * Layout view elements such as axes and legends.\n   * Also performs size adjustments.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.mark - Scenegraph mark of groups to layout.\n   */\n\n\n  function ViewLayout$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  inherits(ViewLayout$1, Transform, {\n    transform(_, pulse) {\n      const view = pulse.dataflow;\n\n      _.mark.items.forEach(group => {\n        if (_.layout) trellisLayout(view, group, _.layout);\n        layoutGroup(view, group, _);\n      });\n\n      return shouldReflow(_.mark.group) ? pulse.reflow() : pulse;\n    }\n\n  });\n\n  function shouldReflow(group) {\n    // We typically should reflow if layout is invoked (#2568), as child items\n    // may have resized and reflow ensures group bounds are re-calculated.\n    // However, legend entries have a special exception to avoid instability.\n    // For example, if a selected legend symbol gains a stroke on hover,\n    // we don't want to re-position subsequent elements in the legend.\n    return group && group.mark.role !== 'legend-entry';\n  }\n\n  function layoutGroup(view, group, _) {\n    var items = group.items,\n        width = Math.max(0, group.width || 0),\n        height = Math.max(0, group.height || 0),\n        viewBounds = new Bounds().set(0, 0, width, height),\n        xBounds = viewBounds.clone(),\n        yBounds = viewBounds.clone(),\n        legends = [],\n        title,\n        mark,\n        orient,\n        b,\n        i,\n        n; // layout axes, gather legends, collect bounds\n\n    for (i = 0, n = items.length; i < n; ++i) {\n      mark = items[i];\n\n      switch (mark.role) {\n        case AxisRole$1:\n          b = isYAxis(mark) ? xBounds : yBounds;\n          b.union(axisLayout(view, mark, width, height));\n          break;\n\n        case TitleRole$1:\n          title = mark;\n          break;\n\n        case LegendRole$1:\n          legends.push(legendLayout(view, mark));\n          break;\n\n        case FrameRole$1:\n        case ScopeRole$1:\n        case RowHeader:\n        case RowFooter:\n        case RowTitle:\n        case ColHeader:\n        case ColFooter:\n        case ColTitle:\n          xBounds.union(mark.bounds);\n          yBounds.union(mark.bounds);\n          break;\n\n        default:\n          viewBounds.union(mark.bounds);\n      }\n    } // layout legends, adjust viewBounds\n\n\n    if (legends.length) {\n      // group legends by orient\n      const l = {};\n      legends.forEach(item => {\n        orient = item.orient || Right$1;\n        if (orient !== None) (l[orient] || (l[orient] = [])).push(item);\n      }); // perform grid layout for each orient group\n\n      for (const orient in l) {\n        const g = l[orient];\n        gridLayout(view, g, legendParams(g, orient, _.legends, xBounds, yBounds, width, height));\n      } // update view bounds\n\n\n      legends.forEach(item => {\n        const b = item.bounds;\n\n        if (!b.equals(item._bounds)) {\n          item.bounds = item._bounds;\n          view.dirty(item); // dirty previous location\n\n          item.bounds = b;\n          view.dirty(item);\n        }\n\n        if (_.autosize && _.autosize.type === Fit) {\n          // For autosize fit, incorporate the orthogonal dimension only.\n          // Legends that overrun the chart area will then be clipped;\n          // otherwise the chart area gets reduced to nothing!\n          switch (item.orient) {\n            case Left$1:\n            case Right$1:\n              viewBounds.add(b.x1, 0).add(b.x2, 0);\n              break;\n\n            case Top$1:\n            case Bottom$1:\n              viewBounds.add(0, b.y1).add(0, b.y2);\n          }\n        } else {\n          viewBounds.union(b);\n        }\n      });\n    } // combine bounding boxes\n\n\n    viewBounds.union(xBounds).union(yBounds); // layout title, adjust bounds\n\n    if (title) {\n      viewBounds.union(titleLayout(view, title, width, height, viewBounds));\n    } // override aggregated view bounds if content is clipped\n\n\n    if (group.clip) {\n      viewBounds.set(0, 0, group.width || 0, group.height || 0);\n    } // perform size adjustment\n\n\n    viewSizeLayout(view, group, viewBounds, _);\n  }\n\n  function viewSizeLayout(view, group, viewBounds, _) {\n    const auto = _.autosize || {},\n          type = auto.type;\n    if (view._autosize < 1 || !type) return;\n    let viewWidth = view._width,\n        viewHeight = view._height,\n        width = Math.max(0, group.width || 0),\n        left = Math.max(0, Math.ceil(-viewBounds.x1)),\n        height = Math.max(0, group.height || 0),\n        top = Math.max(0, Math.ceil(-viewBounds.y1));\n    const right = Math.max(0, Math.ceil(viewBounds.x2 - width)),\n          bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));\n\n    if (auto.contains === Padding$1) {\n      const padding = view.padding();\n      viewWidth -= padding.left + padding.right;\n      viewHeight -= padding.top + padding.bottom;\n    }\n\n    if (type === None) {\n      left = 0;\n      top = 0;\n      width = viewWidth;\n      height = viewHeight;\n    } else if (type === Fit) {\n      width = Math.max(0, viewWidth - left - right);\n      height = Math.max(0, viewHeight - top - bottom);\n    } else if (type === FitX) {\n      width = Math.max(0, viewWidth - left - right);\n      viewHeight = height + top + bottom;\n    } else if (type === FitY) {\n      viewWidth = width + left + right;\n      height = Math.max(0, viewHeight - top - bottom);\n    } else if (type === Pad) {\n      viewWidth = width + left + right;\n      viewHeight = height + top + bottom;\n    }\n\n    view._resizeView(viewWidth, viewHeight, width, height, [left, top], auto.resize);\n  }\n\n  var vtx = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    bound: Bound$1,\n    identifier: Identifier$1,\n    mark: Mark$1,\n    overlap: Overlap$1,\n    render: Render$1,\n    viewlayout: ViewLayout$1\n  });\n\n  /**\n   * Generates axis ticks for visualizing a spatial scale.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Scale} params.scale - The scale to generate ticks for.\n   * @param {*} [params.count=10] - The approximate number of ticks, or\n   *   desired tick interval, to use.\n   * @param {Array<*>} [params.values] - The exact tick values to use.\n   *   These must be legal domain values for the provided scale.\n   *   If provided, the count argument is ignored.\n   * @param {function(*):string} [params.formatSpecifier] - A format specifier\n   *   to use in conjunction with scale.tickFormat. Legal values are\n   *   any valid d3 4.0 format specifier.\n   * @param {function(*):string} [params.format] - The format function to use.\n   *   If provided, the formatSpecifier argument is ignored.\n   */\n\n  function AxisTicks$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  inherits(AxisTicks$1, Transform, {\n    transform(_, pulse) {\n      if (this.value && !_.modified()) {\n        return pulse.StopPropagation;\n      }\n\n      var locale = pulse.dataflow.locale(),\n          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          ticks = this.value,\n          scale = _.scale,\n          tally = _.count == null ? _.values ? _.values.length : 10 : _.count,\n          count = tickCount(scale, tally, _.minstep),\n          format = _.format || tickFormat(locale, scale, count, _.formatSpecifier, _.formatType, !!_.values),\n          values = _.values ? validTicks(scale, _.values, count) : tickValues(scale, count);\n      if (ticks) out.rem = ticks;\n      ticks = values.map((value, i) => ingest$1({\n        index: i / (values.length - 1 || 1),\n        value: value,\n        label: format(value)\n      }));\n\n      if (_.extra && ticks.length) {\n        // add an extra tick pegged to the initial domain value\n        // this is used to generate axes with 'binned' domains\n        ticks.push(ingest$1({\n          index: -1,\n          extra: {\n            value: ticks[0].value\n          },\n          label: ''\n        }));\n      }\n\n      out.source = ticks;\n      out.add = ticks;\n      this.value = ticks;\n      return out;\n    }\n\n  });\n  /**\n   * Joins a set of data elements against a set of visual items.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): object} [params.item] - An item generator function.\n   * @param {function(object): *} [params.key] - The key field associating data and visual items.\n   */\n\n  function DataJoin$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  function defaultItemCreate() {\n    return ingest$1({});\n  }\n\n  function newMap(key) {\n    const map = fastmap().test(t => t.exit);\n\n    map.lookup = t => map.get(key(t));\n\n    return map;\n  }\n\n  inherits(DataJoin$1, Transform, {\n    transform(_, pulse) {\n      var df = pulse.dataflow,\n          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          item = _.item || defaultItemCreate,\n          key = _.key || tupleid,\n          map = this.value; // prevent transient (e.g., hover) requests from\n      // cascading across marks derived from marks\n\n      if (isArray(out.encode)) {\n        out.encode = null;\n      }\n\n      if (map && (_.modified('key') || pulse.modified(key))) {\n        error('DataJoin does not support modified key function or fields.');\n      }\n\n      if (!map) {\n        pulse = pulse.addAll();\n        this.value = map = newMap(key);\n      }\n\n      pulse.visit(pulse.ADD, t => {\n        const k = key(t);\n        let x = map.get(k);\n\n        if (x) {\n          if (x.exit) {\n            map.empty--;\n            out.add.push(x);\n          } else {\n            out.mod.push(x);\n          }\n        } else {\n          x = item(t);\n          map.set(k, x);\n          out.add.push(x);\n        }\n\n        x.datum = t;\n        x.exit = false;\n      });\n      pulse.visit(pulse.MOD, t => {\n        const k = key(t),\n              x = map.get(k);\n\n        if (x) {\n          x.datum = t;\n          out.mod.push(x);\n        }\n      });\n      pulse.visit(pulse.REM, t => {\n        const k = key(t),\n              x = map.get(k);\n\n        if (t === x.datum && !x.exit) {\n          out.rem.push(x);\n          x.exit = true;\n          ++map.empty;\n        }\n      });\n      if (pulse.changed(pulse.ADD_MOD)) out.modifies('datum');\n\n      if (pulse.clean() || _.clean && map.empty > df.cleanThreshold) {\n        df.runAfter(map.clean);\n      }\n\n      return out;\n    }\n\n  });\n  /**\n   * Invokes encoding functions for visual items.\n   * @constructor\n   * @param {object} params - The parameters to the encoding functions. This\n   *   parameter object will be passed through to all invoked encoding functions.\n   * @param {object} [params.mod=false] - Flag indicating if tuples in the input\n   *   mod set that are unmodified by encoders should be included in the output.\n   * @param {object} param.encoders - The encoding functions\n   * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set\n   * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set\n   * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set\n   */\n\n  function Encode$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  inherits(Encode$1, Transform, {\n    transform(_, pulse) {\n      var out = pulse.fork(pulse.ADD_REM),\n          fmod = _.mod || false,\n          encoders = _.encoders,\n          encode = pulse.encode; // if an array, the encode directive includes additional sets\n      // that must be defined in order for the primary set to be invoked\n      // e.g., only run the update set if the hover set is defined\n\n      if (isArray(encode)) {\n        if (out.changed() || encode.every(e => encoders[e])) {\n          encode = encode[0];\n          out.encode = null; // consume targeted encode directive\n        } else {\n          return pulse.StopPropagation;\n        }\n      } // marshall encoder functions\n\n\n      var reenter = encode === 'enter',\n          update = encoders.update || falsy,\n          enter = encoders.enter || falsy,\n          exit = encoders.exit || falsy,\n          set = (encode && !reenter ? encoders[encode] : update) || falsy;\n\n      if (pulse.changed(pulse.ADD)) {\n        pulse.visit(pulse.ADD, t => {\n          enter(t, _);\n          update(t, _);\n        });\n        out.modifies(enter.output);\n        out.modifies(update.output);\n\n        if (set !== falsy && set !== update) {\n          pulse.visit(pulse.ADD, t => {\n            set(t, _);\n          });\n          out.modifies(set.output);\n        }\n      }\n\n      if (pulse.changed(pulse.REM) && exit !== falsy) {\n        pulse.visit(pulse.REM, t => {\n          exit(t, _);\n        });\n        out.modifies(exit.output);\n      }\n\n      if (reenter || set !== falsy) {\n        const flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);\n\n        if (reenter) {\n          pulse.visit(flag, t => {\n            const mod = enter(t, _) || fmod;\n            if (set(t, _) || mod) out.mod.push(t);\n          });\n          if (out.mod.length) out.modifies(enter.output);\n        } else {\n          pulse.visit(flag, t => {\n            if (set(t, _) || fmod) out.mod.push(t);\n          });\n        }\n\n        if (out.mod.length) out.modifies(set.output);\n      }\n\n      return out.changed() ? out : pulse.StopPropagation;\n    }\n\n  });\n  /**\n   * Generates legend entries for visualizing a scale.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Scale} params.scale - The scale to generate items for.\n   * @param {*} [params.count=5] - The approximate number of items, or\n   *   desired tick interval, to use.\n   * @param {*} [params.limit] - The maximum number of entries to\n   *   include in a symbol legend.\n   * @param {Array<*>} [params.values] - The exact tick values to use.\n   *   These must be legal domain values for the provided scale.\n   *   If provided, the count argument is ignored.\n   * @param {string} [params.formatSpecifier] - A format specifier\n   *   to use in conjunction with scale.tickFormat. Legal values are\n   *   any valid D3 format specifier string.\n   * @param {function(*):string} [params.format] - The format function to use.\n   *   If provided, the formatSpecifier argument is ignored.\n   */\n\n  function LegendEntries$1(params) {\n    Transform.call(this, [], params);\n  }\n\n  inherits(LegendEntries$1, Transform, {\n    transform(_, pulse) {\n      if (this.value != null && !_.modified()) {\n        return pulse.StopPropagation;\n      }\n\n      var locale = pulse.dataflow.locale(),\n          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          items = this.value,\n          type = _.type || SymbolLegend,\n          scale = _.scale,\n          limit = +_.limit,\n          count = tickCount(scale, _.count == null ? 5 : _.count, _.minstep),\n          lskip = !!_.values || type === SymbolLegend,\n          format = _.format || labelFormat(locale, scale, count, type, _.formatSpecifier, _.formatType, lskip),\n          values = _.values || labelValues(scale, count),\n          domain,\n          fraction,\n          size,\n          offset,\n          ellipsis;\n      if (items) out.rem = items;\n\n      if (type === SymbolLegend) {\n        if (limit && values.length > limit) {\n          pulse.dataflow.warn('Symbol legend count exceeds limit, filtering items.');\n          items = values.slice(0, limit - 1);\n          ellipsis = true;\n        } else {\n          items = values;\n        }\n\n        if (isFunction(size = _.size)) {\n          // if first value maps to size zero, remove from list (vega#717)\n          if (!_.values && scale(items[0]) === 0) {\n            items = items.slice(1);\n          } // compute size offset for legend entries\n\n\n          offset = items.reduce((max, value) => Math.max(max, size(value, _)), 0);\n        } else {\n          size = constant$4(offset = size || 8);\n        }\n\n        items = items.map((value, index) => ingest$1({\n          index: index,\n          label: format(value, index, items),\n          value: value,\n          offset: offset,\n          size: size(value, _)\n        }));\n\n        if (ellipsis) {\n          ellipsis = values[items.length];\n          items.push(ingest$1({\n            index: items.length,\n            label: `\\u2026${values.length - items.length} entries`,\n            value: ellipsis,\n            offset: offset,\n            size: size(ellipsis, _)\n          }));\n        }\n      } else if (type === GradientLegend) {\n        domain = scale.domain(), fraction = scaleFraction(scale, domain[0], peek$1(domain)); // if automatic label generation produces 2 or fewer values,\n        // use the domain end points instead (fixes vega/vega#1364)\n\n        if (values.length < 3 && !_.values && domain[0] !== peek$1(domain)) {\n          values = [domain[0], peek$1(domain)];\n        }\n\n        items = values.map((value, index) => ingest$1({\n          index: index,\n          label: format(value, index, values),\n          value: value,\n          perc: fraction(value)\n        }));\n      } else {\n        size = values.length - 1;\n        fraction = labelFraction(scale);\n        items = values.map((value, index) => ingest$1({\n          index: index,\n          label: format(value, index, values),\n          value: value,\n          perc: index ? fraction(value) : 0,\n          perc2: index === size ? 1 : fraction(values[index + 1])\n        }));\n      }\n\n      out.source = items;\n      out.add = items;\n      this.value = items;\n      return out;\n    }\n\n  });\n\n  const sourceX = t => t.source.x;\n\n  const sourceY = t => t.source.y;\n\n  const targetX = t => t.target.x;\n\n  const targetY = t => t.target.y;\n  /**\n   * Layout paths linking source and target elements.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n\n  function LinkPath(params) {\n    Transform.call(this, {}, params);\n  }\n\n  LinkPath.Definition = {\n    'type': 'LinkPath',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'sourceX',\n      'type': 'field',\n      'default': 'source.x'\n    }, {\n      'name': 'sourceY',\n      'type': 'field',\n      'default': 'source.y'\n    }, {\n      'name': 'targetX',\n      'type': 'field',\n      'default': 'target.x'\n    }, {\n      'name': 'targetY',\n      'type': 'field',\n      'default': 'target.y'\n    }, {\n      'name': 'orient',\n      'type': 'enum',\n      'default': 'vertical',\n      'values': ['horizontal', 'vertical', 'radial']\n    }, {\n      'name': 'shape',\n      'type': 'enum',\n      'default': 'line',\n      'values': ['line', 'arc', 'curve', 'diagonal', 'orthogonal']\n    }, {\n      'name': 'require',\n      'type': 'signal'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': 'path'\n    }]\n  };\n  inherits(LinkPath, Transform, {\n    transform(_, pulse) {\n      var sx = _.sourceX || sourceX,\n          sy = _.sourceY || sourceY,\n          tx = _.targetX || targetX,\n          ty = _.targetY || targetY,\n          as = _.as || 'path',\n          orient = _.orient || 'vertical',\n          shape = _.shape || 'line',\n          path = Paths.get(shape + '-' + orient) || Paths.get(shape);\n\n      if (!path) {\n        error('LinkPath unsupported type: ' + _.shape + (_.orient ? '-' + _.orient : ''));\n      }\n\n      pulse.visit(pulse.SOURCE, t => {\n        t[as] = path(sx(t), sy(t), tx(t), ty(t));\n      });\n      return pulse.reflow(_.modified()).modifies(as);\n    }\n\n  });\n\n  const line = (sx, sy, tx, ty) => 'M' + sx + ',' + sy + 'L' + tx + ',' + ty;\n\n  const lineR = (sa, sr, ta, tr) => line(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));\n\n  const arc = (sx, sy, tx, ty) => {\n    var dx = tx - sx,\n        dy = ty - sy,\n        rr = Math.sqrt(dx * dx + dy * dy) / 2,\n        ra = 180 * Math.atan2(dy, dx) / Math.PI;\n    return 'M' + sx + ',' + sy + 'A' + rr + ',' + rr + ' ' + ra + ' 0 1' + ' ' + tx + ',' + ty;\n  };\n\n  const arcR = (sa, sr, ta, tr) => arc(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));\n\n  const curve = (sx, sy, tx, ty) => {\n    const dx = tx - sx,\n          dy = ty - sy,\n          ix = 0.2 * (dx + dy),\n          iy = 0.2 * (dy - dx);\n    return 'M' + sx + ',' + sy + 'C' + (sx + ix) + ',' + (sy + iy) + ' ' + (tx + iy) + ',' + (ty - ix) + ' ' + tx + ',' + ty;\n  };\n\n  const curveR = (sa, sr, ta, tr) => curve(sr * Math.cos(sa), sr * Math.sin(sa), tr * Math.cos(ta), tr * Math.sin(ta));\n\n  const orthoX = (sx, sy, tx, ty) => 'M' + sx + ',' + sy + 'V' + ty + 'H' + tx;\n\n  const orthoY = (sx, sy, tx, ty) => 'M' + sx + ',' + sy + 'H' + tx + 'V' + ty;\n\n  const orthoR = (sa, sr, ta, tr) => {\n    const sc = Math.cos(sa),\n          ss = Math.sin(sa),\n          tc = Math.cos(ta),\n          ts = Math.sin(ta),\n          sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;\n    return 'M' + sr * sc + ',' + sr * ss + 'A' + sr + ',' + sr + ' 0 0,' + (sf ? 1 : 0) + ' ' + sr * tc + ',' + sr * ts + 'L' + tr * tc + ',' + tr * ts;\n  };\n\n  const diagonalX = (sx, sy, tx, ty) => {\n    const m = (sx + tx) / 2;\n    return 'M' + sx + ',' + sy + 'C' + m + ',' + sy + ' ' + m + ',' + ty + ' ' + tx + ',' + ty;\n  };\n\n  const diagonalY = (sx, sy, tx, ty) => {\n    const m = (sy + ty) / 2;\n    return 'M' + sx + ',' + sy + 'C' + sx + ',' + m + ' ' + tx + ',' + m + ' ' + tx + ',' + ty;\n  };\n\n  const diagonalR = (sa, sr, ta, tr) => {\n    const sc = Math.cos(sa),\n          ss = Math.sin(sa),\n          tc = Math.cos(ta),\n          ts = Math.sin(ta),\n          mr = (sr + tr) / 2;\n    return 'M' + sr * sc + ',' + sr * ss + 'C' + mr * sc + ',' + mr * ss + ' ' + mr * tc + ',' + mr * ts + ' ' + tr * tc + ',' + tr * ts;\n  };\n\n  const Paths = fastmap({\n    'line': line,\n    'line-radial': lineR,\n    'arc': arc,\n    'arc-radial': arcR,\n    'curve': curve,\n    'curve-radial': curveR,\n    'orthogonal-horizontal': orthoX,\n    'orthogonal-vertical': orthoY,\n    'orthogonal-radial': orthoR,\n    'diagonal-horizontal': diagonalX,\n    'diagonal-vertical': diagonalY,\n    'diagonal-radial': diagonalR\n  });\n  /**\n   * Pie and donut chart layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size pie segments.\n   * @param {number} [params.startAngle=0] - The start angle (in radians) of the layout.\n   * @param {number} [params.endAngle=2\u03c0] - The end angle (in radians) of the layout.\n   * @param {boolean} [params.sort] - Boolean flag for sorting sectors by value.\n   */\n\n  function Pie(params) {\n    Transform.call(this, null, params);\n  }\n\n  Pie.Definition = {\n    'type': 'Pie',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'startAngle',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'endAngle',\n      'type': 'number',\n      'default': 6.283185307179586\n    }, {\n      'name': 'sort',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['startAngle', 'endAngle']\n    }]\n  };\n  inherits(Pie, Transform, {\n    transform(_, pulse) {\n      var as = _.as || ['startAngle', 'endAngle'],\n          startAngle = as[0],\n          endAngle = as[1],\n          field = _.field || one$2,\n          start = _.startAngle || 0,\n          stop = _.endAngle != null ? _.endAngle : 2 * Math.PI,\n          data = pulse.source,\n          values = data.map(field),\n          n = values.length,\n          a = start,\n          k = (stop - start) / sum(values),\n          index = range$1$1(n),\n          i,\n          t,\n          v;\n\n      if (_.sort) {\n        index.sort((a, b) => values[a] - values[b]);\n      }\n\n      for (i = 0; i < n; ++i) {\n        v = values[index[i]];\n        t = data[index[i]];\n        t[startAngle] = a;\n        t[endAngle] = a += v * k;\n      }\n\n      this.value = values;\n      return pulse.reflow(_.modified()).modifies(as);\n    }\n\n  });\n  const DEFAULT_COUNT = 5;\n\n  function includeZero(scale) {\n    const type = scale.type;\n    return !scale.bins && (type === Linear || type === Pow || type === Sqrt);\n  }\n\n  function includePad(type) {\n    return isContinuous(type) && type !== Sequential;\n  }\n\n  const SKIP$1 = toSet(['set', 'modified', 'clear', 'type', 'scheme', 'schemeExtent', 'schemeCount', 'domain', 'domainMin', 'domainMid', 'domainMax', 'domainRaw', 'domainImplicit', 'nice', 'zero', 'bins', 'range', 'rangeStep', 'round', 'reverse', 'interpolate', 'interpolateGamma']);\n  /**\n   * Maintains a scale function mapping data values to visual channels.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n  function Scale$1(params) {\n    Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n\n  inherits(Scale$1, Transform, {\n    transform(_, pulse) {\n      var df = pulse.dataflow,\n          scale$1 = this.value,\n          key = scaleKey(_);\n\n      if (!scale$1 || key !== scale$1.type) {\n        this.value = scale$1 = scale$4(key)();\n      }\n\n      for (key in _) if (!SKIP$1[key]) {\n        // padding is a scale property for band/point but not others\n        if (key === 'padding' && includePad(scale$1.type)) continue; // invoke scale property setter, raise warning if not found\n\n        isFunction(scale$1[key]) ? scale$1[key](_[key]) : df.warn('Unsupported scale property: ' + key);\n      }\n\n      configureRange(scale$1, _, configureBins(scale$1, _, configureDomain(scale$1, _, df)));\n      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n    }\n\n  });\n\n  function scaleKey(_) {\n    var t = _.type,\n        d = '',\n        n; // backwards compatibility pre Vega 5.\n\n    if (t === Sequential) return Sequential + '-' + Linear;\n\n    if (isContinuousColor(_)) {\n      n = _.rawDomain ? _.rawDomain.length : _.domain ? _.domain.length + +(_.domainMid != null) : 0;\n      d = n === 2 ? Sequential + '-' : n === 3 ? Diverging + '-' : '';\n    }\n\n    return (d + t || Linear).toLowerCase();\n  }\n\n  function isContinuousColor(_) {\n    const t = _.type;\n    return isContinuous(t) && t !== Time && t !== UTC && (_.scheme || _.range && _.range.length && _.range.every(isString));\n  }\n\n  function configureDomain(scale, _, df) {\n    // check raw domain, if provided use that and exit early\n    const raw = rawDomain(scale, _.domainRaw, df);\n    if (raw > -1) return raw;\n    var domain = _.domain,\n        type = scale.type,\n        zero = _.zero || _.zero === undefined && includeZero(scale),\n        n,\n        mid;\n    if (!domain) return 0; // adjust continuous domain for minimum pixel padding\n\n    if (includePad(type) && _.padding && domain[0] !== peek$1(domain)) {\n      domain = padDomain(type, domain, _.range, _.padding, _.exponent, _.constant);\n    } // adjust domain based on zero, min, max settings\n\n\n    if (zero || _.domainMin != null || _.domainMax != null || _.domainMid != null) {\n      n = (domain = domain.slice()).length - 1 || 1;\n\n      if (zero) {\n        if (domain[0] > 0) domain[0] = 0;\n        if (domain[n] < 0) domain[n] = 0;\n      }\n\n      if (_.domainMin != null) domain[0] = _.domainMin;\n      if (_.domainMax != null) domain[n] = _.domainMax;\n\n      if (_.domainMid != null) {\n        mid = _.domainMid;\n        const i = mid > domain[n] ? n + 1 : mid < domain[0] ? 0 : n;\n        if (i !== n) df.warn('Scale domainMid exceeds domain min or max.', mid);\n        domain.splice(i, 0, mid);\n      }\n    } // set the scale domain\n\n\n    scale.domain(domainCheck(type, domain, df)); // if ordinal scale domain is defined, prevent implicit\n    // domain construction as side-effect of scale lookup\n\n    if (type === Ordinal) {\n      scale.unknown(_.domainImplicit ? implicit : undefined);\n    } // perform 'nice' adjustment as requested\n\n\n    if (_.nice && scale.nice) {\n      scale.nice(_.nice !== true && tickCount(scale, _.nice) || null);\n    } // return the cardinality of the domain\n\n\n    return domain.length;\n  }\n\n  function rawDomain(scale, raw, df) {\n    if (raw) {\n      scale.domain(domainCheck(scale.type, raw, df));\n      return raw.length;\n    } else {\n      return -1;\n    }\n  }\n\n  function padDomain(type, domain, range, pad, exponent, constant) {\n    var span = Math.abs(peek$1(range) - range[0]),\n        frac = span / (span - 2 * pad),\n        d = type === Log ? zoomLog(domain, null, frac) : type === Sqrt ? zoomPow(domain, null, frac, 0.5) : type === Pow ? zoomPow(domain, null, frac, exponent || 1) : type === Symlog ? zoomSymlog(domain, null, frac, constant || 1) : zoomLinear(domain, null, frac);\n    domain = domain.slice();\n    domain[0] = d[0];\n    domain[domain.length - 1] = d[1];\n    return domain;\n  }\n\n  function domainCheck(type, domain, df) {\n    if (isLogarithmic(type)) {\n      // sum signs of domain values\n      // if all pos or all neg, abs(sum) === domain.length\n      var s = Math.abs(domain.reduce((s, v) => s + (v < 0 ? -1 : v > 0 ? 1 : 0), 0));\n\n      if (s !== domain.length) {\n        df.warn('Log scale domain includes zero: ' + $(domain));\n      }\n    }\n\n    return domain;\n  }\n\n  function configureBins(scale, _, count) {\n    let bins = _.bins;\n\n    if (bins && !isArray(bins)) {\n      // generate bin boundary array\n      const domain = scale.domain(),\n            lo = domain[0],\n            hi = peek$1(domain),\n            step = bins.step;\n      let start = bins.start == null ? lo : bins.start,\n          stop = bins.stop == null ? hi : bins.stop;\n      if (!step) error('Scale bins parameter missing step property.');\n      if (start < lo) start = step * Math.ceil(lo / step);\n      if (stop > hi) stop = step * Math.floor(hi / step);\n      bins = range$1$1(start, stop + step / 2, step);\n    }\n\n    if (bins) {\n      // assign bin boundaries to scale instance\n      scale.bins = bins;\n    } else if (scale.bins) {\n      // no current bins, remove bins if previously set\n      delete scale.bins;\n    } // special handling for bin-ordinal scales\n\n\n    if (scale.type === BinOrdinal) {\n      if (!bins) {\n        // the domain specifies the bins\n        scale.bins = scale.domain();\n      } else if (!_.domain && !_.domainRaw) {\n        // the bins specify the domain\n        scale.domain(bins);\n        count = bins.length;\n      }\n    } // return domain cardinality\n\n\n    return count;\n  }\n\n  function configureRange(scale, _, count) {\n    var type = scale.type,\n        round = _.round || false,\n        range = _.range; // if range step specified, calculate full range extent\n\n    if (_.rangeStep != null) {\n      range = configureRangeStep(type, _, count);\n    } // else if a range scheme is defined, use that\n    else if (_.scheme) {\n        range = configureScheme(type, _, count);\n\n        if (isFunction(range)) {\n          if (scale.interpolator) {\n            return scale.interpolator(range);\n          } else {\n            error(`Scale type ${type} does not support interpolating color schemes.`);\n          }\n        }\n      } // given a range array for an interpolating scale, convert to interpolator\n\n\n    if (range && isInterpolating(type)) {\n      return scale.interpolator(interpolateColors(flip(range, _.reverse), _.interpolate, _.interpolateGamma));\n    } // configure rounding / interpolation\n\n\n    if (range && _.interpolate && scale.interpolate) {\n      scale.interpolate(interpolate(_.interpolate, _.interpolateGamma));\n    } else if (isFunction(scale.round)) {\n      scale.round(round);\n    } else if (isFunction(scale.rangeRound)) {\n      scale.interpolate(round ? interpolateRound : interpolate$1);\n    }\n\n    if (range) scale.range(flip(range, _.reverse));\n  }\n\n  function configureRangeStep(type, _, count) {\n    if (type !== Band && type !== Point) {\n      error('Only band and point scales support rangeStep.');\n    } // calculate full range based on requested step size and padding\n\n\n    var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0,\n        inner = type === Point ? 1 : (_.paddingInner != null ? _.paddingInner : _.padding) || 0;\n    return [0, _.rangeStep * bandSpace(count, inner, outer)];\n  }\n\n  function configureScheme(type, _, count) {\n    var extent = _.schemeExtent,\n        name,\n        scheme$1;\n\n    if (isArray(_.scheme)) {\n      scheme$1 = interpolateColors(_.scheme, _.interpolate, _.interpolateGamma);\n    } else {\n      name = _.scheme.toLowerCase();\n      scheme$1 = scheme(name);\n      if (!scheme$1) error(`Unrecognized scheme name: ${_.scheme}`);\n    } // determine size for potential discrete range\n\n\n    count = type === Threshold ? count + 1 : type === BinOrdinal ? count - 1 : type === Quantile || type === Quantize ? +_.schemeCount || DEFAULT_COUNT : count; // adjust and/or quantize scheme as appropriate\n\n    return isInterpolating(type) ? adjustScheme(scheme$1, extent, _.reverse) : isFunction(scheme$1) ? quantizeInterpolator(adjustScheme(scheme$1, extent), count) : type === Ordinal ? scheme$1 : scheme$1.slice(0, count);\n  }\n\n  function adjustScheme(scheme, extent, reverse) {\n    return isFunction(scheme) && (extent || reverse) ? interpolateRange(scheme, flip(extent || [0, 1], reverse)) : scheme;\n  }\n\n  function flip(array, reverse) {\n    return reverse ? array.slice().reverse() : array;\n  }\n  /**\n   * Sorts scenegraph items in the pulse source array.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator\n   *   function for sorting tuples.\n   */\n\n\n  function SortItems$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  inherits(SortItems$1, Transform, {\n    transform(_, pulse) {\n      const mod = _.modified('sort') || pulse.changed(pulse.ADD) || pulse.modified(_.sort.fields) || pulse.modified('datum');\n      if (mod) pulse.source.sort(stableCompare(_.sort));\n      this.modified(mod);\n      return pulse;\n    }\n\n  });\n  const Zero = 'zero',\n        Center$1 = 'center',\n        Normalize = 'normalize',\n        DefOutput = ['y0', 'y1'];\n  /**\n   * Stack layout for visualization elements.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to stack.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {function(object,object): number} [params.sort] - A comparator for stack sorting.\n   * @param {string} [offset='zero'] - Stack baseline offset. One of 'zero', 'center', 'normalize'.\n   */\n\n  function Stack(params) {\n    Transform.call(this, null, params);\n  }\n\n  Stack.Definition = {\n    'type': 'Stack',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'offset',\n      'type': 'enum',\n      'default': Zero,\n      'values': [Zero, Center$1, Normalize]\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': DefOutput\n    }]\n  };\n  inherits(Stack, Transform, {\n    transform(_, pulse) {\n      var as = _.as || DefOutput,\n          y0 = as[0],\n          y1 = as[1],\n          sort = stableCompare(_.sort),\n          field = _.field || one$2,\n          stack = _.offset === Center$1 ? stackCenter : _.offset === Normalize ? stackNormalize : stackZero,\n          groups,\n          i,\n          n,\n          max; // partition, sum, and sort the stack groups\n\n      groups = partition$3(pulse.source, _.groupby, sort, field); // compute stack layouts per group\n\n      for (i = 0, n = groups.length, max = groups.max; i < n; ++i) {\n        stack(groups[i], max, field, y0, y1);\n      }\n\n      return pulse.reflow(_.modified()).modifies(as);\n    }\n\n  });\n\n  function stackCenter(group, max, field, y0, y1) {\n    var last = (max - group.sum) / 2,\n        m = group.length,\n        j = 0,\n        t;\n\n    for (; j < m; ++j) {\n      t = group[j];\n      t[y0] = last;\n      t[y1] = last += Math.abs(field(t));\n    }\n  }\n\n  function stackNormalize(group, max, field, y0, y1) {\n    var scale = 1 / group.sum,\n        last = 0,\n        m = group.length,\n        j = 0,\n        v = 0,\n        t;\n\n    for (; j < m; ++j) {\n      t = group[j];\n      t[y0] = last;\n      t[y1] = last = scale * (v += Math.abs(field(t)));\n    }\n  }\n\n  function stackZero(group, max, field, y0, y1) {\n    var lastPos = 0,\n        lastNeg = 0,\n        m = group.length,\n        j = 0,\n        v,\n        t;\n\n    for (; j < m; ++j) {\n      t = group[j];\n      v = +field(t);\n\n      if (v < 0) {\n        t[y0] = lastNeg;\n        t[y1] = lastNeg += v;\n      } else {\n        t[y0] = lastPos;\n        t[y1] = lastPos += v;\n      }\n    }\n  }\n\n  function partition$3(data, groupby, sort, field) {\n    var groups = [],\n        get = f => f(t),\n        map,\n        i,\n        n,\n        m,\n        t,\n        k,\n        g,\n        s,\n        max; // partition data points into stack groups\n\n\n    if (groupby == null) {\n      groups.push(data.slice());\n    } else {\n      for (map = {}, i = 0, n = data.length; i < n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n\n        if (!g) {\n          map[k] = g = [];\n          groups.push(g);\n        }\n\n        g.push(t);\n      }\n    } // compute sums of groups, sort groups as needed\n\n\n    for (k = 0, max = 0, m = groups.length; k < m; ++k) {\n      g = groups[k];\n\n      for (i = 0, s = 0, n = g.length; i < n; ++i) {\n        s += Math.abs(field(g[i]));\n      }\n\n      g.sum = s;\n      if (s > max) max = s;\n      if (sort) g.sort(sort);\n    }\n\n    groups.max = max;\n    return groups;\n  }\n\n  var encode$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    axisticks: AxisTicks$1,\n    datajoin: DataJoin$1,\n    encode: Encode$1,\n    legendentries: LegendEntries$1,\n    linkpath: LinkPath,\n    pie: Pie,\n    scale: Scale$1,\n    sortitems: SortItems$1,\n    stack: Stack\n  });\n\n  var epsilon$2 = 1e-6;\n  var epsilon2 = 1e-12;\n  var pi$1 = Math.PI;\n  var halfPi$1 = pi$1 / 2;\n  var quarterPi = pi$1 / 4;\n  var tau$1 = pi$1 * 2;\n  var degrees = 180 / pi$1;\n  var radians = pi$1 / 180;\n  var abs$1 = Math.abs;\n  var atan = Math.atan;\n  var atan2 = Math.atan2;\n  var cos$1 = Math.cos;\n  var ceil = Math.ceil;\n  var exp = Math.exp;\n  var hypot = Math.hypot;\n  var log$1 = Math.log;\n  var pow$1 = Math.pow;\n  var sin$1 = Math.sin;\n  var sign = Math.sign || function (x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  };\n  var sqrt$1 = Math.sqrt;\n  var tan = Math.tan;\n  function acos(x) {\n    return x > 1 ? 0 : x < -1 ? pi$1 : Math.acos(x);\n  }\n  function asin$1(x) {\n    return x > 1 ? halfPi$1 : x < -1 ? -halfPi$1 : Math.asin(x);\n  }\n\n  function noop$2() {}\n\n  function streamGeometry(geometry, stream) {\n    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n      streamGeometryType[geometry.type](geometry, stream);\n    }\n  }\n\n  var streamObjectType = {\n    Feature: function (object, stream) {\n      streamGeometry(object.geometry, stream);\n    },\n    FeatureCollection: function (object, stream) {\n      var features = object.features,\n          i = -1,\n          n = features.length;\n\n      while (++i < n) streamGeometry(features[i].geometry, stream);\n    }\n  };\n  var streamGeometryType = {\n    Sphere: function (object, stream) {\n      stream.sphere();\n    },\n    Point: function (object, stream) {\n      object = object.coordinates;\n      stream.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function (object, stream) {\n      var coordinates = object.coordinates,\n          i = -1,\n          n = coordinates.length;\n\n      while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n    },\n    LineString: function (object, stream) {\n      streamLine(object.coordinates, stream, 0);\n    },\n    MultiLineString: function (object, stream) {\n      var coordinates = object.coordinates,\n          i = -1,\n          n = coordinates.length;\n\n      while (++i < n) streamLine(coordinates[i], stream, 0);\n    },\n    Polygon: function (object, stream) {\n      streamPolygon(object.coordinates, stream);\n    },\n    MultiPolygon: function (object, stream) {\n      var coordinates = object.coordinates,\n          i = -1,\n          n = coordinates.length;\n\n      while (++i < n) streamPolygon(coordinates[i], stream);\n    },\n    GeometryCollection: function (object, stream) {\n      var geometries = object.geometries,\n          i = -1,\n          n = geometries.length;\n\n      while (++i < n) streamGeometry(geometries[i], stream);\n    }\n  };\n\n  function streamLine(coordinates, stream, closed) {\n    var i = -1,\n        n = coordinates.length - closed,\n        coordinate;\n    stream.lineStart();\n\n    while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n\n    stream.lineEnd();\n  }\n\n  function streamPolygon(coordinates, stream) {\n    var i = -1,\n        n = coordinates.length;\n    stream.polygonStart();\n\n    while (++i < n) streamLine(coordinates[i], stream, 1);\n\n    stream.polygonEnd();\n  }\n\n  function geoStream (object, stream) {\n    if (object && streamObjectType.hasOwnProperty(object.type)) {\n      streamObjectType[object.type](object, stream);\n    } else {\n      streamGeometry(object, stream);\n    }\n  }\n\n  var areaRingSum$1 = new Adder(); // hello?\n\n  var areaSum$1 = new Adder(),\n      lambda00$2,\n      phi00$2,\n      lambda0$1,\n      cosPhi0,\n      sinPhi0;\n  var areaStream$1 = {\n    point: noop$2,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: function () {\n      areaRingSum$1 = new Adder();\n      areaStream$1.lineStart = areaRingStart$1;\n      areaStream$1.lineEnd = areaRingEnd$1;\n    },\n    polygonEnd: function () {\n      var areaRing = +areaRingSum$1;\n      areaSum$1.add(areaRing < 0 ? tau$1 + areaRing : areaRing);\n      this.lineStart = this.lineEnd = this.point = noop$2;\n    },\n    sphere: function () {\n      areaSum$1.add(tau$1);\n    }\n  };\n\n  function areaRingStart$1() {\n    areaStream$1.point = areaPointFirst$1;\n  }\n\n  function areaRingEnd$1() {\n    areaPoint$1(lambda00$2, phi00$2);\n  }\n\n  function areaPointFirst$1(lambda, phi) {\n    areaStream$1.point = areaPoint$1;\n    lambda00$2 = lambda, phi00$2 = phi;\n    lambda *= radians, phi *= radians;\n    lambda0$1 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);\n  }\n\n  function areaPoint$1(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    phi = phi / 2 + quarterPi; // half the angular distance from south pole\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli\u2019s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n\n    var dLambda = lambda - lambda0$1,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        cosPhi = cos$1(phi),\n        sinPhi = sin$1(phi),\n        k = sinPhi0 * sinPhi,\n        u = cosPhi0 * cosPhi + k * cos$1(adLambda),\n        v = k * sdLambda * sin$1(adLambda);\n    areaRingSum$1.add(atan2(v, u)); // Advance the previous points.\n\n    lambda0$1 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n  }\n\n  function geoArea$1 (object) {\n    areaSum$1 = new Adder();\n    geoStream(object, areaStream$1);\n    return areaSum$1 * 2;\n  }\n\n  function spherical(cartesian) {\n    return [atan2(cartesian[1], cartesian[0]), asin$1(cartesian[2])];\n  }\n  function cartesian(spherical) {\n    var lambda = spherical[0],\n        phi = spherical[1],\n        cosPhi = cos$1(phi);\n    return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];\n  }\n  function cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function cartesianCross(a, b) {\n    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n  } // TODO return a\n\n  function cartesianAddInPlace(a, b) {\n    a[0] += b[0], a[1] += b[1], a[2] += b[2];\n  }\n  function cartesianScale(vector, k) {\n    return [vector[0] * k, vector[1] * k, vector[2] * k];\n  } // TODO return d\n\n  function cartesianNormalizeInPlace(d) {\n    var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l, d[1] /= l, d[2] /= l;\n  }\n\n  var lambda0, phi0, lambda1, phi1, // bounds\n  lambda2, // previous lambda-coordinate\n  lambda00$1, phi00$1, // first point\n  p0, // previous 3D point\n  deltaSum, ranges, range$2;\n  var boundsStream$1 = {\n    point: boundsPoint$1,\n    lineStart: boundsLineStart,\n    lineEnd: boundsLineEnd,\n    polygonStart: function () {\n      boundsStream$1.point = boundsRingPoint;\n      boundsStream$1.lineStart = boundsRingStart;\n      boundsStream$1.lineEnd = boundsRingEnd;\n      deltaSum = new Adder();\n      areaStream$1.polygonStart();\n    },\n    polygonEnd: function () {\n      areaStream$1.polygonEnd();\n      boundsStream$1.point = boundsPoint$1;\n      boundsStream$1.lineStart = boundsLineStart;\n      boundsStream$1.lineEnd = boundsLineEnd;\n      if (areaRingSum$1 < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > epsilon$2) phi1 = 90;else if (deltaSum < -epsilon$2) phi0 = -90;\n      range$2[0] = lambda0, range$2[1] = lambda1;\n    },\n    sphere: function () {\n      lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    }\n  };\n\n  function boundsPoint$1(lambda, phi) {\n    ranges.push(range$2 = [lambda0 = lambda, lambda1 = lambda]);\n    if (phi < phi0) phi0 = phi;\n    if (phi > phi1) phi1 = phi;\n  }\n\n  function linePoint(lambda, phi) {\n    var p = cartesian([lambda * radians, phi * radians]);\n\n    if (p0) {\n      var normal = cartesianCross(p0, p),\n          equatorial = [normal[1], -normal[0], 0],\n          inflection = cartesianCross(equatorial, normal);\n      cartesianNormalizeInPlace(inflection);\n      inflection = spherical(inflection);\n      var delta = lambda - lambda2,\n          sign = delta > 0 ? 1 : -1,\n          lambdai = inflection[0] * degrees * sign,\n          phii,\n          antimeridian = abs$1(delta) > 180;\n\n      if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n        phii = inflection[1] * degrees;\n        if (phii > phi1) phi1 = phii;\n      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n        phii = -inflection[1] * degrees;\n        if (phii < phi0) phi0 = phii;\n      } else {\n        if (phi < phi0) phi0 = phi;\n        if (phi > phi1) phi1 = phi;\n      }\n\n      if (antimeridian) {\n        if (lambda < lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      } else {\n        if (lambda1 >= lambda0) {\n          if (lambda < lambda0) lambda0 = lambda;\n          if (lambda > lambda1) lambda1 = lambda;\n        } else {\n          if (lambda > lambda2) {\n            if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n          } else {\n            if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n          }\n        }\n      }\n    } else {\n      ranges.push(range$2 = [lambda0 = lambda, lambda1 = lambda]);\n    }\n\n    if (phi < phi0) phi0 = phi;\n    if (phi > phi1) phi1 = phi;\n    p0 = p, lambda2 = lambda;\n  }\n\n  function boundsLineStart() {\n    boundsStream$1.point = linePoint;\n  }\n\n  function boundsLineEnd() {\n    range$2[0] = lambda0, range$2[1] = lambda1;\n    boundsStream$1.point = boundsPoint$1;\n    p0 = null;\n  }\n\n  function boundsRingPoint(lambda, phi) {\n    if (p0) {\n      var delta = lambda - lambda2;\n      deltaSum.add(abs$1(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n    } else {\n      lambda00$1 = lambda, phi00$1 = phi;\n    }\n\n    areaStream$1.point(lambda, phi);\n    linePoint(lambda, phi);\n  }\n\n  function boundsRingStart() {\n    areaStream$1.lineStart();\n  }\n\n  function boundsRingEnd() {\n    boundsRingPoint(lambda00$1, phi00$1);\n    areaStream$1.lineEnd();\n    if (abs$1(deltaSum) > epsilon$2) lambda0 = -(lambda1 = 180);\n    range$2[0] = lambda0, range$2[1] = lambda1;\n    p0 = null;\n  } // Finds the left-right distance between two longitudes.\n  // This is almost the same as (lambda1 - lambda0 + 360\u00b0) % 360\u00b0, except that we want\n  // the distance between \u00b1180\u00b0 to be 360\u00b0.\n\n\n  function angle(lambda0, lambda1) {\n    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n  }\n\n  function rangeCompare(a, b) {\n    return a[0] - b[0];\n  }\n\n  function rangeContains(range, x) {\n    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n  }\n\n  function geoBounds$1 (feature) {\n    var i, n, a, b, merged, deltaMax, delta;\n    phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n    ranges = [];\n    geoStream(feature, boundsStream$1); // First, sort ranges by their minimum longitudes.\n\n    if (n = ranges.length) {\n      ranges.sort(rangeCompare); // Then, merge any ranges that overlap.\n\n      for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n        b = ranges[i];\n\n        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n        } else {\n          merged.push(a = b);\n        }\n      } // Finally, find the largest gap between the merged ranges.\n      // The final bounding box will be the inverse of this gap.\n\n\n      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n        b = merged[i];\n        if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n      }\n    }\n\n    ranges = range$2 = null;\n    return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];\n  }\n\n  var W0, W1, X0$1, Y0$1, Z0$1, X1$1, Y1$1, Z1$1, X2$1, Y2$1, Z2$1, lambda00, phi00, // first point\n  x0$4, y0$4, z0; // previous point\n\n  var centroidStream$1 = {\n    sphere: noop$2,\n    point: centroidPoint$1,\n    lineStart: centroidLineStart$1,\n    lineEnd: centroidLineEnd$1,\n    polygonStart: function () {\n      centroidStream$1.lineStart = centroidRingStart$1;\n      centroidStream$1.lineEnd = centroidRingEnd$1;\n    },\n    polygonEnd: function () {\n      centroidStream$1.lineStart = centroidLineStart$1;\n      centroidStream$1.lineEnd = centroidLineEnd$1;\n    }\n  }; // Arithmetic mean of Cartesian vectors.\n\n  function centroidPoint$1(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi);\n    centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));\n  }\n\n  function centroidPointCartesian(x, y, z) {\n    ++W0;\n    X0$1 += (x - X0$1) / W0;\n    Y0$1 += (y - Y0$1) / W0;\n    Z0$1 += (z - Z0$1) / W0;\n  }\n\n  function centroidLineStart$1() {\n    centroidStream$1.point = centroidLinePointFirst;\n  }\n\n  function centroidLinePointFirst(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi);\n    x0$4 = cosPhi * cos$1(lambda);\n    y0$4 = cosPhi * sin$1(lambda);\n    z0 = sin$1(phi);\n    centroidStream$1.point = centroidLinePoint;\n    centroidPointCartesian(x0$4, y0$4, z0);\n  }\n\n  function centroidLinePoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi),\n        x = cosPhi * cos$1(lambda),\n        y = cosPhi * sin$1(lambda),\n        z = sin$1(phi),\n        w = atan2(sqrt$1((w = y0$4 * z - z0 * y) * w + (w = z0 * x - x0$4 * z) * w + (w = x0$4 * y - y0$4 * x) * w), x0$4 * x + y0$4 * y + z0 * z);\n    W1 += w;\n    X1$1 += w * (x0$4 + (x0$4 = x));\n    Y1$1 += w * (y0$4 + (y0$4 = y));\n    Z1$1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0$4, y0$4, z0);\n  }\n\n  function centroidLineEnd$1() {\n    centroidStream$1.point = centroidPoint$1;\n  } // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n  // J. Applied Mechanics 42, 239 (1975).\n\n\n  function centroidRingStart$1() {\n    centroidStream$1.point = centroidRingPointFirst;\n  }\n\n  function centroidRingEnd$1() {\n    centroidRingPoint(lambda00, phi00);\n    centroidStream$1.point = centroidPoint$1;\n  }\n\n  function centroidRingPointFirst(lambda, phi) {\n    lambda00 = lambda, phi00 = phi;\n    lambda *= radians, phi *= radians;\n    centroidStream$1.point = centroidRingPoint;\n    var cosPhi = cos$1(phi);\n    x0$4 = cosPhi * cos$1(lambda);\n    y0$4 = cosPhi * sin$1(lambda);\n    z0 = sin$1(phi);\n    centroidPointCartesian(x0$4, y0$4, z0);\n  }\n\n  function centroidRingPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos$1(phi),\n        x = cosPhi * cos$1(lambda),\n        y = cosPhi * sin$1(lambda),\n        z = sin$1(phi),\n        cx = y0$4 * z - z0 * y,\n        cy = z0 * x - x0$4 * z,\n        cz = x0$4 * y - y0$4 * x,\n        m = hypot(cx, cy, cz),\n        w = asin$1(m),\n        // line weight = angle\n    v = m && -w / m; // area weight multiplier\n\n    X2$1.add(v * cx);\n    Y2$1.add(v * cy);\n    Z2$1.add(v * cz);\n    W1 += w;\n    X1$1 += w * (x0$4 + (x0$4 = x));\n    Y1$1 += w * (y0$4 + (y0$4 = y));\n    Z1$1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0$4, y0$4, z0);\n  }\n\n  function geoCentroid$1 (object) {\n    W0 = W1 = X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = 0;\n    X2$1 = new Adder();\n    Y2$1 = new Adder();\n    Z2$1 = new Adder();\n    geoStream(object, centroidStream$1);\n    var x = +X2$1,\n        y = +Y2$1,\n        z = +Z2$1,\n        m = hypot(x, y, z); // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n\n    if (m < epsilon2) {\n      x = X1$1, y = Y1$1, z = Z1$1; // If the feature has zero length, fall back to arithmetic mean of point vectors.\n\n      if (W1 < epsilon$2) x = X0$1, y = Y0$1, z = Z0$1;\n      m = hypot(x, y, z); // If the feature still has an undefined ccentroid, then return.\n\n      if (m < epsilon2) return [NaN, NaN];\n    }\n\n    return [atan2(y, x) * degrees, asin$1(z / m) * degrees];\n  }\n\n  function compose (a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n\n    if (a.invert && b.invert) compose.invert = function (x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n\n  function rotationIdentity(lambda, phi) {\n    return [abs$1(lambda) > pi$1 ? lambda + Math.round(-lambda / tau$1) * tau$1 : lambda, phi];\n  }\n\n  rotationIdentity.invert = rotationIdentity;\n  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n    return (deltaLambda %= tau$1) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;\n  }\n\n  function forwardRotationLambda(deltaLambda) {\n    return function (lambda, phi) {\n      return lambda += deltaLambda, [lambda > pi$1 ? lambda - tau$1 : lambda < -pi$1 ? lambda + tau$1 : lambda, phi];\n    };\n  }\n\n  function rotationLambda(deltaLambda) {\n    var rotation = forwardRotationLambda(deltaLambda);\n    rotation.invert = forwardRotationLambda(-deltaLambda);\n    return rotation;\n  }\n\n  function rotationPhiGamma(deltaPhi, deltaGamma) {\n    var cosDeltaPhi = cos$1(deltaPhi),\n        sinDeltaPhi = sin$1(deltaPhi),\n        cosDeltaGamma = cos$1(deltaGamma),\n        sinDeltaGamma = sin$1(deltaGamma);\n\n    function rotation(lambda, phi) {\n      var cosPhi = cos$1(phi),\n          x = cos$1(lambda) * cosPhi,\n          y = sin$1(lambda) * cosPhi,\n          z = sin$1(phi),\n          k = z * cosDeltaPhi + x * sinDeltaPhi;\n      return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin$1(k * cosDeltaGamma + y * sinDeltaGamma)];\n    }\n\n    rotation.invert = function (lambda, phi) {\n      var cosPhi = cos$1(phi),\n          x = cos$1(lambda) * cosPhi,\n          y = sin$1(lambda) * cosPhi,\n          z = sin$1(phi),\n          k = z * cosDeltaGamma - y * sinDeltaGamma;\n      return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin$1(k * cosDeltaPhi - x * sinDeltaPhi)];\n    };\n\n    return rotation;\n  }\n\n  function rotation (rotate) {\n    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n    }\n\n    forward.invert = function (coordinates) {\n      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n    };\n\n    return forward;\n  }\n\n  function circleStream(stream, radius, delta, direction, t0, t1) {\n    if (!delta) return;\n    var cosRadius = cos$1(radius),\n        sinRadius = sin$1(radius),\n        step = direction * delta;\n\n    if (t0 == null) {\n      t0 = radius + direction * tau$1;\n      t1 = radius - step / 2;\n    } else {\n      t0 = circleRadius(cosRadius, t0);\n      t1 = circleRadius(cosRadius, t1);\n      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$1;\n    }\n\n    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n      point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);\n      stream.point(point[0], point[1]);\n    }\n  } // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n\n  function circleRadius(cosRadius, point) {\n    point = cartesian(point), point[0] -= cosRadius;\n    cartesianNormalizeInPlace(point);\n    var radius = acos(-point[1]);\n    return ((-point[2] < 0 ? -radius : radius) + tau$1 - epsilon$2) % tau$1;\n  }\n\n  function clipBuffer () {\n    var lines = [],\n        line;\n    return {\n      point: function (x, y, m) {\n        line.push([x, y, m]);\n      },\n      lineStart: function () {\n        lines.push(line = []);\n      },\n      lineEnd: noop$2,\n      rejoin: function () {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      },\n      result: function () {\n        var result = lines;\n        lines = [];\n        line = null;\n        return result;\n      }\n    };\n  }\n\n  function pointEqual (a, b) {\n    return abs$1(a[0] - b[0]) < epsilon$2 && abs$1(a[1] - b[1]) < epsilon$2;\n  }\n\n  function Intersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other; // another intersection\n\n    this.e = entry; // is an entry?\n\n    this.v = false; // visited\n\n    this.n = this.p = null; // next & previous\n  } // A generalized polygon clipping algorithm: given a polygon that has been cut\n  // into its visible line segments, and rejoins the segments by interpolating\n  // along the clip edge.\n\n\n  function clipRejoin (segments, compareIntersection, startInside, interpolate, stream) {\n    var subject = [],\n        clip = [],\n        i,\n        n;\n    segments.forEach(function (segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n,\n          p0 = segment[0],\n          p1 = segment[n],\n          x;\n\n      if (pointEqual(p0, p1)) {\n        if (!p0[2] && !p1[2]) {\n          stream.lineStart();\n\n          for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n\n          stream.lineEnd();\n          return;\n        } // handle degenerate cases by moving the point\n\n\n        p1[0] += 2 * epsilon$2;\n      }\n\n      subject.push(x = new Intersection(p0, segment, null, true));\n      clip.push(x.o = new Intersection(p0, null, x, false));\n      subject.push(x = new Intersection(p1, segment, null, false));\n      clip.push(x.o = new Intersection(p1, null, x, true));\n    });\n    if (!subject.length) return;\n    clip.sort(compareIntersection);\n    link(subject);\n    link(clip);\n\n    for (i = 0, n = clip.length; i < n; ++i) {\n      clip[i].e = startInside = !startInside;\n    }\n\n    var start = subject[0],\n        points,\n        point;\n\n    while (1) {\n      // Find first unvisited intersection.\n      var current = start,\n          isSubject = true;\n\n      while (current.v) if ((current = current.n) === start) return;\n\n      points = current.z;\n      stream.lineStart();\n\n      do {\n        current.v = current.o.v = true;\n\n        if (current.e) {\n          if (isSubject) {\n            for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, stream);\n          }\n\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n\n            for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, stream);\n          }\n\n          current = current.p;\n        }\n\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n\n      stream.lineEnd();\n    }\n  }\n\n  function link(array) {\n    if (!(n = array.length)) return;\n    var n,\n        i = 0,\n        a = array[0],\n        b;\n\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n\n    a.n = b = array[0];\n    b.p = a;\n  }\n\n  function longitude(point) {\n    if (abs$1(point[0]) <= pi$1) return point[0];else return sign(point[0]) * ((abs$1(point[0]) + pi$1) % tau$1 - pi$1);\n  }\n\n  function polygonContains (polygon, point) {\n    var lambda = longitude(point),\n        phi = point[1],\n        sinPhi = sin$1(phi),\n        normal = [sin$1(lambda), -cos$1(lambda), 0],\n        angle = 0,\n        winding = 0;\n    var sum = new Adder();\n    if (sinPhi === 1) phi = halfPi$1 + epsilon$2;else if (sinPhi === -1) phi = -halfPi$1 - epsilon$2;\n\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      if (!(m = (ring = polygon[i]).length)) continue;\n      var ring,\n          m,\n          point0 = ring[m - 1],\n          lambda0 = longitude(point0),\n          phi0 = point0[1] / 2 + quarterPi,\n          sinPhi0 = sin$1(phi0),\n          cosPhi0 = cos$1(phi0);\n\n      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n        var point1 = ring[j],\n            lambda1 = longitude(point1),\n            phi1 = point1[1] / 2 + quarterPi,\n            sinPhi1 = sin$1(phi1),\n            cosPhi1 = cos$1(phi1),\n            delta = lambda1 - lambda0,\n            sign = delta >= 0 ? 1 : -1,\n            absDelta = sign * delta,\n            antimeridian = absDelta > pi$1,\n            k = sinPhi0 * sinPhi1;\n        sum.add(atan2(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));\n        angle += antimeridian ? delta + sign * tau$1 : delta; // Are the longitudes either side of the point\u2019s meridian (lambda),\n        // and are the latitudes smaller than the parallel (phi)?\n\n        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n          var arc = cartesianCross(cartesian(point0), cartesian(point1));\n          cartesianNormalizeInPlace(arc);\n          var intersection = cartesianCross(normal, arc);\n          cartesianNormalizeInPlace(intersection);\n          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);\n\n          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ delta >= 0 ? 1 : -1;\n          }\n        }\n      }\n    } // First, determine whether the South pole is inside or outside:\n    //\n    // It is inside if:\n    // * the polygon winds around it in a clockwise direction.\n    // * the polygon does not (cumulatively) wind around it, but has a negative\n    //   (counter-clockwise) area.\n    //\n    // Second, count the (signed) number of times a segment crosses a lambda\n    // from the point to the South pole.  If it is zero, then the point is the\n    // same side as the South pole.\n\n\n    return (angle < -epsilon$2 || angle < epsilon$2 && sum < -epsilon2) ^ winding & 1;\n  }\n\n  function clip$1 (pointVisible, clipLine, interpolate, start) {\n    return function (sink) {\n      var line = clipLine(sink),\n          ringBuffer = clipBuffer(),\n          ringSink = clipLine(ringBuffer),\n          polygonStarted = false,\n          polygon,\n          segments,\n          ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function () {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function () {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = merge$2(segments);\n          var startInside = polygonContains(polygon, start);\n\n          if (segments.length) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n          } else if (startInside) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            interpolate(null, null, 1, sink);\n            sink.lineEnd();\n          }\n\n          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function () {\n          sink.polygonStart();\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n          sink.polygonEnd();\n        }\n      };\n\n      function point(lambda, phi) {\n        if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n      }\n\n      function pointLine(lambda, phi) {\n        line.point(lambda, phi);\n      }\n\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n\n      function pointRing(lambda, phi) {\n        ring.push([lambda, phi]);\n        ringSink.point(lambda, phi);\n      }\n\n      function ringStart() {\n        ringSink.lineStart();\n        ring = [];\n      }\n\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringSink.lineEnd();\n        var clean = ringSink.clean(),\n            ringSegments = ringBuffer.result(),\n            i,\n            n = ringSegments.length,\n            m,\n            segment,\n            point;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return; // No intersections.\n\n        if (clean & 1) {\n          segment = ringSegments[0];\n\n          if ((m = segment.length - 1) > 0) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n\n            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n\n            sink.lineEnd();\n          }\n\n          return;\n        } // Rejoin connected segments.\n        // TODO reuse ringBuffer.rejoin()?\n\n\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(validSegment));\n      }\n\n      return clip;\n    };\n  }\n\n  function validSegment(segment) {\n    return segment.length > 1;\n  } // Intersections are sorted along the clip edge. For both antimeridian cutting\n  // and circle clipping, the same comparison is used.\n\n\n  function compareIntersection(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfPi$1 - epsilon$2 : halfPi$1 - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi$1 - epsilon$2 : halfPi$1 - b[1]);\n  }\n\n  var clipAntimeridian = clip$1(function () {\n    return true;\n  }, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi$1, -halfPi$1]); // Takes a line and cuts into visible segments. Return values: 0 - there were\n  // intersections or the line was empty; 1 - no intersections; 2 - there were\n  // intersections, and the first and last segments should be rejoined.\n\n  function clipAntimeridianLine(stream) {\n    var lambda0 = NaN,\n        phi0 = NaN,\n        sign0 = NaN,\n        clean; // no intersections\n\n    return {\n      lineStart: function () {\n        stream.lineStart();\n        clean = 1;\n      },\n      point: function (lambda1, phi1) {\n        var sign1 = lambda1 > 0 ? pi$1 : -pi$1,\n            delta = abs$1(lambda1 - lambda0);\n\n        if (abs$1(delta - pi$1) < epsilon$2) {\n          // line crosses a pole\n          stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$1 : -halfPi$1);\n          stream.point(sign0, phi0);\n          stream.lineEnd();\n          stream.lineStart();\n          stream.point(sign1, phi0);\n          stream.point(lambda1, phi0);\n          clean = 0;\n        } else if (sign0 !== sign1 && delta >= pi$1) {\n          // line crosses antimeridian\n          if (abs$1(lambda0 - sign0) < epsilon$2) lambda0 -= sign0 * epsilon$2; // handle degeneracies\n\n          if (abs$1(lambda1 - sign1) < epsilon$2) lambda1 -= sign1 * epsilon$2;\n          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n          stream.point(sign0, phi0);\n          stream.lineEnd();\n          stream.lineStart();\n          stream.point(sign1, phi0);\n          clean = 0;\n        }\n\n        stream.point(lambda0 = lambda1, phi0 = phi1);\n        sign0 = sign1;\n      },\n      lineEnd: function () {\n        stream.lineEnd();\n        lambda0 = phi0 = NaN;\n      },\n      clean: function () {\n        return 2 - clean; // if intersections, rejoin first and last segments\n      }\n    };\n  }\n\n  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n    var cosPhi0,\n        cosPhi1,\n        sinLambda0Lambda1 = sin$1(lambda0 - lambda1);\n    return abs$1(sinLambda0Lambda1) > epsilon$2 ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1) - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;\n  }\n\n  function clipAntimeridianInterpolate(from, to, direction, stream) {\n    var phi;\n\n    if (from == null) {\n      phi = direction * halfPi$1;\n      stream.point(-pi$1, phi);\n      stream.point(0, phi);\n      stream.point(pi$1, phi);\n      stream.point(pi$1, 0);\n      stream.point(pi$1, -phi);\n      stream.point(0, -phi);\n      stream.point(-pi$1, -phi);\n      stream.point(-pi$1, 0);\n      stream.point(-pi$1, phi);\n    } else if (abs$1(from[0] - to[0]) > epsilon$2) {\n      var lambda = from[0] < to[0] ? pi$1 : -pi$1;\n      phi = direction * lambda / 2;\n      stream.point(-lambda, phi);\n      stream.point(0, phi);\n      stream.point(lambda, phi);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function clipCircle (radius) {\n    var cr = cos$1(radius),\n        delta = 6 * radians,\n        smallRadius = cr > 0,\n        notHemisphere = abs$1(cr) > epsilon$2; // TODO optimise for this common case\n\n    function interpolate(from, to, direction, stream) {\n      circleStream(stream, radius, delta, direction, from, to);\n    }\n\n    function visible(lambda, phi) {\n      return cos$1(lambda) * cos$1(phi) > cr;\n    } // Takes a line and cuts into visible segments. Return values used for polygon\n    // clipping: 0 - there were intersections or the line was empty; 1 - no\n    // intersections 2 - there were intersections, and the first and last segments\n    // should be rejoined.\n\n\n    function clipLine(stream) {\n      var point0, // previous point\n      c0, // code for previous point\n      v0, // visibility of previous point\n      v00, // visibility of first point\n      clean; // no intersections\n\n      return {\n        lineStart: function () {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function (lambda, phi) {\n          var point1 = [lambda, phi],\n              point2,\n              v = visible(lambda, phi),\n              c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi$1 : -pi$1), phi) : 0;\n          if (!point0 && (v00 = v0 = v)) stream.lineStart();\n\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) point1[2] = 1;\n          }\n\n          if (v !== v0) {\n            clean = 0;\n\n            if (v) {\n              // outside going in\n              stream.lineStart();\n              point2 = intersect(point1, point0);\n              stream.point(point2[0], point2[1]);\n            } else {\n              // inside going out\n              point2 = intersect(point0, point1);\n              stream.point(point2[0], point2[1], 2);\n              stream.lineEnd();\n            }\n\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t; // If the codes for two points are different, or are both zero,\n            // and there this segment intersects with the small circle.\n\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n\n              if (smallRadius) {\n                stream.lineStart();\n                stream.point(t[0][0], t[0][1]);\n                stream.point(t[1][0], t[1][1]);\n                stream.lineEnd();\n              } else {\n                stream.point(t[1][0], t[1][1]);\n                stream.lineEnd();\n                stream.lineStart();\n                stream.point(t[0][0], t[0][1], 3);\n              }\n            }\n          }\n\n          if (v && (!point0 || !pointEqual(point0, point1))) {\n            stream.point(point1[0], point1[1]);\n          }\n\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function () {\n          if (v0) stream.lineEnd();\n          point0 = null;\n        },\n        // Rejoin first and last segments if there were intersections and the first\n        // and last points were visible.\n        clean: function () {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    } // Intersects the great circle between a and b with the clip circle.\n\n\n    function intersect(a, b, two) {\n      var pa = cartesian(a),\n          pb = cartesian(b); // We have two planes, n1.p = d1 and n2.p = d2.\n      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 \u2a2f n2).\n\n      var n1 = [1, 0, 0],\n          // normal\n      n2 = cartesianCross(pa, pb),\n          n2n2 = cartesianDot(n2, n2),\n          n1n2 = n2[0],\n          // cartesianDot(n1, n2),\n      determinant = n2n2 - n1n2 * n1n2; // Two polar points.\n\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant,\n          c2 = -cr * n1n2 / determinant,\n          n1xn2 = cartesianCross(n1, n2),\n          A = cartesianScale(n1, c1),\n          B = cartesianScale(n2, c2);\n      cartesianAddInPlace(A, B); // Solve |p(t)|^2 = 1.\n\n      var u = n1xn2,\n          w = cartesianDot(A, u),\n          uu = cartesianDot(u, u),\n          t2 = w * w - uu * (cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = sqrt$1(t2),\n          q = cartesianScale(u, (-w - t) / uu);\n      cartesianAddInPlace(q, A);\n      q = spherical(q);\n      if (!two) return q; // Two intersection points.\n\n      var lambda0 = a[0],\n          lambda1 = b[0],\n          phi0 = a[1],\n          phi1 = b[1],\n          z;\n      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n      var delta = lambda1 - lambda0,\n          polar = abs$1(delta - pi$1) < epsilon$2,\n          meridian = polar || delta < epsilon$2;\n      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.\n\n      if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs$1(q[0] - lambda0) < epsilon$2 ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi$1 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n        var q1 = cartesianScale(u, (-w + t) / uu);\n        cartesianAddInPlace(q1, A);\n        return [q, spherical(q1)];\n      }\n    } // Generates a 4-bit vector representing the location of a point relative to\n    // the small circle's bounding box.\n\n\n    function code(lambda, phi) {\n      var r = smallRadius ? radius : pi$1 - radius,\n          code = 0;\n      if (lambda < -r) code |= 1; // left\n      else if (lambda > r) code |= 2; // right\n\n      if (phi < -r) code |= 4; // below\n      else if (phi > r) code |= 8; // above\n\n      return code;\n    }\n\n    return clip$1(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$1, radius - pi$1]);\n  }\n\n  function clipLine (a, b, x0, y0, x1, y1) {\n    var ax = a[0],\n        ay = a[1],\n        bx = b[0],\n        by = b[1],\n        t0 = 0,\n        t1 = 1,\n        dx = bx - ax,\n        dy = by - ay,\n        r;\n    r = x0 - ax;\n    if (!dx && r > 0) return;\n    r /= dx;\n\n    if (dx < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dx > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = x1 - ax;\n    if (!dx && r < 0) return;\n    r /= dx;\n\n    if (dx < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dx > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    r = y0 - ay;\n    if (!dy && r > 0) return;\n    r /= dy;\n\n    if (dy < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dy > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = y1 - ay;\n    if (!dy && r < 0) return;\n    r /= dy;\n\n    if (dy < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dy > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n    return true;\n  }\n\n  var clipMax = 1e9,\n      clipMin = -clipMax; // TODO Use d3-polygon\u2019s polygonContains here for the ring check?\n  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\n  function clipRectangle(x0, y0, x1, y1) {\n    function visible(x, y) {\n      return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n    }\n\n    function interpolate(from, to, direction, stream) {\n      var a = 0,\n          a1 = 0;\n\n      if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {\n        do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0); while ((a = (a + direction + 4) % 4) !== a1);\n      } else {\n        stream.point(to[0], to[1]);\n      }\n    }\n\n    function corner(p, direction) {\n      return abs$1(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3 : abs$1(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1 : abs$1(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n    }\n\n    function compareIntersection(a, b) {\n      return comparePoint(a.x, b.x);\n    }\n\n    function comparePoint(a, b) {\n      var ca = corner(a, 1),\n          cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n\n    return function (stream) {\n      var activeStream = stream,\n          bufferStream = clipBuffer(),\n          segments,\n          polygon,\n          ring,\n          x__,\n          y__,\n          v__,\n          // first point\n      x_,\n          y_,\n          v_,\n          // previous point\n      first,\n          clean;\n      var clipStream = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: polygonStart,\n        polygonEnd: polygonEnd\n      };\n\n      function point(x, y) {\n        if (visible(x, y)) activeStream.point(x, y);\n      }\n\n      function polygonInside() {\n        var winding = 0;\n\n        for (var i = 0, n = polygon.length; i < n; ++i) {\n          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n\n            if (a1 <= y1) {\n              if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;\n            } else {\n              if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;\n            }\n          }\n        }\n\n        return winding;\n      } // Buffer geometry within a polygon and then clip it en masse.\n\n\n      function polygonStart() {\n        activeStream = bufferStream, segments = [], polygon = [], clean = true;\n      }\n\n      function polygonEnd() {\n        var startInside = polygonInside(),\n            cleanInside = clean && startInside,\n            visible = (segments = merge$2(segments)).length;\n\n        if (cleanInside || visible) {\n          stream.polygonStart();\n\n          if (cleanInside) {\n            stream.lineStart();\n            interpolate(null, null, 1, stream);\n            stream.lineEnd();\n          }\n\n          if (visible) {\n            clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n          }\n\n          stream.polygonEnd();\n        }\n\n        activeStream = stream, segments = polygon = ring = null;\n      }\n\n      function lineStart() {\n        clipStream.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      } // TODO rather than special-case polygons, simply handle them separately.\n      // Ideally, coincident intersection points should be jittered to avoid\n      // clipping issues.\n\n\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferStream.rejoin();\n          segments.push(bufferStream.result());\n        }\n\n        clipStream.point = point;\n        if (v_) activeStream.lineEnd();\n      }\n\n      function linePoint(x, y) {\n        var v = visible(x, y);\n        if (polygon) ring.push([x, y]);\n\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n\n          if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n          }\n        } else {\n          if (v && v_) activeStream.point(x, y);else {\n            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n\n            if (clipLine(a, b, x0, y0, x1, y1)) {\n              if (!v_) {\n                activeStream.lineStart();\n                activeStream.point(a[0], a[1]);\n              }\n\n              activeStream.point(b[0], b[1]);\n              if (!v) activeStream.lineEnd();\n              clean = false;\n            } else if (v) {\n              activeStream.lineStart();\n              activeStream.point(x, y);\n              clean = false;\n            }\n          }\n        }\n\n        x_ = x, y_ = y, v_ = v;\n      }\n\n      return clipStream;\n    };\n  }\n\n  function graticuleX(y0, y1, dy) {\n    var y = range$1$1(y0, y1 - epsilon$2, dy).concat(y1);\n    return function (x) {\n      return y.map(function (y) {\n        return [x, y];\n      });\n    };\n  }\n\n  function graticuleY(x0, x1, dx) {\n    var x = range$1$1(x0, x1 - epsilon$2, dx).concat(x1);\n    return function (y) {\n      return x.map(function (x) {\n        return [x, y];\n      });\n    };\n  }\n\n  function graticule() {\n    var x1,\n        x0,\n        X1,\n        X0,\n        y1,\n        y0,\n        Y1,\n        Y0,\n        dx = 10,\n        dy = dx,\n        DX = 90,\n        DY = 360,\n        x,\n        y,\n        X,\n        Y,\n        precision = 2.5;\n\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n\n    function lines() {\n      return range$1$1(ceil(X0 / DX) * DX, X1, DX).map(X).concat(range$1$1(ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(range$1$1(ceil(x0 / dx) * dx, x1, dx).filter(function (x) {\n        return abs$1(x % DX) > epsilon$2;\n      }).map(x)).concat(range$1$1(ceil(y0 / dy) * dy, y1, dy).filter(function (y) {\n        return abs$1(y % DY) > epsilon$2;\n      }).map(y));\n    }\n\n    graticule.lines = function () {\n      return lines().map(function (coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n\n    graticule.outline = function () {\n      return {\n        type: \"Polygon\",\n        coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]\n      };\n    };\n\n    graticule.extent = function (_) {\n      if (!arguments.length) return graticule.extentMinor();\n      return graticule.extentMajor(_).extentMinor(_);\n    };\n\n    graticule.extentMajor = function (_) {\n      if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.extentMinor = function (_) {\n      if (!arguments.length) return [[x0, y0], [x1, y1]];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.step = function (_) {\n      if (!arguments.length) return graticule.stepMinor();\n      return graticule.stepMajor(_).stepMinor(_);\n    };\n\n    graticule.stepMajor = function (_) {\n      if (!arguments.length) return [DX, DY];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n\n    graticule.stepMinor = function (_) {\n      if (!arguments.length) return [dx, dy];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n\n    graticule.precision = function (_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = graticuleX(y0, y1, 90);\n      y = graticuleY(x0, x1, precision);\n      X = graticuleX(Y0, Y1, 90);\n      Y = graticuleY(X0, X1, precision);\n      return graticule;\n    };\n\n    return graticule.extentMajor([[-180, -90 + epsilon$2], [180, 90 - epsilon$2]]).extentMinor([[-180, -80 - epsilon$2], [180, 80 + epsilon$2]]);\n  }\n\n  var identity = (x => x);\n\n  var areaSum = new Adder(),\n      areaRingSum = new Adder(),\n      x00$2,\n      y00$2,\n      x0$3,\n      y0$3;\n  var areaStream = {\n    point: noop$2,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: function () {\n      areaStream.lineStart = areaRingStart;\n      areaStream.lineEnd = areaRingEnd;\n    },\n    polygonEnd: function () {\n      areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop$2;\n      areaSum.add(abs$1(areaRingSum));\n      areaRingSum = new Adder();\n    },\n    result: function () {\n      var area = areaSum / 2;\n      areaSum = new Adder();\n      return area;\n    }\n  };\n\n  function areaRingStart() {\n    areaStream.point = areaPointFirst;\n  }\n\n  function areaPointFirst(x, y) {\n    areaStream.point = areaPoint;\n    x00$2 = x0$3 = x, y00$2 = y0$3 = y;\n  }\n\n  function areaPoint(x, y) {\n    areaRingSum.add(y0$3 * x - x0$3 * y);\n    x0$3 = x, y0$3 = y;\n  }\n\n  function areaRingEnd() {\n    areaPoint(x00$2, y00$2);\n  }\n\n  var x0$2 = Infinity,\n      y0$2 = x0$2,\n      x1 = -x0$2,\n      y1 = x1;\n  var boundsStream = {\n    point: boundsPoint,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: noop$2,\n    polygonEnd: noop$2,\n    result: function () {\n      var bounds = [[x0$2, y0$2], [x1, y1]];\n      x1 = y1 = -(y0$2 = x0$2 = Infinity);\n      return bounds;\n    }\n  };\n\n  function boundsPoint(x, y) {\n    if (x < x0$2) x0$2 = x;\n    if (x > x1) x1 = x;\n    if (y < y0$2) y0$2 = y;\n    if (y > y1) y1 = y;\n  }\n\n  var X0 = 0,\n      Y0 = 0,\n      Z0 = 0,\n      X1 = 0,\n      Y1 = 0,\n      Z1 = 0,\n      X2 = 0,\n      Y2 = 0,\n      Z2 = 0,\n      x00$1,\n      y00$1,\n      x0$1,\n      y0$1;\n  var centroidStream = {\n    point: centroidPoint,\n    lineStart: centroidLineStart,\n    lineEnd: centroidLineEnd,\n    polygonStart: function () {\n      centroidStream.lineStart = centroidRingStart;\n      centroidStream.lineEnd = centroidRingEnd;\n    },\n    polygonEnd: function () {\n      centroidStream.point = centroidPoint;\n      centroidStream.lineStart = centroidLineStart;\n      centroidStream.lineEnd = centroidLineEnd;\n    },\n    result: function () {\n      var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];\n      X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;\n      return centroid;\n    }\n  };\n\n  function centroidPoint(x, y) {\n    X0 += x;\n    Y0 += y;\n    ++Z0;\n  }\n\n  function centroidLineStart() {\n    centroidStream.point = centroidPointFirstLine;\n  }\n\n  function centroidPointFirstLine(x, y) {\n    centroidStream.point = centroidPointLine;\n    centroidPoint(x0$1 = x, y0$1 = y);\n  }\n\n  function centroidPointLine(x, y) {\n    var dx = x - x0$1,\n        dy = y - y0$1,\n        z = sqrt$1(dx * dx + dy * dy);\n    X1 += z * (x0$1 + x) / 2;\n    Y1 += z * (y0$1 + y) / 2;\n    Z1 += z;\n    centroidPoint(x0$1 = x, y0$1 = y);\n  }\n\n  function centroidLineEnd() {\n    centroidStream.point = centroidPoint;\n  }\n\n  function centroidRingStart() {\n    centroidStream.point = centroidPointFirstRing;\n  }\n\n  function centroidRingEnd() {\n    centroidPointRing(x00$1, y00$1);\n  }\n\n  function centroidPointFirstRing(x, y) {\n    centroidStream.point = centroidPointRing;\n    centroidPoint(x00$1 = x0$1 = x, y00$1 = y0$1 = y);\n  }\n\n  function centroidPointRing(x, y) {\n    var dx = x - x0$1,\n        dy = y - y0$1,\n        z = sqrt$1(dx * dx + dy * dy);\n    X1 += z * (x0$1 + x) / 2;\n    Y1 += z * (y0$1 + y) / 2;\n    Z1 += z;\n    z = y0$1 * x - x0$1 * y;\n    X2 += z * (x0$1 + x);\n    Y2 += z * (y0$1 + y);\n    Z2 += z * 3;\n    centroidPoint(x0$1 = x, y0$1 = y);\n  }\n\n  function PathContext(context) {\n    this._context = context;\n  }\n  PathContext.prototype = {\n    _radius: 4.5,\n    pointRadius: function (_) {\n      return this._radius = _, this;\n    },\n    polygonStart: function () {\n      this._line = 0;\n    },\n    polygonEnd: function () {\n      this._line = NaN;\n    },\n    lineStart: function () {\n      this._point = 0;\n    },\n    lineEnd: function () {\n      if (this._line === 0) this._context.closePath();\n      this._point = NaN;\n    },\n    point: function (x, y) {\n      switch (this._point) {\n        case 0:\n          {\n            this._context.moveTo(x, y);\n\n            this._point = 1;\n            break;\n          }\n\n        case 1:\n          {\n            this._context.lineTo(x, y);\n\n            break;\n          }\n\n        default:\n          {\n            this._context.moveTo(x + this._radius, y);\n\n            this._context.arc(x, y, this._radius, 0, tau$1);\n\n            break;\n          }\n      }\n    },\n    result: noop$2\n  };\n\n  var lengthSum = new Adder(),\n      lengthRing,\n      x00,\n      y00,\n      x0,\n      y0;\n  var lengthStream = {\n    point: noop$2,\n    lineStart: function () {\n      lengthStream.point = lengthPointFirst;\n    },\n    lineEnd: function () {\n      if (lengthRing) lengthPoint(x00, y00);\n      lengthStream.point = noop$2;\n    },\n    polygonStart: function () {\n      lengthRing = true;\n    },\n    polygonEnd: function () {\n      lengthRing = null;\n    },\n    result: function () {\n      var length = +lengthSum;\n      lengthSum = new Adder();\n      return length;\n    }\n  };\n\n  function lengthPointFirst(x, y) {\n    lengthStream.point = lengthPoint;\n    x00 = x0 = x, y00 = y0 = y;\n  }\n\n  function lengthPoint(x, y) {\n    x0 -= x, y0 -= y;\n    lengthSum.add(sqrt$1(x0 * x0 + y0 * y0));\n    x0 = x, y0 = y;\n  }\n\n  function PathString() {\n    this._string = [];\n  }\n  PathString.prototype = {\n    _radius: 4.5,\n    _circle: circle(4.5),\n    pointRadius: function (_) {\n      if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n      return this;\n    },\n    polygonStart: function () {\n      this._line = 0;\n    },\n    polygonEnd: function () {\n      this._line = NaN;\n    },\n    lineStart: function () {\n      this._point = 0;\n    },\n    lineEnd: function () {\n      if (this._line === 0) this._string.push(\"Z\");\n      this._point = NaN;\n    },\n    point: function (x, y) {\n      switch (this._point) {\n        case 0:\n          {\n            this._string.push(\"M\", x, \",\", y);\n\n            this._point = 1;\n            break;\n          }\n\n        case 1:\n          {\n            this._string.push(\"L\", x, \",\", y);\n\n            break;\n          }\n\n        default:\n          {\n            if (this._circle == null) this._circle = circle(this._radius);\n\n            this._string.push(\"M\", x, \",\", y, this._circle);\n\n            break;\n          }\n      }\n    },\n    result: function () {\n      if (this._string.length) {\n        var result = this._string.join(\"\");\n\n        this._string = [];\n        return result;\n      } else {\n        return null;\n      }\n    }\n  };\n\n  function circle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n\n  function geoPath (projection, context) {\n    var pointRadius = 4.5,\n        projectionStream,\n        contextStream;\n\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        geoStream(object, projectionStream(contextStream));\n      }\n\n      return contextStream.result();\n    }\n\n    path.area = function (object) {\n      geoStream(object, projectionStream(areaStream));\n      return areaStream.result();\n    };\n\n    path.measure = function (object) {\n      geoStream(object, projectionStream(lengthStream));\n      return lengthStream.result();\n    };\n\n    path.bounds = function (object) {\n      geoStream(object, projectionStream(boundsStream));\n      return boundsStream.result();\n    };\n\n    path.centroid = function (object) {\n      geoStream(object, projectionStream(centroidStream));\n      return centroidStream.result();\n    };\n\n    path.projection = function (_) {\n      return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n    };\n\n    path.context = function (_) {\n      if (!arguments.length) return context;\n      contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return path;\n    };\n\n    path.pointRadius = function (_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n\n    return path.projection(projection).context(context);\n  }\n\n  function transformer(methods) {\n    return function (stream) {\n      var s = new TransformStream();\n\n      for (var key in methods) s[key] = methods[key];\n\n      s.stream = stream;\n      return s;\n    };\n  }\n\n  function TransformStream() {}\n\n  TransformStream.prototype = {\n    constructor: TransformStream,\n    point: function (x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function () {\n      this.stream.sphere();\n    },\n    lineStart: function () {\n      this.stream.lineStart();\n    },\n    lineEnd: function () {\n      this.stream.lineEnd();\n    },\n    polygonStart: function () {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function () {\n      this.stream.polygonEnd();\n    }\n  };\n\n  function fit$1(projection, fitBounds, object) {\n    var clip = projection.clipExtent && projection.clipExtent();\n    projection.scale(150).translate([0, 0]);\n    if (clip != null) projection.clipExtent(null);\n    geoStream(object, projection.stream(boundsStream));\n    fitBounds(boundsStream.result());\n    if (clip != null) projection.clipExtent(clip);\n    return projection;\n  }\n\n  function fitExtent(projection, extent, object) {\n    return fit$1(projection, function (b) {\n      var w = extent[1][0] - extent[0][0],\n          h = extent[1][1] - extent[0][1],\n          k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n          x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n          y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n      projection.scale(150 * k).translate([x, y]);\n    }, object);\n  }\n  function fitSize(projection, size, object) {\n    return fitExtent(projection, [[0, 0], size], object);\n  }\n  function fitWidth(projection, width, object) {\n    return fit$1(projection, function (b) {\n      var w = +width,\n          k = w / (b[1][0] - b[0][0]),\n          x = (w - k * (b[1][0] + b[0][0])) / 2,\n          y = -k * b[0][1];\n      projection.scale(150 * k).translate([x, y]);\n    }, object);\n  }\n  function fitHeight(projection, height, object) {\n    return fit$1(projection, function (b) {\n      var h = +height,\n          k = h / (b[1][1] - b[0][1]),\n          x = -k * b[0][0],\n          y = (h - k * (b[1][1] + b[0][1])) / 2;\n      projection.scale(150 * k).translate([x, y]);\n    }, object);\n  }\n\n  var maxDepth = 16,\n      // maximum depth of subdivision\n  cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)\n\n  function resample (project, delta2) {\n    return +delta2 ? resample$1(project, delta2) : resampleNone(project);\n  }\n\n  function resampleNone(project) {\n    return transformer({\n      point: function (x, y) {\n        x = project(x, y);\n        this.stream.point(x[0], x[1]);\n      }\n    });\n  }\n\n  function resample$1(project, delta2) {\n    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0,\n          dy = y1 - y0,\n          d2 = dx * dx + dy * dy;\n\n      if (d2 > 4 * delta2 && depth--) {\n        var a = a0 + a1,\n            b = b0 + b1,\n            c = c0 + c1,\n            m = sqrt$1(a * a + b * b + c * c),\n            phi2 = asin$1(c /= m),\n            lambda2 = abs$1(abs$1(c) - 1) < epsilon$2 || abs$1(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2(b, a),\n            p = project(lambda2, phi2),\n            x2 = p[0],\n            y2 = p[1],\n            dx2 = x2 - x0,\n            dy2 = y2 - y0,\n            dz = dy * dx2 - dx * dy2;\n\n        if (dz * dz / d2 > delta2 // perpendicular projected distance\n        || abs$1((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n        || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          // angular distance\n          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n\n    return function (stream) {\n      var lambda00, x00, y00, a00, b00, c00, // first point\n      lambda0, x0, y0, a0, b0, c0; // previous point\n\n      var resampleStream = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function () {\n          stream.polygonStart();\n          resampleStream.lineStart = ringStart;\n        },\n        polygonEnd: function () {\n          stream.polygonEnd();\n          resampleStream.lineStart = lineStart;\n        }\n      };\n\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n\n      function lineStart() {\n        x0 = NaN;\n        resampleStream.point = linePoint;\n        stream.lineStart();\n      }\n\n      function linePoint(lambda, phi) {\n        var c = cartesian([lambda, phi]),\n            p = project(lambda, phi);\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n\n      function lineEnd() {\n        resampleStream.point = point;\n        stream.lineEnd();\n      }\n\n      function ringStart() {\n        lineStart();\n        resampleStream.point = ringPoint;\n        resampleStream.lineEnd = ringEnd;\n      }\n\n      function ringPoint(lambda, phi) {\n        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resampleStream.point = linePoint;\n      }\n\n      function ringEnd() {\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n        resampleStream.lineEnd = lineEnd;\n        lineEnd();\n      }\n\n      return resampleStream;\n    };\n  }\n\n  var transformRadians = transformer({\n    point: function (x, y) {\n      this.stream.point(x * radians, y * radians);\n    }\n  });\n\n  function transformRotate(rotate) {\n    return transformer({\n      point: function (x, y) {\n        var r = rotate(x, y);\n        return this.stream.point(r[0], r[1]);\n      }\n    });\n  }\n\n  function scaleTranslate(k, dx, dy, sx, sy) {\n    function transform(x, y) {\n      x *= sx;\n      y *= sy;\n      return [dx + k * x, dy - k * y];\n    }\n\n    transform.invert = function (x, y) {\n      return [(x - dx) / k * sx, (dy - y) / k * sy];\n    };\n\n    return transform;\n  }\n\n  function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {\n    if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);\n    var cosAlpha = cos$1(alpha),\n        sinAlpha = sin$1(alpha),\n        a = cosAlpha * k,\n        b = sinAlpha * k,\n        ai = cosAlpha / k,\n        bi = sinAlpha / k,\n        ci = (sinAlpha * dy - cosAlpha * dx) / k,\n        fi = (sinAlpha * dx + cosAlpha * dy) / k;\n\n    function transform(x, y) {\n      x *= sx;\n      y *= sy;\n      return [a * x - b * y + dx, dy - b * x - a * y];\n    }\n\n    transform.invert = function (x, y) {\n      return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];\n    };\n\n    return transform;\n  }\n\n  function projection$1(project) {\n    return projectionMutator(function () {\n      return project;\n    })();\n  }\n  function projectionMutator(projectAt) {\n    var project,\n        k = 150,\n        // scale\n    x = 480,\n        y = 250,\n        // translate\n    lambda = 0,\n        phi = 0,\n        // center\n    deltaLambda = 0,\n        deltaPhi = 0,\n        deltaGamma = 0,\n        rotate,\n        // pre-rotate\n    alpha = 0,\n        // post-rotate angle\n    sx = 1,\n        // reflectX\n    sy = 1,\n        // reflectX\n    theta = null,\n        preclip = clipAntimeridian,\n        // pre-clip angle\n    x0 = null,\n        y0,\n        x1,\n        y1,\n        postclip = identity,\n        // post-clip extent\n    delta2 = 0.5,\n        // precision\n    projectResample,\n        projectTransform,\n        projectRotateTransform,\n        cache,\n        cacheStream;\n\n    function projection(point) {\n      return projectRotateTransform(point[0] * radians, point[1] * radians);\n    }\n\n    function invert(point) {\n      point = projectRotateTransform.invert(point[0], point[1]);\n      return point && [point[0] * degrees, point[1] * degrees];\n    }\n\n    projection.stream = function (stream) {\n      return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n    };\n\n    projection.preclip = function (_) {\n      return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n    };\n\n    projection.postclip = function (_) {\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n    };\n\n    projection.clipAngle = function (_) {\n      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n    };\n\n    projection.clipExtent = function (_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    };\n\n    projection.scale = function (_) {\n      return arguments.length ? (k = +_, recenter()) : k;\n    };\n\n    projection.translate = function (_) {\n      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n    };\n\n    projection.center = function (_) {\n      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n    };\n\n    projection.rotate = function (_) {\n      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n    };\n\n    projection.angle = function (_) {\n      return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n    };\n\n    projection.reflectX = function (_) {\n      return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;\n    };\n\n    projection.reflectY = function (_) {\n      return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;\n    };\n\n    projection.precision = function (_) {\n      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);\n    };\n\n    projection.fitExtent = function (extent, object) {\n      return fitExtent(projection, extent, object);\n    };\n\n    projection.fitSize = function (size, object) {\n      return fitSize(projection, size, object);\n    };\n\n    projection.fitWidth = function (width, object) {\n      return fitWidth(projection, width, object);\n    };\n\n    projection.fitHeight = function (height, object) {\n      return fitHeight(projection, height, object);\n    };\n\n    function recenter() {\n      var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),\n          transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);\n      rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n      projectTransform = compose(project, transform);\n      projectRotateTransform = compose(rotate, projectTransform);\n      projectResample = resample(projectTransform, delta2);\n      return reset();\n    }\n\n    function reset() {\n      cache = cacheStream = null;\n      return projection;\n    }\n\n    return function () {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return recenter();\n    };\n  }\n\n  function conicProjection(projectAt) {\n    var phi0 = 0,\n        phi1 = pi$1 / 3,\n        m = projectionMutator(projectAt),\n        p = m(phi0, phi1);\n\n    p.parallels = function (_) {\n      return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n    };\n\n    return p;\n  }\n\n  function cylindricalEqualAreaRaw(phi0) {\n    var cosPhi0 = cos$1(phi0);\n\n    function forward(lambda, phi) {\n      return [lambda * cosPhi0, sin$1(phi) / cosPhi0];\n    }\n\n    forward.invert = function (x, y) {\n      return [x / cosPhi0, asin$1(y * cosPhi0)];\n    };\n\n    return forward;\n  }\n\n  function conicEqualAreaRaw(y0, y1) {\n    var sy0 = sin$1(y0),\n        n = (sy0 + sin$1(y1)) / 2; // Are the parallels symmetrical around the Equator?\n\n    if (abs$1(n) < epsilon$2) return cylindricalEqualAreaRaw(y0);\n    var c = 1 + sy0 * (2 * n - sy0),\n        r0 = sqrt$1(c) / n;\n\n    function project(x, y) {\n      var r = sqrt$1(c - 2 * n * sin$1(y)) / n;\n      return [r * sin$1(x *= n), r0 - r * cos$1(x)];\n    }\n\n    project.invert = function (x, y) {\n      var r0y = r0 - y,\n          l = atan2(x, abs$1(r0y)) * sign(r0y);\n      if (r0y * n < 0) l -= pi$1 * sign(x) * sign(r0y);\n      return [l / n, asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n    };\n\n    return project;\n  }\n  function geoConicEqualArea () {\n    return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);\n  }\n\n  function geoAlbers () {\n    return geoConicEqualArea().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);\n  }\n\n  // as this will avoid emitting interleaving lines and polygons.\n\n  function multiplex(streams) {\n    var n = streams.length;\n    return {\n      point: function (x, y) {\n        var i = -1;\n\n        while (++i < n) streams[i].point(x, y);\n      },\n      sphere: function () {\n        var i = -1;\n\n        while (++i < n) streams[i].sphere();\n      },\n      lineStart: function () {\n        var i = -1;\n\n        while (++i < n) streams[i].lineStart();\n      },\n      lineEnd: function () {\n        var i = -1;\n\n        while (++i < n) streams[i].lineEnd();\n      },\n      polygonStart: function () {\n        var i = -1;\n\n        while (++i < n) streams[i].polygonStart();\n      },\n      polygonEnd: function () {\n        var i = -1;\n\n        while (++i < n) streams[i].polygonEnd();\n      }\n    };\n  } // A composite projection for the United States, configured by default for\n  // 960\u00d7500. The projection also works quite well at 960\u00d7600 if you change the\n  // scale to 1285 and adjust the translate accordingly. The set of standard\n  // parallels for each region comes from USGS, which is published here:\n  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\n\n\n  function geoAlbersUsa () {\n    var cache,\n        cacheStream,\n        lower48 = geoAlbers(),\n        lower48Point,\n        alaska = geoConicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),\n        alaskaPoint,\n        // EPSG:3338\n    hawaii = geoConicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),\n        hawaiiPoint,\n        // ESRI:102007\n    point,\n        pointStream = {\n      point: function (x, y) {\n        point = [x, y];\n      }\n    };\n\n    function albersUsa(coordinates) {\n      var x = coordinates[0],\n          y = coordinates[1];\n      return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);\n    }\n\n    albersUsa.invert = function (coordinates) {\n      var k = lower48.scale(),\n          t = lower48.translate(),\n          x = (coordinates[0] - t[0]) / k,\n          y = (coordinates[1] - t[1]) / k;\n      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);\n    };\n\n    albersUsa.stream = function (stream) {\n      return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n    };\n\n    albersUsa.precision = function (_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n      return reset();\n    };\n\n    albersUsa.scale = function (_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n\n    albersUsa.translate = function (_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(),\n          x = +_[0],\n          y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);\n      alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + epsilon$2, y + 0.120 * k + epsilon$2], [x - 0.214 * k - epsilon$2, y + 0.234 * k - epsilon$2]]).stream(pointStream);\n      hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + epsilon$2, y + 0.166 * k + epsilon$2], [x - 0.115 * k - epsilon$2, y + 0.234 * k - epsilon$2]]).stream(pointStream);\n      return reset();\n    };\n\n    albersUsa.fitExtent = function (extent, object) {\n      return fitExtent(albersUsa, extent, object);\n    };\n\n    albersUsa.fitSize = function (size, object) {\n      return fitSize(albersUsa, size, object);\n    };\n\n    albersUsa.fitWidth = function (width, object) {\n      return fitWidth(albersUsa, width, object);\n    };\n\n    albersUsa.fitHeight = function (height, object) {\n      return fitHeight(albersUsa, height, object);\n    };\n\n    function reset() {\n      cache = cacheStream = null;\n      return albersUsa;\n    }\n\n    return albersUsa.scale(1070);\n  }\n\n  function azimuthalRaw(scale) {\n    return function (x, y) {\n      var cx = cos$1(x),\n          cy = cos$1(y),\n          k = scale(cx * cy);\n      if (k === Infinity) return [2, 0];\n      return [k * cy * sin$1(x), k * sin$1(y)];\n    };\n  }\n  function azimuthalInvert(angle) {\n    return function (x, y) {\n      var z = sqrt$1(x * x + y * y),\n          c = angle(z),\n          sc = sin$1(c),\n          cc = cos$1(c);\n      return [atan2(x * sc, z * cc), asin$1(z && y * sc / z)];\n    };\n  }\n\n  var azimuthalEqualAreaRaw = azimuthalRaw(function (cxcy) {\n    return sqrt$1(2 / (1 + cxcy));\n  });\n  azimuthalEqualAreaRaw.invert = azimuthalInvert(function (z) {\n    return 2 * asin$1(z / 2);\n  });\n  function geoAzimuthalEqualArea () {\n    return projection$1(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);\n  }\n\n  var azimuthalEquidistantRaw = azimuthalRaw(function (c) {\n    return (c = acos(c)) && c / sin$1(c);\n  });\n  azimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {\n    return z;\n  });\n  function geoAzimuthalEquidistant () {\n    return projection$1(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);\n  }\n\n  function mercatorRaw(lambda, phi) {\n    return [lambda, log$1(tan((halfPi$1 + phi) / 2))];\n  }\n\n  mercatorRaw.invert = function (x, y) {\n    return [x, 2 * atan(exp(y)) - halfPi$1];\n  };\n\n  function geoMercator () {\n    return mercatorProjection(mercatorRaw).scale(961 / tau$1);\n  }\n  function mercatorProjection(project) {\n    var m = projection$1(project),\n        center = m.center,\n        scale = m.scale,\n        translate = m.translate,\n        clipExtent = m.clipExtent,\n        x0 = null,\n        y0,\n        x1,\n        y1; // clip extent\n\n    m.scale = function (_) {\n      return arguments.length ? (scale(_), reclip()) : scale();\n    };\n\n    m.translate = function (_) {\n      return arguments.length ? (translate(_), reclip()) : translate();\n    };\n\n    m.center = function (_) {\n      return arguments.length ? (center(_), reclip()) : center();\n    };\n\n    m.clipExtent = function (_) {\n      return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    };\n\n    function reclip() {\n      var k = pi$1 * scale(),\n          t = m(rotation(m.rotate()).invert([0, 0]));\n      return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n    }\n\n    return reclip();\n  }\n\n  function tany(y) {\n    return tan((halfPi$1 + y) / 2);\n  }\n\n  function conicConformalRaw(y0, y1) {\n    var cy0 = cos$1(y0),\n        n = y0 === y1 ? sin$1(y0) : log$1(cy0 / cos$1(y1)) / log$1(tany(y1) / tany(y0)),\n        f = cy0 * pow$1(tany(y0), n) / n;\n    if (!n) return mercatorRaw;\n\n    function project(x, y) {\n      if (f > 0) {\n        if (y < -halfPi$1 + epsilon$2) y = -halfPi$1 + epsilon$2;\n      } else {\n        if (y > halfPi$1 - epsilon$2) y = halfPi$1 - epsilon$2;\n      }\n\n      var r = f / pow$1(tany(y), n);\n      return [r * sin$1(n * x), f - r * cos$1(n * x)];\n    }\n\n    project.invert = function (x, y) {\n      var fy = f - y,\n          r = sign(n) * sqrt$1(x * x + fy * fy),\n          l = atan2(x, abs$1(fy)) * sign(fy);\n      if (fy * n < 0) l -= pi$1 * sign(x) * sign(fy);\n      return [l / n, 2 * atan(pow$1(f / r, 1 / n)) - halfPi$1];\n    };\n\n    return project;\n  }\n  function geoConicConformal () {\n    return conicProjection(conicConformalRaw).scale(109.5).parallels([30, 30]);\n  }\n\n  function equirectangularRaw(lambda, phi) {\n    return [lambda, phi];\n  }\n  equirectangularRaw.invert = equirectangularRaw;\n  function geoEquirectangular () {\n    return projection$1(equirectangularRaw).scale(152.63);\n  }\n\n  function conicEquidistantRaw(y0, y1) {\n    var cy0 = cos$1(y0),\n        n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),\n        g = cy0 / n + y0;\n    if (abs$1(n) < epsilon$2) return equirectangularRaw;\n\n    function project(x, y) {\n      var gy = g - y,\n          nx = n * x;\n      return [gy * sin$1(nx), g - gy * cos$1(nx)];\n    }\n\n    project.invert = function (x, y) {\n      var gy = g - y,\n          l = atan2(x, abs$1(gy)) * sign(gy);\n      if (gy * n < 0) l -= pi$1 * sign(x) * sign(gy);\n      return [l / n, g - sign(n) * sqrt$1(x * x + gy * gy)];\n    };\n\n    return project;\n  }\n  function geoConicEquidistant () {\n    return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);\n  }\n\n  var A1 = 1.340264,\n      A2 = -0.081106,\n      A3 = 0.000893,\n      A4 = 0.003796,\n      M = sqrt$1(3) / 2,\n      iterations = 12;\n  function equalEarthRaw(lambda, phi) {\n    var l = asin$1(M * sin$1(phi)),\n        l2 = l * l,\n        l6 = l2 * l2 * l2;\n    return [lambda * cos$1(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];\n  }\n\n  equalEarthRaw.invert = function (x, y) {\n    var l = y,\n        l2 = l * l,\n        l6 = l2 * l2 * l2;\n\n    for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n      fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n      fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n      l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n      if (abs$1(delta) < epsilon2) break;\n    }\n\n    return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos$1(l), asin$1(sin$1(l) / M)];\n  };\n\n  function geoEqualEarth () {\n    return projection$1(equalEarthRaw).scale(177.158);\n  }\n\n  function gnomonicRaw(x, y) {\n    var cy = cos$1(y),\n        k = cos$1(x) * cy;\n    return [cy * sin$1(x) / k, sin$1(y) / k];\n  }\n  gnomonicRaw.invert = azimuthalInvert(atan);\n  function geoGnomonic () {\n    return projection$1(gnomonicRaw).scale(144.049).clipAngle(60);\n  }\n\n  function geoIdentity () {\n    var k = 1,\n        tx = 0,\n        ty = 0,\n        sx = 1,\n        sy = 1,\n        // scale, translate and reflect\n    alpha = 0,\n        ca,\n        sa,\n        // angle\n    x0 = null,\n        y0,\n        x1,\n        y1,\n        // clip extent\n    kx = 1,\n        ky = 1,\n        transform = transformer({\n      point: function (x, y) {\n        var p = projection([x, y]);\n        this.stream.point(p[0], p[1]);\n      }\n    }),\n        postclip = identity,\n        cache,\n        cacheStream;\n\n    function reset() {\n      kx = k * sx;\n      ky = k * sy;\n      cache = cacheStream = null;\n      return projection;\n    }\n\n    function projection(p) {\n      var x = p[0] * kx,\n          y = p[1] * ky;\n\n      if (alpha) {\n        var t = y * ca - x * sa;\n        x = x * ca + y * sa;\n        y = t;\n      }\n\n      return [x + tx, y + ty];\n    }\n\n    projection.invert = function (p) {\n      var x = p[0] - tx,\n          y = p[1] - ty;\n\n      if (alpha) {\n        var t = y * ca + x * sa;\n        x = x * ca - y * sa;\n        y = t;\n      }\n\n      return [x / kx, y / ky];\n    };\n\n    projection.stream = function (stream) {\n      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));\n    };\n\n    projection.postclip = function (_) {\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n    };\n\n    projection.clipExtent = function (_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    };\n\n    projection.scale = function (_) {\n      return arguments.length ? (k = +_, reset()) : k;\n    };\n\n    projection.translate = function (_) {\n      return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];\n    };\n\n    projection.angle = function (_) {\n      return arguments.length ? (alpha = _ % 360 * radians, sa = sin$1(alpha), ca = cos$1(alpha), reset()) : alpha * degrees;\n    };\n\n    projection.reflectX = function (_) {\n      return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;\n    };\n\n    projection.reflectY = function (_) {\n      return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;\n    };\n\n    projection.fitExtent = function (extent, object) {\n      return fitExtent(projection, extent, object);\n    };\n\n    projection.fitSize = function (size, object) {\n      return fitSize(projection, size, object);\n    };\n\n    projection.fitWidth = function (width, object) {\n      return fitWidth(projection, width, object);\n    };\n\n    projection.fitHeight = function (height, object) {\n      return fitHeight(projection, height, object);\n    };\n\n    return projection;\n  }\n\n  function naturalEarth1Raw(lambda, phi) {\n    var phi2 = phi * phi,\n        phi4 = phi2 * phi2;\n    return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];\n  }\n\n  naturalEarth1Raw.invert = function (x, y) {\n    var phi = y,\n        i = 25,\n        delta;\n\n    do {\n      var phi2 = phi * phi,\n          phi4 = phi2 * phi2;\n      phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n    } while (abs$1(delta) > epsilon$2 && --i > 0);\n\n    return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];\n  };\n\n  function geoNaturalEarth1 () {\n    return projection$1(naturalEarth1Raw).scale(175.295);\n  }\n\n  function orthographicRaw(x, y) {\n    return [cos$1(y) * sin$1(x), sin$1(y)];\n  }\n  orthographicRaw.invert = azimuthalInvert(asin$1);\n  function geoOrthographic () {\n    return projection$1(orthographicRaw).scale(249.5).clipAngle(90 + epsilon$2);\n  }\n\n  function stereographicRaw(x, y) {\n    var cy = cos$1(y),\n        k = 1 + cos$1(x) * cy;\n    return [cy * sin$1(x) / k, sin$1(y) / k];\n  }\n  stereographicRaw.invert = azimuthalInvert(function (z) {\n    return 2 * atan(z);\n  });\n  function geoStereographic () {\n    return projection$1(stereographicRaw).scale(250).clipAngle(142);\n  }\n\n  function transverseMercatorRaw(lambda, phi) {\n    return [log$1(tan((halfPi$1 + phi) / 2)), -lambda];\n  }\n\n  transverseMercatorRaw.invert = function (x, y) {\n    return [-y, 2 * atan(exp(x)) - halfPi$1];\n  };\n\n  function geoTransverseMercator () {\n    var m = mercatorProjection(transverseMercatorRaw),\n        center = m.center,\n        rotate = m.rotate;\n\n    m.center = function (_) {\n      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n    };\n\n    m.rotate = function (_) {\n      return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n    };\n\n    return rotate([0, 0, 90]).scale(159.155);\n  }\n\n  var abs = Math.abs;\n  var cos = Math.cos;\n  var sin = Math.sin;\n  var epsilon$1 = 1e-6;\n  var pi = Math.PI;\n  var halfPi = pi / 2;\n  var sqrt2 = sqrt(2);\n  function asin(x) {\n    return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n  }\n  function sqrt(x) {\n    return x > 0 ? Math.sqrt(x) : 0;\n  }\n\n  function mollweideBromleyTheta(cp, phi) {\n    var cpsinPhi = cp * sin(phi),\n        i = 30,\n        delta;\n\n    do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi)); while (abs(delta) > epsilon$1 && --i > 0);\n\n    return phi / 2;\n  }\n  function mollweideBromleyRaw(cx, cy, cp) {\n    function forward(lambda, phi) {\n      return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n    }\n\n    forward.invert = function (x, y) {\n      return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n    };\n\n    return forward;\n  }\n  var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n  function geoMollweide () {\n    return projection$1(mollweideRaw).scale(169.529);\n  }\n\n  const defaultPath = geoPath();\n  const projectionProperties = [// standard properties in d3-geo\n  'clipAngle', 'clipExtent', 'scale', 'translate', 'center', 'rotate', 'parallels', 'precision', 'reflectX', 'reflectY', // extended properties in d3-geo-projections\n  'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];\n  /**\n   * Augment projections with their type and a copy method.\n   */\n\n  function create$1(type, constructor) {\n    return function projection() {\n      const p = constructor();\n      p.type = type;\n      p.path = geoPath().projection(p);\n\n      p.copy = p.copy || function () {\n        const c = projection();\n        projectionProperties.forEach(prop => {\n          if (p[prop]) c[prop](p[prop]());\n        });\n        c.path.pointRadius(p.path.pointRadius());\n        return c;\n      };\n\n      return p;\n    };\n  }\n\n  function projection(type, proj) {\n    if (!type || typeof type !== 'string') {\n      throw new Error('Projection type must be a name string.');\n    }\n\n    type = type.toLowerCase();\n\n    if (arguments.length > 1) {\n      projections[type] = create$1(type, proj);\n      return this;\n    } else {\n      return projections[type] || null;\n    }\n  }\n\n  function getProjectionPath(proj) {\n    return proj && proj.path || defaultPath;\n  }\n\n  const projections = {\n    // base d3-geo projection types\n    albers: geoAlbers,\n    albersusa: geoAlbersUsa,\n    azimuthalequalarea: geoAzimuthalEqualArea,\n    azimuthalequidistant: geoAzimuthalEquidistant,\n    conicconformal: geoConicConformal,\n    conicequalarea: geoConicEqualArea,\n    conicequidistant: geoConicEquidistant,\n    equalEarth: geoEqualEarth,\n    equirectangular: geoEquirectangular,\n    gnomonic: geoGnomonic,\n    identity: geoIdentity,\n    mercator: geoMercator,\n    mollweide: geoMollweide,\n    naturalEarth1: geoNaturalEarth1,\n    orthographic: geoOrthographic,\n    stereographic: geoStereographic,\n    transversemercator: geoTransverseMercator\n  };\n\n  for (const key in projections) {\n    projection(key, projections[key]);\n  }\n\n  function noop$1() {}\n\n  const cases = [[], [[[1.0, 1.5], [0.5, 1.0]]], [[[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [0.5, 1.0]]], [[[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 0.5], [1.0, 1.5]]], [[[1.0, 0.5], [0.5, 1.0]]], [[[0.5, 1.0], [1.0, 0.5]]], [[[1.0, 1.5], [1.0, 0.5]]], [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [1.0, 0.5]]], [[[0.5, 1.0], [1.5, 1.0]]], [[[1.0, 1.5], [1.5, 1.0]]], [[[0.5, 1.0], [1.0, 1.5]]], []]; // Implementation adapted from d3/d3-contour. Thanks!\n\n  function contours() {\n    var dx = 1,\n        dy = 1,\n        smooth = smoothLinear;\n\n    function contours(values, tz) {\n      return tz.map(value => contour(values, value));\n    } // Accumulate, smooth contour rings, assign holes to exterior rings.\n    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\n\n\n    function contour(values, value) {\n      var polygons = [],\n          holes = [];\n      isorings(values, value, ring => {\n        smooth(ring, values, value);\n        if (area(ring) > 0) polygons.push([ring]);else holes.push(ring);\n      });\n      holes.forEach(hole => {\n        for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\n          if (contains((polygon = polygons[i])[0], hole) !== -1) {\n            polygon.push(hole);\n            return;\n          }\n        }\n      });\n      return {\n        type: 'MultiPolygon',\n        value: value,\n        coordinates: polygons\n      };\n    } // Marching squares with isolines stitched into rings.\n    // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\n\n\n    function isorings(values, value, callback) {\n      var fragmentByStart = new Array(),\n          fragmentByEnd = new Array(),\n          x,\n          y,\n          t0,\n          t1,\n          t2,\n          t3; // Special case for the first row (y = -1, t2 = t3 = 0).\n\n      x = y = -1;\n      t1 = values[0] >= value;\n      cases[t1 << 1].forEach(stitch);\n\n      while (++x < dx - 1) {\n        t0 = t1, t1 = values[x + 1] >= value;\n        cases[t0 | t1 << 1].forEach(stitch);\n      }\n\n      cases[t1 << 0].forEach(stitch); // General case for the intermediate rows.\n\n      while (++y < dy - 1) {\n        x = -1;\n        t1 = values[y * dx + dx] >= value;\n        t2 = values[y * dx] >= value;\n        cases[t1 << 1 | t2 << 2].forEach(stitch);\n\n        while (++x < dx - 1) {\n          t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;\n          t3 = t2, t2 = values[y * dx + x + 1] >= value;\n          cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\n        }\n\n        cases[t1 | t2 << 3].forEach(stitch);\n      } // Special case for the last row (y = dy - 1, t0 = t1 = 0).\n\n\n      x = -1;\n      t2 = values[y * dx] >= value;\n      cases[t2 << 2].forEach(stitch);\n\n      while (++x < dx - 1) {\n        t3 = t2, t2 = values[y * dx + x + 1] >= value;\n        cases[t2 << 2 | t3 << 3].forEach(stitch);\n      }\n\n      cases[t2 << 3].forEach(stitch);\n\n      function stitch(line) {\n        var start = [line[0][0] + x, line[0][1] + y],\n            end = [line[1][0] + x, line[1][1] + y],\n            startIndex = index(start),\n            endIndex = index(end),\n            f,\n            g;\n\n        if (f = fragmentByEnd[startIndex]) {\n          if (g = fragmentByStart[endIndex]) {\n            delete fragmentByEnd[f.end];\n            delete fragmentByStart[g.start];\n\n            if (f === g) {\n              f.ring.push(end);\n              callback(f.ring);\n            } else {\n              fragmentByStart[f.start] = fragmentByEnd[g.end] = {\n                start: f.start,\n                end: g.end,\n                ring: f.ring.concat(g.ring)\n              };\n            }\n          } else {\n            delete fragmentByEnd[f.end];\n            f.ring.push(end);\n            fragmentByEnd[f.end = endIndex] = f;\n          }\n        } else if (f = fragmentByStart[endIndex]) {\n          if (g = fragmentByEnd[startIndex]) {\n            delete fragmentByStart[f.start];\n            delete fragmentByEnd[g.end];\n\n            if (f === g) {\n              f.ring.push(end);\n              callback(f.ring);\n            } else {\n              fragmentByStart[g.start] = fragmentByEnd[f.end] = {\n                start: g.start,\n                end: f.end,\n                ring: g.ring.concat(f.ring)\n              };\n            }\n          } else {\n            delete fragmentByStart[f.start];\n            f.ring.unshift(start);\n            fragmentByStart[f.start = startIndex] = f;\n          }\n        } else {\n          fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {\n            start: startIndex,\n            end: endIndex,\n            ring: [start, end]\n          };\n        }\n      }\n    }\n\n    function index(point) {\n      return point[0] * 2 + point[1] * (dx + 1) * 4;\n    }\n\n    function smoothLinear(ring, values, value) {\n      ring.forEach(point => {\n        var x = point[0],\n            y = point[1],\n            xt = x | 0,\n            yt = y | 0,\n            v0,\n            v1 = values[yt * dx + xt];\n\n        if (x > 0 && x < dx && xt === x) {\n          v0 = values[yt * dx + xt - 1];\n          point[0] = x + (value - v0) / (v1 - v0) - 0.5;\n        }\n\n        if (y > 0 && y < dy && yt === y) {\n          v0 = values[(yt - 1) * dx + xt];\n          point[1] = y + (value - v0) / (v1 - v0) - 0.5;\n        }\n      });\n    }\n\n    contours.contour = contour;\n\n    contours.size = function (_) {\n      if (!arguments.length) return [dx, dy];\n\n      var _0 = Math.floor(_[0]),\n          _1 = Math.floor(_[1]);\n\n      if (!(_0 >= 0 && _1 >= 0)) error('invalid size');\n      return dx = _0, dy = _1, contours;\n    };\n\n    contours.smooth = function (_) {\n      return arguments.length ? (smooth = _ ? smoothLinear : noop$1, contours) : smooth === smoothLinear;\n    };\n\n    return contours;\n  }\n\n  function area(ring) {\n    var i = 0,\n        n = ring.length,\n        area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n\n    while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n\n    return area;\n  }\n\n  function contains(ring, hole) {\n    var i = -1,\n        n = hole.length,\n        c;\n\n    while (++i < n) if (c = ringContains(ring, hole[i])) return c;\n\n    return 0;\n  }\n\n  function ringContains(ring, point) {\n    var x = point[0],\n        y = point[1],\n        contains = -1;\n\n    for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n      var pi = ring[i],\n          xi = pi[0],\n          yi = pi[1],\n          pj = ring[j],\n          xj = pj[0],\n          yj = pj[1];\n      if (segmentContains(pi, pj, point)) return 0;\n      if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;\n    }\n\n    return contains;\n  }\n\n  function segmentContains(a, b, c) {\n    var i;\n    return collinear$1(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);\n  }\n\n  function collinear$1(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);\n  }\n\n  function within(p, q, r) {\n    return p <= q && q <= r || r <= q && q <= p;\n  }\n\n  function quantize(k, nice, zero) {\n    return function (values) {\n      var ex = extent(values),\n          start = zero ? Math.min(ex[0], 0) : ex[0],\n          stop = ex[1],\n          span = stop - start,\n          step = nice ? tickStep(start, stop, k) : span / (k + 1);\n      return range$1$1(start + step, stop, step);\n    };\n  }\n  /**\n   * Generate isocontours (level sets) based on input raster grid data.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} [params.field] - The field with raster grid\n   *   data. If unspecified, the tuple itself is interpreted as a raster grid.\n   * @param {Array<number>} [params.thresholds] - Contour threshold array. If\n   *   specified, the levels, nice, resolve, and zero parameters are ignored.\n   * @param {number} [params.levels] - The desired number of contour levels.\n   * @param {boolean} [params.nice] - Boolean flag indicating if the contour\n   *   threshold values should be automatically aligned to \"nice\"\n   *   human-friendly values. Setting this flag may cause the number of\n   *   thresholds to deviate from the specified levels.\n   * @param {string} [params.resolve] - The method for resolving thresholds\n   *   across multiple input grids. If 'independent' (the default), threshold\n   *   calculation will be performed separately for each grid. If 'shared', a\n   *   single set of threshold values will be used for all input grids.\n   * @param {boolean} [params.zero] - Boolean flag indicating if the contour\n   *   threshold values should include zero.\n   * @param {boolean} [params.smooth] - Boolean flag indicating if the contour\n   *   polygons should be smoothed using linear interpolation. The default is\n   *   true. The parameter is ignored when using density estimation.\n   * @param {boolean} [params.scale] - Optional numerical value by which to\n   *   scale the output isocontour coordinates. This parameter can be useful\n   *   to scale the contours to match a desired output resolution.\n   * @param {string} [params.as='contour'] - The output field in which to store\n   *   the generated isocontour data (default 'contour').\n   */\n\n\n  function Isocontour(params) {\n    Transform.call(this, null, params);\n  }\n\n  Isocontour.Definition = {\n    'type': 'Isocontour',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'thresholds',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'levels',\n      'type': 'number'\n    }, {\n      'name': 'nice',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'resolve',\n      'type': 'enum',\n      'values': ['shared', 'independent'],\n      'default': 'independent'\n    }, {\n      'name': 'zero',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'smooth',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'scale',\n      'type': 'number',\n      'expr': true\n    }, {\n      'name': 'translate',\n      'type': 'number',\n      'array': true,\n      'expr': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'default': 'contour'\n    }]\n  };\n  inherits(Isocontour, Transform, {\n    transform(_, pulse) {\n      if (this.value && !pulse.changed() && !_.modified()) {\n        return pulse.StopPropagation;\n      }\n\n      var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          source = pulse.materialize(pulse.SOURCE).source,\n          field = _.field || identity$6,\n          contour = contours().smooth(_.smooth !== false),\n          tz = _.thresholds || levels(source, field, _),\n          as = _.as === null ? null : _.as || 'contour',\n          values = [];\n      source.forEach(t => {\n        const grid = field(t); // generate contour paths in GeoJSON format\n\n        const paths = contour.size([grid.width, grid.height])(grid.values, isArray(tz) ? tz : tz(grid.values)); // adjust contour path coordinates as needed\n\n        transformPaths(paths, grid, t, _); // ingest; copy source data properties to output\n\n        paths.forEach(p => {\n          values.push(rederive(t, ingest$1(as != null ? {\n            [as]: p\n          } : p)));\n        });\n      });\n      if (this.value) out.rem = this.value;\n      this.value = out.source = out.add = values;\n      return out;\n    }\n\n  });\n\n  function levels(values, f, _) {\n    const q = quantize(_.levels || 10, _.nice, _.zero !== false);\n    return _.resolve !== 'shared' ? q : q(values.map(t => max$2(f(t).values)));\n  }\n\n  function transformPaths(paths, grid, datum, _) {\n    let s = _.scale || grid.scale,\n        t = _.translate || grid.translate;\n    if (isFunction(s)) s = s(datum, _);\n    if (isFunction(t)) t = t(datum, _);\n    if ((s === 1 || s == null) && !t) return;\n    const sx = (isNumber$1(s) ? s : s[0]) || 1,\n          sy = (isNumber$1(s) ? s : s[1]) || 1,\n          tx = t && t[0] || 0,\n          ty = t && t[1] || 0;\n    paths.forEach(transform$1(grid, sx, sy, tx, ty));\n  }\n\n  function transform$1(grid, sx, sy, tx, ty) {\n    const x1 = grid.x1 || 0,\n          y1 = grid.y1 || 0,\n          flip = sx * sy < 0;\n\n    function transformPolygon(coordinates) {\n      coordinates.forEach(transformRing);\n    }\n\n    function transformRing(coordinates) {\n      if (flip) coordinates.reverse(); // maintain winding order\n\n      coordinates.forEach(transformPoint);\n    }\n\n    function transformPoint(coordinates) {\n      coordinates[0] = (coordinates[0] - x1) * sx + tx;\n      coordinates[1] = (coordinates[1] - y1) * sy + ty;\n    }\n\n    return function (geometry) {\n      geometry.coordinates.forEach(transformPolygon);\n      return geometry;\n    };\n  }\n\n  function radius(bw, data, f) {\n    const v = bw >= 0 ? bw : estimateBandwidth(data, f);\n    return Math.round((Math.sqrt(4 * v * v + 1) - 1) / 2);\n  }\n\n  function number$2(_) {\n    return isFunction(_) ? _ : constant$4(+_);\n  } // Implementation adapted from d3/d3-contour. Thanks!\n\n\n  function density2D() {\n    var x = d => d[0],\n        y = d => d[1],\n        weight = one$2,\n        bandwidth = [-1, -1],\n        dx = 960,\n        dy = 500,\n        k = 2; // log2(cellSize)\n\n\n    function density(data, counts) {\n      const rx = radius(bandwidth[0], data, x) >> k,\n            // blur x-radius\n      ry = radius(bandwidth[1], data, y) >> k,\n            // blur y-radius\n      ox = rx ? rx + 2 : 0,\n            // x-offset padding for blur\n      oy = ry ? ry + 2 : 0,\n            // y-offset padding for blur\n      n = 2 * ox + (dx >> k),\n            // grid width\n      m = 2 * oy + (dy >> k),\n            // grid height\n      values0 = new Float32Array(n * m),\n            values1 = new Float32Array(n * m);\n      let values = values0;\n      data.forEach(d => {\n        const xi = ox + (+x(d) >> k),\n              yi = oy + (+y(d) >> k);\n\n        if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n          values0[xi + yi * n] += +weight(d);\n        }\n      });\n\n      if (rx > 0 && ry > 0) {\n        blurX(n, m, values0, values1, rx);\n        blurY(n, m, values1, values0, ry);\n        blurX(n, m, values0, values1, rx);\n        blurY(n, m, values1, values0, ry);\n        blurX(n, m, values0, values1, rx);\n        blurY(n, m, values1, values0, ry);\n      } else if (rx > 0) {\n        blurX(n, m, values0, values1, rx);\n        blurX(n, m, values1, values0, rx);\n        blurX(n, m, values0, values1, rx);\n        values = values1;\n      } else if (ry > 0) {\n        blurY(n, m, values0, values1, ry);\n        blurY(n, m, values1, values0, ry);\n        blurY(n, m, values0, values1, ry);\n        values = values1;\n      } // scale density estimates\n      // density in points per square pixel or probability density\n\n\n      const s = counts ? Math.pow(2, -2 * k) : 1 / sum(values);\n\n      for (let i = 0, sz = n * m; i < sz; ++i) values[i] *= s;\n\n      return {\n        values: values,\n        scale: 1 << k,\n        width: n,\n        height: m,\n        x1: ox,\n        y1: oy,\n        x2: ox + (dx >> k),\n        y2: oy + (dy >> k)\n      };\n    }\n\n    density.x = function (_) {\n      return arguments.length ? (x = number$2(_), density) : x;\n    };\n\n    density.y = function (_) {\n      return arguments.length ? (y = number$2(_), density) : y;\n    };\n\n    density.weight = function (_) {\n      return arguments.length ? (weight = number$2(_), density) : weight;\n    };\n\n    density.size = function (_) {\n      if (!arguments.length) return [dx, dy];\n\n      var _0 = +_[0],\n          _1 = +_[1];\n\n      if (!(_0 >= 0 && _1 >= 0)) error('invalid size');\n      return dx = _0, dy = _1, density;\n    };\n\n    density.cellSize = function (_) {\n      if (!arguments.length) return 1 << k;\n      if (!((_ = +_) >= 1)) error('invalid cell size');\n      k = Math.floor(Math.log(_) / Math.LN2);\n      return density;\n    };\n\n    density.bandwidth = function (_) {\n      if (!arguments.length) return bandwidth;\n      _ = array$5(_);\n      if (_.length === 1) _ = [+_[0], +_[0]];\n      if (_.length !== 2) error('invalid bandwidth');\n      return bandwidth = _, density;\n    };\n\n    return density;\n  }\n\n  function blurX(n, m, source, target, r) {\n    const w = (r << 1) + 1;\n\n    for (let j = 0; j < m; ++j) {\n      for (let i = 0, sr = 0; i < n + r; ++i) {\n        if (i < n) {\n          sr += source[i + j * n];\n        }\n\n        if (i >= r) {\n          if (i >= w) {\n            sr -= source[i - w + j * n];\n          }\n\n          target[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\n        }\n      }\n    }\n  }\n\n  function blurY(n, m, source, target, r) {\n    const w = (r << 1) + 1;\n\n    for (let i = 0; i < n; ++i) {\n      for (let j = 0, sr = 0; j < m + r; ++j) {\n        if (j < m) {\n          sr += source[i + j * n];\n        }\n\n        if (j >= r) {\n          if (j >= w) {\n            sr -= source[i + (j - w) * n];\n          }\n\n          target[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\n        }\n      }\n    }\n  }\n  /**\n   * Perform 2D kernel-density estimation of point data.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<number>} params.size - The [width, height] extent (in\n   *   units of input pixels) over which to perform density estimation.\n   * @param {function(object): number} params.x - The x-coordinate accessor.\n   * @param {function(object): number} params.y - The y-coordinate accessor.\n   * @param {function(object): number} [params.weight] - The weight accessor.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {number} [params.cellSize] - Contour density calculation cell size.\n   *   This parameter determines the level of spatial approximation. For example,\n   *   the default value of 4 maps to 2x reductions in both x- and y- dimensions.\n   *   A value of 1 will result in an output raster grid whose dimensions exactly\n   *   matches the size parameter.\n   * @param {Array<number>} [params.bandwidth] - The KDE kernel bandwidths,\n   *   in pixels. The input can be a two-element array specifying separate\n   *   x and y bandwidths, or a single-element array specifying both. If the\n   *   bandwidth is unspecified or less than zero, the bandwidth will be\n   *   automatically determined.\n   * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n   *   output values should be probability estimates (false, default) or\n   *   smoothed counts (true).\n   * @param {string} [params.as='grid'] - The output field in which to store\n   *   the generated raster grid (default 'grid').\n   */\n\n\n  function KDE2D(params) {\n    Transform.call(this, null, params);\n  }\n\n  KDE2D.Definition = {\n    'type': 'KDE2D',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2,\n      'required': true\n    }, {\n      'name': 'x',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'y',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'weight',\n      'type': 'field'\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'cellSize',\n      'type': 'number'\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'counts',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': 'grid'\n    }]\n  };\n  const PARAMS = ['x', 'y', 'weight', 'size', 'cellSize', 'bandwidth'];\n\n  function params(obj, _) {\n    PARAMS.forEach(param => _[param] != null ? obj[param](_[param]) : 0);\n    return obj;\n  }\n\n  inherits(KDE2D, Transform, {\n    transform(_, pulse) {\n      if (this.value && !pulse.changed() && !_.modified()) return pulse.StopPropagation;\n      var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition$2(source, _.groupby),\n          names = (_.groupby || []).map(accessorName),\n          kde = params(density2D(), _),\n          as = _.as || 'grid',\n          values = [];\n\n      function set(t, vals) {\n        for (let i = 0; i < names.length; ++i) t[names[i]] = vals[i];\n\n        return t;\n      } // generate density raster grids\n\n\n      values = groups.map(g => ingest$1(set({\n        [as]: kde(g, _.counts)\n      }, g.dims)));\n      if (this.value) out.rem = this.value;\n      this.value = out.source = out.add = values;\n      return out;\n    }\n\n  });\n\n  function partition$2(data, groupby) {\n    var groups = [],\n        get = f => f(t),\n        map,\n        i,\n        n,\n        t,\n        k,\n        g; // partition data points into groups\n\n\n    if (groupby == null) {\n      groups.push(data);\n    } else {\n      for (map = {}, i = 0, n = data.length; i < n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n\n        if (!g) {\n          map[k] = g = [];\n          g.dims = k;\n          groups.push(g);\n        }\n\n        g.push(t);\n      }\n    }\n\n    return groups;\n  }\n  /**\n   * Generate contours based on kernel-density estimation of point data.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.\n   *  If the values parameter is provided, this must be the dimensions of the input data.\n   *  If density estimation is performed, this is the output view dimensions in pixels.\n   * @param {Array<number>} [params.values] - An array of numeric values representing an\n   *  width x height grid of values over which to compute contours. If unspecified, this\n   *  transform will instead attempt to compute contours for the kernel density estimate\n   *  using values drawn from data tuples in the input pulse.\n   * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.\n   * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.\n   * @param {function(object): number} [params.weight] - The data point weight accessor for density estimation.\n   * @param {number} [params.cellSize] - Contour density calculation cell size.\n   * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.\n   * @param {Array<number>} [params.thresholds] - Contour threshold array. If\n   *   this parameter is set, the count and nice parameters will be ignored.\n   * @param {number} [params.count] - The desired number of contours.\n   * @param {boolean} [params.nice] - Boolean flag indicating if the contour\n   *   threshold values should be automatically aligned to \"nice\"\n   *   human-friendly values. Setting this flag may cause the number of\n   *   thresholds to deviate from the specified count.\n   * @param {boolean} [params.smooth] - Boolean flag indicating if the contour\n   *   polygons should be smoothed using linear interpolation. The default is\n   *   true. The parameter is ignored when using density estimation.\n   */\n\n\n  function Contour(params) {\n    Transform.call(this, null, params);\n  }\n\n  Contour.Definition = {\n    'type': 'Contour',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2,\n      'required': true\n    }, {\n      'name': 'values',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'x',\n      'type': 'field'\n    }, {\n      'name': 'y',\n      'type': 'field'\n    }, {\n      'name': 'weight',\n      'type': 'field'\n    }, {\n      'name': 'cellSize',\n      'type': 'number'\n    }, {\n      'name': 'bandwidth',\n      'type': 'number'\n    }, {\n      'name': 'count',\n      'type': 'number'\n    }, {\n      'name': 'nice',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'thresholds',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'smooth',\n      'type': 'boolean',\n      'default': true\n    }]\n  };\n  inherits(Contour, Transform, {\n    transform(_, pulse) {\n      if (this.value && !pulse.changed() && !_.modified()) {\n        return pulse.StopPropagation;\n      }\n\n      var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          contour = contours().smooth(_.smooth !== false),\n          values = _.values,\n          thresh = _.thresholds || quantize(_.count || 10, _.nice, !!values),\n          size = _.size,\n          grid,\n          post;\n\n      if (!values) {\n        values = pulse.materialize(pulse.SOURCE).source;\n        grid = params(density2D(), _)(values, true);\n        post = transform$1(grid, grid.scale || 1, grid.scale || 1, 0, 0);\n        size = [grid.width, grid.height];\n        values = grid.values;\n      }\n\n      thresh = isArray(thresh) ? thresh : thresh(values);\n      values = contour.size(size)(values, thresh);\n      if (post) values.forEach(post);\n      if (this.value) out.rem = this.value;\n      this.value = out.source = out.add = (values || []).map(ingest$1);\n      return out;\n    }\n\n  });\n  const Feature = 'Feature';\n  const FeatureCollection = 'FeatureCollection';\n  const MultiPoint = 'MultiPoint';\n  /**\n   * Consolidate an array of [longitude, latitude] points or GeoJSON features\n   * into a combined GeoJSON object. This transform is particularly useful for\n   * combining geo data for a Projection's fit argument. The resulting GeoJSON\n   * data is available as this transform's value. Input pulses are unchanged.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.fields] - A two-element array\n   *   of field accessors for the longitude and latitude values.\n   * @param {function(object): *} params.geojson - A field accessor for\n   *   retrieving GeoJSON feature data.\n   */\n\n  function GeoJSON(params) {\n    Transform.call(this, null, params);\n  }\n\n  GeoJSON.Definition = {\n    'type': 'GeoJSON',\n    'metadata': {},\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'geojson',\n      'type': 'field'\n    }]\n  };\n  inherits(GeoJSON, Transform, {\n    transform(_, pulse) {\n      var features = this._features,\n          points = this._points,\n          fields = _.fields,\n          lon = fields && fields[0],\n          lat = fields && fields[1],\n          geojson = _.geojson || !fields && identity$6,\n          flag = pulse.ADD,\n          mod;\n      mod = _.modified() || pulse.changed(pulse.REM) || pulse.modified(accessorFields(geojson)) || lon && pulse.modified(accessorFields(lon)) || lat && pulse.modified(accessorFields(lat));\n\n      if (!this.value || mod) {\n        flag = pulse.SOURCE;\n        this._features = features = [];\n        this._points = points = [];\n      }\n\n      if (geojson) {\n        pulse.visit(flag, t => features.push(geojson(t)));\n      }\n\n      if (lon && lat) {\n        pulse.visit(flag, t => {\n          var x = lon(t),\n              y = lat(t);\n\n          if (x != null && y != null && (x = +x) === x && (y = +y) === y) {\n            points.push([x, y]);\n          }\n        });\n        features = features.concat({\n          type: Feature,\n          geometry: {\n            type: MultiPoint,\n            coordinates: points\n          }\n        });\n      }\n\n      this.value = {\n        type: FeatureCollection,\n        features: features\n      };\n    }\n\n  });\n  /**\n   * Map GeoJSON data to an SVG path string.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(number, number): *} params.projection - The cartographic\n   *   projection to apply.\n   * @param {function(object): *} [params.field] - The field with GeoJSON data,\n   *   or null if the tuple itself is a GeoJSON feature.\n   * @param {string} [params.as='path'] - The output field in which to store\n   *   the generated path data (default 'path').\n   */\n\n  function GeoPath(params) {\n    Transform.call(this, null, params);\n  }\n\n  GeoPath.Definition = {\n    'type': 'GeoPath',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'projection',\n      'type': 'projection'\n    }, {\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'pointRadius',\n      'type': 'number',\n      'expr': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': 'path'\n    }]\n  };\n  inherits(GeoPath, Transform, {\n    transform(_, pulse) {\n      var out = pulse.fork(pulse.ALL),\n          path = this.value,\n          field = _.field || identity$6,\n          as = _.as || 'path',\n          flag = out.SOURCE;\n\n      if (!path || _.modified()) {\n        // parameters updated, reset and reflow\n        this.value = path = getProjectionPath(_.projection);\n        out.materialize().reflow();\n      } else {\n        flag = field === identity$6 || pulse.modified(field.fields) ? out.ADD_MOD : out.ADD;\n      }\n\n      const prev = initPath(path, _.pointRadius);\n      out.visit(flag, t => t[as] = path(field(t)));\n      path.pointRadius(prev);\n      return out.modifies(as);\n    }\n\n  });\n\n  function initPath(path, pointRadius) {\n    const prev = path.pointRadius();\n    path.context(null);\n\n    if (pointRadius != null) {\n      path.pointRadius(pointRadius);\n    }\n\n    return prev;\n  }\n  /**\n   * Geo-code a longitude/latitude point to an x/y coordinate.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(number, number): *} params.projection - The cartographic\n   *   projection to apply.\n   * @param {Array<function(object): *>} params.fields - A two-element array of\n   *   field accessors for the longitude and latitude values.\n   * @param {Array<string>} [params.as] - A two-element array of field names\n   *   under which to store the result. Defaults to ['x','y'].\n   */\n\n\n  function GeoPoint(params) {\n    Transform.call(this, null, params);\n  }\n\n  GeoPoint.Definition = {\n    'type': 'GeoPoint',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'projection',\n      'type': 'projection',\n      'required': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['x', 'y']\n    }]\n  };\n  inherits(GeoPoint, Transform, {\n    transform(_, pulse) {\n      var proj = _.projection,\n          lon = _.fields[0],\n          lat = _.fields[1],\n          as = _.as || ['x', 'y'],\n          x = as[0],\n          y = as[1],\n          mod;\n\n      function set(t) {\n        const xy = proj([lon(t), lat(t)]);\n\n        if (xy) {\n          t[x] = xy[0];\n          t[y] = xy[1];\n        } else {\n          t[x] = undefined;\n          t[y] = undefined;\n        }\n      }\n\n      if (_.modified()) {\n        // parameters updated, reflow\n        pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);\n      } else {\n        mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);\n        pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);\n      }\n\n      return pulse.modifies(as);\n    }\n\n  });\n  /**\n   * Annotate items with a geopath shape generator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(number, number): *} params.projection - The cartographic\n   *   projection to apply.\n   * @param {function(object): *} [params.field] - The field with GeoJSON data,\n   *   or null if the tuple itself is a GeoJSON feature.\n   * @param {string} [params.as='shape'] - The output field in which to store\n   *   the generated path data (default 'shape').\n   */\n\n  function GeoShape(params) {\n    Transform.call(this, null, params);\n  }\n\n  GeoShape.Definition = {\n    'type': 'GeoShape',\n    'metadata': {\n      'modifies': true,\n      'nomod': true\n    },\n    'params': [{\n      'name': 'projection',\n      'type': 'projection'\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'default': 'datum'\n    }, {\n      'name': 'pointRadius',\n      'type': 'number',\n      'expr': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': 'shape'\n    }]\n  };\n  inherits(GeoShape, Transform, {\n    transform(_, pulse) {\n      var out = pulse.fork(pulse.ALL),\n          shape = this.value,\n          as = _.as || 'shape',\n          flag = out.ADD;\n\n      if (!shape || _.modified()) {\n        // parameters updated, reset and reflow\n        this.value = shape = shapeGenerator(getProjectionPath(_.projection), _.field || field$1('datum'), _.pointRadius);\n        out.materialize().reflow();\n        flag = out.SOURCE;\n      }\n\n      out.visit(flag, t => t[as] = shape);\n      return out.modifies(as);\n    }\n\n  });\n\n  function shapeGenerator(path, field, pointRadius) {\n    const shape = pointRadius == null ? _ => path(field(_)) : _ => {\n      var prev = path.pointRadius(),\n          value = path.pointRadius(pointRadius)(field(_));\n      path.pointRadius(prev);\n      return value;\n    };\n\n    shape.context = _ => {\n      path.context(_);\n      return shape;\n    };\n\n    return shape;\n  }\n  /**\n   * GeoJSON feature generator for creating graticules.\n   * @constructor\n   */\n\n\n  function Graticule(params) {\n    Transform.call(this, [], params);\n    this.generator = graticule();\n  }\n\n  Graticule.Definition = {\n    'type': 'Graticule',\n    'metadata': {\n      'changes': true,\n      'generates': true\n    },\n    'params': [{\n      'name': 'extent',\n      'type': 'array',\n      'array': true,\n      'length': 2,\n      'content': {\n        'type': 'number',\n        'array': true,\n        'length': 2\n      }\n    }, {\n      'name': 'extentMajor',\n      'type': 'array',\n      'array': true,\n      'length': 2,\n      'content': {\n        'type': 'number',\n        'array': true,\n        'length': 2\n      }\n    }, {\n      'name': 'extentMinor',\n      'type': 'array',\n      'array': true,\n      'length': 2,\n      'content': {\n        'type': 'number',\n        'array': true,\n        'length': 2\n      }\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'stepMajor',\n      'type': 'number',\n      'array': true,\n      'length': 2,\n      'default': [90, 360]\n    }, {\n      'name': 'stepMinor',\n      'type': 'number',\n      'array': true,\n      'length': 2,\n      'default': [10, 10]\n    }, {\n      'name': 'precision',\n      'type': 'number',\n      'default': 2.5\n    }]\n  };\n  inherits(Graticule, Transform, {\n    transform(_, pulse) {\n      var src = this.value,\n          gen = this.generator,\n          t;\n\n      if (!src.length || _.modified()) {\n        for (const prop in _) {\n          if (isFunction(gen[prop])) {\n            gen[prop](_[prop]);\n          }\n        }\n      }\n\n      t = gen();\n\n      if (src.length) {\n        pulse.mod.push(replace$1(src[0], t));\n      } else {\n        pulse.add.push(ingest$1(t));\n      }\n\n      src[0] = t;\n      return pulse;\n    }\n\n  });\n  /**\n   * Render a heatmap image for input raster grid data.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} [params.field] - The field with raster grid\n   *   data. If unspecified, the tuple itself is interpreted as a raster grid.\n   * @param {string} [params.color] - A constant color value or function for\n   *   individual pixel color. If a function, it will be invoked with an input\n   *   object that includes $x, $y, $value, and $max fields for the grid.\n   * @param {number} [params.opacity] - A constant opacity value or function for\n   *   individual pixel opacity. If a function, it will be invoked with an input\n   *   object that includes $x, $y, $value, and $max fields for the grid.\n   * @param {string} [params.resolve] - The method for resolving maximum values\n   *   across multiple input grids. If 'independent' (the default), maximum\n   *   calculation will be performed separately for each grid. If 'shared',\n   *   a single global maximum will be used for all input grids.\n   * @param {string} [params.as='image'] - The output field in which to store\n   *   the generated bitmap canvas images (default 'image').\n   */\n\n  function Heatmap(params) {\n    Transform.call(this, null, params);\n  }\n\n  Heatmap.Definition = {\n    'type': 'heatmap',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'color',\n      'type': 'string',\n      'expr': true\n    }, {\n      'name': 'opacity',\n      'type': 'number',\n      'expr': true\n    }, {\n      'name': 'resolve',\n      'type': 'enum',\n      'values': ['shared', 'independent'],\n      'default': 'independent'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': 'image'\n    }]\n  };\n  inherits(Heatmap, Transform, {\n    transform(_, pulse) {\n      if (!pulse.changed() && !_.modified()) {\n        return pulse.StopPropagation;\n      }\n\n      var source = pulse.materialize(pulse.SOURCE).source,\n          shared = _.resolve === 'shared',\n          field = _.field || identity$6,\n          opacity = opacity_(_.opacity, _),\n          color = color_(_.color, _),\n          as = _.as || 'image',\n          obj = {\n        $x: 0,\n        $y: 0,\n        $value: 0,\n        $max: shared ? max$2(source.map(t => max$2(field(t).values))) : 0\n      };\n      source.forEach(t => {\n        const v = field(t); // build proxy data object\n\n        const o = extend$1({}, t, obj); // set maximum value if not globally shared\n\n        if (!shared) o.$max = max$2(v.values || []); // generate canvas image\n        // optimize color/opacity if not pixel-dependent\n\n        t[as] = toCanvas(v, o, color.dep ? color : constant$4(color(o)), opacity.dep ? opacity : constant$4(opacity(o)));\n      });\n      return pulse.reflow(true).modifies(as);\n    }\n\n  }); // get image color function\n\n  function color_(color, _) {\n    let f;\n\n    if (isFunction(color)) {\n      f = obj => rgb$1(color(obj, _));\n\n      f.dep = dependency(color);\n    } else {\n      // default to mid-grey\n      f = constant$4(rgb$1(color || '#888'));\n    }\n\n    return f;\n  } // get image opacity function\n\n\n  function opacity_(opacity, _) {\n    let f;\n\n    if (isFunction(opacity)) {\n      f = obj => opacity(obj, _);\n\n      f.dep = dependency(opacity);\n    } else if (opacity) {\n      f = constant$4(opacity);\n    } else {\n      // default to [0, max] opacity gradient\n      f = obj => obj.$value / obj.$max || 0;\n\n      f.dep = true;\n    }\n\n    return f;\n  } // check if function depends on individual pixel data\n\n\n  function dependency(f) {\n    if (!isFunction(f)) return false;\n    const set = toSet(accessorFields(f));\n    return set.$x || set.$y || set.$value || set.$max;\n  } // render raster grid to canvas\n\n\n  function toCanvas(grid, obj, color, opacity) {\n    const n = grid.width,\n          m = grid.height,\n          x1 = grid.x1 || 0,\n          y1 = grid.y1 || 0,\n          x2 = grid.x2 || n,\n          y2 = grid.y2 || m,\n          val = grid.values,\n          value = val ? i => val[i] : zero$2,\n          can = domCanvas(x2 - x1, y2 - y1),\n          ctx = can.getContext('2d'),\n          img = ctx.getImageData(0, 0, x2 - x1, y2 - y1),\n          pix = img.data;\n\n    for (let j = y1, k = 0; j < y2; ++j) {\n      obj.$y = j - y1;\n\n      for (let i = x1, r = j * n; i < x2; ++i, k += 4) {\n        obj.$x = i - x1;\n        obj.$value = value(i + r);\n        const v = color(obj);\n        pix[k + 0] = v.r;\n        pix[k + 1] = v.g;\n        pix[k + 2] = v.b;\n        pix[k + 3] = ~~(255 * opacity(obj));\n      }\n    }\n\n    ctx.putImageData(img, 0, 0);\n    return can;\n  }\n  /**\n   * Maintains a cartographic projection.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n\n  function Projection$1(params) {\n    Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n\n  inherits(Projection$1, Transform, {\n    transform(_, pulse) {\n      let proj = this.value;\n\n      if (!proj || _.modified('type')) {\n        this.value = proj = create(_.type);\n        projectionProperties.forEach(prop => {\n          if (_[prop] != null) set$1(proj, prop, _[prop]);\n        });\n      } else {\n        projectionProperties.forEach(prop => {\n          if (_.modified(prop)) set$1(proj, prop, _[prop]);\n        });\n      }\n\n      if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);\n      if (_.fit) fit(proj, _);\n      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n    }\n\n  });\n\n  function fit(proj, _) {\n    const data = collectGeoJSON(_.fit);\n    _.extent ? proj.fitExtent(_.extent, data) : _.size ? proj.fitSize(_.size, data) : 0;\n  }\n\n  function create(type) {\n    const constructor = projection((type || 'mercator').toLowerCase());\n    if (!constructor) error('Unrecognized projection type: ' + type);\n    return constructor();\n  }\n\n  function set$1(proj, key, value) {\n    if (isFunction(proj[key])) proj[key](value);\n  }\n\n  function collectGeoJSON(data) {\n    data = array$5(data);\n    return data.length === 1 ? data[0] : {\n      type: FeatureCollection,\n      features: data.reduce((a, f) => a.concat(featurize(f)), [])\n    };\n  }\n\n  function featurize(f) {\n    return f.type === FeatureCollection ? f.features : array$5(f).filter(d => d != null).map(d => d.type === Feature ? d : {\n      type: Feature,\n      geometry: d\n    });\n  }\n\n  var geo = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    contour: Contour,\n    geojson: GeoJSON,\n    geopath: GeoPath,\n    geopoint: GeoPoint,\n    geoshape: GeoShape,\n    graticule: Graticule,\n    heatmap: Heatmap,\n    isocontour: Isocontour,\n    kde2d: KDE2D,\n    projection: Projection$1\n  });\n\n  function forceCenter (x, y) {\n    var nodes,\n        strength = 1;\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n\n    function force() {\n      var i,\n          n = nodes.length,\n          node,\n          sx = 0,\n          sy = 0;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], sx += node.x, sy += node.y;\n      }\n\n      for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {\n        node = nodes[i], node.x -= sx, node.y -= sy;\n      }\n    }\n\n    force.initialize = function (_) {\n      nodes = _;\n    };\n\n    force.x = function (_) {\n      return arguments.length ? (x = +_, force) : x;\n    };\n\n    force.y = function (_) {\n      return arguments.length ? (y = +_, force) : y;\n    };\n\n    force.strength = function (_) {\n      return arguments.length ? (strength = +_, force) : strength;\n    };\n\n    return force;\n  }\n\n  function tree_add (d) {\n    const x = +this._x.call(null, d),\n          y = +this._y.call(null, d);\n    return add(this.cover(x, y), x, y, d);\n  }\n\n  function add(tree, x, y, d) {\n    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n    var parent,\n        node = tree._root,\n        leaf = {\n      data: d\n    },\n        x0 = tree._x0,\n        y0 = tree._y0,\n        x1 = tree._x1,\n        y1 = tree._y1,\n        xm,\n        ym,\n        xp,\n        yp,\n        right,\n        bottom,\n        i,\n        j; // If the tree is empty, initialize the root as a leaf.\n\n    if (!node) return tree._root = leaf, tree; // Find the existing leaf for the new point, or add it.\n\n    while (node.length) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;\n      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n    } // Is the new point is exactly coincident with the existing point?\n\n\n    xp = +tree._x.call(null, node.data);\n    yp = +tree._y.call(null, node.data);\n    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree; // Otherwise, split the leaf node until the old and new point are separated.\n\n    do {\n      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;\n    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));\n\n    return parent[j] = node, parent[i] = leaf, tree;\n  }\n\n  function addAll(data) {\n    var d,\n        i,\n        n = data.length,\n        x,\n        y,\n        xz = new Array(n),\n        yz = new Array(n),\n        x0 = Infinity,\n        y0 = Infinity,\n        x1 = -Infinity,\n        y1 = -Infinity; // Compute the points and their extent.\n\n    for (i = 0; i < n; ++i) {\n      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n      xz[i] = x;\n      yz[i] = y;\n      if (x < x0) x0 = x;\n      if (x > x1) x1 = x;\n      if (y < y0) y0 = y;\n      if (y > y1) y1 = y;\n    } // If there were no (valid) points, abort.\n\n\n    if (x0 > x1 || y0 > y1) return this; // Expand the tree to cover the new points.\n\n    this.cover(x0, y0).cover(x1, y1); // Add the new points.\n\n    for (i = 0; i < n; ++i) {\n      add(this, xz[i], yz[i], data[i]);\n    }\n\n    return this;\n  }\n\n  function tree_cover (x, y) {\n    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n    var x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1; // If the quadtree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing quadrant boundaries don\u2019t change due to floating point error!\n\n    if (isNaN(x0)) {\n      x1 = (x0 = Math.floor(x)) + 1;\n      y1 = (y0 = Math.floor(y)) + 1;\n    } // Otherwise, double repeatedly to cover.\n    else {\n        var z = x1 - x0 || 1,\n            node = this._root,\n            parent,\n            i;\n\n        while (x0 > x || x >= x1 || y0 > y || y >= y1) {\n          i = (y < y0) << 1 | x < x0;\n          parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n\n          switch (i) {\n            case 0:\n              x1 = x0 + z, y1 = y0 + z;\n              break;\n\n            case 1:\n              x0 = x1 - z, y1 = y0 + z;\n              break;\n\n            case 2:\n              x1 = x0 + z, y0 = y1 - z;\n              break;\n\n            case 3:\n              x0 = x1 - z, y0 = y1 - z;\n              break;\n          }\n        }\n\n        if (this._root && this._root.length) this._root = node;\n      }\n\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    return this;\n  }\n\n  function tree_data () {\n    var data = [];\n    this.visit(function (node) {\n      if (!node.length) do data.push(node.data); while (node = node.next);\n    });\n    return data;\n  }\n\n  function tree_extent (_) {\n    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n  }\n\n  function Quad (node, x0, y0, x1, y1) {\n    this.node = node;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n  }\n\n  function tree_find (x, y, radius) {\n    var data,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1,\n        y1,\n        x2,\n        y2,\n        x3 = this._x1,\n        y3 = this._y1,\n        quads = [],\n        node = this._root,\n        q,\n        i;\n    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n    if (radius == null) radius = Infinity;else {\n      x0 = x - radius, y0 = y - radius;\n      x3 = x + radius, y3 = y + radius;\n      radius *= radius;\n    }\n\n    while (q = quads.pop()) {\n      // Stop searching if this quadrant can\u2019t contain a closer node.\n      if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue; // Bisect the current quadrant.\n\n      if (node.length) {\n        var xm = (x1 + x2) / 2,\n            ym = (y1 + y2) / 2;\n        quads.push(new Quad(node[3], xm, ym, x2, y2), new Quad(node[2], x1, ym, xm, y2), new Quad(node[1], xm, y1, x2, ym), new Quad(node[0], x1, y1, xm, ym)); // Visit the closest quadrant first.\n\n        if (i = (y >= ym) << 1 | x >= xm) {\n          q = quads[quads.length - 1];\n          quads[quads.length - 1] = quads[quads.length - 1 - i];\n          quads[quads.length - 1 - i] = q;\n        }\n      } // Visit this point. (Visiting coincident points isn\u2019t necessary!)\n      else {\n          var dx = x - +this._x.call(null, node.data),\n              dy = y - +this._y.call(null, node.data),\n              d2 = dx * dx + dy * dy;\n\n          if (d2 < radius) {\n            var d = Math.sqrt(radius = d2);\n            x0 = x - d, y0 = y - d;\n            x3 = x + d, y3 = y + d;\n            data = node.data;\n          }\n        }\n    }\n\n    return data;\n  }\n\n  function tree_remove (d) {\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n    var parent,\n        node = this._root,\n        retainer,\n        previous,\n        next,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1,\n        x,\n        y,\n        xm,\n        ym,\n        right,\n        bottom,\n        i,\n        j; // If the tree is empty, initialize the root as a leaf.\n\n    if (!node) return this; // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n\n    if (node.length) while (true) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;\n      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n      if (!node.length) break;\n      if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;\n    } // Find the point to remove.\n\n    while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n\n    if (next = node.next) delete node.next; // If there are multiple coincident points, remove just the point.\n\n    if (previous) return next ? previous.next = next : delete previous.next, this; // If this is the root point, remove it.\n\n    if (!parent) return this._root = next, this; // Remove this leaf.\n\n    next ? parent[i] = next : delete parent[i]; // If the parent now contains exactly one leaf, collapse superfluous parents.\n\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {\n      if (retainer) retainer[j] = node;else this._root = node;\n    }\n\n    return this;\n  }\n  function removeAll(data) {\n    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n\n    return this;\n  }\n\n  function tree_root () {\n    return this._root;\n  }\n\n  function tree_size () {\n    var size = 0;\n    this.visit(function (node) {\n      if (!node.length) do ++size; while (node = node.next);\n    });\n    return size;\n  }\n\n  function tree_visit (callback) {\n    var quads = [],\n        q,\n        node = this._root,\n        child,\n        x0,\n        y0,\n        x1,\n        y1;\n    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n\n    while (q = quads.pop()) {\n      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n        var xm = (x0 + x1) / 2,\n            ym = (y0 + y1) / 2;\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      }\n    }\n\n    return this;\n  }\n\n  function tree_visitAfter (callback) {\n    var quads = [],\n        next = [],\n        q;\n    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n\n    while (q = quads.pop()) {\n      var node = q.node;\n\n      if (node.length) {\n        var child,\n            x0 = q.x0,\n            y0 = q.y0,\n            x1 = q.x1,\n            y1 = q.y1,\n            xm = (x0 + x1) / 2,\n            ym = (y0 + y1) / 2;\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      }\n\n      next.push(q);\n    }\n\n    while (q = next.pop()) {\n      callback(q.node, q.x0, q.y0, q.x1, q.y1);\n    }\n\n    return this;\n  }\n\n  function defaultX(d) {\n    return d[0];\n  }\n  function tree_x (_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n  }\n\n  function defaultY(d) {\n    return d[1];\n  }\n  function tree_y (_) {\n    return arguments.length ? (this._y = _, this) : this._y;\n  }\n\n  function quadtree(nodes, x, y) {\n    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n  }\n\n  function Quadtree(x, y, x0, y0, x1, y1) {\n    this._x = x;\n    this._y = y;\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._root = undefined;\n  }\n\n  function leaf_copy(leaf) {\n    var copy = {\n      data: leaf.data\n    },\n        next = copy;\n\n    while (leaf = leaf.next) next = next.next = {\n      data: leaf.data\n    };\n\n    return copy;\n  }\n\n  var treeProto = quadtree.prototype = Quadtree.prototype;\n\n  treeProto.copy = function () {\n    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n        node = this._root,\n        nodes,\n        child;\n    if (!node) return copy;\n    if (!node.length) return copy._root = leaf_copy(node), copy;\n    nodes = [{\n      source: node,\n      target: copy._root = new Array(4)\n    }];\n\n    while (node = nodes.pop()) {\n      for (var i = 0; i < 4; ++i) {\n        if (child = node.source[i]) {\n          if (child.length) nodes.push({\n            source: child,\n            target: node.target[i] = new Array(4)\n          });else node.target[i] = leaf_copy(child);\n        }\n      }\n    }\n\n    return copy;\n  };\n\n  treeProto.add = tree_add;\n  treeProto.addAll = addAll;\n  treeProto.cover = tree_cover;\n  treeProto.data = tree_data;\n  treeProto.extent = tree_extent;\n  treeProto.find = tree_find;\n  treeProto.remove = tree_remove;\n  treeProto.removeAll = removeAll;\n  treeProto.root = tree_root;\n  treeProto.size = tree_size;\n  treeProto.visit = tree_visit;\n  treeProto.visitAfter = tree_visitAfter;\n  treeProto.x = tree_x;\n  treeProto.y = tree_y;\n\n  function constant$1 (x) {\n    return function () {\n      return x;\n    };\n  }\n\n  function jiggle (random) {\n    return (random() - 0.5) * 1e-6;\n  }\n\n  function x$1(d) {\n    return d.x + d.vx;\n  }\n\n  function y$1(d) {\n    return d.y + d.vy;\n  }\n\n  function forceCollide (radius) {\n    var nodes,\n        radii,\n        random,\n        strength = 1,\n        iterations = 1;\n    if (typeof radius !== \"function\") radius = constant$1(radius == null ? 1 : +radius);\n\n    function force() {\n      var i,\n          n = nodes.length,\n          tree,\n          node,\n          xi,\n          yi,\n          ri,\n          ri2;\n\n      for (var k = 0; k < iterations; ++k) {\n        tree = quadtree(nodes, x$1, y$1).visitAfter(prepare);\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          ri = radii[node.index], ri2 = ri * ri;\n          xi = node.x + node.vx;\n          yi = node.y + node.vy;\n          tree.visit(apply);\n        }\n      }\n\n      function apply(quad, x0, y0, x1, y1) {\n        var data = quad.data,\n            rj = quad.r,\n            r = ri + rj;\n\n        if (data) {\n          if (data.index > node.index) {\n            var x = xi - data.x - data.vx,\n                y = yi - data.y - data.vy,\n                l = x * x + y * y;\n\n            if (l < r * r) {\n              if (x === 0) x = jiggle(random), l += x * x;\n              if (y === 0) y = jiggle(random), l += y * y;\n              l = (r - (l = Math.sqrt(l))) / l * strength;\n              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n              node.vy += (y *= l) * r;\n              data.vx -= x * (r = 1 - r);\n              data.vy -= y * r;\n            }\n          }\n\n          return;\n        }\n\n        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n      }\n    }\n\n    function prepare(quad) {\n      if (quad.data) return quad.r = radii[quad.data.index];\n\n      for (var i = quad.r = 0; i < 4; ++i) {\n        if (quad[i] && quad[i].r > quad.r) {\n          quad.r = quad[i].r;\n        }\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i,\n          n = nodes.length,\n          node;\n      radii = new Array(n);\n\n      for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n    }\n\n    force.initialize = function (_nodes, _random) {\n      nodes = _nodes;\n      random = _random;\n      initialize();\n    };\n\n    force.iterations = function (_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function (_) {\n      return arguments.length ? (strength = +_, force) : strength;\n    };\n\n    force.radius = function (_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$1(+_), initialize(), force) : radius;\n    };\n\n    return force;\n  }\n\n  function index$1(d) {\n    return d.index;\n  }\n\n  function find$1(nodeById, nodeId) {\n    var node = nodeById.get(nodeId);\n    if (!node) throw new Error(\"node not found: \" + nodeId);\n    return node;\n  }\n\n  function forceLink (links) {\n    var id = index$1,\n        strength = defaultStrength,\n        strengths,\n        distance = constant$1(30),\n        distances,\n        nodes,\n        count,\n        bias,\n        random,\n        iterations = 1;\n    if (links == null) links = [];\n\n    function defaultStrength(link) {\n      return 1 / Math.min(count[link.source.index], count[link.target.index]);\n    }\n\n    function force(alpha) {\n      for (var k = 0, n = links.length; k < iterations; ++k) {\n        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n          link = links[i], source = link.source, target = link.target;\n          x = target.x + target.vx - source.x - source.vx || jiggle(random);\n          y = target.y + target.vy - source.y - source.vy || jiggle(random);\n          l = Math.sqrt(x * x + y * y);\n          l = (l - distances[i]) / l * alpha * strengths[i];\n          x *= l, y *= l;\n          target.vx -= x * (b = bias[i]);\n          target.vy -= y * b;\n          source.vx += x * (b = 1 - b);\n          source.vy += y * b;\n        }\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i,\n          n = nodes.length,\n          m = links.length,\n          nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n          link;\n\n      for (i = 0, count = new Array(n); i < m; ++i) {\n        link = links[i], link.index = i;\n        if (typeof link.source !== \"object\") link.source = find$1(nodeById, link.source);\n        if (typeof link.target !== \"object\") link.target = find$1(nodeById, link.target);\n        count[link.source.index] = (count[link.source.index] || 0) + 1;\n        count[link.target.index] = (count[link.target.index] || 0) + 1;\n      }\n\n      for (i = 0, bias = new Array(m); i < m; ++i) {\n        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n      }\n\n      strengths = new Array(m), initializeStrength();\n      distances = new Array(m), initializeDistance();\n    }\n\n    function initializeStrength() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        strengths[i] = +strength(links[i], i, links);\n      }\n    }\n\n    function initializeDistance() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        distances[i] = +distance(links[i], i, links);\n      }\n    }\n\n    force.initialize = function (_nodes, _random) {\n      nodes = _nodes;\n      random = _random;\n      initialize();\n    };\n\n    force.links = function (_) {\n      return arguments.length ? (links = _, initialize(), force) : links;\n    };\n\n    force.id = function (_) {\n      return arguments.length ? (id = _, force) : id;\n    };\n\n    force.iterations = function (_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function (_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$1(+_), initializeStrength(), force) : strength;\n    };\n\n    force.distance = function (_) {\n      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant$1(+_), initializeDistance(), force) : distance;\n    };\n\n    return force;\n  }\n\n  var noop = {\n    value: () => {}\n  };\n\n  function dispatch() {\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n      if (!(t = arguments[i] + \"\") || t in _ || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n      _[t] = [];\n    }\n\n    return new Dispatch(_);\n  }\n\n  function Dispatch(_) {\n    this._ = _;\n  }\n\n  function parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function (t) {\n      var name = \"\",\n          i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n      return {\n        type: t,\n        name: name\n      };\n    });\n  }\n\n  Dispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function (typename, callback) {\n      var _ = this._,\n          T = parseTypenames(typename + \"\", _),\n          t,\n          i = -1,\n          n = T.length; // If no callback was specified, return the callback of the given type and name.\n\n      if (arguments.length < 2) {\n        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n\n        return;\n      } // If a type was specified, set the callback for the given type and name.\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n\n\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n\n      while (++i < n) {\n        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n      }\n\n      return this;\n    },\n    copy: function () {\n      var copy = {},\n          _ = this._;\n\n      for (var t in _) copy[t] = _[t].slice();\n\n      return new Dispatch(copy);\n    },\n    call: function (type, that) {\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    },\n    apply: function (type, that, args) {\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    }\n  };\n\n  function get(type, name) {\n    for (var i = 0, n = type.length, c; i < n; ++i) {\n      if ((c = type[i]).name === name) {\n        return c.value;\n      }\n    }\n  }\n\n  function set(type, name, callback) {\n    for (var i = 0, n = type.length; i < n; ++i) {\n      if (type[i].name === name) {\n        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n      }\n    }\n\n    if (callback != null) type.push({\n      name: name,\n      value: callback\n    });\n    return type;\n  }\n\n  var frame = 0,\n      // is an animation frame pending?\n  timeout = 0,\n      // is a timeout pending?\n  interval$1 = 0,\n      // are any timers active?\n  pokeDelay = 1000,\n      // how frequently we check for clock skew\n  taskHead,\n      taskTail,\n      clockLast = 0,\n      clockNow = 0,\n      clockSkew = 0,\n      clock = typeof performance === \"object\" && performance.now ? performance : Date,\n      setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {\n    setTimeout(f, 17);\n  };\n  function now() {\n    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n  }\n\n  function clearNow() {\n    clockNow = 0;\n  }\n\n  function Timer$1() {\n    this._call = this._time = this._next = null;\n  }\n  Timer$1.prototype = timer$1.prototype = {\n    constructor: Timer$1,\n    restart: function (callback, delay, time) {\n      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n\n      if (!this._next && taskTail !== this) {\n        if (taskTail) taskTail._next = this;else taskHead = this;\n        taskTail = this;\n      }\n\n      this._call = callback;\n      this._time = time;\n      sleep();\n    },\n    stop: function () {\n      if (this._call) {\n        this._call = null;\n        this._time = Infinity;\n        sleep();\n      }\n    }\n  };\n  function timer$1(callback, delay, time) {\n    var t = new Timer$1();\n    t.restart(callback, delay, time);\n    return t;\n  }\n  function timerFlush() {\n    now(); // Get the current time, if not already set.\n\n    ++frame; // Pretend we\u2019ve set an alarm, if we haven\u2019t already.\n\n    var t = taskHead,\n        e;\n\n    while (t) {\n      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n      t = t._next;\n    }\n\n    --frame;\n  }\n\n  function wake() {\n    clockNow = (clockLast = clock.now()) + clockSkew;\n    frame = timeout = 0;\n\n    try {\n      timerFlush();\n    } finally {\n      frame = 0;\n      nap();\n      clockNow = 0;\n    }\n  }\n\n  function poke() {\n    var now = clock.now(),\n        delay = now - clockLast;\n    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n  }\n\n  function nap() {\n    var t0,\n        t1 = taskHead,\n        t2,\n        time = Infinity;\n\n    while (t1) {\n      if (t1._call) {\n        if (time > t1._time) time = t1._time;\n        t0 = t1, t1 = t1._next;\n      } else {\n        t2 = t1._next, t1._next = null;\n        t1 = t0 ? t0._next = t2 : taskHead = t2;\n      }\n    }\n\n    taskTail = t0;\n    sleep(time);\n  }\n\n  function sleep(time) {\n    if (frame) return; // Soonest alarm already set, or will be.\n\n    if (timeout) timeout = clearTimeout(timeout);\n    var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n\n    if (delay > 24) {\n      if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n      if (interval$1) interval$1 = clearInterval(interval$1);\n    } else {\n      if (!interval$1) clockLast = clock.now(), interval$1 = setInterval(poke, pokeDelay);\n      frame = 1, setFrame(wake);\n    }\n  }\n\n  function interval (callback, delay, time) {\n    var t = new Timer$1(),\n        total = delay;\n    if (delay == null) return t.restart(callback, delay, time), t;\n    t._restart = t.restart;\n\n    t.restart = function (callback, delay, time) {\n      delay = +delay, time = time == null ? now() : +time;\n\n      t._restart(function tick(elapsed) {\n        elapsed += total;\n\n        t._restart(tick, total += delay, time);\n\n        callback(elapsed);\n      }, delay, time);\n    };\n\n    t.restart(callback, delay, time);\n    return t;\n  }\n\n  // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\n  const a = 1664525;\n  const c = 1013904223;\n  const m = 4294967296; // 2^32\n\n  function lcg () {\n    let s = 1;\n    return () => (s = (a * s + c) % m) / m;\n  }\n\n  function x(d) {\n    return d.x;\n  }\n  function y(d) {\n    return d.y;\n  }\n  var initialRadius = 10,\n      initialAngle = Math.PI * (3 - Math.sqrt(5));\n  function forceSimulation (nodes) {\n    var simulation,\n        alpha = 1,\n        alphaMin = 0.001,\n        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n        alphaTarget = 0,\n        velocityDecay = 0.6,\n        forces = new Map(),\n        stepper = timer$1(step),\n        event = dispatch(\"tick\", \"end\"),\n        random = lcg();\n    if (nodes == null) nodes = [];\n\n    function step() {\n      tick();\n      event.call(\"tick\", simulation);\n\n      if (alpha < alphaMin) {\n        stepper.stop();\n        event.call(\"end\", simulation);\n      }\n    }\n\n    function tick(iterations) {\n      var i,\n          n = nodes.length,\n          node;\n      if (iterations === undefined) iterations = 1;\n\n      for (var k = 0; k < iterations; ++k) {\n        alpha += (alphaTarget - alpha) * alphaDecay;\n        forces.forEach(function (force) {\n          force(alpha);\n        });\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          if (node.fx == null) node.x += node.vx *= velocityDecay;else node.x = node.fx, node.vx = 0;\n          if (node.fy == null) node.y += node.vy *= velocityDecay;else node.y = node.fy, node.vy = 0;\n        }\n      }\n\n      return simulation;\n    }\n\n    function initializeNodes() {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.index = i;\n        if (node.fx != null) node.x = node.fx;\n        if (node.fy != null) node.y = node.fy;\n\n        if (isNaN(node.x) || isNaN(node.y)) {\n          var radius = initialRadius * Math.sqrt(0.5 + i),\n              angle = i * initialAngle;\n          node.x = radius * Math.cos(angle);\n          node.y = radius * Math.sin(angle);\n        }\n\n        if (isNaN(node.vx) || isNaN(node.vy)) {\n          node.vx = node.vy = 0;\n        }\n      }\n    }\n\n    function initializeForce(force) {\n      if (force.initialize) force.initialize(nodes, random);\n      return force;\n    }\n\n    initializeNodes();\n    return simulation = {\n      tick: tick,\n      restart: function () {\n        return stepper.restart(step), simulation;\n      },\n      stop: function () {\n        return stepper.stop(), simulation;\n      },\n      nodes: function (_) {\n        return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n      },\n      alpha: function (_) {\n        return arguments.length ? (alpha = +_, simulation) : alpha;\n      },\n      alphaMin: function (_) {\n        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n      },\n      alphaDecay: function (_) {\n        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n      },\n      alphaTarget: function (_) {\n        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n      },\n      velocityDecay: function (_) {\n        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n      },\n      randomSource: function (_) {\n        return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n      },\n      force: function (name, _) {\n        return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);\n      },\n      find: function (x, y, radius) {\n        var i = 0,\n            n = nodes.length,\n            dx,\n            dy,\n            d2,\n            node,\n            closest;\n        if (radius == null) radius = Infinity;else radius *= radius;\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dx = x - node.x;\n          dy = y - node.y;\n          d2 = dx * dx + dy * dy;\n          if (d2 < radius) closest = node, radius = d2;\n        }\n\n        return closest;\n      },\n      on: function (name, _) {\n        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n      }\n    };\n  }\n\n  function forceManyBody () {\n    var nodes,\n        node,\n        random,\n        alpha,\n        strength = constant$1(-30),\n        strengths,\n        distanceMin2 = 1,\n        distanceMax2 = Infinity,\n        theta2 = 0.81;\n\n    function force(_) {\n      var i,\n          n = nodes.length,\n          tree = quadtree(nodes, x, y).visitAfter(accumulate);\n\n      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i,\n          n = nodes.length,\n          node;\n      strengths = new Array(n);\n\n      for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n    }\n\n    function accumulate(quad) {\n      var strength = 0,\n          q,\n          c,\n          weight = 0,\n          x,\n          y,\n          i; // For internal nodes, accumulate forces from child quadrants.\n\n      if (quad.length) {\n        for (x = y = i = 0; i < 4; ++i) {\n          if ((q = quad[i]) && (c = Math.abs(q.value))) {\n            strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n          }\n        }\n\n        quad.x = x / weight;\n        quad.y = y / weight;\n      } // For leaf nodes, accumulate forces from coincident quadrants.\n      else {\n          q = quad;\n          q.x = q.data.x;\n          q.y = q.data.y;\n\n          do strength += strengths[q.data.index]; while (q = q.next);\n        }\n\n      quad.value = strength;\n    }\n\n    function apply(quad, x1, _, x2) {\n      if (!quad.value) return true;\n      var x = quad.x - node.x,\n          y = quad.y - node.y,\n          w = x2 - x1,\n          l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.\n      // Limit forces for very close nodes; randomize direction if coincident.\n\n      if (w * w / theta2 < l) {\n        if (l < distanceMax2) {\n          if (x === 0) x = jiggle(random), l += x * x;\n          if (y === 0) y = jiggle(random), l += y * y;\n          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n          node.vx += x * quad.value * alpha / l;\n          node.vy += y * quad.value * alpha / l;\n        }\n\n        return true;\n      } // Otherwise, process points directly.\n      else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.\n\n\n      if (quad.data !== node || quad.next) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (y === 0) y = jiggle(random), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n      }\n\n      do if (quad.data !== node) {\n        w = strengths[quad.data.index] * alpha / l;\n        node.vx += x * w;\n        node.vy += y * w;\n      } while (quad = quad.next);\n    }\n\n    force.initialize = function (_nodes, _random) {\n      nodes = _nodes;\n      random = _random;\n      initialize();\n    };\n\n    force.strength = function (_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$1(+_), initialize(), force) : strength;\n    };\n\n    force.distanceMin = function (_) {\n      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n    };\n\n    force.distanceMax = function (_) {\n      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n    };\n\n    force.theta = function (_) {\n      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n    };\n\n    return force;\n  }\n\n  function forceX (x) {\n    var strength = constant$1(0.1),\n        nodes,\n        strengths,\n        xz;\n    if (typeof x !== \"function\") x = constant$1(x == null ? 0 : +x);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i,\n          n = nodes.length;\n      strengths = new Array(n);\n      xz = new Array(n);\n\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function (_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function (_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$1(+_), initialize(), force) : strength;\n    };\n\n    force.x = function (_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$1(+_), initialize(), force) : x;\n    };\n\n    return force;\n  }\n\n  function forceY (y) {\n    var strength = constant$1(0.1),\n        nodes,\n        strengths,\n        yz;\n    if (typeof y !== \"function\") y = constant$1(y == null ? 0 : +y);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i,\n          n = nodes.length;\n      strengths = new Array(n);\n      yz = new Array(n);\n\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function (_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function (_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$1(+_), initialize(), force) : strength;\n    };\n\n    force.y = function (_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$1(+_), initialize(), force) : y;\n    };\n\n    return force;\n  }\n\n  const ForceMap = {\n    center: forceCenter,\n    collide: forceCollide,\n    nbody: forceManyBody,\n    link: forceLink,\n    x: forceX,\n    y: forceY\n  };\n  const Forces = 'forces',\n        ForceParams = ['alpha', 'alphaMin', 'alphaTarget', 'velocityDecay', 'forces'],\n        ForceConfig = ['static', 'iterations'],\n        ForceOutput = ['x', 'y', 'vx', 'vy'];\n  /**\n   * Force simulation layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<object>} params.forces - The forces to apply.\n   */\n\n  function Force(params) {\n    Transform.call(this, null, params);\n  }\n\n  Force.Definition = {\n    'type': 'Force',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'static',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'restart',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'iterations',\n      'type': 'number',\n      'default': 300\n    }, {\n      'name': 'alpha',\n      'type': 'number',\n      'default': 1\n    }, {\n      'name': 'alphaMin',\n      'type': 'number',\n      'default': 0.001\n    }, {\n      'name': 'alphaTarget',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'velocityDecay',\n      'type': 'number',\n      'default': 0.4\n    }, {\n      'name': 'forces',\n      'type': 'param',\n      'array': true,\n      'params': [{\n        'key': {\n          'force': 'center'\n        },\n        'params': [{\n          'name': 'x',\n          'type': 'number',\n          'default': 0\n        }, {\n          'name': 'y',\n          'type': 'number',\n          'default': 0\n        }]\n      }, {\n        'key': {\n          'force': 'collide'\n        },\n        'params': [{\n          'name': 'radius',\n          'type': 'number',\n          'expr': true\n        }, {\n          'name': 'strength',\n          'type': 'number',\n          'default': 0.7\n        }, {\n          'name': 'iterations',\n          'type': 'number',\n          'default': 1\n        }]\n      }, {\n        'key': {\n          'force': 'nbody'\n        },\n        'params': [{\n          'name': 'strength',\n          'type': 'number',\n          'default': -30\n        }, {\n          'name': 'theta',\n          'type': 'number',\n          'default': 0.9\n        }, {\n          'name': 'distanceMin',\n          'type': 'number',\n          'default': 1\n        }, {\n          'name': 'distanceMax',\n          'type': 'number'\n        }]\n      }, {\n        'key': {\n          'force': 'link'\n        },\n        'params': [{\n          'name': 'links',\n          'type': 'data'\n        }, {\n          'name': 'id',\n          'type': 'field'\n        }, {\n          'name': 'distance',\n          'type': 'number',\n          'default': 30,\n          'expr': true\n        }, {\n          'name': 'strength',\n          'type': 'number',\n          'expr': true\n        }, {\n          'name': 'iterations',\n          'type': 'number',\n          'default': 1\n        }]\n      }, {\n        'key': {\n          'force': 'x'\n        },\n        'params': [{\n          'name': 'strength',\n          'type': 'number',\n          'default': 0.1\n        }, {\n          'name': 'x',\n          'type': 'field'\n        }]\n      }, {\n        'key': {\n          'force': 'y'\n        },\n        'params': [{\n          'name': 'strength',\n          'type': 'number',\n          'default': 0.1\n        }, {\n          'name': 'y',\n          'type': 'field'\n        }]\n      }]\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'modify': false,\n      'default': ForceOutput\n    }]\n  };\n  inherits(Force, Transform, {\n    transform(_, pulse) {\n      var sim = this.value,\n          change = pulse.changed(pulse.ADD_REM),\n          params = _.modified(ForceParams),\n          iters = _.iterations || 300; // configure simulation\n\n\n      if (!sim) {\n        this.value = sim = simulation(pulse.source, _);\n        sim.on('tick', rerun(pulse.dataflow, this));\n\n        if (!_.static) {\n          change = true;\n          sim.tick(); // ensure we run on init\n        }\n\n        pulse.modifies('index');\n      } else {\n        if (change) {\n          pulse.modifies('index');\n          sim.nodes(pulse.source);\n        }\n\n        if (params || pulse.changed(pulse.MOD)) {\n          setup(sim, _, 0, pulse);\n        }\n      } // run simulation\n\n\n      if (params || change || _.modified(ForceConfig) || pulse.changed() && _.restart) {\n        sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));\n\n        if (_.static) {\n          for (sim.stop(); --iters >= 0;) sim.tick();\n        } else {\n          if (sim.stopped()) sim.restart();\n          if (!change) return pulse.StopPropagation; // defer to sim ticks\n        }\n      }\n\n      return this.finish(_, pulse);\n    },\n\n    finish(_, pulse) {\n      const dataflow = pulse.dataflow; // inspect dependencies, touch link source data\n\n      for (let args = this._argops, j = 0, m = args.length, arg; j < m; ++j) {\n        arg = args[j];\n\n        if (arg.name !== Forces || arg.op._argval.force !== 'link') {\n          continue;\n        }\n\n        for (var ops = arg.op._argops, i = 0, n = ops.length, op; i < n; ++i) {\n          if (ops[i].name === 'links' && (op = ops[i].op.source)) {\n            dataflow.pulse(op, dataflow.changeset().reflow());\n            break;\n          }\n        }\n      } // reflow all nodes\n\n\n      return pulse.reflow(_.modified()).modifies(ForceOutput);\n    }\n\n  });\n\n  function rerun(df, op) {\n    return () => df.touch(op).run();\n  }\n\n  function simulation(nodes, _) {\n    const sim = forceSimulation(nodes),\n          stop = sim.stop,\n          restart = sim.restart;\n    let stopped = false;\n\n    sim.stopped = () => stopped;\n\n    sim.restart = () => (stopped = false, restart());\n\n    sim.stop = () => (stopped = true, stop());\n\n    return setup(sim, _, true).on('end', () => stopped = true);\n  }\n\n  function setup(sim, _, init, pulse) {\n    var f = array$5(_.forces),\n        i,\n        n,\n        p,\n        name;\n\n    for (i = 0, n = ForceParams.length; i < n; ++i) {\n      p = ForceParams[i];\n      if (p !== Forces && _.modified(p)) sim[p](_[p]);\n    }\n\n    for (i = 0, n = f.length; i < n; ++i) {\n      name = Forces + i;\n      p = init || _.modified(Forces, i) ? getForce(f[i]) : pulse && modified(f[i], pulse) ? sim.force(name) : null;\n      if (p) sim.force(name, p);\n    }\n\n    for (n = sim.numForces || 0; i < n; ++i) {\n      sim.force(Forces + i, null); // remove\n    }\n\n    sim.numForces = f.length;\n    return sim;\n  }\n\n  function modified(f, pulse) {\n    var k, v;\n\n    for (k in f) {\n      if (isFunction(v = f[k]) && pulse.modified(accessorFields(v))) return 1;\n    }\n\n    return 0;\n  }\n\n  function getForce(_) {\n    var f, p;\n\n    if (!has$1(ForceMap, _.force)) {\n      error('Unrecognized force: ' + _.force);\n    }\n\n    f = ForceMap[_.force]();\n\n    for (p in _) {\n      if (isFunction(f[p])) setForceParam(f[p], _[p], _);\n    }\n\n    return f;\n  }\n\n  function setForceParam(f, v, _) {\n    f(isFunction(v) ? d => v(d, _) : v);\n  }\n\n  var force = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    force: Force\n  });\n\n  function defaultSeparation$2(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  function meanX(children) {\n    return children.reduce(meanXReduce, 0) / children.length;\n  }\n\n  function meanXReduce(x, c) {\n    return x + c.x;\n  }\n\n  function maxY(children) {\n    return 1 + children.reduce(maxYReduce, 0);\n  }\n\n  function maxYReduce(y, c) {\n    return Math.max(y, c.y);\n  }\n\n  function leafLeft(node) {\n    var children;\n\n    while (children = node.children) node = children[0];\n\n    return node;\n  }\n\n  function leafRight(node) {\n    var children;\n\n    while (children = node.children) node = children[children.length - 1];\n\n    return node;\n  }\n\n  function cluster () {\n    var separation = defaultSeparation$2,\n        dx = 1,\n        dy = 1,\n        nodeSize = false;\n\n    function cluster(root) {\n      var previousNode,\n          x = 0; // First walk, computing the initial x & y values.\n\n      root.eachAfter(function (node) {\n        var children = node.children;\n\n        if (children) {\n          node.x = meanX(children);\n          node.y = maxY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = leafLeft(root),\n          right = leafRight(root),\n          x0 = left.x - separation(left, right) / 2,\n          x1 = right.x + separation(right, left) / 2; // Second walk, normalizing x & y to the desired size.\n\n      return root.eachAfter(nodeSize ? function (node) {\n        node.x = (node.x - root.x) * dx;\n        node.y = (root.y - node.y) * dy;\n      } : function (node) {\n        node.x = (node.x - x0) / (x1 - x0) * dx;\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n      });\n    }\n\n    cluster.separation = function (x) {\n      return arguments.length ? (separation = x, cluster) : separation;\n    };\n\n    cluster.size = function (x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];\n    };\n\n    cluster.nodeSize = function (x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;\n    };\n\n    return cluster;\n  }\n\n  function count(node) {\n    var sum = 0,\n        children = node.children,\n        i = children && children.length;\n    if (!i) sum = 1;else while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  }\n\n  function node_count () {\n    return this.eachAfter(count);\n  }\n\n  function node_each (callback, that) {\n    let index = -1;\n\n    for (const node of this) {\n      callback.call(that, node, ++index, this);\n    }\n\n    return this;\n  }\n\n  function node_eachBefore (callback, that) {\n    var node = this,\n        nodes = [node],\n        children,\n        i,\n        index = -1;\n\n    while (node = nodes.pop()) {\n      callback.call(that, node, ++index, this);\n\n      if (children = node.children) {\n        for (i = children.length - 1; i >= 0; --i) {\n          nodes.push(children[i]);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function node_eachAfter (callback, that) {\n    var node = this,\n        nodes = [node],\n        next = [],\n        children,\n        i,\n        n,\n        index = -1;\n\n    while (node = nodes.pop()) {\n      next.push(node);\n\n      if (children = node.children) {\n        for (i = 0, n = children.length; i < n; ++i) {\n          nodes.push(children[i]);\n        }\n      }\n    }\n\n    while (node = next.pop()) {\n      callback.call(that, node, ++index, this);\n    }\n\n    return this;\n  }\n\n  function node_find (callback, that) {\n    let index = -1;\n\n    for (const node of this) {\n      if (callback.call(that, node, ++index, this)) {\n        return node;\n      }\n    }\n  }\n\n  function node_sum (value) {\n    return this.eachAfter(function (node) {\n      var sum = +value(node.data) || 0,\n          children = node.children,\n          i = children && children.length;\n\n      while (--i >= 0) sum += children[i].value;\n\n      node.value = sum;\n    });\n  }\n\n  function node_sort (compare) {\n    return this.eachBefore(function (node) {\n      if (node.children) {\n        node.children.sort(compare);\n      }\n    });\n  }\n\n  function node_path (end) {\n    var start = this,\n        ancestor = leastCommonAncestor(start, end),\n        nodes = [start];\n\n    while (start !== ancestor) {\n      start = start.parent;\n      nodes.push(start);\n    }\n\n    var k = nodes.length;\n\n    while (end !== ancestor) {\n      nodes.splice(k, 0, end);\n      end = end.parent;\n    }\n\n    return nodes;\n  }\n\n  function leastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = a.ancestors(),\n        bNodes = b.ancestors(),\n        c = null;\n    a = aNodes.pop();\n    b = bNodes.pop();\n\n    while (a === b) {\n      c = a;\n      a = aNodes.pop();\n      b = bNodes.pop();\n    }\n\n    return c;\n  }\n\n  function node_ancestors () {\n    var node = this,\n        nodes = [node];\n\n    while (node = node.parent) {\n      nodes.push(node);\n    }\n\n    return nodes;\n  }\n\n  function node_descendants () {\n    return Array.from(this);\n  }\n\n  function node_leaves () {\n    var leaves = [];\n    this.eachBefore(function (node) {\n      if (!node.children) {\n        leaves.push(node);\n      }\n    });\n    return leaves;\n  }\n\n  function node_links () {\n    var root = this,\n        links = [];\n    root.each(function (node) {\n      if (node !== root) {\n        // Don\u2019t include the root\u2019s parent, if any.\n        links.push({\n          source: node.parent,\n          target: node\n        });\n      }\n    });\n    return links;\n  }\n\n  function* node_iterator () {\n    var node = this,\n        current,\n        next = [node],\n        children,\n        i,\n        n;\n\n    do {\n      current = next.reverse(), next = [];\n\n      while (node = current.pop()) {\n        yield node;\n\n        if (children = node.children) {\n          for (i = 0, n = children.length; i < n; ++i) {\n            next.push(children[i]);\n          }\n        }\n      }\n    } while (next.length);\n  }\n\n  function hierarchy(data, children) {\n    if (data instanceof Map) {\n      data = [undefined, data];\n      if (children === undefined) children = mapChildren;\n    } else if (children === undefined) {\n      children = objectChildren;\n    }\n\n    var root = new Node$1(data),\n        node,\n        nodes = [root],\n        child,\n        childs,\n        i,\n        n;\n\n    while (node = nodes.pop()) {\n      if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n        node.children = childs;\n\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = childs[i] = new Node$1(childs[i]));\n          child.parent = node;\n          child.depth = node.depth + 1;\n        }\n      }\n    }\n\n    return root.eachBefore(computeHeight);\n  }\n\n  function node_copy() {\n    return hierarchy(this).eachBefore(copyData);\n  }\n\n  function objectChildren(d) {\n    return d.children;\n  }\n\n  function mapChildren(d) {\n    return Array.isArray(d) ? d[1] : null;\n  }\n\n  function copyData(node) {\n    if (node.data.value !== undefined) node.value = node.data.value;\n    node.data = node.data.data;\n  }\n\n  function computeHeight(node) {\n    var height = 0;\n\n    do node.height = height; while ((node = node.parent) && node.height < ++height);\n  }\n  function Node$1(data) {\n    this.data = data;\n    this.depth = this.height = 0;\n    this.parent = null;\n  }\n  Node$1.prototype = hierarchy.prototype = {\n    constructor: Node$1,\n    count: node_count,\n    each: node_each,\n    eachAfter: node_eachAfter,\n    eachBefore: node_eachBefore,\n    find: node_find,\n    sum: node_sum,\n    sort: node_sort,\n    path: node_path,\n    ancestors: node_ancestors,\n    descendants: node_descendants,\n    leaves: node_leaves,\n    links: node_links,\n    copy: node_copy,\n    [Symbol.iterator]: node_iterator\n  };\n\n  function array$2 (x) {\n    return typeof x === \"object\" && \"length\" in x ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n  }\n  function shuffle(array) {\n    var m = array.length,\n        t,\n        i;\n\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  function enclose (circles) {\n    var i = 0,\n        n = (circles = shuffle(Array.from(circles))).length,\n        B = [],\n        p,\n        e;\n\n    while (i < n) {\n      p = circles[i];\n      if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n    }\n\n    return e;\n  }\n\n  function extendBasis(B, p) {\n    var i, j;\n    if (enclosesWeakAll(p, B)) return [p]; // If we get here then B must have at least one element.\n\n    for (i = 0; i < B.length; ++i) {\n      if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n        return [B[i], p];\n      }\n    } // If we get here then B must have at least two elements.\n\n\n    for (i = 0; i < B.length - 1; ++i) {\n      for (j = i + 1; j < B.length; ++j) {\n        if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n          return [B[i], B[j], p];\n        }\n      }\n    } // If we get here then something is very wrong.\n\n\n    throw new Error();\n  }\n\n  function enclosesNot(a, b) {\n    var dr = a.r - b.r,\n        dx = b.x - a.x,\n        dy = b.y - a.y;\n    return dr < 0 || dr * dr < dx * dx + dy * dy;\n  }\n\n  function enclosesWeak(a, b) {\n    var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9,\n        dx = b.x - a.x,\n        dy = b.y - a.y;\n    return dr > 0 && dr * dr > dx * dx + dy * dy;\n  }\n\n  function enclosesWeakAll(a, B) {\n    for (var i = 0; i < B.length; ++i) {\n      if (!enclosesWeak(a, B[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function encloseBasis(B) {\n    switch (B.length) {\n      case 1:\n        return encloseBasis1(B[0]);\n\n      case 2:\n        return encloseBasis2(B[0], B[1]);\n\n      case 3:\n        return encloseBasis3(B[0], B[1], B[2]);\n    }\n  }\n\n  function encloseBasis1(a) {\n    return {\n      x: a.x,\n      y: a.y,\n      r: a.r\n    };\n  }\n\n  function encloseBasis2(a, b) {\n    var x1 = a.x,\n        y1 = a.y,\n        r1 = a.r,\n        x2 = b.x,\n        y2 = b.y,\n        r2 = b.r,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        r21 = r2 - r1,\n        l = Math.sqrt(x21 * x21 + y21 * y21);\n    return {\n      x: (x1 + x2 + x21 / l * r21) / 2,\n      y: (y1 + y2 + y21 / l * r21) / 2,\n      r: (l + r1 + r2) / 2\n    };\n  }\n\n  function encloseBasis3(a, b, c) {\n    var x1 = a.x,\n        y1 = a.y,\n        r1 = a.r,\n        x2 = b.x,\n        y2 = b.y,\n        r2 = b.r,\n        x3 = c.x,\n        y3 = c.y,\n        r3 = c.r,\n        a2 = x1 - x2,\n        a3 = x1 - x3,\n        b2 = y1 - y2,\n        b3 = y1 - y3,\n        c2 = r2 - r1,\n        c3 = r3 - r1,\n        d1 = x1 * x1 + y1 * y1 - r1 * r1,\n        d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n        d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n        ab = a3 * b2 - a2 * b3,\n        xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n        xb = (b3 * c2 - b2 * c3) / ab,\n        ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n        yb = (a2 * c3 - a3 * c2) / ab,\n        A = xb * xb + yb * yb - 1,\n        B = 2 * (r1 + xa * xb + ya * yb),\n        C = xa * xa + ya * ya - r1 * r1,\n        r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n    return {\n      x: x1 + xa + xb * r,\n      y: y1 + ya + yb * r,\n      r: r\n    };\n  }\n\n  function place(b, a, c) {\n    var dx = b.x - a.x,\n        x,\n        a2,\n        dy = b.y - a.y,\n        y,\n        b2,\n        d2 = dx * dx + dy * dy;\n\n    if (d2) {\n      a2 = a.r + c.r, a2 *= a2;\n      b2 = b.r + c.r, b2 *= b2;\n\n      if (a2 > b2) {\n        x = (d2 + b2 - a2) / (2 * d2);\n        y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n        c.x = b.x - x * dx - y * dy;\n        c.y = b.y - x * dy + y * dx;\n      } else {\n        x = (d2 + a2 - b2) / (2 * d2);\n        y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n        c.x = a.x + x * dx - y * dy;\n        c.y = a.y + x * dy + y * dx;\n      }\n    } else {\n      c.x = a.x + c.r;\n      c.y = a.y;\n    }\n  }\n\n  function intersects(a, b) {\n    var dr = a.r + b.r - 1e-6,\n        dx = b.x - a.x,\n        dy = b.y - a.y;\n    return dr > 0 && dr * dr > dx * dx + dy * dy;\n  }\n\n  function score(node) {\n    var a = node._,\n        b = node.next._,\n        ab = a.r + b.r,\n        dx = (a.x * b.r + b.x * a.r) / ab,\n        dy = (a.y * b.r + b.y * a.r) / ab;\n    return dx * dx + dy * dy;\n  }\n\n  function Node(circle) {\n    this._ = circle;\n    this.next = null;\n    this.previous = null;\n  }\n\n  function packEnclose(circles) {\n    if (!(n = (circles = array$2(circles)).length)) return 0;\n    var a, b, c, n, aa, ca, i, j, k, sj, sk; // Place the first circle.\n\n    a = circles[0], a.x = 0, a.y = 0;\n    if (!(n > 1)) return a.r; // Place the second circle.\n\n    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n    if (!(n > 2)) return a.r + b.r; // Place the third circle.\n\n    place(b, a, c = circles[2]); // Initialize the front-chain using the first three circles a, b and c.\n\n    a = new Node(a), b = new Node(b), c = new Node(c);\n    a.next = c.previous = b;\n    b.next = a.previous = c;\n    c.next = b.previous = a; // Attempt to place each remaining circle\u2026\n\n    pack: for (i = 3; i < n; ++i) {\n      place(a._, b._, c = circles[i]), c = new Node(c); // Find the closest intersecting circle on the front-chain, if any.\n      // \u201cCloseness\u201d is determined by linear distance along the front-chain.\n      // \u201cAhead\u201d or \u201cbehind\u201d is likewise determined by linear distance.\n\n      j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n\n      do {\n        if (sj <= sk) {\n          if (intersects(j._, c._)) {\n            b = j, a.next = b, b.previous = a, --i;\n            continue pack;\n          }\n\n          sj += j._.r, j = j.next;\n        } else {\n          if (intersects(k._, c._)) {\n            a = k, a.next = b, b.previous = a, --i;\n            continue pack;\n          }\n\n          sk += k._.r, k = k.previous;\n        }\n      } while (j !== k.next); // Success! Insert the new circle c between a and b.\n\n\n      c.previous = a, c.next = b, a.next = b.previous = b = c; // Compute the new closest circle pair to the centroid.\n\n      aa = score(a);\n\n      while ((c = c.next) !== b) {\n        if ((ca = score(c)) < aa) {\n          a = c, aa = ca;\n        }\n      }\n\n      b = a.next;\n    } // Compute the enclosing circle of the front chain.\n\n\n    a = [b._], c = b;\n\n    while ((c = c.next) !== b) a.push(c._);\n\n    c = enclose(a); // Translate the circles to put the enclosing circle around the origin.\n\n    for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n    return c.r;\n  }\n\n  function optional(f) {\n    return f == null ? null : required(f);\n  }\n  function required(f) {\n    if (typeof f !== \"function\") throw new Error();\n    return f;\n  }\n\n  function constantZero() {\n    return 0;\n  }\n  function constant (x) {\n    return function () {\n      return x;\n    };\n  }\n\n  function defaultRadius(d) {\n    return Math.sqrt(d.value);\n  }\n\n  function pack () {\n    var radius = null,\n        dx = 1,\n        dy = 1,\n        padding = constantZero;\n\n    function pack(root) {\n      root.x = dx / 2, root.y = dy / 2;\n\n      if (radius) {\n        root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));\n      } else {\n        root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n      }\n\n      return root;\n    }\n\n    pack.radius = function (x) {\n      return arguments.length ? (radius = optional(x), pack) : radius;\n    };\n\n    pack.size = function (x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n    };\n\n    pack.padding = function (x) {\n      return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n    };\n\n    return pack;\n  }\n\n  function radiusLeaf(radius) {\n    return function (node) {\n      if (!node.children) {\n        node.r = Math.max(0, +radius(node) || 0);\n      }\n    };\n  }\n\n  function packChildren(padding, k) {\n    return function (node) {\n      if (children = node.children) {\n        var children,\n            i,\n            n = children.length,\n            r = padding(node) * k || 0,\n            e;\n        if (r) for (i = 0; i < n; ++i) children[i].r += r;\n        e = packEnclose(children);\n        if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n        node.r = e + r;\n      }\n    };\n  }\n\n  function translateChild(k) {\n    return function (node) {\n      var parent = node.parent;\n      node.r *= k;\n\n      if (parent) {\n        node.x = parent.x + k * node.x;\n        node.y = parent.y + k * node.y;\n      }\n    };\n  }\n\n  function roundNode (node) {\n    node.x0 = Math.round(node.x0);\n    node.y0 = Math.round(node.y0);\n    node.x1 = Math.round(node.x1);\n    node.y1 = Math.round(node.y1);\n  }\n\n  function treemapDice (parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (x1 - x0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.y0 = y0, node.y1 = y1;\n      node.x0 = x0, node.x1 = x0 += node.value * k;\n    }\n  }\n\n  function partition$1 () {\n    var dx = 1,\n        dy = 1,\n        padding = 0,\n        round = false;\n\n    function partition(root) {\n      var n = root.height + 1;\n      root.x0 = root.y0 = padding;\n      root.x1 = dx;\n      root.y1 = dy / n;\n      root.eachBefore(positionNode(dy, n));\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(dy, n) {\n      return function (node) {\n        if (node.children) {\n          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n        }\n\n        var x0 = node.x0,\n            y0 = node.y0,\n            x1 = node.x1 - padding,\n            y1 = node.y1 - padding;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n      };\n    }\n\n    partition.round = function (x) {\n      return arguments.length ? (round = !!x, partition) : round;\n    };\n\n    partition.size = function (x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n    };\n\n    partition.padding = function (x) {\n      return arguments.length ? (padding = +x, partition) : padding;\n    };\n\n    return partition;\n  }\n\n  var preroot = {\n    depth: -1\n  },\n      ambiguous = {};\n\n  function defaultId(d) {\n    return d.id;\n  }\n\n  function defaultParentId(d) {\n    return d.parentId;\n  }\n\n  function stratify () {\n    var id = defaultId,\n        parentId = defaultParentId;\n\n    function stratify(data) {\n      var nodes = Array.from(data),\n          n = nodes.length,\n          d,\n          i,\n          root,\n          parent,\n          node,\n          nodeId,\n          nodeKey,\n          nodeByKey = new Map();\n\n      for (i = 0; i < n; ++i) {\n        d = nodes[i], node = nodes[i] = new Node$1(d);\n\n        if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n          nodeKey = node.id = nodeId;\n          nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);\n        }\n\n        if ((nodeId = parentId(d, i, data)) != null && (nodeId += \"\")) {\n          node.parent = nodeId;\n        }\n      }\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n\n        if (nodeId = node.parent) {\n          parent = nodeByKey.get(nodeId);\n          if (!parent) throw new Error(\"missing: \" + nodeId);\n          if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n          if (parent.children) parent.children.push(node);else parent.children = [node];\n          node.parent = parent;\n        } else {\n          if (root) throw new Error(\"multiple roots\");\n          root = node;\n        }\n      }\n\n      if (!root) throw new Error(\"no root\");\n      root.parent = preroot;\n      root.eachBefore(function (node) {\n        node.depth = node.parent.depth + 1;\n        --n;\n      }).eachBefore(computeHeight);\n      root.parent = null;\n      if (n > 0) throw new Error(\"cycle\");\n      return root;\n    }\n\n    stratify.id = function (x) {\n      return arguments.length ? (id = required(x), stratify) : id;\n    };\n\n    stratify.parentId = function (x) {\n      return arguments.length ? (parentId = required(x), stratify) : parentId;\n    };\n\n    return stratify;\n  }\n\n  function defaultSeparation$1(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  } // function radialSeparation(a, b) {\n  //   return (a.parent === b.parent ? 1 : 2) / a.depth;\n  // }\n  // This function is used to traverse the left contour of a subtree (or\n  // subforest). It returns the successor of v on this contour. This successor is\n  // either given by the leftmost child of v or by the thread of v. The function\n  // returns null if and only if v is on the highest level of its subtree.\n\n\n  function nextLeft(v) {\n    var children = v.children;\n    return children ? children[0] : v.t;\n  } // This function works analogously to nextLeft.\n\n\n  function nextRight(v) {\n    var children = v.children;\n    return children ? children[children.length - 1] : v.t;\n  } // Shifts the current subtree rooted at w+. This is done by increasing\n  // prelim(w+) and mod(w+) by shift.\n\n\n  function moveSubtree(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  } // All other shifts, applied to the smaller subtrees between w- and w+, are\n  // performed by this function. To prepare the shifts, we have to adjust\n  // change(w+), shift(w+), and change(w-).\n\n\n  function executeShifts(v) {\n    var shift = 0,\n        change = 0,\n        children = v.children,\n        i = children.length,\n        w;\n\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  } // If vi-\u2019s ancestor is a sibling of v, returns vi-\u2019s ancestor. Otherwise,\n  // returns the specified (default) ancestor.\n\n\n  function nextAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n\n  function TreeNode(node, i) {\n    this._ = node;\n    this.parent = null;\n    this.children = null;\n    this.A = null; // default ancestor\n\n    this.a = this; // ancestor\n\n    this.z = 0; // prelim\n\n    this.m = 0; // mod\n\n    this.c = 0; // change\n\n    this.s = 0; // shift\n\n    this.t = null; // thread\n\n    this.i = i; // number\n  }\n\n  TreeNode.prototype = Object.create(Node$1.prototype);\n\n  function treeRoot(root) {\n    var tree = new TreeNode(root, 0),\n        node,\n        nodes = [tree],\n        child,\n        children,\n        i,\n        n;\n\n    while (node = nodes.pop()) {\n      if (children = node._.children) {\n        node.children = new Array(n = children.length);\n\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n          child.parent = node;\n        }\n      }\n    }\n\n    (tree.parent = new TreeNode(null, 0)).children = [tree];\n    return tree;\n  } // Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\n\n\n  function tree$1 () {\n    var separation = defaultSeparation$1,\n        dx = 1,\n        dy = 1,\n        nodeSize = null;\n\n    function tree(root) {\n      var t = treeRoot(root); // Compute the layout using Buchheim et al.\u2019s algorithm.\n\n      t.eachAfter(firstWalk), t.parent.m = -t.z;\n      t.eachBefore(secondWalk); // If a fixed node size is specified, scale x and y.\n\n      if (nodeSize) root.eachBefore(sizeNode); // If a fixed tree size is specified, scale x and y based on the extent.\n      // Compute the left-most, right-most, and depth-most nodes for extents.\n      else {\n          var left = root,\n              right = root,\n              bottom = root;\n          root.eachBefore(function (node) {\n            if (node.x < left.x) left = node;\n            if (node.x > right.x) right = node;\n            if (node.depth > bottom.depth) bottom = node;\n          });\n          var s = left === right ? 1 : separation(left, right) / 2,\n              tx = s - left.x,\n              kx = dx / (right.x + s + tx),\n              ky = dy / (bottom.depth || 1);\n          root.eachBefore(function (node) {\n            node.x = (node.x + tx) * kx;\n            node.y = node.depth * ky;\n          });\n        }\n      return root;\n    } // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n    // applied recursively to the children of v, as well as the function\n    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n    // node v is placed to the midpoint of its outermost children.\n\n\n    function firstWalk(v) {\n      var children = v.children,\n          siblings = v.parent.children,\n          w = v.i ? siblings[v.i - 1] : null;\n\n      if (children) {\n        executeShifts(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    } // Computes all real x-coordinates by summing up the modifiers recursively.\n\n\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    } // The core of the algorithm. Here, a new subtree is combined with the\n    // previous subtrees. Threads are used to traverse the inside and outside\n    // contours of the left and right subtree up to the highest common level. The\n    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n    // superscript o means outside and i means inside, the subscript - means left\n    // subtree and + means right subtree. For summing up the modifiers along the\n    // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n    // nodes of the inside contours conflict, we compute the left one of the\n    // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n    // Finally, we add a new thread (if necessary).\n\n\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v,\n            vop = v,\n            vim = w,\n            vom = vip.parent.children[0],\n            sip = vip.m,\n            sop = vop.m,\n            sim = vim.m,\n            som = vom.m,\n            shift;\n\n        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n          vom = nextLeft(vom);\n          vop = nextRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n\n          if (shift > 0) {\n            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n\n        if (vim && !nextRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n\n        if (vip && !nextLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n\n      return ancestor;\n    }\n\n    function sizeNode(node) {\n      node.x *= dx;\n      node.y = node.depth * dy;\n    }\n\n    tree.separation = function (x) {\n      return arguments.length ? (separation = x, tree) : separation;\n    };\n\n    tree.size = function (x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];\n    };\n\n    tree.nodeSize = function (x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;\n    };\n\n    return tree;\n  }\n\n  function treemapSlice (parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (y1 - y0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.x0 = x0, node.x1 = x1;\n      node.y0 = y0, node.y1 = y0 += node.value * k;\n    }\n  }\n\n  var phi = (1 + Math.sqrt(5)) / 2;\n  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n    var rows = [],\n        nodes = parent.children,\n        row,\n        nodeValue,\n        i0 = 0,\n        i1 = 0,\n        n = nodes.length,\n        dx,\n        dy,\n        value = parent.value,\n        sumValue,\n        minValue,\n        maxValue,\n        newRatio,\n        minRatio,\n        alpha,\n        beta;\n\n    while (i0 < n) {\n      dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.\n\n      do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n\n      minValue = maxValue = sumValue;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.\n\n      for (; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes[i1].value;\n        if (nodeValue < minValue) minValue = nodeValue;\n        if (nodeValue > maxValue) maxValue = nodeValue;\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n\n        if (newRatio > minRatio) {\n          sumValue -= nodeValue;\n          break;\n        }\n\n        minRatio = newRatio;\n      } // Position and record the row orientation.\n\n\n      rows.push(row = {\n        value: sumValue,\n        dice: dx < dy,\n        children: nodes.slice(i0, i1)\n      });\n      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n      value -= sumValue, i0 = i1;\n    }\n\n    return rows;\n  }\n  var treemapSquarify = (function custom(ratio) {\n    function squarify(parent, x0, y0, x1, y1) {\n      squarifyRatio(ratio, parent, x0, y0, x1, y1);\n    }\n\n    squarify.ratio = function (x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return squarify;\n  })(phi);\n\n  function treemap () {\n    var tile = treemapSquarify,\n        round = false,\n        dx = 1,\n        dy = 1,\n        paddingStack = [0],\n        paddingInner = constantZero,\n        paddingTop = constantZero,\n        paddingRight = constantZero,\n        paddingBottom = constantZero,\n        paddingLeft = constantZero;\n\n    function treemap(root) {\n      root.x0 = root.y0 = 0;\n      root.x1 = dx;\n      root.y1 = dy;\n      root.eachBefore(positionNode);\n      paddingStack = [0];\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(node) {\n      var p = paddingStack[node.depth],\n          x0 = node.x0 + p,\n          y0 = node.y0 + p,\n          x1 = node.x1 - p,\n          y1 = node.y1 - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n\n      if (node.children) {\n        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n        x0 += paddingLeft(node) - p;\n        y0 += paddingTop(node) - p;\n        x1 -= paddingRight(node) - p;\n        y1 -= paddingBottom(node) - p;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        tile(node, x0, y0, x1, y1);\n      }\n    }\n\n    treemap.round = function (x) {\n      return arguments.length ? (round = !!x, treemap) : round;\n    };\n\n    treemap.size = function (x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n    };\n\n    treemap.tile = function (x) {\n      return arguments.length ? (tile = required(x), treemap) : tile;\n    };\n\n    treemap.padding = function (x) {\n      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n    };\n\n    treemap.paddingInner = function (x) {\n      return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n    };\n\n    treemap.paddingOuter = function (x) {\n      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n    };\n\n    treemap.paddingTop = function (x) {\n      return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n    };\n\n    treemap.paddingRight = function (x) {\n      return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n    };\n\n    treemap.paddingBottom = function (x) {\n      return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n    };\n\n    treemap.paddingLeft = function (x) {\n      return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n    };\n\n    return treemap;\n  }\n\n  function treemapBinary (parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        i,\n        n = nodes.length,\n        sum,\n        sums = new Array(n + 1);\n\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes[i].value;\n    }\n\n    partition(0, n, parent.value, x0, y0, x1, y1);\n\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes[i];\n        node.x0 = x0, node.y0 = y0;\n        node.x1 = x1, node.y1 = y1;\n        return;\n      }\n\n      var valueOffset = sums[i],\n          valueTarget = value / 2 + valueOffset,\n          k = i + 1,\n          hi = j - 1;\n\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n        if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;\n      }\n\n      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;\n      var valueLeft = sums[k] - valueOffset,\n          valueRight = value - valueLeft;\n\n      if (x1 - x0 > y1 - y0) {\n        var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      } else {\n        var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      }\n    }\n  }\n\n  function treemapSliceDice (parent, x0, y0, x1, y1) {\n    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n  }\n\n  var treemapResquarify = (function custom(ratio) {\n    function resquarify(parent, x0, y0, x1, y1) {\n      if ((rows = parent._squarify) && rows.ratio === ratio) {\n        var rows,\n            row,\n            nodes,\n            i,\n            j = -1,\n            n,\n            m = rows.length,\n            value = parent.value;\n\n        while (++j < m) {\n          row = rows[j], nodes = row.children;\n\n          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n\n          if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);else treemapSlice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);\n          value -= row.value;\n        }\n      } else {\n        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n        rows.ratio = ratio;\n      }\n    }\n\n    resquarify.ratio = function (x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return resquarify;\n  })(phi);\n\n  function lookup$2(tree, key, filter) {\n    const map = {};\n    tree.each(node => {\n      const t = node.data;\n      if (filter(t)) map[key(t)] = node;\n    });\n    tree.lookup = map;\n    return tree;\n  }\n  /**\n   * Nest tuples into a tree structure, grouped by key values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.\n   * @param {boolean} [params.generate=false] - A boolean flag indicating if\n   *   non-leaf nodes generated by this transform should be included in the\n   *   output. The default (false) includes only the input data (leaf nodes)\n   *   in the data stream.\n   */\n\n\n  function Nest(params) {\n    Transform.call(this, null, params);\n  }\n\n  Nest.Definition = {\n    'type': 'Nest',\n    'metadata': {\n      'treesource': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'keys',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'generate',\n      'type': 'boolean'\n    }]\n  };\n\n  const children$1 = n => n.values;\n\n  inherits(Nest, Transform, {\n    transform(_, pulse) {\n      if (!pulse.source) {\n        error('Nest transform requires an upstream data source.');\n      }\n\n      var gen = _.generate,\n          mod = _.modified(),\n          out = pulse.clone(),\n          tree = this.value;\n\n      if (!tree || mod || pulse.changed()) {\n        // collect nodes to remove\n        if (tree) {\n          tree.each(node => {\n            if (node.children && isTuple(node.data)) {\n              out.rem.push(node.data);\n            }\n          });\n        } // generate new tree structure\n\n\n        this.value = tree = hierarchy({\n          values: array$5(_.keys).reduce((n, k) => {\n            n.key(k);\n            return n;\n          }, nest()).entries(out.source)\n        }, children$1); // collect nodes to add\n\n        if (gen) {\n          tree.each(node => {\n            if (node.children) {\n              node = ingest$1(node.data);\n              out.add.push(node);\n              out.source.push(node);\n            }\n          });\n        } // build lookup table\n\n\n        lookup$2(tree, tupleid, tupleid);\n      }\n\n      out.source.root = tree;\n      return out;\n    }\n\n  });\n\n  function nest() {\n    const keys = [],\n          nest = {\n      entries: array => entries(apply(array, 0), 0),\n      key: d => (keys.push(d), nest)\n    };\n\n    function apply(array, depth) {\n      if (depth >= keys.length) {\n        return array;\n      }\n\n      const n = array.length,\n            key = keys[depth++],\n            valuesByKey = {},\n            result = {};\n      let i = -1,\n          keyValue,\n          value,\n          values;\n\n      while (++i < n) {\n        keyValue = key(value = array[i]) + '';\n\n        if (values = valuesByKey[keyValue]) {\n          values.push(value);\n        } else {\n          valuesByKey[keyValue] = [value];\n        }\n      }\n\n      for (keyValue in valuesByKey) {\n        result[keyValue] = apply(valuesByKey[keyValue], depth);\n      }\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      const array = [];\n\n      for (const key in map) {\n        array.push({\n          key,\n          values: entries(map[key], depth)\n        });\n      }\n\n      return array;\n    }\n\n    return nest;\n  }\n  /**\n   * Abstract class for tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n\n  function HierarchyLayout(params) {\n    Transform.call(this, null, params);\n  }\n\n  const defaultSeparation = (a, b) => a.parent === b.parent ? 1 : 2;\n\n  inherits(HierarchyLayout, Transform, {\n    transform(_, pulse) {\n      if (!pulse.source || !pulse.source.root) {\n        error(this.constructor.name + ' transform requires a backing tree data source.');\n      }\n\n      const layout = this.layout(_.method),\n            fields = this.fields,\n            root = pulse.source.root,\n            as = _.as || fields;\n      if (_.field) root.sum(_.field);else root.count();\n      if (_.sort) root.sort(stableCompare(_.sort, d => d.data));\n      setParams(layout, this.params, _);\n\n      if (layout.separation) {\n        layout.separation(_.separation !== false ? defaultSeparation : one$2);\n      }\n\n      try {\n        this.value = layout(root);\n      } catch (err) {\n        error(err);\n      }\n\n      root.each(node => setFields(node, fields, as));\n      return pulse.reflow(_.modified()).modifies(as).modifies('leaf');\n    }\n\n  });\n\n  function setParams(layout, params, _) {\n    for (let p, i = 0, n = params.length; i < n; ++i) {\n      p = params[i];\n      if (p in _) layout[p](_[p]);\n    }\n  }\n\n  function setFields(node, fields, as) {\n    const t = node.data,\n          n = fields.length - 1;\n\n    for (let i = 0; i < n; ++i) {\n      t[as[i]] = node[fields[i]];\n    }\n\n    t[as[n]] = node.children ? node.children.length : 0;\n  }\n\n  const Output$3 = ['x', 'y', 'r', 'depth', 'children'];\n  /**\n   * Packed circle tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n\n  function Pack(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Pack.Definition = {\n    'type': 'Pack',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'radius',\n      'type': 'field',\n      'default': null\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$3.length,\n      'default': Output$3\n    }]\n  };\n  inherits(Pack, HierarchyLayout, {\n    layout: pack,\n    params: ['radius', 'size', 'padding'],\n    fields: Output$3\n  });\n  const Output$2 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n  /**\n   * Partition tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n\n  function Partition(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Partition.Definition = {\n    'type': 'Partition',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'round',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$2.length,\n      'default': Output$2\n    }]\n  };\n  inherits(Partition, HierarchyLayout, {\n    layout: partition$1,\n    params: ['size', 'round', 'padding'],\n    fields: Output$2\n  });\n  /**\n   * Stratify a collection of tuples into a tree structure based on\n   * id and parent id fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.key - Unique key field for each tuple.\n   * @param {function(object): *} params.parentKey - Field with key for parent tuple.\n   */\n\n  function Stratify(params) {\n    Transform.call(this, null, params);\n  }\n\n  Stratify.Definition = {\n    'type': 'Stratify',\n    'metadata': {\n      'treesource': true\n    },\n    'params': [{\n      'name': 'key',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'parentKey',\n      'type': 'field',\n      'required': true\n    }]\n  };\n  inherits(Stratify, Transform, {\n    transform(_, pulse) {\n      if (!pulse.source) {\n        error('Stratify transform requires an upstream data source.');\n      }\n\n      let tree = this.value;\n\n      const mod = _.modified(),\n            out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),\n            run = !tree || mod || pulse.changed(pulse.ADD_REM) || pulse.modified(_.key.fields) || pulse.modified(_.parentKey.fields); // prevent upstream source pollution\n\n\n      out.source = out.source.slice();\n\n      if (run) {\n        tree = out.source.length ? lookup$2(stratify().id(_.key).parentId(_.parentKey)(out.source), _.key, truthy) : lookup$2(stratify()([{}]), _.key, _.key);\n      }\n\n      out.source.root = this.value = tree;\n      return out;\n    }\n\n  });\n  const Layouts = {\n    tidy: tree$1,\n    cluster: cluster\n  };\n  const Output$1$1 = ['x', 'y', 'depth', 'children'];\n  /**\n   * Tree layout. Depending on the method parameter, performs either\n   * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n  function Tree(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Tree.Definition = {\n    'type': 'Tree',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'tidy',\n      'values': ['tidy', 'cluster']\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'nodeSize',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'separation',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$1$1.length,\n      'default': Output$1$1\n    }]\n  };\n  inherits(Tree, HierarchyLayout, {\n    /**\n     * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n     */\n    layout(method) {\n      const m = method || 'tidy';\n      if (has$1(Layouts, m)) return Layouts[m]();else error('Unrecognized Tree layout method: ' + m);\n    },\n\n    params: ['size', 'nodeSize'],\n    fields: Output$1$1\n  });\n  /**\n   * Generate tuples representing links between tree nodes.\n   * The resulting tuples will contain 'source' and 'target' fields,\n   * which point to parent and child node tuples, respectively.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n  function TreeLinks(params) {\n    Transform.call(this, [], params);\n  }\n\n  TreeLinks.Definition = {\n    'type': 'TreeLinks',\n    'metadata': {\n      'tree': true,\n      'generates': true,\n      'changes': true\n    },\n    'params': []\n  };\n  inherits(TreeLinks, Transform, {\n    transform(_, pulse) {\n      const links = this.value,\n            tree = pulse.source && pulse.source.root,\n            out = pulse.fork(pulse.NO_SOURCE),\n            lut = {};\n      if (!tree) error('TreeLinks transform requires a tree data source.');\n\n      if (pulse.changed(pulse.ADD_REM)) {\n        // remove previous links\n        out.rem = links; // build lookup table of valid tuples\n\n        pulse.visit(pulse.SOURCE, t => lut[tupleid(t)] = 1); // generate links for all edges incident on valid tuples\n\n        tree.each(node => {\n          const t = node.data,\n                p = node.parent && node.parent.data;\n\n          if (p && lut[tupleid(t)] && lut[tupleid(p)]) {\n            out.add.push(ingest$1({\n              source: p,\n              target: t\n            }));\n          }\n        });\n        this.value = out.add;\n      } else if (pulse.changed(pulse.MOD)) {\n        // build lookup table of modified tuples\n        pulse.visit(pulse.MOD, t => lut[tupleid(t)] = 1); // gather links incident on modified tuples\n\n        links.forEach(link => {\n          if (lut[tupleid(link.source)] || lut[tupleid(link.target)]) {\n            out.mod.push(link);\n          }\n        });\n      }\n\n      return out;\n    }\n\n  });\n  const Tiles = {\n    binary: treemapBinary,\n    dice: treemapDice,\n    slice: treemapSlice,\n    slicedice: treemapSliceDice,\n    squarify: treemapSquarify,\n    resquarify: treemapResquarify\n  };\n  const Output$4 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n  /**\n   * Treemap layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n\n  function Treemap(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Treemap.Definition = {\n    'type': 'Treemap',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'squarify',\n      'values': ['squarify', 'resquarify', 'binary', 'dice', 'slice', 'slicedice']\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingInner',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingOuter',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingTop',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingRight',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingBottom',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingLeft',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'ratio',\n      'type': 'number',\n      'default': 1.618033988749895\n    }, {\n      'name': 'round',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$4.length,\n      'default': Output$4\n    }]\n  };\n  inherits(Treemap, HierarchyLayout, {\n    /**\n     * Treemap layout generator. Adds 'method' and 'ratio' parameters\n     * to configure the underlying tile method.\n     */\n    layout() {\n      const x = treemap();\n\n      x.ratio = _ => {\n        const t = x.tile();\n        if (t.ratio) x.tile(t.ratio(_));\n      };\n\n      x.method = _ => {\n        if (has$1(Tiles, _)) x.tile(Tiles[_]);else error('Unrecognized Treemap layout method: ' + _);\n      };\n\n      return x;\n    },\n\n    params: ['method', 'ratio', 'size', 'round', 'padding', 'paddingInner', 'paddingOuter', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'],\n    fields: Output$4\n  });\n\n  var tree = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    nest: Nest,\n    pack: Pack,\n    partition: Partition,\n    stratify: Stratify,\n    tree: Tree,\n    treelinks: TreeLinks,\n    treemap: Treemap\n  });\n\n  const ALPHA_MASK = 0xff000000; // alpha value equivalent to opacity 0.0625\n\n  const INSIDE_OPACITY_IN_ALPHA = 0x10000000;\n  const INSIDE_OPACITY = 0.0625;\n\n  function baseBitmaps($, data) {\n    const bitmap = $.bitmap(); // when there is no base mark but data points are to be avoided\n\n    (data || []).forEach(d => bitmap.set($(d.boundary[0]), $(d.boundary[3])));\n    return [bitmap, undefined];\n  }\n\n  function markBitmaps($, avoidMarks, labelInside, isGroupArea) {\n    // create canvas\n    const width = $.width,\n          height = $.height,\n          border = labelInside || isGroupArea,\n          context = domCanvas(width, height).getContext('2d'); // render all marks to be avoided into canvas\n\n    avoidMarks.forEach(items => draw(context, items, border)); // get canvas buffer, create bitmaps\n\n    const buffer = new Uint32Array(context.getImageData(0, 0, width, height).data.buffer),\n          layer1 = $.bitmap(),\n          layer2 = border && $.bitmap(); // populate bitmap layers\n\n    let x, y, u, v, alpha;\n\n    for (y = 0; y < height; ++y) {\n      for (x = 0; x < width; ++x) {\n        alpha = buffer[y * width + x] & ALPHA_MASK;\n\n        if (alpha) {\n          u = $(x);\n          v = $(y);\n          if (!isGroupArea) layer1.set(u, v); // update interior bitmap\n\n          if (border && alpha ^ INSIDE_OPACITY_IN_ALPHA) layer2.set(u, v); // update border bitmap\n        }\n      }\n    }\n\n    return [layer1, layer2];\n  }\n\n  function draw(context, items, interior) {\n    if (!items.length) return;\n    const type = items[0].mark.marktype;\n\n    if (type === 'group') {\n      items.forEach(group => {\n        group.items.forEach(mark => draw(context, mark.items, interior));\n      });\n    } else {\n      Marks[type].draw(context, {\n        items: interior ? items.map(prepare) : items\n      });\n    }\n  }\n  /**\n   * Prepare item before drawing into canvas (setting stroke and opacity)\n   * @param {object} source item to be prepared\n   * @returns prepared item\n   */\n\n\n  function prepare(source) {\n    const item = rederive(source, {});\n\n    if (item.stroke) {\n      item.strokeOpacity = 1;\n    }\n\n    if (item.fill) {\n      item.fillOpacity = INSIDE_OPACITY;\n      item.stroke = '#000';\n      item.strokeOpacity = 1;\n      item.strokeWidth = 2;\n    }\n\n    return item;\n  }\n\n  const DIV = 5,\n        // bit shift from x, y index to bit vector array index\n  MOD = 31,\n        // bit mask for index lookup within a bit vector\n  SIZE = 32,\n        // individual bit vector size\n  RIGHT0 = new Uint32Array(SIZE + 1),\n        // left-anchored bit vectors, full -> 0\n  RIGHT1 = new Uint32Array(SIZE + 1); // right-anchored bit vectors, 0 -> full\n\n  RIGHT1[0] = 0;\n  RIGHT0[0] = ~RIGHT1[0];\n\n  for (let i = 1; i <= SIZE; ++i) {\n    RIGHT1[i] = RIGHT1[i - 1] << 1 | 1;\n    RIGHT0[i] = ~RIGHT1[i];\n  }\n\n  function Bitmap(w, h) {\n    const array = new Uint32Array(~~((w * h + SIZE) / SIZE));\n\n    function _set(index, mask) {\n      array[index] |= mask;\n    }\n\n    function _clear(index, mask) {\n      array[index] &= mask;\n    }\n\n    return {\n      array: array,\n      get: (x, y) => {\n        const index = y * w + x;\n        return array[index >>> DIV] & 1 << (index & MOD);\n      },\n      set: (x, y) => {\n        const index = y * w + x;\n\n        _set(index >>> DIV, 1 << (index & MOD));\n      },\n      clear: (x, y) => {\n        const index = y * w + x;\n\n        _clear(index >>> DIV, ~(1 << (index & MOD)));\n      },\n      getRange: (x, y, x2, y2) => {\n        let r = y2,\n            start,\n            end,\n            indexStart,\n            indexEnd;\n\n        for (; r >= y; --r) {\n          start = r * w + x;\n          end = r * w + x2;\n          indexStart = start >>> DIV;\n          indexEnd = end >>> DIV;\n\n          if (indexStart === indexEnd) {\n            if (array[indexStart] & RIGHT0[start & MOD] & RIGHT1[(end & MOD) + 1]) {\n              return true;\n            }\n          } else {\n            if (array[indexStart] & RIGHT0[start & MOD]) return true;\n            if (array[indexEnd] & RIGHT1[(end & MOD) + 1]) return true;\n\n            for (let i = indexStart + 1; i < indexEnd; ++i) {\n              if (array[i]) return true;\n            }\n          }\n        }\n\n        return false;\n      },\n      setRange: (x, y, x2, y2) => {\n        let start, end, indexStart, indexEnd, i;\n\n        for (; y <= y2; ++y) {\n          start = y * w + x;\n          end = y * w + x2;\n          indexStart = start >>> DIV;\n          indexEnd = end >>> DIV;\n\n          if (indexStart === indexEnd) {\n            _set(indexStart, RIGHT0[start & MOD] & RIGHT1[(end & MOD) + 1]);\n          } else {\n            _set(indexStart, RIGHT0[start & MOD]);\n\n            _set(indexEnd, RIGHT1[(end & MOD) + 1]);\n\n            for (i = indexStart + 1; i < indexEnd; ++i) _set(i, 0xffffffff);\n          }\n        }\n      },\n      clearRange: (x, y, x2, y2) => {\n        let start, end, indexStart, indexEnd, i;\n\n        for (; y <= y2; ++y) {\n          start = y * w + x;\n          end = y * w + x2;\n          indexStart = start >>> DIV;\n          indexEnd = end >>> DIV;\n\n          if (indexStart === indexEnd) {\n            _clear(indexStart, RIGHT1[start & MOD] | RIGHT0[(end & MOD) + 1]);\n          } else {\n            _clear(indexStart, RIGHT1[start & MOD]);\n\n            _clear(indexEnd, RIGHT0[(end & MOD) + 1]);\n\n            for (i = indexStart + 1; i < indexEnd; ++i) _clear(i, 0);\n          }\n        }\n      },\n      outOfBounds: (x, y, x2, y2) => x < 0 || y < 0 || y2 >= h || x2 >= w\n    };\n  }\n\n  function scaler(width, height, padding) {\n    const ratio = Math.max(1, Math.sqrt(width * height / 1e6)),\n          w = ~~((width + 2 * padding + ratio) / ratio),\n          h = ~~((height + 2 * padding + ratio) / ratio),\n          scale = _ => ~~((_ + padding) / ratio);\n\n    scale.invert = _ => _ * ratio - padding;\n\n    scale.bitmap = () => Bitmap(w, h);\n\n    scale.ratio = ratio;\n    scale.padding = padding;\n    scale.width = width;\n    scale.height = height;\n    return scale;\n  }\n\n  function placeAreaLabelNaive($, bitmaps, avoidBaseMark, markIndex) {\n    const width = $.width,\n          height = $.height; // try to place a label within an input area mark\n\n    return function (d) {\n      const items = d.datum.datum.items[markIndex].items,\n            // area points\n      n = items.length,\n            // number of points\n      textHeight = d.datum.fontSize,\n            // label width\n      textWidth = textMetrics.width(d.datum, d.datum.text); // label height\n\n      let maxAreaWidth = 0,\n          x1,\n          x2,\n          y1,\n          y2,\n          x,\n          y,\n          areaWidth; // for each area sample point\n\n      for (let i = 0; i < n; ++i) {\n        x1 = items[i].x;\n        y1 = items[i].y;\n        x2 = items[i].x2 === undefined ? x1 : items[i].x2;\n        y2 = items[i].y2 === undefined ? y1 : items[i].y2;\n        x = (x1 + x2) / 2;\n        y = (y1 + y2) / 2;\n        areaWidth = Math.abs(x2 - x1 + y2 - y1);\n\n        if (areaWidth >= maxAreaWidth) {\n          maxAreaWidth = areaWidth;\n          d.x = x;\n          d.y = y;\n        }\n      }\n\n      x = textWidth / 2;\n      y = textHeight / 2;\n      x1 = d.x - x;\n      x2 = d.x + x;\n      y1 = d.y - y;\n      y2 = d.y + y;\n      d.align = 'center';\n\n      if (x1 < 0 && x2 <= width) {\n        d.align = 'left';\n      } else if (0 <= x1 && width < x2) {\n        d.align = 'right';\n      }\n\n      d.baseline = 'middle';\n\n      if (y1 < 0 && y2 <= height) {\n        d.baseline = 'top';\n      } else if (0 <= y1 && height < y2) {\n        d.baseline = 'bottom';\n      }\n\n      return true;\n    };\n  }\n\n  function outOfBounds(x, y, textWidth, textHeight, width, height) {\n    let r = textWidth / 2;\n    return x - r < 0 || x + r > width || y - (r = textHeight / 2) < 0 || y + r > height;\n  }\n\n  function collision($, x, y, textHeight, textWidth, h, bm0, bm1) {\n    const w = textWidth * h / (textHeight * 2),\n          x1 = $(x - w),\n          x2 = $(x + w),\n          y1 = $(y - (h = h / 2)),\n          y2 = $(y + h);\n    return bm0.outOfBounds(x1, y1, x2, y2) || bm0.getRange(x1, y1, x2, y2) || bm1 && bm1.getRange(x1, y1, x2, y2);\n  }\n\n  function placeAreaLabelReducedSearch($, bitmaps, avoidBaseMark, markIndex) {\n    const width = $.width,\n          height = $.height,\n          bm0 = bitmaps[0],\n          // where labels have been placed\n    bm1 = bitmaps[1]; // area outlines\n\n    function tryLabel(_x, _y, maxSize, textWidth, textHeight) {\n      const x = $.invert(_x),\n            y = $.invert(_y);\n      let lo = maxSize,\n          hi = height,\n          mid;\n\n      if (!outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, lo, bm0, bm1) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {\n        // if the label fits at the current sample point,\n        // perform binary search to find the largest font size that fits\n        while (hi - lo >= 1) {\n          mid = (lo + hi) / 2;\n\n          if (collision($, x, y, textHeight, textWidth, mid, bm0, bm1)) {\n            hi = mid;\n          } else {\n            lo = mid;\n          }\n        } // place label if current lower bound exceeds prior max font size\n\n\n        if (lo > maxSize) {\n          return [x, y, lo, true];\n        }\n      }\n    } // try to place a label within an input area mark\n\n\n    return function (d) {\n      const items = d.datum.datum.items[markIndex].items,\n            // area points\n      n = items.length,\n            // number of points\n      textHeight = d.datum.fontSize,\n            // label width\n      textWidth = textMetrics.width(d.datum, d.datum.text); // label height\n\n      let maxSize = avoidBaseMark ? textHeight : 0,\n          labelPlaced = false,\n          labelPlaced2 = false,\n          maxAreaWidth = 0,\n          x1,\n          x2,\n          y1,\n          y2,\n          x,\n          y,\n          _x,\n          _y,\n          _x1,\n          _xMid,\n          _x2,\n          _y1,\n          _yMid,\n          _y2,\n          areaWidth,\n          result,\n          swapTmp; // for each area sample point\n\n\n      for (let i = 0; i < n; ++i) {\n        x1 = items[i].x;\n        y1 = items[i].y;\n        x2 = items[i].x2 === undefined ? x1 : items[i].x2;\n        y2 = items[i].y2 === undefined ? y1 : items[i].y2;\n\n        if (x1 > x2) {\n          swapTmp = x1;\n          x1 = x2;\n          x2 = swapTmp;\n        }\n\n        if (y1 > y2) {\n          swapTmp = y1;\n          y1 = y2;\n          y2 = swapTmp;\n        }\n\n        _x1 = $(x1);\n        _x2 = $(x2);\n        _xMid = ~~((_x1 + _x2) / 2);\n        _y1 = $(y1);\n        _y2 = $(y2);\n        _yMid = ~~((_y1 + _y2) / 2); // search along the line from mid point between the 2 border to lower border\n\n        for (_x = _xMid; _x >= _x1; --_x) {\n          for (_y = _yMid; _y >= _y1; --_y) {\n            result = tryLabel(_x, _y, maxSize, textWidth, textHeight);\n\n            if (result) {\n              [d.x, d.y, maxSize, labelPlaced] = result;\n            }\n          }\n        } // search along the line from mid point between the 2 border to upper border\n\n\n        for (_x = _xMid; _x <= _x2; ++_x) {\n          for (_y = _yMid; _y <= _y2; ++_y) {\n            result = tryLabel(_x, _y, maxSize, textWidth, textHeight);\n\n            if (result) {\n              [d.x, d.y, maxSize, labelPlaced] = result;\n            }\n          }\n        } // place label at slice center if not placed through other means\n        // and if we're not avoiding overlap with other areas\n\n\n        if (!labelPlaced && !avoidBaseMark) {\n          // one span is zero, hence we can add\n          areaWidth = Math.abs(x2 - x1 + y2 - y1);\n          x = (x1 + x2) / 2;\n          y = (y1 + y2) / 2; // place label if it fits and improves the max area width\n\n          if (areaWidth >= maxAreaWidth && !outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {\n            maxAreaWidth = areaWidth;\n            d.x = x;\n            d.y = y;\n            labelPlaced2 = true;\n          }\n        }\n      } // record current label placement information, update label bitmap\n\n\n      if (labelPlaced || labelPlaced2) {\n        x = textWidth / 2;\n        y = textHeight / 2;\n        bm0.setRange($(d.x - x), $(d.y - y), $(d.x + x), $(d.y + y));\n        d.align = 'center';\n        d.baseline = 'middle';\n        return true;\n      } else {\n        return false;\n      }\n    };\n  }\n\n  const X_DIR = [-1, -1, 1, 1];\n  const Y_DIR = [-1, 1, -1, 1];\n\n  function placeAreaLabelFloodFill($, bitmaps, avoidBaseMark, markIndex) {\n    const width = $.width,\n          height = $.height,\n          bm0 = bitmaps[0],\n          // where labels have been placed\n    bm1 = bitmaps[1],\n          // area outlines\n    bm2 = $.bitmap(); // flood-fill visitations\n    // try to place a label within an input area mark\n\n    return function (d) {\n      const items = d.datum.datum.items[markIndex].items,\n            // area points\n      n = items.length,\n            // number of points\n      textHeight = d.datum.fontSize,\n            // label width\n      textWidth = textMetrics.width(d.datum, d.datum.text),\n            // label height\n      stack = []; // flood fill stack\n\n      let maxSize = avoidBaseMark ? textHeight : 0,\n          labelPlaced = false,\n          labelPlaced2 = false,\n          maxAreaWidth = 0,\n          x1,\n          x2,\n          y1,\n          y2,\n          x,\n          y,\n          _x,\n          _y,\n          lo,\n          hi,\n          mid,\n          areaWidth; // for each area sample point\n\n\n      for (let i = 0; i < n; ++i) {\n        x1 = items[i].x;\n        y1 = items[i].y;\n        x2 = items[i].x2 === undefined ? x1 : items[i].x2;\n        y2 = items[i].y2 === undefined ? y1 : items[i].y2; // add scaled center point to stack\n\n        stack.push([$((x1 + x2) / 2), $((y1 + y2) / 2)]); // perform flood fill, visit points\n\n        while (stack.length) {\n          [_x, _y] = stack.pop(); // exit if point already marked\n\n          if (bm0.get(_x, _y) || bm1.get(_x, _y) || bm2.get(_x, _y)) continue; // mark point in flood fill bitmap\n          // add search points for all (in bound) directions\n\n          bm2.set(_x, _y);\n\n          for (let j = 0; j < 4; ++j) {\n            x = _x + X_DIR[j];\n            y = _y + Y_DIR[j];\n            if (!bm2.outOfBounds(x, y, x, y)) stack.push([x, y]);\n          } // unscale point back to x, y space\n\n\n          x = $.invert(_x);\n          y = $.invert(_y);\n          lo = maxSize;\n          hi = height; // TODO: make this bound smaller\n\n          if (!outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, lo, bm0, bm1) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {\n            // if the label fits at the current sample point,\n            // perform binary search to find the largest font size that fits\n            while (hi - lo >= 1) {\n              mid = (lo + hi) / 2;\n\n              if (collision($, x, y, textHeight, textWidth, mid, bm0, bm1)) {\n                hi = mid;\n              } else {\n                lo = mid;\n              }\n            } // place label if current lower bound exceeds prior max font size\n\n\n            if (lo > maxSize) {\n              d.x = x;\n              d.y = y;\n              maxSize = lo;\n              labelPlaced = true;\n            }\n          }\n        } // place label at slice center if not placed through other means\n        // and if we're not avoiding overlap with other areas\n\n\n        if (!labelPlaced && !avoidBaseMark) {\n          // one span is zero, hence we can add\n          areaWidth = Math.abs(x2 - x1 + y2 - y1);\n          x = (x1 + x2) / 2;\n          y = (y1 + y2) / 2; // place label if it fits and improves the max area width\n\n          if (areaWidth >= maxAreaWidth && !outOfBounds(x, y, textWidth, textHeight, width, height) && !collision($, x, y, textHeight, textWidth, textHeight, bm0, null)) {\n            maxAreaWidth = areaWidth;\n            d.x = x;\n            d.y = y;\n            labelPlaced2 = true;\n          }\n        }\n      } // record current label placement information, update label bitmap\n\n\n      if (labelPlaced || labelPlaced2) {\n        x = textWidth / 2;\n        y = textHeight / 2;\n        bm0.setRange($(d.x - x), $(d.y - y), $(d.x + x), $(d.y + y));\n        d.align = 'center';\n        d.baseline = 'middle';\n        return true;\n      } else {\n        return false;\n      }\n    };\n  }\n\n  const Aligns = ['right', 'center', 'left'],\n        Baselines = ['bottom', 'middle', 'top'];\n\n  function placeMarkLabel($, bitmaps, anchors, offsets) {\n    const width = $.width,\n          height = $.height,\n          bm0 = bitmaps[0],\n          bm1 = bitmaps[1],\n          n = offsets.length;\n    return function (d) {\n      const boundary = d.boundary,\n            textHeight = d.datum.fontSize; // can not be placed if the mark is not visible in the graph bound\n\n      if (boundary[2] < 0 || boundary[5] < 0 || boundary[0] > width || boundary[3] > height) {\n        return false;\n      }\n\n      let textWidth = 0,\n          dx,\n          dy,\n          isInside,\n          sizeFactor,\n          insideFactor,\n          x1,\n          x2,\n          y1,\n          y2,\n          xc,\n          yc,\n          _x1,\n          _x2,\n          _y1,\n          _y2; // for each anchor and offset\n\n\n      for (let i = 0; i < n; ++i) {\n        dx = (anchors[i] & 0x3) - 1;\n        dy = (anchors[i] >>> 0x2 & 0x3) - 1;\n        isInside = dx === 0 && dy === 0 || offsets[i] < 0;\n        sizeFactor = dx && dy ? Math.SQRT1_2 : 1;\n        insideFactor = offsets[i] < 0 ? -1 : 1;\n        x1 = boundary[1 + dx] + offsets[i] * dx * sizeFactor;\n        yc = boundary[4 + dy] + insideFactor * textHeight * dy / 2 + offsets[i] * dy * sizeFactor;\n        y1 = yc - textHeight / 2;\n        y2 = yc + textHeight / 2;\n        _x1 = $(x1);\n        _y1 = $(y1);\n        _y2 = $(y2);\n\n        if (!textWidth) {\n          // to avoid finding width of text label,\n          if (!test(_x1, _x1, _y1, _y2, bm0, bm1, x1, x1, y1, y2, boundary, isInside)) {\n            // skip this anchor/offset option if we fail to place a label with 1px width\n            continue;\n          } else {\n            // Otherwise, find the label width\n            textWidth = textMetrics.width(d.datum, d.datum.text);\n          }\n        }\n\n        xc = x1 + insideFactor * textWidth * dx / 2;\n        x1 = xc - textWidth / 2;\n        x2 = xc + textWidth / 2;\n        _x1 = $(x1);\n        _x2 = $(x2);\n\n        if (test(_x1, _x2, _y1, _y2, bm0, bm1, x1, x2, y1, y2, boundary, isInside)) {\n          // place label if the position is placeable\n          d.x = !dx ? xc : dx * insideFactor < 0 ? x2 : x1;\n          d.y = !dy ? yc : dy * insideFactor < 0 ? y2 : y1;\n          d.align = Aligns[dx * insideFactor + 1];\n          d.baseline = Baselines[dy * insideFactor + 1];\n          bm0.setRange(_x1, _y1, _x2, _y2);\n          return true;\n        }\n      }\n\n      return false;\n    };\n  } // Test if a label with the given dimensions can be added without overlap\n\n\n  function test(_x1, _x2, _y1, _y2, bm0, bm1, x1, x2, y1, y2, boundary, isInside) {\n    return !(bm0.outOfBounds(_x1, _y1, _x2, _y2) || (isInside && bm1 ? bm1.getRange(_x1, _y1, _x2, _y2) || !isInMarkBound(x1, y1, x2, y2, boundary) : bm0.getRange(_x1, _y1, _x2, _y2)));\n  }\n\n  function isInMarkBound(x1, y1, x2, y2, boundary) {\n    return boundary[0] <= x1 && x2 <= boundary[2] && boundary[3] <= y1 && y2 <= boundary[5];\n  }\n\n  const TOP = 0x0,\n        MIDDLE = 0x4,\n        BOTTOM = 0x8,\n        LEFT = 0x0,\n        CENTER = 0x1,\n        RIGHT = 0x2; // Mapping from text anchor to number representation\n\n  const anchorCode = {\n    'top-left': TOP + LEFT,\n    'top': TOP + CENTER,\n    'top-right': TOP + RIGHT,\n    'left': MIDDLE + LEFT,\n    'middle': MIDDLE + CENTER,\n    'right': MIDDLE + RIGHT,\n    'bottom-left': BOTTOM + LEFT,\n    'bottom': BOTTOM + CENTER,\n    'bottom-right': BOTTOM + RIGHT\n  };\n  const placeAreaLabel = {\n    'naive': placeAreaLabelNaive,\n    'reduced-search': placeAreaLabelReducedSearch,\n    'floodfill': placeAreaLabelFloodFill\n  };\n\n  function labelLayout(texts, size, compare, offset, anchor, avoidMarks, avoidBaseMark, lineAnchor, markIndex, padding, method) {\n    // early exit for empty data\n    if (!texts.length) return texts;\n    const positions = Math.max(offset.length, anchor.length),\n          offsets = getOffsets(offset, positions),\n          anchors = getAnchors(anchor, positions),\n          marktype = markType(texts[0].datum),\n          grouptype = marktype === 'group' && texts[0].datum.items[markIndex].marktype,\n          isGroupArea = grouptype === 'area',\n          boundary = markBoundary(marktype, grouptype, lineAnchor, markIndex),\n          $ = scaler(size[0], size[1], padding),\n          isNaiveGroupArea = isGroupArea && method === 'naive'; // prepare text mark data for placing\n\n    const data = texts.map(d => ({\n      datum: d,\n      opacity: 0,\n      x: undefined,\n      y: undefined,\n      align: undefined,\n      baseline: undefined,\n      boundary: boundary(d)\n    }));\n    let bitmaps;\n\n    if (!isNaiveGroupArea) {\n      // sort labels in priority order, if comparator is provided\n      if (compare) {\n        data.sort((a, b) => compare(a.datum, b.datum));\n      } // flag indicating if label can be placed inside its base mark\n\n\n      let labelInside = false;\n\n      for (let i = 0; i < anchors.length && !labelInside; ++i) {\n        // label inside if anchor is at center\n        // label inside if offset to be inside the mark bound\n        labelInside = anchors[i] === 0x5 || offsets[i] < 0;\n      } // extract data information from base mark when base mark is to be avoided\n      // base mark is implicitly avoided if it is a group area\n\n\n      if (marktype && (avoidBaseMark || isGroupArea)) {\n        avoidMarks = [texts.map(d => d.datum)].concat(avoidMarks);\n      } // generate bitmaps for layout calculation\n\n\n      bitmaps = avoidMarks.length ? markBitmaps($, avoidMarks, labelInside, isGroupArea) : baseBitmaps($, avoidBaseMark && data);\n    } // generate label placement function\n\n\n    const place = isGroupArea ? placeAreaLabel[method]($, bitmaps, avoidBaseMark, markIndex) : placeMarkLabel($, bitmaps, anchors, offsets); // place all labels\n\n    data.forEach(d => d.opacity = +place(d));\n    return data;\n  }\n\n  function getOffsets(_, count) {\n    const offsets = new Float64Array(count),\n          n = _.length;\n\n    for (let i = 0; i < n; ++i) offsets[i] = _[i] || 0;\n\n    for (let i = n; i < count; ++i) offsets[i] = offsets[n - 1];\n\n    return offsets;\n  }\n\n  function getAnchors(_, count) {\n    const anchors = new Int8Array(count),\n          n = _.length;\n\n    for (let i = 0; i < n; ++i) anchors[i] |= anchorCode[_[i]];\n\n    for (let i = n; i < count; ++i) anchors[i] = anchors[n - 1];\n\n    return anchors;\n  }\n\n  function markType(item) {\n    return item && item.mark && item.mark.marktype;\n  }\n  /**\n   * Factory function for function for getting base mark boundary, depending\n   * on mark and group type. When mark type is undefined, line or area: boundary\n   * is the coordinate of each data point. When base mark is grouped line,\n   * boundary is either at the beginning or end of the line depending on the\n   * value of lineAnchor. Otherwise, use bounds of base mark.\n   */\n\n\n  function markBoundary(marktype, grouptype, lineAnchor, markIndex) {\n    const xy = d => [d.x, d.x, d.x, d.y, d.y, d.y];\n\n    if (!marktype) {\n      return xy; // no reactive geometry\n    } else if (marktype === 'line' || marktype === 'area') {\n      return d => xy(d.datum);\n    } else if (grouptype === 'line') {\n      return d => {\n        const items = d.datum.items[markIndex].items;\n        return xy(items.length ? items[lineAnchor === 'start' ? 0 : items.length - 1] : {\n          x: NaN,\n          y: NaN\n        });\n      };\n    } else {\n      return d => {\n        const b = d.datum.bounds;\n        return [b.x1, (b.x1 + b.x2) / 2, b.x2, b.y1, (b.y1 + b.y2) / 2, b.y2];\n      };\n    }\n  }\n\n  const Output$1 = ['x', 'y', 'opacity', 'align', 'baseline'];\n  const Anchors = ['top-left', 'left', 'bottom-left', 'top', 'bottom', 'top-right', 'right', 'bottom-right'];\n  /**\n   * Compute text label layout to annotate marks.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<number>} params.size - The size of the layout, provided as a [width, height] array.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for sorting label data in priority order.\n   * @param {Array<string>} [params.anchor] - Label anchor points relative to the base mark bounding box.\n   *   The available options are 'top-left', 'left', 'bottom-left', 'top',\n   *   'bottom', 'top-right', 'right', 'bottom-right', 'middle'.\n   * @param {Array<number>} [params.offset] - Label offsets (in pixels) from the base mark bounding box.\n   *   This parameter  is parallel to the list of anchor points.\n   * @param {number} [params.padding=0] - The amount (in pixels) that a label may exceed the layout size.\n   * @param {string} [params.lineAnchor='end'] - For group line mark labels only, indicates the anchor\n   *   position for labels. One of 'start' or 'end'.\n   * @param {string} [params.markIndex=0] - For group mark labels only, an index indicating\n   *   which mark within the group should be labeled.\n   * @param {Array<number>} [params.avoidMarks] - A list of additional mark names for which the label\n   *   layout should avoid overlap.\n   * @param {boolean} [params.avoidBaseMark=true] - Boolean flag indicating if labels should avoid\n   *   overlap with the underlying base mark being labeled.\n   * @param {string} [params.method='naive'] - For area make labels only, a method for\n   *   place labels. One of 'naive', 'reduced-search', or 'floodfill'.\n   * @param {Array<string>} [params.as] - The output fields written by the transform.\n   *   The default is ['x', 'y', 'opacity', 'align', 'baseline'].\n   */\n\n  function Label$1(params) {\n    Transform.call(this, null, params);\n  }\n\n  Label$1.Definition = {\n    type: 'Label',\n    metadata: {\n      modifies: true\n    },\n    params: [{\n      name: 'size',\n      type: 'number',\n      array: true,\n      length: 2,\n      required: true\n    }, {\n      name: 'sort',\n      type: 'compare'\n    }, {\n      name: 'anchor',\n      type: 'string',\n      array: true,\n      default: Anchors\n    }, {\n      name: 'offset',\n      type: 'number',\n      array: true,\n      default: [1]\n    }, {\n      name: 'padding',\n      type: 'number',\n      default: 0\n    }, {\n      name: 'lineAnchor',\n      type: 'string',\n      values: ['start', 'end'],\n      default: 'end'\n    }, {\n      name: 'markIndex',\n      type: 'number',\n      default: 0\n    }, {\n      name: 'avoidBaseMark',\n      type: 'boolean',\n      default: true\n    }, {\n      name: 'avoidMarks',\n      type: 'data',\n      array: true\n    }, {\n      name: 'method',\n      type: 'string',\n      default: 'naive'\n    }, {\n      name: 'as',\n      type: 'string',\n      array: true,\n      length: Output$1.length,\n      default: Output$1\n    }]\n  };\n  inherits(Label$1, Transform, {\n    transform(_, pulse) {\n      function modp(param) {\n        const p = _[param];\n        return isFunction(p) && pulse.modified(p.fields);\n      }\n\n      const mod = _.modified();\n\n      if (!(mod || pulse.changed(pulse.ADD_REM) || modp('sort'))) return;\n\n      if (!_.size || _.size.length !== 2) {\n        error('Size parameter should be specified as a [width, height] array.');\n      }\n\n      const as = _.as || Output$1; // run label layout\n\n      labelLayout(pulse.materialize(pulse.SOURCE).source || [], _.size, _.sort, array$5(_.offset == null ? 1 : _.offset), array$5(_.anchor || Anchors), _.avoidMarks || [], _.avoidBaseMark !== false, _.lineAnchor || 'end', _.markIndex || 0, _.padding || 0, _.method || 'naive').forEach(l => {\n        // write layout results to data stream\n        const t = l.datum;\n        t[as[0]] = l.x;\n        t[as[1]] = l.y;\n        t[as[2]] = l.opacity;\n        t[as[3]] = l.align;\n        t[as[4]] = l.baseline;\n      });\n      return pulse.reflow(mod).modifies(as);\n    }\n\n  });\n\n  var label = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    label: Label$1\n  });\n\n  function partition(data, groupby) {\n    var groups = [],\n        get = function (f) {\n      return f(t);\n    },\n        map,\n        i,\n        n,\n        t,\n        k,\n        g; // partition data points into stack groups\n\n\n    if (groupby == null) {\n      groups.push(data);\n    } else {\n      for (map = {}, i = 0, n = data.length; i < n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n\n        if (!g) {\n          map[k] = g = [];\n          g.dims = k;\n          groups.push(g);\n        }\n\n        g.push(t);\n      }\n    }\n\n    return groups;\n  }\n  /**\n   * Compute locally-weighted regression fits for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.x - An accessor for the predictor data field.\n   * @param {function(object): *} params.y - An accessor for the predicted data field.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {number} [params.bandwidth=0.3] - The loess bandwidth.\n   */\n\n\n  function Loess(params) {\n    Transform.call(this, null, params);\n  }\n\n  Loess.Definition = {\n    'type': 'Loess',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'x',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'y',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'default': 0.3\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }]\n  };\n  inherits(Loess, Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n      if (!this.value || pulse.changed() || _.modified()) {\n        const source = pulse.materialize(pulse.SOURCE).source,\n              groups = partition(source, _.groupby),\n              names = (_.groupby || []).map(accessorName),\n              m = names.length,\n              as = _.as || [accessorName(_.x), accessorName(_.y)],\n              values = [];\n        groups.forEach(g => {\n          loess(g, _.x, _.y, _.bandwidth || 0.3).forEach(p => {\n            const t = {};\n\n            for (let i = 0; i < m; ++i) {\n              t[names[i]] = g.dims[i];\n            }\n\n            t[as[0]] = p[0];\n            t[as[1]] = p[1];\n            values.push(ingest$1(t));\n          });\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n\n      return out;\n    }\n\n  });\n  const Methods = {\n    linear: linear$2,\n    log: log$3,\n    exp: exp$1,\n    pow: pow$3,\n    quad: quad,\n    poly: poly\n  };\n\n  const degreesOfFreedom = (method, order) => method === 'poly' ? order : method === 'quad' ? 2 : 1;\n  /**\n   * Compute regression fits for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.x - An accessor for the predictor data field.\n   * @param {function(object): *} params.y - An accessor for the predicted data field.\n   * @param {string} [params.method='linear'] - The regression method to apply.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {Array<number>} [params.extent] - The domain extent over which to plot the regression line.\n   * @param {number} [params.order=3] - The polynomial order. Only applies to the 'poly' method.\n   */\n\n\n  function Regression(params) {\n    Transform.call(this, null, params);\n  }\n\n  Regression.Definition = {\n    'type': 'Regression',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'x',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'y',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'method',\n      'type': 'string',\n      'default': 'linear',\n      'values': Object.keys(Methods)\n    }, {\n      'name': 'order',\n      'type': 'number',\n      'default': 3\n    }, {\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'params',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }]\n  };\n  inherits(Regression, Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n      if (!this.value || pulse.changed() || _.modified()) {\n        const source = pulse.materialize(pulse.SOURCE).source,\n              groups = partition(source, _.groupby),\n              names = (_.groupby || []).map(accessorName),\n              method = _.method || 'linear',\n              order = _.order || 3,\n              dof = degreesOfFreedom(method, order),\n              as = _.as || [accessorName(_.x), accessorName(_.y)],\n              fit = Methods[method],\n              values = [];\n        let domain = _.extent;\n\n        if (!has$1(Methods, method)) {\n          error('Invalid regression method: ' + method);\n        }\n\n        if (domain != null) {\n          if (method === 'log' && domain[0] <= 0) {\n            pulse.dataflow.warn('Ignoring extent with values <= 0 for log regression.');\n            domain = null;\n          }\n        }\n\n        groups.forEach(g => {\n          const n = g.length;\n\n          if (n <= dof) {\n            pulse.dataflow.warn('Skipping regression with more parameters than data points.');\n            return;\n          }\n\n          const model = fit(g, _.x, _.y, order);\n\n          if (_.params) {\n            // if parameter vectors requested return those\n            values.push(ingest$1({\n              keys: g.dims,\n              coef: model.coef,\n              rSquared: model.rSquared\n            }));\n            return;\n          }\n\n          const dom = domain || extent(g, _.x),\n                add = p => {\n            const t = {};\n\n            for (let i = 0; i < names.length; ++i) {\n              t[names[i]] = g.dims[i];\n            }\n\n            t[as[0]] = p[0];\n            t[as[1]] = p[1];\n            values.push(ingest$1(t));\n          };\n\n          if (method === 'linear') {\n            // for linear regression we only need the end points\n            dom.forEach(x => add([x, model.predict(x)]));\n          } else {\n            // otherwise return trend line sample points\n            sampleCurve(model.predict, dom, 25, 200).forEach(add);\n          }\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n\n      return out;\n    }\n\n  });\n\n  var reg = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    loess: Loess,\n    regression: Regression\n  });\n\n  const EPSILON = Math.pow(2, -52);\n  const EDGE_STACK = new Uint32Array(512);\n  class Delaunator {\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n      const n = points.length;\n      const coords = new Float64Array(n * 2);\n\n      for (let i = 0; i < n; i++) {\n        const p = points[i];\n        coords[2 * i] = getX(p);\n        coords[2 * i + 1] = getY(p);\n      }\n\n      return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n      const n = coords.length >> 1;\n      if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n      this.coords = coords; // arrays that will store the triangulation graph\n\n      const maxTriangles = Math.max(2 * n - 5, 0);\n      this._triangles = new Uint32Array(maxTriangles * 3);\n      this._halfedges = new Int32Array(maxTriangles * 3); // temporary arrays for tracking the edges of the advancing convex hull\n\n      this._hashSize = Math.ceil(Math.sqrt(n));\n      this._hullPrev = new Uint32Array(n); // edge to prev edge\n\n      this._hullNext = new Uint32Array(n); // edge to next edge\n\n      this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n\n      this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n      // temporary arrays for sorting points\n\n      this._ids = new Uint32Array(n);\n      this._dists = new Float64Array(n);\n      this.update();\n    }\n\n    update() {\n      const {\n        coords,\n        _hullPrev: hullPrev,\n        _hullNext: hullNext,\n        _hullTri: hullTri,\n        _hullHash: hullHash\n      } = this;\n      const n = coords.length >> 1; // populate an array of point indices; calculate input data bbox\n\n      let minX = Infinity;\n      let minY = Infinity;\n      let maxX = -Infinity;\n      let maxY = -Infinity;\n\n      for (let i = 0; i < n; i++) {\n        const x = coords[2 * i];\n        const y = coords[2 * i + 1];\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n        this._ids[i] = i;\n      }\n\n      const cx = (minX + maxX) / 2;\n      const cy = (minY + maxY) / 2;\n      let minDist = Infinity;\n      let i0, i1, i2; // pick a seed point close to the center\n\n      for (let i = 0; i < n; i++) {\n        const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n\n        if (d < minDist) {\n          i0 = i;\n          minDist = d;\n        }\n      }\n\n      const i0x = coords[2 * i0];\n      const i0y = coords[2 * i0 + 1];\n      minDist = Infinity; // find the point closest to the seed\n\n      for (let i = 0; i < n; i++) {\n        if (i === i0) continue;\n        const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n\n        if (d < minDist && d > 0) {\n          i1 = i;\n          minDist = d;\n        }\n      }\n\n      let i1x = coords[2 * i1];\n      let i1y = coords[2 * i1 + 1];\n      let minRadius = Infinity; // find the third point which forms the smallest circumcircle with the first two\n\n      for (let i = 0; i < n; i++) {\n        if (i === i0 || i === i1) continue;\n        const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n\n        if (r < minRadius) {\n          i2 = i;\n          minRadius = r;\n        }\n      }\n\n      let i2x = coords[2 * i2];\n      let i2y = coords[2 * i2 + 1];\n\n      if (minRadius === Infinity) {\n        // order collinear points by dx (or dy if all x are identical)\n        // and return the list as a hull\n        for (let i = 0; i < n; i++) {\n          this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];\n        }\n\n        quicksort(this._ids, this._dists, 0, n - 1);\n        const hull = new Uint32Array(n);\n        let j = 0;\n\n        for (let i = 0, d0 = -Infinity; i < n; i++) {\n          const id = this._ids[i];\n\n          if (this._dists[id] > d0) {\n            hull[j++] = id;\n            d0 = this._dists[id];\n          }\n        }\n\n        this.hull = hull.subarray(0, j);\n        this.triangles = new Uint32Array(0);\n        this.halfedges = new Uint32Array(0);\n        return;\n      } // swap the order of the seed points for counter-clockwise orientation\n\n\n      if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n        const i = i1;\n        const x = i1x;\n        const y = i1y;\n        i1 = i2;\n        i1x = i2x;\n        i1y = i2y;\n        i2 = i;\n        i2x = x;\n        i2y = y;\n      }\n\n      const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n      this._cx = center.x;\n      this._cy = center.y;\n\n      for (let i = 0; i < n; i++) {\n        this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n      } // sort the points by distance from the seed triangle circumcenter\n\n\n      quicksort(this._ids, this._dists, 0, n - 1); // set up the seed triangle as the starting hull\n\n      this._hullStart = i0;\n      let hullSize = 3;\n      hullNext[i0] = hullPrev[i2] = i1;\n      hullNext[i1] = hullPrev[i0] = i2;\n      hullNext[i2] = hullPrev[i1] = i0;\n      hullTri[i0] = 0;\n      hullTri[i1] = 1;\n      hullTri[i2] = 2;\n      hullHash.fill(-1);\n      hullHash[this._hashKey(i0x, i0y)] = i0;\n      hullHash[this._hashKey(i1x, i1y)] = i1;\n      hullHash[this._hashKey(i2x, i2y)] = i2;\n      this.trianglesLen = 0;\n\n      this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n      for (let k = 0, xp, yp; k < this._ids.length; k++) {\n        const i = this._ids[k];\n        const x = coords[2 * i];\n        const y = coords[2 * i + 1]; // skip near-duplicate points\n\n        if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n        xp = x;\n        yp = y; // skip seed triangle points\n\n        if (i === i0 || i === i1 || i === i2) continue; // find a visible edge on the convex hull using edge hash\n\n        let start = 0;\n\n        for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n          start = hullHash[(key + j) % this._hashSize];\n          if (start !== -1 && start !== hullNext[start]) break;\n        }\n\n        start = hullPrev[start];\n        let e = start,\n            q;\n\n        while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n          e = q;\n\n          if (e === start) {\n            e = -1;\n            break;\n          }\n        }\n\n        if (e === -1) continue; // likely a near-duplicate point; skip it\n        // add the first triangle from the point\n\n        let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]); // recursively flip triangles from the point until they satisfy the Delaunay condition\n\n\n        hullTri[i] = this._legalize(t + 2);\n        hullTri[e] = t; // keep track of boundary triangles on the hull\n\n        hullSize++; // walk forward through the hull, adding more triangles and flipping recursively\n\n        let n = hullNext[e];\n\n        while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\n          t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n          hullTri[i] = this._legalize(t + 2);\n          hullNext[n] = n; // mark as removed\n\n          hullSize--;\n          n = q;\n        } // walk backward from the other side, adding more triangles and flipping\n\n\n        if (e === start) {\n          while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n            t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n\n            this._legalize(t + 2);\n\n            hullTri[q] = t;\n            hullNext[e] = e; // mark as removed\n\n            hullSize--;\n            e = q;\n          }\n        } // update the hull indices\n\n\n        this._hullStart = hullPrev[i] = e;\n        hullNext[e] = hullPrev[n] = i;\n        hullNext[i] = n; // save the two new edges in the hash table\n\n        hullHash[this._hashKey(x, y)] = i;\n        hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n      }\n\n      this.hull = new Uint32Array(hullSize);\n\n      for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n        this.hull[i] = e;\n        e = hullNext[e];\n      } // trim typed triangle mesh arrays\n\n\n      this.triangles = this._triangles.subarray(0, this.trianglesLen);\n      this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n      return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n      const {\n        _triangles: triangles,\n        _halfedges: halfedges,\n        coords\n      } = this;\n      let i = 0;\n      let ar = 0; // recursion eliminated with a fixed-size stack\n\n      while (true) {\n        const b = halfedges[a];\n        /* if the pair of triangles doesn't satisfy the Delaunay condition\n         * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n         * then do the same check/flip recursively for the new pair of triangles\n         *\n         *           pl                    pl\n         *          /||\\                  /  \\\n         *       al/ || \\bl            al/    \\a\n         *        /  ||  \\              /      \\\n         *       /  a||b  \\    flip    /___ar___\\\n         *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n         *        \\  ||  /              \\      /\n         *       ar\\ || /br             b\\    /br\n         *          \\||/                  \\  /\n         *           pr                    pr\n         */\n\n        const a0 = a - a % 3;\n        ar = a0 + (a + 2) % 3;\n\n        if (b === -1) {\n          // convex hull edge\n          if (i === 0) break;\n          a = EDGE_STACK[--i];\n          continue;\n        }\n\n        const b0 = b - b % 3;\n        const al = a0 + (a + 1) % 3;\n        const bl = b0 + (b + 2) % 3;\n        const p0 = triangles[ar];\n        const pr = triangles[a];\n        const pl = triangles[al];\n        const p1 = triangles[bl];\n        const illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n\n        if (illegal) {\n          triangles[a] = p1;\n          triangles[b] = p0;\n          const hbl = halfedges[bl]; // edge swapped on the other side of the hull (rare); fix the halfedge reference\n\n          if (hbl === -1) {\n            let e = this._hullStart;\n\n            do {\n              if (this._hullTri[e] === bl) {\n                this._hullTri[e] = a;\n                break;\n              }\n\n              e = this._hullPrev[e];\n            } while (e !== this._hullStart);\n          }\n\n          this._link(a, hbl);\n\n          this._link(b, halfedges[ar]);\n\n          this._link(ar, bl);\n\n          const br = b0 + (b + 1) % 3; // don't worry about hitting the cap: it can only happen on extremely degenerate input\n\n          if (i < EDGE_STACK.length) {\n            EDGE_STACK[i++] = br;\n          }\n        } else {\n          if (i === 0) break;\n          a = EDGE_STACK[--i];\n        }\n      }\n\n      return ar;\n    }\n\n    _link(a, b) {\n      this._halfedges[a] = b;\n      if (b !== -1) this._halfedges[b] = a;\n    } // add a new triangle given vertex indices and adjacent half-edge ids\n\n\n    _addTriangle(i0, i1, i2, a, b, c) {\n      const t = this.trianglesLen;\n      this._triangles[t] = i0;\n      this._triangles[t + 1] = i1;\n      this._triangles[t + 2] = i2;\n\n      this._link(t, a);\n\n      this._link(t + 1, b);\n\n      this._link(t + 2, c);\n\n      this.trianglesLen += 3;\n      return t;\n    }\n\n  } // monotonically increases with real angle, but doesn't need expensive trigonometry\n\n  function pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n  }\n\n  function dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n  } // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\n\n\n  function orientIfSure(px, py, rx, ry, qx, qy) {\n    const l = (ry - py) * (qx - px);\n    const r = (rx - px) * (qy - py);\n    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n  } // a more robust orientation test that's stable in a given triangle (to fix robustness issues)\n\n\n  function orient(rx, ry, qx, qy, px, py) {\n    const sign = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);\n    return sign < 0;\n  }\n\n  function inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n  }\n\n  function circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n    return x * x + y * y;\n  }\n\n  function circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n    return {\n      x,\n      y\n    };\n  }\n\n  function quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n      for (let i = left + 1; i <= right; i++) {\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        let j = i - 1;\n\n        while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n\n        ids[j + 1] = temp;\n      }\n    } else {\n      const median = left + right >> 1;\n      let i = left + 1;\n      let j = right;\n      swap(ids, median, i);\n      if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n      if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n      if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n      const temp = ids[i];\n      const tempDist = dists[temp];\n\n      while (true) {\n        do i++; while (dists[ids[i]] < tempDist);\n\n        do j--; while (dists[ids[j]] > tempDist);\n\n        if (j < i) break;\n        swap(ids, i, j);\n      }\n\n      ids[left + 1] = ids[j];\n      ids[j] = temp;\n\n      if (right - i + 1 >= j - left) {\n        quicksort(ids, dists, i, right);\n        quicksort(ids, dists, left, j - 1);\n      } else {\n        quicksort(ids, dists, left, j - 1);\n        quicksort(ids, dists, i, right);\n      }\n    }\n  }\n\n  function swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n  }\n\n  function defaultGetX(p) {\n    return p[0];\n  }\n\n  function defaultGetY(p) {\n    return p[1];\n  }\n\n  const epsilon = 1e-6;\n  class Path {\n    constructor() {\n      this._x0 = this._y0 = // start of current subpath\n      this._x1 = this._y1 = null; // end of current subpath\n\n      this._ = \"\";\n    }\n\n    moveTo(x, y) {\n      this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n    }\n\n    closePath() {\n      if (this._x1 !== null) {\n        this._x1 = this._x0, this._y1 = this._y0;\n        this._ += \"Z\";\n      }\n    }\n\n    lineTo(x, y) {\n      this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n    }\n\n    arc(x, y, r) {\n      x = +x, y = +y, r = +r;\n      const x0 = x + r;\n      const y0 = y;\n      if (r < 0) throw new Error(\"negative radius\");\n      if (this._x1 === null) this._ += `M${x0},${y0}`;else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n      if (!r) return;\n      this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n    }\n\n    rect(x, y, w, h) {\n      this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n    }\n\n    value() {\n      return this._ || null;\n    }\n\n  }\n\n  class Polygon {\n    constructor() {\n      this._ = [];\n    }\n\n    moveTo(x, y) {\n      this._.push([x, y]);\n    }\n\n    closePath() {\n      this._.push(this._[0].slice());\n    }\n\n    lineTo(x, y) {\n      this._.push([x, y]);\n    }\n\n    value() {\n      return this._.length ? this._ : null;\n    }\n\n  }\n\n  class Voronoi$1 {\n    constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n      if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n      this.delaunay = delaunay;\n      this._circumcenters = new Float64Array(delaunay.points.length * 2);\n      this.vectors = new Float64Array(delaunay.points.length * 2);\n      this.xmax = xmax, this.xmin = xmin;\n      this.ymax = ymax, this.ymin = ymin;\n\n      this._init();\n    }\n\n    update() {\n      this.delaunay.update();\n\n      this._init();\n\n      return this;\n    }\n\n    _init() {\n      const {\n        delaunay: {\n          points,\n          hull,\n          triangles\n        },\n        vectors\n      } = this; // Compute circumcenters.\n\n      const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n\n      for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n        const t1 = triangles[i] * 2;\n        const t2 = triangles[i + 1] * 2;\n        const t3 = triangles[i + 2] * 2;\n        const x1 = points[t1];\n        const y1 = points[t1 + 1];\n        const x2 = points[t2];\n        const y2 = points[t2 + 1];\n        const x3 = points[t3];\n        const y3 = points[t3 + 1];\n        const dx = x2 - x1;\n        const dy = y2 - y1;\n        const ex = x3 - x1;\n        const ey = y3 - y1;\n        const bl = dx * dx + dy * dy;\n        const cl = ex * ex + ey * ey;\n        const ab = (dx * ey - dy * ex) * 2;\n\n        if (!ab) {\n          // degenerate case (collinear diagram)\n          x = (x1 + x3) / 2 - 1e8 * ey;\n          y = (y1 + y3) / 2 + 1e8 * ex;\n        } else if (Math.abs(ab) < 1e-8) {\n          // almost equal points (degenerate triangle)\n          x = (x1 + x3) / 2;\n          y = (y1 + y3) / 2;\n        } else {\n          const d = 1 / ab;\n          x = x1 + (ey * bl - dy * cl) * d;\n          y = y1 + (dx * cl - ex * bl) * d;\n        }\n\n        circumcenters[j] = x;\n        circumcenters[j + 1] = y;\n      } // Compute exterior cell rays.\n\n\n      let h = hull[hull.length - 1];\n      let p0,\n          p1 = h * 4;\n      let x0,\n          x1 = points[2 * h];\n      let y0,\n          y1 = points[2 * h + 1];\n      vectors.fill(0);\n\n      for (let i = 0; i < hull.length; ++i) {\n        h = hull[i];\n        p0 = p1, x0 = x1, y0 = y1;\n        p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n        vectors[p0 + 2] = vectors[p1] = y0 - y1;\n        vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n      }\n    }\n\n    render(context) {\n      const buffer = context == null ? context = new Path() : undefined;\n      const {\n        delaunay: {\n          halfedges,\n          inedges,\n          hull\n        },\n        circumcenters,\n        vectors\n      } = this;\n      if (hull.length <= 1) return null;\n\n      for (let i = 0, n = halfedges.length; i < n; ++i) {\n        const j = halfedges[i];\n        if (j < i) continue;\n        const ti = Math.floor(i / 3) * 2;\n        const tj = Math.floor(j / 3) * 2;\n        const xi = circumcenters[ti];\n        const yi = circumcenters[ti + 1];\n        const xj = circumcenters[tj];\n        const yj = circumcenters[tj + 1];\n\n        this._renderSegment(xi, yi, xj, yj, context);\n      }\n\n      let h0,\n          h1 = hull[hull.length - 1];\n\n      for (let i = 0; i < hull.length; ++i) {\n        h0 = h1, h1 = hull[i];\n        const t = Math.floor(inedges[h1] / 3) * 2;\n        const x = circumcenters[t];\n        const y = circumcenters[t + 1];\n        const v = h0 * 4;\n\n        const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n\n        if (p) this._renderSegment(x, y, p[0], p[1], context);\n      }\n\n      return buffer && buffer.value();\n    }\n\n    renderBounds(context) {\n      const buffer = context == null ? context = new Path() : undefined;\n      context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n      return buffer && buffer.value();\n    }\n\n    renderCell(i, context) {\n      const buffer = context == null ? context = new Path() : undefined;\n\n      const points = this._clip(i);\n\n      if (points === null || !points.length) return;\n      context.moveTo(points[0], points[1]);\n      let n = points.length;\n\n      while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1) n -= 2;\n\n      for (let i = 2; i < n; i += 2) {\n        if (points[i] !== points[i - 2] || points[i + 1] !== points[i - 1]) context.lineTo(points[i], points[i + 1]);\n      }\n\n      context.closePath();\n      return buffer && buffer.value();\n    }\n\n    *cellPolygons() {\n      const {\n        delaunay: {\n          points\n        }\n      } = this;\n\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const cell = this.cellPolygon(i);\n        if (cell) cell.index = i, yield cell;\n      }\n    }\n\n    cellPolygon(i) {\n      const polygon = new Polygon();\n      this.renderCell(i, polygon);\n      return polygon.value();\n    }\n\n    _renderSegment(x0, y0, x1, y1, context) {\n      let S;\n\n      const c0 = this._regioncode(x0, y0);\n\n      const c1 = this._regioncode(x1, y1);\n\n      if (c0 === 0 && c1 === 0) {\n        context.moveTo(x0, y0);\n        context.lineTo(x1, y1);\n      } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n        context.moveTo(S[0], S[1]);\n        context.lineTo(S[2], S[3]);\n      }\n    }\n\n    contains(i, x, y) {\n      if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n      return this.delaunay._step(i, x, y) === i;\n    }\n\n    *neighbors(i) {\n      const ci = this._clip(i);\n\n      if (ci) for (const j of this.delaunay.neighbors(i)) {\n        const cj = this._clip(j); // find the common edge\n\n\n        if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n          for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n            if (ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]) {\n              yield j;\n              break loop;\n            }\n          }\n        }\n      }\n    }\n\n    _cell(i) {\n      const {\n        circumcenters,\n        delaunay: {\n          inedges,\n          halfedges,\n          triangles\n        }\n      } = this;\n      const e0 = inedges[i];\n      if (e0 === -1) return null; // coincident point\n\n      const points = [];\n      let e = e0;\n\n      do {\n        const t = Math.floor(e / 3);\n        points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n        e = e % 3 === 2 ? e - 2 : e + 1;\n        if (triangles[e] !== i) break; // bad triangulation\n\n        e = halfedges[e];\n      } while (e !== e0 && e !== -1);\n\n      return points;\n    }\n\n    _clip(i) {\n      // degenerate case (1 valid point: return the box)\n      if (i === 0 && this.delaunay.hull.length === 1) {\n        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n      }\n\n      const points = this._cell(i);\n\n      if (points === null) return null;\n      const {\n        vectors: V\n      } = this;\n      const v = i * 4;\n      return V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points);\n    }\n\n    _clipFinite(i, points) {\n      const n = points.length;\n      let P = null;\n      let x0,\n          y0,\n          x1 = points[n - 2],\n          y1 = points[n - 1];\n\n      let c0,\n          c1 = this._regioncode(x1, y1);\n\n      let e0, e1;\n\n      for (let j = 0; j < n; j += 2) {\n        x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n        c0 = c1, c1 = this._regioncode(x1, y1);\n\n        if (c0 === 0 && c1 === 0) {\n          e0 = e1, e1 = 0;\n          if (P) P.push(x1, y1);else P = [x1, y1];\n        } else {\n          let S, sx0, sy0, sx1, sy1;\n\n          if (c0 === 0) {\n            if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n            [sx0, sy0, sx1, sy1] = S;\n          } else {\n            if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n            [sx1, sy1, sx0, sy0] = S;\n            e0 = e1, e1 = this._edgecode(sx0, sy0);\n            if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n            if (P) P.push(sx0, sy0);else P = [sx0, sy0];\n          }\n\n          e0 = e1, e1 = this._edgecode(sx1, sy1);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx1, sy1);else P = [sx1, sy1];\n        }\n      }\n\n      if (P) {\n        e0 = e1, e1 = this._edgecode(P[0], P[1]);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n      }\n\n      return P;\n    }\n\n    _clipSegment(x0, y0, x1, y1, c0, c1) {\n      while (true) {\n        if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n        if (c0 & c1) return null;\n        let x,\n            y,\n            c = c0 || c1;\n        if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n        if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n      }\n    }\n\n    _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n      let P = Array.from(points),\n          p;\n      if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n      if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n\n      if (P = this._clipFinite(i, P)) {\n        for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n          c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n          if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n        }\n      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n        P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n      }\n\n      return P;\n    }\n\n    _edge(i, e0, e1, P, j) {\n      while (e0 !== e1) {\n        let x, y;\n\n        switch (e0) {\n          case 0b0101:\n            e0 = 0b0100;\n            continue;\n          // top-left\n\n          case 0b0100:\n            e0 = 0b0110, x = this.xmax, y = this.ymin;\n            break;\n          // top\n\n          case 0b0110:\n            e0 = 0b0010;\n            continue;\n          // top-right\n\n          case 0b0010:\n            e0 = 0b1010, x = this.xmax, y = this.ymax;\n            break;\n          // right\n\n          case 0b1010:\n            e0 = 0b1000;\n            continue;\n          // bottom-right\n\n          case 0b1000:\n            e0 = 0b1001, x = this.xmin, y = this.ymax;\n            break;\n          // bottom\n\n          case 0b1001:\n            e0 = 0b0001;\n            continue;\n          // bottom-left\n\n          case 0b0001:\n            e0 = 0b0101, x = this.xmin, y = this.ymin;\n            break;\n          // left\n        }\n\n        if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n          P.splice(j, 0, x, y), j += 2;\n        }\n      }\n\n      if (P.length > 4) {\n        for (let i = 0; i < P.length; i += 2) {\n          const j = (i + 2) % P.length,\n                k = (i + 4) % P.length;\n          if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) P.splice(j, 2), i -= 2;\n        }\n      }\n\n      return j;\n    }\n\n    _project(x0, y0, vx, vy) {\n      let t = Infinity,\n          c,\n          x,\n          y;\n\n      if (vy < 0) {\n        // top\n        if (y0 <= this.ymin) return null;\n        if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n      } else if (vy > 0) {\n        // bottom\n        if (y0 >= this.ymax) return null;\n        if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n      }\n\n      if (vx > 0) {\n        // right\n        if (x0 >= this.xmax) return null;\n        if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n      } else if (vx < 0) {\n        // left\n        if (x0 <= this.xmin) return null;\n        if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n      }\n\n      return [x, y];\n    }\n\n    _edgecode(x, y) {\n      return (x === this.xmin ? 0b0001 : x === this.xmax ? 0b0010 : 0b0000) | (y === this.ymin ? 0b0100 : y === this.ymax ? 0b1000 : 0b0000);\n    }\n\n    _regioncode(x, y) {\n      return (x < this.xmin ? 0b0001 : x > this.xmax ? 0b0010 : 0b0000) | (y < this.ymin ? 0b0100 : y > this.ymax ? 0b1000 : 0b0000);\n    }\n\n  }\n\n  const tau = 2 * Math.PI,\n        pow = Math.pow;\n\n  function pointX(p) {\n    return p[0];\n  }\n\n  function pointY(p) {\n    return p[1];\n  } // A triangulation is collinear if all its triangles have a non-null area\n\n\n  function collinear(d) {\n    const {\n      triangles,\n      coords\n    } = d;\n\n    for (let i = 0; i < triangles.length; i += 3) {\n      const a = 2 * triangles[i],\n            b = 2 * triangles[i + 1],\n            c = 2 * triangles[i + 2],\n            cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n      if (cross > 1e-10) return false;\n    }\n\n    return true;\n  }\n\n  function jitter(x, y, r) {\n    return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n  }\n\n  class Delaunay {\n    static from(points, fx = pointX, fy = pointY, that) {\n      return new Delaunay(\"length\" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));\n    }\n\n    constructor(points) {\n      this._delaunator = new Delaunator(points);\n      this.inedges = new Int32Array(points.length / 2);\n      this._hullIndex = new Int32Array(points.length / 2);\n      this.points = this._delaunator.coords;\n\n      this._init();\n    }\n\n    update() {\n      this._delaunator.update();\n\n      this._init();\n\n      return this;\n    }\n\n    _init() {\n      const d = this._delaunator,\n            points = this.points; // check for collinear\n\n      if (d.hull && d.hull.length > 2 && collinear(d)) {\n        this.collinear = Int32Array.from({\n          length: points.length / 2\n        }, (_, i) => i).sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n\n        const e = this.collinear[0],\n              f = this.collinear[this.collinear.length - 1],\n              bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]],\n              r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n\n        for (let i = 0, n = points.length / 2; i < n; ++i) {\n          const p = jitter(points[2 * i], points[2 * i + 1], r);\n          points[2 * i] = p[0];\n          points[2 * i + 1] = p[1];\n        }\n\n        this._delaunator = new Delaunator(points);\n      } else {\n        delete this.collinear;\n      }\n\n      const halfedges = this.halfedges = this._delaunator.halfedges;\n      const hull = this.hull = this._delaunator.hull;\n      const triangles = this.triangles = this._delaunator.triangles;\n      const inedges = this.inedges.fill(-1);\n\n      const hullIndex = this._hullIndex.fill(-1); // Compute an index from each point to an (arbitrary) incoming halfedge\n      // Used to give the first neighbor of each point; for this reason,\n      // on the hull we give priority to exterior halfedges\n\n\n      for (let e = 0, n = halfedges.length; e < n; ++e) {\n        const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n        if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n      }\n\n      for (let i = 0, n = hull.length; i < n; ++i) {\n        hullIndex[hull[i]] = i;\n      } // degenerate case: 1 or 2 (distinct) points\n\n\n      if (hull.length <= 2 && hull.length > 0) {\n        this.triangles = new Int32Array(3).fill(-1);\n        this.halfedges = new Int32Array(3).fill(-1);\n        this.triangles[0] = hull[0];\n        this.triangles[1] = hull[1];\n        this.triangles[2] = hull[1];\n        inedges[hull[0]] = 1;\n        if (hull.length === 2) inedges[hull[1]] = 0;\n      }\n    }\n\n    voronoi(bounds) {\n      return new Voronoi$1(this, bounds);\n    }\n\n    *neighbors(i) {\n      const {\n        inedges,\n        hull,\n        _hullIndex,\n        halfedges,\n        triangles,\n        collinear\n      } = this; // degenerate case with several collinear points\n\n      if (collinear) {\n        const l = collinear.indexOf(i);\n        if (l > 0) yield collinear[l - 1];\n        if (l < collinear.length - 1) yield collinear[l + 1];\n        return;\n      }\n\n      const e0 = inedges[i];\n      if (e0 === -1) return; // coincident point\n\n      let e = e0,\n          p0 = -1;\n\n      do {\n        yield p0 = triangles[e];\n        e = e % 3 === 2 ? e - 2 : e + 1;\n        if (triangles[e] !== i) return; // bad triangulation\n\n        e = halfedges[e];\n\n        if (e === -1) {\n          const p = hull[(_hullIndex[i] + 1) % hull.length];\n          if (p !== p0) yield p;\n          return;\n        }\n      } while (e !== e0);\n    }\n\n    find(x, y, i = 0) {\n      if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n      const i0 = i;\n      let c;\n\n      while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n\n      return c;\n    }\n\n    _step(i, x, y) {\n      const {\n        inedges,\n        hull,\n        _hullIndex,\n        halfedges,\n        triangles,\n        points\n      } = this;\n      if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n      let c = i;\n      let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n      const e0 = inedges[i];\n      let e = e0;\n\n      do {\n        let t = triangles[e];\n        const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n        if (dt < dc) dc = dt, c = t;\n        e = e % 3 === 2 ? e - 2 : e + 1;\n        if (triangles[e] !== i) break; // bad triangulation\n\n        e = halfedges[e];\n\n        if (e === -1) {\n          e = hull[(_hullIndex[i] + 1) % hull.length];\n\n          if (e !== t) {\n            if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n          }\n\n          break;\n        }\n      } while (e !== e0);\n\n      return c;\n    }\n\n    render(context) {\n      const buffer = context == null ? context = new Path() : undefined;\n      const {\n        points,\n        halfedges,\n        triangles\n      } = this;\n\n      for (let i = 0, n = halfedges.length; i < n; ++i) {\n        const j = halfedges[i];\n        if (j < i) continue;\n        const ti = triangles[i] * 2;\n        const tj = triangles[j] * 2;\n        context.moveTo(points[ti], points[ti + 1]);\n        context.lineTo(points[tj], points[tj + 1]);\n      }\n\n      this.renderHull(context);\n      return buffer && buffer.value();\n    }\n\n    renderPoints(context, r = 2) {\n      const buffer = context == null ? context = new Path() : undefined;\n      const {\n        points\n      } = this;\n\n      for (let i = 0, n = points.length; i < n; i += 2) {\n        const x = points[i],\n              y = points[i + 1];\n        context.moveTo(x + r, y);\n        context.arc(x, y, r, 0, tau);\n      }\n\n      return buffer && buffer.value();\n    }\n\n    renderHull(context) {\n      const buffer = context == null ? context = new Path() : undefined;\n      const {\n        hull,\n        points\n      } = this;\n      const h = hull[0] * 2,\n            n = hull.length;\n      context.moveTo(points[h], points[h + 1]);\n\n      for (let i = 1; i < n; ++i) {\n        const h = 2 * hull[i];\n        context.lineTo(points[h], points[h + 1]);\n      }\n\n      context.closePath();\n      return buffer && buffer.value();\n    }\n\n    hullPolygon() {\n      const polygon = new Polygon();\n      this.renderHull(polygon);\n      return polygon.value();\n    }\n\n    renderTriangle(i, context) {\n      const buffer = context == null ? context = new Path() : undefined;\n      const {\n        points,\n        triangles\n      } = this;\n      const t0 = triangles[i *= 3] * 2;\n      const t1 = triangles[i + 1] * 2;\n      const t2 = triangles[i + 2] * 2;\n      context.moveTo(points[t0], points[t0 + 1]);\n      context.lineTo(points[t1], points[t1 + 1]);\n      context.lineTo(points[t2], points[t2 + 1]);\n      context.closePath();\n      return buffer && buffer.value();\n    }\n\n    *trianglePolygons() {\n      const {\n        triangles\n      } = this;\n\n      for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n        yield this.trianglePolygon(i);\n      }\n    }\n\n    trianglePolygon(i) {\n      const polygon = new Polygon();\n      this.renderTriangle(i, polygon);\n      return polygon.value();\n    }\n\n  }\n\n  function flatArray(points, fx, fy, that) {\n    const n = points.length;\n    const array = new Float64Array(n * 2);\n\n    for (let i = 0; i < n; ++i) {\n      const p = points[i];\n      array[i * 2] = fx.call(that, p, i, points);\n      array[i * 2 + 1] = fy.call(that, p, i, points);\n    }\n\n    return array;\n  }\n\n  function* flatIterable(points, fx, fy, that) {\n    let i = 0;\n\n    for (const p of points) {\n      yield fx.call(that, p, i, points);\n      yield fy.call(that, p, i, points);\n      ++i;\n    }\n  }\n\n  function Voronoi(params) {\n    Transform.call(this, null, params);\n  }\n\n  Voronoi.Definition = {\n    'type': 'Voronoi',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'x',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'y',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'extent',\n      'type': 'array',\n      'array': true,\n      'length': 2,\n      'default': [[-1e5, -1e5], [1e5, 1e5]],\n      'content': {\n        'type': 'number',\n        'array': true,\n        'length': 2\n      }\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': 'path'\n    }]\n  };\n  const defaultExtent = [-1e5, -1e5, 1e5, 1e5];\n  inherits(Voronoi, Transform, {\n    transform(_, pulse) {\n      const as = _.as || 'path',\n            data = pulse.source; // nothing to do if no data\n\n      if (!data || !data.length) return pulse; // configure and construct voronoi diagram\n\n      let s = _.size;\n      s = s ? [0, 0, s[0], s[1]] : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]] : defaultExtent;\n      const voronoi = this.value = Delaunay.from(data, _.x, _.y).voronoi(s); // map polygons to paths\n\n      for (let i = 0, n = data.length; i < n; ++i) {\n        const polygon = voronoi.cellPolygon(i);\n        data[i][as] = polygon ? toPathString(polygon) : null;\n      }\n\n      return pulse.reflow(_.modified()).modifies(as);\n    }\n\n  }); // suppress duplicated end point vertices\n\n  function toPathString(p) {\n    const x = p[0][0],\n          y = p[0][1];\n    let n = p.length - 1;\n\n    for (; p[n][0] === x && p[n][1] === y; --n);\n\n    return 'M' + p.slice(0, n + 1).join('L') + 'Z';\n  }\n\n  var voronoi = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    voronoi: Voronoi\n  });\n\n  /*\n  Copyright (c) 2013, Jason Davies.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice, this\n      list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n\n    * The name Jason Davies may not be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL JASON DAVIES BE LIABLE FOR ANY DIRECT, INDIRECT,\n  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n  // Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/\n  // Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf\n\n  var cloudRadians = Math.PI / 180,\n      cw = 1 << 11 >> 5,\n      ch = 1 << 11;\n\n  function cloud() {\n    var size = [256, 256],\n        text,\n        font,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        rotate,\n        padding,\n        spiral = archimedeanSpiral,\n        words = [],\n        random = Math.random,\n        cloud = {};\n\n    cloud.layout = function () {\n      var contextAndRatio = getContext(domCanvas()),\n          board = zeroArray((size[0] >> 5) * size[1]),\n          bounds = null,\n          n = words.length,\n          i = -1,\n          tags = [],\n          data = words.map(d => ({\n        text: text(d),\n        font: font(d),\n        style: fontStyle(d),\n        weight: fontWeight(d),\n        rotate: rotate(d),\n        size: ~~(fontSize(d) + 1e-14),\n        padding: padding(d),\n        xoff: 0,\n        yoff: 0,\n        x1: 0,\n        y1: 0,\n        x0: 0,\n        y0: 0,\n        hasText: false,\n        sprite: null,\n        datum: d\n      })).sort((a, b) => b.size - a.size);\n\n      while (++i < n) {\n        var d = data[i];\n        d.x = size[0] * (random() + .5) >> 1;\n        d.y = size[1] * (random() + .5) >> 1;\n        cloudSprite(contextAndRatio, d, data, i);\n\n        if (d.hasText && place(board, d, bounds)) {\n          tags.push(d);\n          if (bounds) cloudBounds(bounds, d);else bounds = [{\n            x: d.x + d.x0,\n            y: d.y + d.y0\n          }, {\n            x: d.x + d.x1,\n            y: d.y + d.y1\n          }]; // Temporary hack\n\n          d.x -= size[0] >> 1;\n          d.y -= size[1] >> 1;\n        }\n      }\n\n      return tags;\n    };\n\n    function getContext(canvas) {\n      canvas.width = canvas.height = 1;\n      var ratio = Math.sqrt(canvas.getContext('2d').getImageData(0, 0, 1, 1).data.length >> 2);\n      canvas.width = (cw << 5) / ratio;\n      canvas.height = ch / ratio;\n      var context = canvas.getContext('2d');\n      context.fillStyle = context.strokeStyle = 'red';\n      context.textAlign = 'center';\n      return {\n        context: context,\n        ratio: ratio\n      };\n    }\n\n    function place(board, tag, bounds) {\n      var startX = tag.x,\n          startY = tag.y,\n          maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),\n          s = spiral(size),\n          dt = random() < .5 ? 1 : -1,\n          t = -dt,\n          dxdy,\n          dx,\n          dy;\n\n      while (dxdy = s(t += dt)) {\n        dx = ~~dxdy[0];\n        dy = ~~dxdy[1];\n        if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;\n        tag.x = startX + dx;\n        tag.y = startY + dy;\n        if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 || tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue; // TODO only check for collisions within current bounds.\n\n        if (!bounds || !cloudCollide(tag, board, size[0])) {\n          if (!bounds || collideRects(tag, bounds)) {\n            var sprite = tag.sprite,\n                w = tag.width >> 5,\n                sw = size[0] >> 5,\n                lx = tag.x - (w << 4),\n                sx = lx & 0x7f,\n                msx = 32 - sx,\n                h = tag.y1 - tag.y0,\n                x = (tag.y + tag.y0) * sw + (lx >> 5),\n                last;\n\n            for (var j = 0; j < h; j++) {\n              last = 0;\n\n              for (var i = 0; i <= w; i++) {\n                board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\n              }\n\n              x += sw;\n            }\n\n            tag.sprite = null;\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    cloud.words = function (_) {\n      if (arguments.length) {\n        words = _;\n        return cloud;\n      } else {\n        return words;\n      }\n    };\n\n    cloud.size = function (_) {\n      if (arguments.length) {\n        size = [+_[0], +_[1]];\n        return cloud;\n      } else {\n        return size;\n      }\n    };\n\n    cloud.font = function (_) {\n      if (arguments.length) {\n        font = functor(_);\n        return cloud;\n      } else {\n        return font;\n      }\n    };\n\n    cloud.fontStyle = function (_) {\n      if (arguments.length) {\n        fontStyle = functor(_);\n        return cloud;\n      } else {\n        return fontStyle;\n      }\n    };\n\n    cloud.fontWeight = function (_) {\n      if (arguments.length) {\n        fontWeight = functor(_);\n        return cloud;\n      } else {\n        return fontWeight;\n      }\n    };\n\n    cloud.rotate = function (_) {\n      if (arguments.length) {\n        rotate = functor(_);\n        return cloud;\n      } else {\n        return rotate;\n      }\n    };\n\n    cloud.text = function (_) {\n      if (arguments.length) {\n        text = functor(_);\n        return cloud;\n      } else {\n        return text;\n      }\n    };\n\n    cloud.spiral = function (_) {\n      if (arguments.length) {\n        spiral = spirals[_] || _;\n        return cloud;\n      } else {\n        return spiral;\n      }\n    };\n\n    cloud.fontSize = function (_) {\n      if (arguments.length) {\n        fontSize = functor(_);\n        return cloud;\n      } else {\n        return fontSize;\n      }\n    };\n\n    cloud.padding = function (_) {\n      if (arguments.length) {\n        padding = functor(_);\n        return cloud;\n      } else {\n        return padding;\n      }\n    };\n\n    cloud.random = function (_) {\n      if (arguments.length) {\n        random = _;\n        return cloud;\n      } else {\n        return random;\n      }\n    };\n\n    return cloud;\n  } // Fetches a monochrome sprite bitmap for the specified text.\n  // Load in batches for speed.\n\n\n  function cloudSprite(contextAndRatio, d, data, di) {\n    if (d.sprite) return;\n    var c = contextAndRatio.context,\n        ratio = contextAndRatio.ratio;\n    c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\n    var x = 0,\n        y = 0,\n        maxh = 0,\n        n = data.length,\n        w,\n        w32,\n        h,\n        i,\n        j;\n    --di;\n\n    while (++di < n) {\n      d = data[di];\n      c.save();\n      c.font = d.style + ' ' + d.weight + ' ' + ~~((d.size + 1) / ratio) + 'px ' + d.font;\n      w = c.measureText(d.text + 'm').width * ratio;\n      h = d.size << 1;\n\n      if (d.rotate) {\n        var sr = Math.sin(d.rotate * cloudRadians),\n            cr = Math.cos(d.rotate * cloudRadians),\n            wcr = w * cr,\n            wsr = w * sr,\n            hcr = h * cr,\n            hsr = h * sr;\n        w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;\n        h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\n      } else {\n        w = w + 0x1f >> 5 << 5;\n      }\n\n      if (h > maxh) maxh = h;\n\n      if (x + w >= cw << 5) {\n        x = 0;\n        y += maxh;\n        maxh = 0;\n      }\n\n      if (y + h >= ch) break;\n      c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\n      if (d.rotate) c.rotate(d.rotate * cloudRadians);\n      c.fillText(d.text, 0, 0);\n\n      if (d.padding) {\n        c.lineWidth = 2 * d.padding;\n        c.strokeText(d.text, 0, 0);\n      }\n\n      c.restore();\n      d.width = w;\n      d.height = h;\n      d.xoff = x;\n      d.yoff = y;\n      d.x1 = w >> 1;\n      d.y1 = h >> 1;\n      d.x0 = -d.x1;\n      d.y0 = -d.y1;\n      d.hasText = true;\n      x += w;\n    }\n\n    var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,\n        sprite = [];\n\n    while (--di >= 0) {\n      d = data[di];\n      if (!d.hasText) continue;\n      w = d.width;\n      w32 = w >> 5;\n      h = d.y1 - d.y0; // Zero the buffer\n\n      for (i = 0; i < h * w32; i++) sprite[i] = 0;\n\n      x = d.xoff;\n      if (x == null) return;\n      y = d.yoff;\n      var seen = 0,\n          seenRow = -1;\n\n      for (j = 0; j < h; j++) {\n        for (i = 0; i < w; i++) {\n          var k = w32 * j + (i >> 5),\n              m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;\n          sprite[k] |= m;\n          seen |= m;\n        }\n\n        if (seen) seenRow = j;else {\n          d.y0++;\n          h--;\n          j--;\n          y++;\n        }\n      }\n\n      d.y1 = d.y0 + seenRow;\n      d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\n    }\n  } // Use mask-based collision detection.\n\n\n  function cloudCollide(tag, board, sw) {\n    sw >>= 5;\n    var sprite = tag.sprite,\n        w = tag.width >> 5,\n        lx = tag.x - (w << 4),\n        sx = lx & 0x7f,\n        msx = 32 - sx,\n        h = tag.y1 - tag.y0,\n        x = (tag.y + tag.y0) * sw + (lx >> 5),\n        last;\n\n    for (var j = 0; j < h; j++) {\n      last = 0;\n\n      for (var i = 0; i <= w; i++) {\n        if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) & board[x + i]) return true;\n      }\n\n      x += sw;\n    }\n\n    return false;\n  }\n\n  function cloudBounds(bounds, d) {\n    var b0 = bounds[0],\n        b1 = bounds[1];\n    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\n    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\n    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\n    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\n  }\n\n  function collideRects(a, b) {\n    return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;\n  }\n\n  function archimedeanSpiral(size) {\n    var e = size[0] / size[1];\n    return function (t) {\n      return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];\n    };\n  }\n\n  function rectangularSpiral(size) {\n    var dy = 4,\n        dx = dy * size[0] / size[1],\n        x = 0,\n        y = 0;\n    return function (t) {\n      var sign = t < 0 ? -1 : 1; // See triangular numbers: T_n = n * (n + 1) / 2.\n\n      switch (Math.sqrt(1 + 4 * sign * t) - sign & 3) {\n        case 0:\n          x += dx;\n          break;\n\n        case 1:\n          y += dy;\n          break;\n\n        case 2:\n          x -= dx;\n          break;\n\n        default:\n          y -= dy;\n          break;\n      }\n\n      return [x, y];\n    };\n  } // TODO reuse arrays?\n\n\n  function zeroArray(n) {\n    var a = [],\n        i = -1;\n\n    while (++i < n) a[i] = 0;\n\n    return a;\n  }\n\n  function functor(d) {\n    return typeof d === 'function' ? d : function () {\n      return d;\n    };\n  }\n\n  var spirals = {\n    archimedean: archimedeanSpiral,\n    rectangular: rectangularSpiral\n  };\n  const Output = ['x', 'y', 'font', 'fontSize', 'fontStyle', 'fontWeight', 'angle'];\n  const Params$1 = ['text', 'font', 'rotate', 'fontSize', 'fontStyle', 'fontWeight'];\n\n  function Wordcloud(params) {\n    Transform.call(this, cloud(), params);\n  }\n\n  Wordcloud.Definition = {\n    'type': 'Wordcloud',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'font',\n      'type': 'string',\n      'expr': true,\n      'default': 'sans-serif'\n    }, {\n      'name': 'fontStyle',\n      'type': 'string',\n      'expr': true,\n      'default': 'normal'\n    }, {\n      'name': 'fontWeight',\n      'type': 'string',\n      'expr': true,\n      'default': 'normal'\n    }, {\n      'name': 'fontSize',\n      'type': 'number',\n      'expr': true,\n      'default': 14\n    }, {\n      'name': 'fontSizeRange',\n      'type': 'number',\n      'array': 'nullable',\n      'default': [10, 50]\n    }, {\n      'name': 'rotate',\n      'type': 'number',\n      'expr': true,\n      'default': 0\n    }, {\n      'name': 'text',\n      'type': 'field'\n    }, {\n      'name': 'spiral',\n      'type': 'string',\n      'values': ['archimedean', 'rectangular']\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'expr': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 7,\n      'default': Output\n    }]\n  };\n  inherits(Wordcloud, Transform, {\n    transform(_, pulse) {\n      if (_.size && !(_.size[0] && _.size[1])) {\n        error('Wordcloud size dimensions must be non-zero.');\n      }\n\n      function modp(param) {\n        const p = _[param];\n        return isFunction(p) && pulse.modified(p.fields);\n      }\n\n      const mod = _.modified();\n\n      if (!(mod || pulse.changed(pulse.ADD_REM) || Params$1.some(modp))) return;\n      const data = pulse.materialize(pulse.SOURCE).source,\n            layout = this.value,\n            as = _.as || Output;\n      let fontSize = _.fontSize || 14,\n          range;\n      isFunction(fontSize) ? range = _.fontSizeRange : fontSize = constant$4(fontSize); // create font size scaling function as needed\n\n      if (range) {\n        const fsize = fontSize,\n              sizeScale = scale$4('sqrt')().domain(extent(data, fsize)).range(range);\n\n        fontSize = x => sizeScale(fsize(x));\n      }\n\n      data.forEach(t => {\n        t[as[0]] = NaN;\n        t[as[1]] = NaN;\n        t[as[3]] = 0;\n      }); // configure layout\n\n      const words = layout.words(data).text(_.text).size(_.size || [500, 500]).padding(_.padding || 1).spiral(_.spiral || 'archimedean').rotate(_.rotate || 0).font(_.font || 'sans-serif').fontStyle(_.fontStyle || 'normal').fontWeight(_.fontWeight || 'normal').fontSize(fontSize).random(exports.random).layout();\n      const size = layout.size(),\n            dx = size[0] >> 1,\n            dy = size[1] >> 1,\n            n = words.length;\n\n      for (let i = 0, w, t; i < n; ++i) {\n        w = words[i];\n        t = w.datum;\n        t[as[0]] = w.x + dx;\n        t[as[1]] = w.y + dy;\n        t[as[2]] = w.font;\n        t[as[3]] = w.size;\n        t[as[4]] = w.style;\n        t[as[5]] = w.weight;\n        t[as[6]] = w.rotate;\n      }\n\n      return pulse.reflow(mod).modifies(as);\n    }\n\n  });\n\n  var wordcloud = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    wordcloud: Wordcloud\n  });\n\n  const array8 = n => new Uint8Array(n);\n\n  const array16 = n => new Uint16Array(n);\n\n  const array32 = n => new Uint32Array(n);\n  /**\n   * Maintains CrossFilter state.\n   */\n\n\n  function Bitmaps() {\n    let width = 8,\n        data = [],\n        seen = array32(0),\n        curr = array$1(0, width),\n        prev = array$1(0, width);\n    return {\n      data: () => data,\n      seen: () => seen = lengthen(seen, data.length),\n\n      add(array) {\n        for (let i = 0, j = data.length, n = array.length, t; i < n; ++i) {\n          t = array[i];\n          t._index = j++;\n          data.push(t);\n        }\n      },\n\n      remove(num, map) {\n        // map: index -> boolean (true => remove)\n        const n = data.length,\n              copy = Array(n - num),\n              reindex = data; // reuse old data array for index map\n\n        let t, i, j; // seek forward to first removal\n\n        for (i = 0; !map[i] && i < n; ++i) {\n          copy[i] = data[i];\n          reindex[i] = i;\n        } // condense arrays\n\n\n        for (j = i; i < n; ++i) {\n          t = data[i];\n\n          if (!map[i]) {\n            reindex[i] = j;\n            curr[j] = curr[i];\n            prev[j] = prev[i];\n            copy[j] = t;\n            t._index = j++;\n          } else {\n            reindex[i] = -1;\n          }\n\n          curr[i] = 0; // clear unused bits\n        }\n\n        data = copy;\n        return reindex;\n      },\n\n      size: () => data.length,\n      curr: () => curr,\n      prev: () => prev,\n      reset: k => prev[k] = curr[k],\n      all: () => width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff,\n\n      set(k, one) {\n        curr[k] |= one;\n      },\n\n      clear(k, one) {\n        curr[k] &= ~one;\n      },\n\n      resize(n, m) {\n        const k = curr.length;\n\n        if (n > k || m > width) {\n          width = Math.max(m, width);\n          curr = array$1(n, width, curr);\n          prev = array$1(n, width);\n        }\n      }\n\n    };\n  }\n\n  function lengthen(array, length, copy) {\n    if (array.length >= length) return array;\n    copy = copy || new array.constructor(length);\n    copy.set(array);\n    return copy;\n  }\n\n  function array$1(n, m, array) {\n    const copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);\n    if (array) copy.set(array);\n    return copy;\n  }\n\n  function Dimension(index, i, query) {\n    const bit = 1 << i;\n    return {\n      one: bit,\n      zero: ~bit,\n      range: query.slice(),\n      bisect: index.bisect,\n      index: index.index,\n      size: index.size,\n\n      onAdd(added, curr) {\n        const dim = this,\n              range = dim.bisect(dim.range, added.value),\n              idx = added.index,\n              lo = range[0],\n              hi = range[1],\n              n1 = idx.length;\n        let i;\n\n        for (i = 0; i < lo; ++i) curr[idx[i]] |= bit;\n\n        for (i = hi; i < n1; ++i) curr[idx[i]] |= bit;\n\n        return dim;\n      }\n\n    };\n  }\n  /**\n   * Maintains a list of values, sorted by key.\n   */\n\n\n  function SortedIndex() {\n    let index = array32(0),\n        value = [],\n        size = 0;\n\n    function insert(key, data, base) {\n      if (!data.length) return [];\n      const n0 = size,\n            n1 = data.length,\n            addi = array32(n1);\n      let addv = Array(n1),\n          oldv,\n          oldi,\n          i;\n\n      for (i = 0; i < n1; ++i) {\n        addv[i] = key(data[i]);\n        addi[i] = i;\n      }\n\n      addv = sort(addv, addi);\n\n      if (n0) {\n        oldv = value;\n        oldi = index;\n        value = Array(n0 + n1);\n        index = array32(n0 + n1);\n        merge$1(base, oldv, oldi, n0, addv, addi, n1, value, index);\n      } else {\n        if (base > 0) for (i = 0; i < n1; ++i) {\n          addi[i] += base;\n        }\n        value = addv;\n        index = addi;\n      }\n\n      size = n0 + n1;\n      return {\n        index: addi,\n        value: addv\n      };\n    }\n\n    function remove(num, map) {\n      // map: index -> remove\n      const n = size;\n      let idx, i, j; // seek forward to first removal\n\n      for (i = 0; !map[index[i]] && i < n; ++i); // condense index and value arrays\n\n\n      for (j = i; i < n; ++i) {\n        if (!map[idx = index[i]]) {\n          index[j] = idx;\n          value[j] = value[i];\n          ++j;\n        }\n      }\n\n      size = n - num;\n    }\n\n    function reindex(map) {\n      for (let i = 0, n = size; i < n; ++i) {\n        index[i] = map[index[i]];\n      }\n    }\n\n    function bisect(range, array) {\n      let n;\n\n      if (array) {\n        n = array.length;\n      } else {\n        array = value;\n        n = size;\n      }\n\n      return [bisectLeft$1(array, range[0], 0, n), bisectRight$1(array, range[1], 0, n)];\n    }\n\n    return {\n      insert: insert,\n      remove: remove,\n      bisect: bisect,\n      reindex: reindex,\n      index: () => index,\n      size: () => size\n    };\n  }\n\n  function sort(values, index) {\n    values.sort.call(index, (a, b) => {\n      const x = values[a],\n            y = values[b];\n      return x < y ? -1 : x > y ? 1 : 0;\n    });\n    return permute(values, index);\n  }\n\n  function merge$1(base, value0, index0, n0, value1, index1, n1, value, index) {\n    let i0 = 0,\n        i1 = 0,\n        i;\n\n    for (i = 0; i0 < n0 && i1 < n1; ++i) {\n      if (value0[i0] < value1[i1]) {\n        value[i] = value0[i0];\n        index[i] = index0[i0++];\n      } else {\n        value[i] = value1[i1];\n        index[i] = index1[i1++] + base;\n      }\n    }\n\n    for (; i0 < n0; ++i0, ++i) {\n      value[i] = value0[i0];\n      index[i] = index0[i0];\n    }\n\n    for (; i1 < n1; ++i1, ++i) {\n      value[i] = value1[i1];\n      index[i] = index1[i1] + base;\n    }\n  }\n  /**\n   * An indexed multi-dimensional filter.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.\n   * @param {Array} params.query - An array of per-dimension range queries.\n   */\n\n\n  function CrossFilter(params) {\n    Transform.call(this, Bitmaps(), params);\n    this._indices = null;\n    this._dims = null;\n  }\n\n  CrossFilter.Definition = {\n    'type': 'CrossFilter',\n    'metadata': {},\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'query',\n      'type': 'array',\n      'array': true,\n      'required': true,\n      'content': {\n        'type': 'number',\n        'array': true,\n        'length': 2\n      }\n    }]\n  };\n  inherits(CrossFilter, Transform, {\n    transform(_, pulse) {\n      if (!this._dims) {\n        return this.init(_, pulse);\n      } else {\n        var init = _.modified('fields') || _.fields.some(f => pulse.modified(f.fields));\n\n        return init ? this.reinit(_, pulse) : this.eval(_, pulse);\n      }\n    },\n\n    init(_, pulse) {\n      const fields = _.fields,\n            query = _.query,\n            indices = this._indices = {},\n            dims = this._dims = [],\n            m = query.length;\n      let i = 0,\n          key,\n          index; // instantiate indices and dimensions\n\n      for (; i < m; ++i) {\n        key = fields[i].fname;\n        index = indices[key] || (indices[key] = SortedIndex());\n        dims.push(Dimension(index, i, query[i]));\n      }\n\n      return this.eval(_, pulse);\n    },\n\n    reinit(_, pulse) {\n      const output = pulse.materialize().fork(),\n            fields = _.fields,\n            query = _.query,\n            indices = this._indices,\n            dims = this._dims,\n            bits = this.value,\n            curr = bits.curr(),\n            prev = bits.prev(),\n            all = bits.all(),\n            out = output.rem = output.add,\n            mod = output.mod,\n            m = query.length,\n            adds = {};\n      let add, index, key, mods, remMap, modMap, i, n, f; // set prev to current state\n\n      prev.set(curr); // if pulse has remove tuples, process them first\n\n      if (pulse.rem.length) {\n        remMap = this.remove(_, pulse, output);\n      } // if pulse has added tuples, add them to state\n\n\n      if (pulse.add.length) {\n        bits.add(pulse.add);\n      } // if pulse has modified tuples, create an index map\n\n\n      if (pulse.mod.length) {\n        modMap = {};\n\n        for (mods = pulse.mod, i = 0, n = mods.length; i < n; ++i) {\n          modMap[mods[i]._index] = 1;\n        }\n      } // re-initialize indices as needed, update curr bitmap\n\n\n      for (i = 0; i < m; ++i) {\n        f = fields[i];\n\n        if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {\n          key = f.fname;\n\n          if (!(add = adds[key])) {\n            indices[key] = index = SortedIndex();\n            adds[key] = add = index.insert(f, pulse.source, 0);\n          }\n\n          dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);\n        }\n      } // visit each tuple\n      // if filter state changed, push index to add/rem\n      // else if in mod and passes a filter, push index to mod\n\n\n      for (i = 0, n = bits.data().length; i < n; ++i) {\n        if (remMap[i]) {\n          // skip if removed tuple\n          continue;\n        } else if (prev[i] !== curr[i]) {\n          // add if state changed\n          out.push(i);\n        } else if (modMap[i] && curr[i] !== all) {\n          // otherwise, pass mods through\n          mod.push(i);\n        }\n      }\n\n      bits.mask = (1 << m) - 1;\n      return output;\n    },\n\n    eval(_, pulse) {\n      const output = pulse.materialize().fork(),\n            m = this._dims.length;\n      let mask = 0;\n\n      if (pulse.rem.length) {\n        this.remove(_, pulse, output);\n        mask |= (1 << m) - 1;\n      }\n\n      if (_.modified('query') && !_.modified('fields')) {\n        mask |= this.update(_, pulse, output);\n      }\n\n      if (pulse.add.length) {\n        this.insert(_, pulse, output);\n        mask |= (1 << m) - 1;\n      }\n\n      if (pulse.mod.length) {\n        this.modify(pulse, output);\n        mask |= (1 << m) - 1;\n      }\n\n      this.value.mask = mask;\n      return output;\n    },\n\n    insert(_, pulse, output) {\n      const tuples = pulse.add,\n            bits = this.value,\n            dims = this._dims,\n            indices = this._indices,\n            fields = _.fields,\n            adds = {},\n            out = output.add,\n            n = bits.size() + tuples.length,\n            m = dims.length;\n      let k = bits.size(),\n          j,\n          key,\n          add; // resize bitmaps and add tuples as needed\n\n      bits.resize(n, m);\n      bits.add(tuples);\n      const curr = bits.curr(),\n            prev = bits.prev(),\n            all = bits.all(); // add to dimensional indices\n\n      for (j = 0; j < m; ++j) {\n        key = fields[j].fname;\n        add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));\n        dims[j].onAdd(add, curr);\n      } // set previous filters, output if passes at least one filter\n\n\n      for (; k < n; ++k) {\n        prev[k] = all;\n        if (curr[k] !== all) out.push(k);\n      }\n    },\n\n    modify(pulse, output) {\n      const out = output.mod,\n            bits = this.value,\n            curr = bits.curr(),\n            all = bits.all(),\n            tuples = pulse.mod;\n      let i, n, k;\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        k = tuples[i]._index;\n        if (curr[k] !== all) out.push(k);\n      }\n    },\n\n    remove(_, pulse, output) {\n      const indices = this._indices,\n            bits = this.value,\n            curr = bits.curr(),\n            prev = bits.prev(),\n            all = bits.all(),\n            map = {},\n            out = output.rem,\n            tuples = pulse.rem;\n      let i, n, k, f; // process tuples, output if passes at least one filter\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        k = tuples[i]._index;\n        map[k] = 1; // build index map\n\n        prev[k] = f = curr[k];\n        curr[k] = all;\n        if (f !== all) out.push(k);\n      } // remove from dimensional indices\n\n\n      for (k in indices) {\n        indices[k].remove(n, map);\n      }\n\n      this.reindex(pulse, n, map);\n      return map;\n    },\n\n    // reindex filters and indices after propagation completes\n    reindex(pulse, num, map) {\n      const indices = this._indices,\n            bits = this.value;\n      pulse.runAfter(() => {\n        const indexMap = bits.remove(num, map);\n\n        for (const key in indices) indices[key].reindex(indexMap);\n      });\n    },\n\n    update(_, pulse, output) {\n      const dims = this._dims,\n            query = _.query,\n            stamp = pulse.stamp,\n            m = dims.length;\n      let mask = 0,\n          i,\n          q; // survey how many queries have changed\n\n      output.filters = 0;\n\n      for (q = 0; q < m; ++q) {\n        if (_.modified('query', q)) {\n          i = q;\n          ++mask;\n        }\n      }\n\n      if (mask === 1) {\n        // only one query changed, use more efficient update\n        mask = dims[i].one;\n        this.incrementOne(dims[i], query[i], output.add, output.rem);\n      } else {\n        // multiple queries changed, perform full record keeping\n        for (q = 0, mask = 0; q < m; ++q) {\n          if (!_.modified('query', q)) continue;\n          mask |= dims[q].one;\n          this.incrementAll(dims[q], query[q], stamp, output.add);\n          output.rem = output.add; // duplicate add/rem for downstream resolve\n        }\n      }\n\n      return mask;\n    },\n\n    incrementAll(dim, query, stamp, out) {\n      const bits = this.value,\n            seen = bits.seen(),\n            curr = bits.curr(),\n            prev = bits.prev(),\n            index = dim.index(),\n            old = dim.bisect(dim.range),\n            range = dim.bisect(query),\n            lo1 = range[0],\n            hi1 = range[1],\n            lo0 = old[0],\n            hi0 = old[1],\n            one = dim.one;\n      let i, j, k; // Fast incremental update based on previous lo index.\n\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          k = index[i];\n\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n\n          curr[k] ^= one;\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          k = index[i];\n\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n\n          curr[k] ^= one;\n        }\n      } // Fast incremental update based on previous hi index.\n\n\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          k = index[i];\n\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n\n          curr[k] ^= one;\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          k = index[i];\n\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n\n          curr[k] ^= one;\n        }\n      }\n\n      dim.range = query.slice();\n    },\n\n    incrementOne(dim, query, add, rem) {\n      const bits = this.value,\n            curr = bits.curr(),\n            index = dim.index(),\n            old = dim.bisect(dim.range),\n            range = dim.bisect(query),\n            lo1 = range[0],\n            hi1 = range[1],\n            lo0 = old[0],\n            hi0 = old[1],\n            one = dim.one;\n      let i, j, k; // Fast incremental update based on previous lo index.\n\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          add.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          rem.push(k);\n        }\n      } // Fast incremental update based on previous hi index.\n\n\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          add.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          rem.push(k);\n        }\n      }\n\n      dim.range = query.slice();\n    }\n\n  });\n  /**\n   * Selectively filters tuples by resolving against a filter bitmap.\n   * Useful for processing the output of a cross-filter transform.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.ignore - A bit mask indicating which filters to ignore.\n   * @param {object} params.filter - The per-tuple filter bitmaps. Typically this\n   *   parameter value is a reference to a {@link CrossFilter} transform.\n   */\n\n  function ResolveFilter(params) {\n    Transform.call(this, null, params);\n  }\n\n  ResolveFilter.Definition = {\n    'type': 'ResolveFilter',\n    'metadata': {},\n    'params': [{\n      'name': 'ignore',\n      'type': 'number',\n      'required': true,\n      'description': 'A bit mask indicating which filters to ignore.'\n    }, {\n      'name': 'filter',\n      'type': 'object',\n      'required': true,\n      'description': 'Per-tuple filter bitmaps from a CrossFilter transform.'\n    }]\n  };\n  inherits(ResolveFilter, Transform, {\n    transform(_, pulse) {\n      const ignore = ~(_.ignore || 0),\n            // bit mask where zeros -> dims to ignore\n      bitmap = _.filter,\n            mask = bitmap.mask; // exit early if no relevant filter changes\n\n      if ((mask & ignore) === 0) return pulse.StopPropagation;\n\n      const output = pulse.fork(pulse.ALL),\n            data = bitmap.data(),\n            curr = bitmap.curr(),\n            prev = bitmap.prev(),\n            pass = k => !(curr[k] & ignore) ? data[k] : null; // propagate all mod tuples that pass the filter\n\n\n      output.filter(output.MOD, pass); // determine add & rem tuples via filter functions\n      // for efficiency, we do *not* populate new arrays,\n      // instead we add filter functions applied downstream\n\n      if (!(mask & mask - 1)) {\n        // only one filter changed\n        output.filter(output.ADD, pass);\n        output.filter(output.REM, k => (curr[k] & ignore) === mask ? data[k] : null);\n      } else {\n        // multiple filters changed\n        output.filter(output.ADD, k => {\n          const c = curr[k] & ignore,\n                f = !c && c ^ prev[k] & ignore;\n          return f ? data[k] : null;\n        });\n        output.filter(output.REM, k => {\n          const c = curr[k] & ignore,\n                f = c && !(c ^ (c ^ prev[k] & ignore));\n          return f ? data[k] : null;\n        });\n      } // add filter to source data in case of reflow...\n\n\n      return output.filter(output.SOURCE, t => pass(t._index));\n    }\n\n  });\n\n  var xf = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    crossfilter: CrossFilter,\n    resolvefilter: ResolveFilter\n  });\n\n  const RawCode = 'RawCode';\n  const Literal = 'Literal';\n  const Property = 'Property';\n  const Identifier = 'Identifier';\n  const ArrayExpression = 'ArrayExpression';\n  const BinaryExpression = 'BinaryExpression';\n  const CallExpression = 'CallExpression';\n  const ConditionalExpression = 'ConditionalExpression';\n  const LogicalExpression = 'LogicalExpression';\n  const MemberExpression = 'MemberExpression';\n  const ObjectExpression = 'ObjectExpression';\n  const UnaryExpression = 'UnaryExpression';\n\n  function ASTNode(type) {\n    this.type = type;\n  }\n\n  ASTNode.prototype.visit = function (visitor) {\n    let c, i, n;\n    if (visitor(this)) return 1;\n\n    for (c = children(this), i = 0, n = c.length; i < n; ++i) {\n      if (c[i].visit(visitor)) return 1;\n    }\n  };\n\n  function children(node) {\n    switch (node.type) {\n      case ArrayExpression:\n        return node.elements;\n\n      case BinaryExpression:\n      case LogicalExpression:\n        return [node.left, node.right];\n\n      case CallExpression:\n        return [node.callee].concat(node.arguments);\n\n      case ConditionalExpression:\n        return [node.test, node.consequent, node.alternate];\n\n      case MemberExpression:\n        return [node.object, node.property];\n\n      case ObjectExpression:\n        return node.properties;\n\n      case Property:\n        return [node.key, node.value];\n\n      case UnaryExpression:\n        return [node.argument];\n\n      case Identifier:\n      case Literal:\n      case RawCode:\n      default:\n        return [];\n    }\n  }\n  /*\n    The following expression parser is based on Esprima (http://esprima.org/).\n    Original header comment and license for Esprima is included here:\n\n    Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n    Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n    Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n    Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n    Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n    Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n    Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n    Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n    Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n    Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n      * Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n      * Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n\n\n  var TokenName, source, index, length, lookahead;\n  var TokenBooleanLiteral = 1,\n      TokenEOF = 2,\n      TokenIdentifier = 3,\n      TokenKeyword = 4,\n      TokenNullLiteral = 5,\n      TokenNumericLiteral = 6,\n      TokenPunctuator = 7,\n      TokenStringLiteral = 8,\n      TokenRegularExpression = 9;\n  TokenName = {};\n  TokenName[TokenBooleanLiteral] = 'Boolean';\n  TokenName[TokenEOF] = '<end>';\n  TokenName[TokenIdentifier] = 'Identifier';\n  TokenName[TokenKeyword] = 'Keyword';\n  TokenName[TokenNullLiteral] = 'Null';\n  TokenName[TokenNumericLiteral] = 'Numeric';\n  TokenName[TokenPunctuator] = 'Punctuator';\n  TokenName[TokenStringLiteral] = 'String';\n  TokenName[TokenRegularExpression] = 'RegularExpression';\n  var SyntaxArrayExpression = 'ArrayExpression',\n      SyntaxBinaryExpression = 'BinaryExpression',\n      SyntaxCallExpression = 'CallExpression',\n      SyntaxConditionalExpression = 'ConditionalExpression',\n      SyntaxIdentifier = 'Identifier',\n      SyntaxLiteral = 'Literal',\n      SyntaxLogicalExpression = 'LogicalExpression',\n      SyntaxMemberExpression = 'MemberExpression',\n      SyntaxObjectExpression = 'ObjectExpression',\n      SyntaxProperty = 'Property',\n      SyntaxUnaryExpression = 'UnaryExpression'; // Error messages should be identical to V8.\n\n  var MessageUnexpectedToken = 'Unexpected token %0',\n      MessageUnexpectedNumber = 'Unexpected number',\n      MessageUnexpectedString = 'Unexpected string',\n      MessageUnexpectedIdentifier = 'Unexpected identifier',\n      MessageUnexpectedReserved = 'Unexpected reserved word',\n      MessageUnexpectedEOS = 'Unexpected end of input',\n      MessageInvalidRegExp = 'Invalid regular expression',\n      MessageUnterminatedRegExp = 'Invalid regular expression: missing /',\n      MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',\n      MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';\n  var ILLEGAL$1 = 'ILLEGAL',\n      DISABLED = 'Disabled.'; // See also tools/generate-unicode-regex.py.\n\n  var RegexNonAsciiIdentifierStart = new RegExp('[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]'),\n      // eslint-disable-next-line no-misleading-character-class\n  RegexNonAsciiIdentifierPart = new RegExp('[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0300-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u0483-\\\\u0487\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0610-\\\\u061A\\\\u0620-\\\\u0669\\\\u066E-\\\\u06D3\\\\u06D5-\\\\u06DC\\\\u06DF-\\\\u06E8\\\\u06EA-\\\\u06FC\\\\u06FF\\\\u0710-\\\\u074A\\\\u074D-\\\\u07B1\\\\u07C0-\\\\u07F5\\\\u07FA\\\\u0800-\\\\u082D\\\\u0840-\\\\u085B\\\\u08A0-\\\\u08B2\\\\u08E4-\\\\u0963\\\\u0966-\\\\u096F\\\\u0971-\\\\u0983\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BC-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CE\\\\u09D7\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E3\\\\u09E6-\\\\u09F1\\\\u0A01-\\\\u0A03\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A66-\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABC-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AD0\\\\u0AE0-\\\\u0AE3\\\\u0AE6-\\\\u0AEF\\\\u0B01-\\\\u0B03\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3C-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B56\\\\u0B57\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B63\\\\u0B66-\\\\u0B6F\\\\u0B71\\\\u0B82\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD0\\\\u0BD7\\\\u0BE6-\\\\u0BEF\\\\u0C00-\\\\u0C03\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C58\\\\u0C59\\\\u0C60-\\\\u0C63\\\\u0C66-\\\\u0C6F\\\\u0C81-\\\\u0C83\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBC-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CDE\\\\u0CE0-\\\\u0CE3\\\\u0CE6-\\\\u0CEF\\\\u0CF1\\\\u0CF2\\\\u0D01-\\\\u0D03\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4E\\\\u0D57\\\\u0D60-\\\\u0D63\\\\u0D66-\\\\u0D6F\\\\u0D7A-\\\\u0D7F\\\\u0D82\\\\u0D83\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DE6-\\\\u0DEF\\\\u0DF2\\\\u0DF3\\\\u0E01-\\\\u0E3A\\\\u0E40-\\\\u0E4E\\\\u0E50-\\\\u0E59\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB9\\\\u0EBB-\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EC8-\\\\u0ECD\\\\u0ED0-\\\\u0ED9\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F18\\\\u0F19\\\\u0F20-\\\\u0F29\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F71-\\\\u0F84\\\\u0F86-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u1000-\\\\u1049\\\\u1050-\\\\u109D\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u135D-\\\\u135F\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1714\\\\u1720-\\\\u1734\\\\u1740-\\\\u1753\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1772\\\\u1773\\\\u1780-\\\\u17D3\\\\u17D7\\\\u17DC\\\\u17DD\\\\u17E0-\\\\u17E9\\\\u180B-\\\\u180D\\\\u1810-\\\\u1819\\\\u1820-\\\\u1877\\\\u1880-\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1946-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u19D0-\\\\u19D9\\\\u1A00-\\\\u1A1B\\\\u1A20-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1AA7\\\\u1AB0-\\\\u1ABD\\\\u1B00-\\\\u1B4B\\\\u1B50-\\\\u1B59\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1BF3\\\\u1C00-\\\\u1C37\\\\u1C40-\\\\u1C49\\\\u1C4D-\\\\u1C7D\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CF6\\\\u1CF8\\\\u1CF9\\\\u1D00-\\\\u1DF5\\\\u1DFC-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u200C\\\\u200D\\\\u203F\\\\u2040\\\\u2054\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D7F-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2DE0-\\\\u2DFF\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u302F\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u3099\\\\u309A\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA62B\\\\uA640-\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA67F-\\\\uA69D\\\\uA69F-\\\\uA6F1\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA827\\\\uA840-\\\\uA873\\\\uA880-\\\\uA8C4\\\\uA8D0-\\\\uA8D9\\\\uA8E0-\\\\uA8F7\\\\uA8FB\\\\uA900-\\\\uA92D\\\\uA930-\\\\uA953\\\\uA960-\\\\uA97C\\\\uA980-\\\\uA9C0\\\\uA9CF-\\\\uA9D9\\\\uA9E0-\\\\uA9FE\\\\uAA00-\\\\uAA36\\\\uAA40-\\\\uAA4D\\\\uAA50-\\\\uAA59\\\\uAA60-\\\\uAA76\\\\uAA7A-\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEF\\\\uAAF2-\\\\uAAF6\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABEA\\\\uABEC\\\\uABED\\\\uABF0-\\\\uABF9\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2D\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF10-\\\\uFF19\\\\uFF21-\\\\uFF3A\\\\uFF3F\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]'); // Ensure the condition is true, otherwise throw an error.\n  // This is only to have a better contract semantic, i.e. another safety net\n  // to catch a logic error. The condition shall be fulfilled in normal case.\n  // Do NOT use this to enforce a certain condition on any user input.\n\n  function assert(condition, message) {\n    /* istanbul ignore next */\n    if (!condition) {\n      throw new Error('ASSERT: ' + message);\n    }\n  }\n\n  function isDecimalDigit(ch) {\n    return ch >= 0x30 && ch <= 0x39; // 0..9\n  }\n\n  function isHexDigit(ch) {\n    return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n  }\n\n  function isOctalDigit(ch) {\n    return '01234567'.indexOf(ch) >= 0;\n  } // 7.2 White Space\n\n\n  function isWhiteSpace(ch) {\n    return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0;\n  } // 7.3 Line Terminators\n\n\n  function isLineTerminator(ch) {\n    return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;\n  } // 7.6 Identifier Names and Identifiers\n\n\n  function isIdentifierStart(ch) {\n    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)\n    ch >= 0x41 && ch <= 0x5A || // A..Z\n    ch >= 0x61 && ch <= 0x7A || // a..z\n    ch === 0x5C || // \\ (backslash)\n    ch >= 0x80 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));\n  }\n\n  function isIdentifierPart(ch) {\n    return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)\n    ch >= 0x41 && ch <= 0x5A || // A..Z\n    ch >= 0x61 && ch <= 0x7A || // a..z\n    ch >= 0x30 && ch <= 0x39 || // 0..9\n    ch === 0x5C || // \\ (backslash)\n    ch >= 0x80 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));\n  } // 7.6.1.1 Keywords\n\n\n  const keywords = {\n    'if': 1,\n    'in': 1,\n    'do': 1,\n    'var': 1,\n    'for': 1,\n    'new': 1,\n    'try': 1,\n    'let': 1,\n    'this': 1,\n    'else': 1,\n    'case': 1,\n    'void': 1,\n    'with': 1,\n    'enum': 1,\n    'while': 1,\n    'break': 1,\n    'catch': 1,\n    'throw': 1,\n    'const': 1,\n    'yield': 1,\n    'class': 1,\n    'super': 1,\n    'return': 1,\n    'typeof': 1,\n    'delete': 1,\n    'switch': 1,\n    'export': 1,\n    'import': 1,\n    'public': 1,\n    'static': 1,\n    'default': 1,\n    'finally': 1,\n    'extends': 1,\n    'package': 1,\n    'private': 1,\n    'function': 1,\n    'continue': 1,\n    'debugger': 1,\n    'interface': 1,\n    'protected': 1,\n    'instanceof': 1,\n    'implements': 1\n  };\n\n  function skipComment() {\n    while (index < length) {\n      const ch = source.charCodeAt(index);\n\n      if (isWhiteSpace(ch) || isLineTerminator(ch)) {\n        ++index;\n      } else {\n        break;\n      }\n    }\n  }\n\n  function scanHexEscape(prefix) {\n    var i,\n        len,\n        ch,\n        code = 0;\n    len = prefix === 'u' ? 4 : 2;\n\n    for (i = 0; i < len; ++i) {\n      if (index < length && isHexDigit(source[index])) {\n        ch = source[index++];\n        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n      } else {\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n      }\n    }\n\n    return String.fromCharCode(code);\n  }\n\n  function scanUnicodeCodePointEscape() {\n    var ch, code, cu1, cu2;\n    ch = source[index];\n    code = 0; // At least, one hex digit is required.\n\n    if (ch === '}') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    }\n\n    while (index < length) {\n      ch = source[index++];\n\n      if (!isHexDigit(ch)) {\n        break;\n      }\n\n      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n    }\n\n    if (code > 0x10FFFF || ch !== '}') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    } // UTF-16 Encoding\n\n\n    if (code <= 0xFFFF) {\n      return String.fromCharCode(code);\n    }\n\n    cu1 = (code - 0x10000 >> 10) + 0xD800;\n    cu2 = (code - 0x10000 & 1023) + 0xDC00;\n    return String.fromCharCode(cu1, cu2);\n  }\n\n  function getEscapedIdentifier() {\n    var ch, id;\n    ch = source.charCodeAt(index++);\n    id = String.fromCharCode(ch); // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n    if (ch === 0x5C) {\n      if (source.charCodeAt(index) !== 0x75) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n      }\n\n      ++index;\n      ch = scanHexEscape('u');\n\n      if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n      }\n\n      id = ch;\n    }\n\n    while (index < length) {\n      ch = source.charCodeAt(index);\n\n      if (!isIdentifierPart(ch)) {\n        break;\n      }\n\n      ++index;\n      id += String.fromCharCode(ch); // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n      if (ch === 0x5C) {\n        id = id.substr(0, id.length - 1);\n\n        if (source.charCodeAt(index) !== 0x75) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n        }\n\n        ++index;\n        ch = scanHexEscape('u');\n\n        if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n        }\n\n        id += ch;\n      }\n    }\n\n    return id;\n  }\n\n  function getIdentifier() {\n    var start, ch;\n    start = index++;\n\n    while (index < length) {\n      ch = source.charCodeAt(index);\n\n      if (ch === 0x5C) {\n        // Blackslash (U+005C) marks Unicode escape sequence.\n        index = start;\n        return getEscapedIdentifier();\n      }\n\n      if (isIdentifierPart(ch)) {\n        ++index;\n      } else {\n        break;\n      }\n    }\n\n    return source.slice(start, index);\n  }\n\n  function scanIdentifier() {\n    var start, id, type;\n    start = index; // Backslash (U+005C) starts an escaped character.\n\n    id = source.charCodeAt(index) === 0x5C ? getEscapedIdentifier() : getIdentifier(); // There is no keyword or literal with only one character.\n    // Thus, it must be an identifier.\n\n    if (id.length === 1) {\n      type = TokenIdentifier;\n    } else if (keywords.hasOwnProperty(id)) {\n      // eslint-disable-line no-prototype-builtins\n      type = TokenKeyword;\n    } else if (id === 'null') {\n      type = TokenNullLiteral;\n    } else if (id === 'true' || id === 'false') {\n      type = TokenBooleanLiteral;\n    } else {\n      type = TokenIdentifier;\n    }\n\n    return {\n      type: type,\n      value: id,\n      start: start,\n      end: index\n    };\n  } // 7.7 Punctuators\n\n\n  function scanPunctuator() {\n    var start = index,\n        code = source.charCodeAt(index),\n        code2,\n        ch1 = source[index],\n        ch2,\n        ch3,\n        ch4;\n\n    switch (code) {\n      // Check for most common single-character punctuators.\n      case 0x2E: // . dot\n\n      case 0x28: // ( open bracket\n\n      case 0x29: // ) close bracket\n\n      case 0x3B: // ; semicolon\n\n      case 0x2C: // , comma\n\n      case 0x7B: // { open curly brace\n\n      case 0x7D: // } close curly brace\n\n      case 0x5B: // [\n\n      case 0x5D: // ]\n\n      case 0x3A: // :\n\n      case 0x3F: // ?\n\n      case 0x7E:\n        // ~\n        ++index;\n        return {\n          type: TokenPunctuator,\n          value: String.fromCharCode(code),\n          start: start,\n          end: index\n        };\n\n      default:\n        code2 = source.charCodeAt(index + 1); // '=' (U+003D) marks an assignment or comparison operator.\n\n        if (code2 === 0x3D) {\n          switch (code) {\n            case 0x2B: // +\n\n            case 0x2D: // -\n\n            case 0x2F: // /\n\n            case 0x3C: // <\n\n            case 0x3E: // >\n\n            case 0x5E: // ^\n\n            case 0x7C: // |\n\n            case 0x25: // %\n\n            case 0x26: // &\n\n            case 0x2A:\n              // *\n              index += 2;\n              return {\n                type: TokenPunctuator,\n                value: String.fromCharCode(code) + String.fromCharCode(code2),\n                start: start,\n                end: index\n              };\n\n            case 0x21: // !\n\n            case 0x3D:\n              // =\n              index += 2; // !== and ===\n\n              if (source.charCodeAt(index) === 0x3D) {\n                ++index;\n              }\n\n              return {\n                type: TokenPunctuator,\n                value: source.slice(start, index),\n                start: start,\n                end: index\n              };\n          }\n        }\n\n    } // 4-character punctuator: >>>=\n\n\n    ch4 = source.substr(index, 4);\n\n    if (ch4 === '>>>=') {\n      index += 4;\n      return {\n        type: TokenPunctuator,\n        value: ch4,\n        start: start,\n        end: index\n      };\n    } // 3-character punctuators: === !== >>> <<= >>=\n\n\n    ch3 = ch4.substr(0, 3);\n\n    if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\n      index += 3;\n      return {\n        type: TokenPunctuator,\n        value: ch3,\n        start: start,\n        end: index\n      };\n    } // Other 2-character punctuators: ++ -- << >> && ||\n\n\n    ch2 = ch3.substr(0, 2);\n\n    if (ch1 === ch2[1] && '+-<>&|'.indexOf(ch1) >= 0 || ch2 === '=>') {\n      index += 2;\n      return {\n        type: TokenPunctuator,\n        value: ch2,\n        start: start,\n        end: index\n      };\n    }\n\n    if (ch2 === '//') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    } // 1-character punctuators: < > = ! + - * % & | ^ /\n\n\n    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n      ++index;\n      return {\n        type: TokenPunctuator,\n        value: ch1,\n        start: start,\n        end: index\n      };\n    }\n\n    throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n  } // 7.8.3 Numeric Literals\n\n\n  function scanHexLiteral(start) {\n    let number = '';\n\n    while (index < length) {\n      if (!isHexDigit(source[index])) {\n        break;\n      }\n\n      number += source[index++];\n    }\n\n    if (number.length === 0) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    }\n\n    if (isIdentifierStart(source.charCodeAt(index))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseInt('0x' + number, 16),\n      start: start,\n      end: index\n    };\n  }\n\n  function scanOctalLiteral(start) {\n    let number = '0' + source[index++];\n\n    while (index < length) {\n      if (!isOctalDigit(source[index])) {\n        break;\n      }\n\n      number += source[index++];\n    }\n\n    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseInt(number, 8),\n      octal: true,\n      start: start,\n      end: index\n    };\n  }\n\n  function scanNumericLiteral() {\n    var number, start, ch;\n    ch = source[index];\n    assert(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');\n    start = index;\n    number = '';\n\n    if (ch !== '.') {\n      number = source[index++];\n      ch = source[index]; // Hex number starts with '0x'.\n      // Octal number starts with '0'.\n\n      if (number === '0') {\n        if (ch === 'x' || ch === 'X') {\n          ++index;\n          return scanHexLiteral(start);\n        }\n\n        if (isOctalDigit(ch)) {\n          return scanOctalLiteral(start);\n        } // decimal number starts with '0' such as '09' is illegal.\n\n\n        if (ch && isDecimalDigit(ch.charCodeAt(0))) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n        }\n      }\n\n      while (isDecimalDigit(source.charCodeAt(index))) {\n        number += source[index++];\n      }\n\n      ch = source[index];\n    }\n\n    if (ch === '.') {\n      number += source[index++];\n\n      while (isDecimalDigit(source.charCodeAt(index))) {\n        number += source[index++];\n      }\n\n      ch = source[index];\n    }\n\n    if (ch === 'e' || ch === 'E') {\n      number += source[index++];\n      ch = source[index];\n\n      if (ch === '+' || ch === '-') {\n        number += source[index++];\n      }\n\n      if (isDecimalDigit(source.charCodeAt(index))) {\n        while (isDecimalDigit(source.charCodeAt(index))) {\n          number += source[index++];\n        }\n      } else {\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n      }\n    }\n\n    if (isIdentifierStart(source.charCodeAt(index))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseFloat(number),\n      start: start,\n      end: index\n    };\n  } // 7.8.4 String Literals\n\n\n  function scanStringLiteral() {\n    var str = '',\n        quote,\n        start,\n        ch,\n        code,\n        octal = false;\n    quote = source[index];\n    assert(quote === '\\'' || quote === '\"', 'String literal must starts with a quote');\n    start = index;\n    ++index;\n\n    while (index < length) {\n      ch = source[index++];\n\n      if (ch === quote) {\n        quote = '';\n        break;\n      } else if (ch === '\\\\') {\n        ch = source[index++];\n\n        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n          switch (ch) {\n            case 'u':\n            case 'x':\n              if (source[index] === '{') {\n                ++index;\n                str += scanUnicodeCodePointEscape();\n              } else {\n                str += scanHexEscape(ch);\n              }\n\n              break;\n\n            case 'n':\n              str += '\\n';\n              break;\n\n            case 'r':\n              str += '\\r';\n              break;\n\n            case 't':\n              str += '\\t';\n              break;\n\n            case 'b':\n              str += '\\b';\n              break;\n\n            case 'f':\n              str += '\\f';\n              break;\n\n            case 'v':\n              str += '\\x0B';\n              break;\n\n            default:\n              if (isOctalDigit(ch)) {\n                code = '01234567'.indexOf(ch); // \\0 is not octal escape sequence\n\n                if (code !== 0) {\n                  octal = true;\n                }\n\n                if (index < length && isOctalDigit(source[index])) {\n                  octal = true;\n                  code = code * 8 + '01234567'.indexOf(source[index++]); // 3 digits are only allowed when string starts\n                  // with 0, 1, 2, 3\n\n                  if ('0123'.indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) {\n                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                  }\n                }\n\n                str += String.fromCharCode(code);\n              } else {\n                str += ch;\n              }\n\n              break;\n          }\n        } else {\n          if (ch === '\\r' && source[index] === '\\n') {\n            ++index;\n          }\n        }\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\n        break;\n      } else {\n        str += ch;\n      }\n    }\n\n    if (quote !== '') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n    }\n\n    return {\n      type: TokenStringLiteral,\n      value: str,\n      octal: octal,\n      start: start,\n      end: index\n    };\n  }\n\n  function testRegExp(pattern, flags) {\n    let tmp = pattern;\n\n    if (flags.indexOf('u') >= 0) {\n      // Replace each astral symbol and every Unicode code point\n      // escape sequence with a single ASCII symbol to avoid throwing on\n      // regular expressions that are only valid in combination with the\n      // `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it\n      // would be replaced by `[x-b]` which throws an error.\n      tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, ($0, $1) => {\n        if (parseInt($1, 16) <= 0x10FFFF) {\n          return 'x';\n        }\n\n        throwError({}, MessageInvalidRegExp);\n      }).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, 'x');\n    } // First, detect invalid regular expressions.\n\n\n    try {\n      new RegExp(tmp);\n    } catch (e) {\n      throwError({}, MessageInvalidRegExp);\n    } // Return a regular expression object for this pattern-flag pair, or\n    // `null` in case the current environment doesn't support the flags it\n    // uses.\n\n\n    try {\n      return new RegExp(pattern, flags);\n    } catch (exception) {\n      return null;\n    }\n  }\n\n  function scanRegExpBody() {\n    var ch, str, classMarker, terminated, body;\n    ch = source[index];\n    assert(ch === '/', 'Regular expression literal must start with a slash');\n    str = source[index++];\n    classMarker = false;\n    terminated = false;\n\n    while (index < length) {\n      ch = source[index++];\n      str += ch;\n\n      if (ch === '\\\\') {\n        ch = source[index++]; // ECMA-262 7.8.5\n\n        if (isLineTerminator(ch.charCodeAt(0))) {\n          throwError({}, MessageUnterminatedRegExp);\n        }\n\n        str += ch;\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\n        throwError({}, MessageUnterminatedRegExp);\n      } else if (classMarker) {\n        if (ch === ']') {\n          classMarker = false;\n        }\n      } else {\n        if (ch === '/') {\n          terminated = true;\n          break;\n        } else if (ch === '[') {\n          classMarker = true;\n        }\n      }\n    }\n\n    if (!terminated) {\n      throwError({}, MessageUnterminatedRegExp);\n    } // Exclude leading and trailing slash.\n\n\n    body = str.substr(1, str.length - 2);\n    return {\n      value: body,\n      literal: str\n    };\n  }\n\n  function scanRegExpFlags() {\n    var ch, str, flags;\n    str = '';\n    flags = '';\n\n    while (index < length) {\n      ch = source[index];\n\n      if (!isIdentifierPart(ch.charCodeAt(0))) {\n        break;\n      }\n\n      ++index;\n\n      if (ch === '\\\\' && index < length) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL$1);\n      } else {\n        flags += ch;\n        str += ch;\n      }\n    }\n\n    if (flags.search(/[^gimuy]/g) >= 0) {\n      throwError({}, MessageInvalidRegExp, flags);\n    }\n\n    return {\n      value: flags,\n      literal: str\n    };\n  }\n\n  function scanRegExp() {\n    var start, body, flags, value;\n    lookahead = null;\n    skipComment();\n    start = index;\n    body = scanRegExpBody();\n    flags = scanRegExpFlags();\n    value = testRegExp(body.value, flags.value);\n    return {\n      literal: body.literal + flags.literal,\n      value: value,\n      regex: {\n        pattern: body.value,\n        flags: flags.value\n      },\n      start: start,\n      end: index\n    };\n  }\n\n  function isIdentifierName(token) {\n    return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;\n  }\n\n  function advance() {\n    skipComment();\n\n    if (index >= length) {\n      return {\n        type: TokenEOF,\n        start: index,\n        end: index\n      };\n    }\n\n    const ch = source.charCodeAt(index);\n\n    if (isIdentifierStart(ch)) {\n      return scanIdentifier();\n    } // Very common: ( and ) and ;\n\n\n    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\n      return scanPunctuator();\n    } // String literal starts with single quote (U+0027) or double quote (U+0022).\n\n\n    if (ch === 0x27 || ch === 0x22) {\n      return scanStringLiteral();\n    } // Dot (.) U+002E can also start a floating-point number, hence the need\n    // to check the next character.\n\n\n    if (ch === 0x2E) {\n      if (isDecimalDigit(source.charCodeAt(index + 1))) {\n        return scanNumericLiteral();\n      }\n\n      return scanPunctuator();\n    }\n\n    if (isDecimalDigit(ch)) {\n      return scanNumericLiteral();\n    }\n\n    return scanPunctuator();\n  }\n\n  function lex() {\n    const token = lookahead;\n    index = token.end;\n    lookahead = advance();\n    index = token.end;\n    return token;\n  }\n\n  function peek() {\n    const pos = index;\n    lookahead = advance();\n    index = pos;\n  }\n\n  function finishArrayExpression(elements) {\n    const node = new ASTNode(SyntaxArrayExpression);\n    node.elements = elements;\n    return node;\n  }\n\n  function finishBinaryExpression(operator, left, right) {\n    const node = new ASTNode(operator === '||' || operator === '&&' ? SyntaxLogicalExpression : SyntaxBinaryExpression);\n    node.operator = operator;\n    node.left = left;\n    node.right = right;\n    return node;\n  }\n\n  function finishCallExpression(callee, args) {\n    const node = new ASTNode(SyntaxCallExpression);\n    node.callee = callee;\n    node.arguments = args;\n    return node;\n  }\n\n  function finishConditionalExpression(test, consequent, alternate) {\n    const node = new ASTNode(SyntaxConditionalExpression);\n    node.test = test;\n    node.consequent = consequent;\n    node.alternate = alternate;\n    return node;\n  }\n\n  function finishIdentifier(name) {\n    const node = new ASTNode(SyntaxIdentifier);\n    node.name = name;\n    return node;\n  }\n\n  function finishLiteral(token) {\n    const node = new ASTNode(SyntaxLiteral);\n    node.value = token.value;\n    node.raw = source.slice(token.start, token.end);\n\n    if (token.regex) {\n      if (node.raw === '//') {\n        node.raw = '/(?:)/';\n      }\n\n      node.regex = token.regex;\n    }\n\n    return node;\n  }\n\n  function finishMemberExpression(accessor, object, property) {\n    const node = new ASTNode(SyntaxMemberExpression);\n    node.computed = accessor === '[';\n    node.object = object;\n    node.property = property;\n    if (!node.computed) property.member = true;\n    return node;\n  }\n\n  function finishObjectExpression(properties) {\n    const node = new ASTNode(SyntaxObjectExpression);\n    node.properties = properties;\n    return node;\n  }\n\n  function finishProperty(kind, key, value) {\n    const node = new ASTNode(SyntaxProperty);\n    node.key = key;\n    node.value = value;\n    node.kind = kind;\n    return node;\n  }\n\n  function finishUnaryExpression(operator, argument) {\n    const node = new ASTNode(SyntaxUnaryExpression);\n    node.operator = operator;\n    node.argument = argument;\n    node.prefix = true;\n    return node;\n  } // Throw an exception\n\n\n  function throwError(token, messageFormat) {\n    var error,\n        args = Array.prototype.slice.call(arguments, 2),\n        msg = messageFormat.replace(/%(\\d)/g, (whole, index) => {\n      assert(index < args.length, 'Message reference must be in range');\n      return args[index];\n    });\n    error = new Error(msg);\n    error.index = index;\n    error.description = msg;\n    throw error;\n  } // Throw an exception because of the token.\n\n\n  function throwUnexpected(token) {\n    if (token.type === TokenEOF) {\n      throwError(token, MessageUnexpectedEOS);\n    }\n\n    if (token.type === TokenNumericLiteral) {\n      throwError(token, MessageUnexpectedNumber);\n    }\n\n    if (token.type === TokenStringLiteral) {\n      throwError(token, MessageUnexpectedString);\n    }\n\n    if (token.type === TokenIdentifier) {\n      throwError(token, MessageUnexpectedIdentifier);\n    }\n\n    if (token.type === TokenKeyword) {\n      throwError(token, MessageUnexpectedReserved);\n    } // BooleanLiteral, NullLiteral, or Punctuator.\n\n\n    throwError(token, MessageUnexpectedToken, token.value);\n  } // Expect the next token to match the specified punctuator.\n  // If not, an exception will be thrown.\n\n\n  function expect(value) {\n    const token = lex();\n\n    if (token.type !== TokenPunctuator || token.value !== value) {\n      throwUnexpected(token);\n    }\n  } // Return true if the next token matches the specified punctuator.\n\n\n  function match(value) {\n    return lookahead.type === TokenPunctuator && lookahead.value === value;\n  } // Return true if the next token matches the specified keyword\n\n\n  function matchKeyword(keyword) {\n    return lookahead.type === TokenKeyword && lookahead.value === keyword;\n  } // 11.1.4 Array Initialiser\n\n\n  function parseArrayInitialiser() {\n    const elements = [];\n    index = lookahead.start;\n    expect('[');\n\n    while (!match(']')) {\n      if (match(',')) {\n        lex();\n        elements.push(null);\n      } else {\n        elements.push(parseConditionalExpression());\n\n        if (!match(']')) {\n          expect(',');\n        }\n      }\n    }\n\n    lex();\n    return finishArrayExpression(elements);\n  } // 11.1.5 Object Initialiser\n\n\n  function parseObjectPropertyKey() {\n    index = lookahead.start;\n    const token = lex(); // Note: This function is called only from parseObjectProperty(), where\n    // EOF and Punctuator tokens are already filtered out.\n\n    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {\n      if (token.octal) {\n        throwError(token, MessageStrictOctalLiteral);\n      }\n\n      return finishLiteral(token);\n    }\n\n    return finishIdentifier(token.value);\n  }\n\n  function parseObjectProperty() {\n    var token, key, id, value;\n    index = lookahead.start;\n    token = lookahead;\n\n    if (token.type === TokenIdentifier) {\n      id = parseObjectPropertyKey();\n      expect(':');\n      value = parseConditionalExpression();\n      return finishProperty('init', id, value);\n    }\n\n    if (token.type === TokenEOF || token.type === TokenPunctuator) {\n      throwUnexpected(token);\n    } else {\n      key = parseObjectPropertyKey();\n      expect(':');\n      value = parseConditionalExpression();\n      return finishProperty('init', key, value);\n    }\n  }\n\n  function parseObjectInitialiser() {\n    var properties = [],\n        property,\n        name,\n        key,\n        map = {},\n        toString = String;\n    index = lookahead.start;\n    expect('{');\n\n    while (!match('}')) {\n      property = parseObjectProperty();\n\n      if (property.key.type === SyntaxIdentifier) {\n        name = property.key.name;\n      } else {\n        name = toString(property.key.value);\n      }\n\n      key = '$' + name;\n\n      if (Object.prototype.hasOwnProperty.call(map, key)) {\n        throwError({}, MessageStrictDuplicateProperty);\n      } else {\n        map[key] = true;\n      }\n\n      properties.push(property);\n\n      if (!match('}')) {\n        expect(',');\n      }\n    }\n\n    expect('}');\n    return finishObjectExpression(properties);\n  } // 11.1.6 The Grouping Operator\n\n\n  function parseGroupExpression() {\n    expect('(');\n    const expr = parseExpression();\n    expect(')');\n    return expr;\n  } // 11.1 Primary Expressions\n\n\n  const legalKeywords = {\n    'if': 1\n  };\n\n  function parsePrimaryExpression() {\n    var type, token, expr;\n\n    if (match('(')) {\n      return parseGroupExpression();\n    }\n\n    if (match('[')) {\n      return parseArrayInitialiser();\n    }\n\n    if (match('{')) {\n      return parseObjectInitialiser();\n    }\n\n    type = lookahead.type;\n    index = lookahead.start;\n\n    if (type === TokenIdentifier || legalKeywords[lookahead.value]) {\n      expr = finishIdentifier(lex().value);\n    } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {\n      if (lookahead.octal) {\n        throwError(lookahead, MessageStrictOctalLiteral);\n      }\n\n      expr = finishLiteral(lex());\n    } else if (type === TokenKeyword) {\n      throw new Error(DISABLED);\n    } else if (type === TokenBooleanLiteral) {\n      token = lex();\n      token.value = token.value === 'true';\n      expr = finishLiteral(token);\n    } else if (type === TokenNullLiteral) {\n      token = lex();\n      token.value = null;\n      expr = finishLiteral(token);\n    } else if (match('/') || match('/=')) {\n      expr = finishLiteral(scanRegExp());\n      peek();\n    } else {\n      throwUnexpected(lex());\n    }\n\n    return expr;\n  } // 11.2 Left-Hand-Side Expressions\n\n\n  function parseArguments() {\n    const args = [];\n    expect('(');\n\n    if (!match(')')) {\n      while (index < length) {\n        args.push(parseConditionalExpression());\n\n        if (match(')')) {\n          break;\n        }\n\n        expect(',');\n      }\n    }\n\n    expect(')');\n    return args;\n  }\n\n  function parseNonComputedProperty() {\n    index = lookahead.start;\n    const token = lex();\n\n    if (!isIdentifierName(token)) {\n      throwUnexpected(token);\n    }\n\n    return finishIdentifier(token.value);\n  }\n\n  function parseNonComputedMember() {\n    expect('.');\n    return parseNonComputedProperty();\n  }\n\n  function parseComputedMember() {\n    expect('[');\n    const expr = parseExpression();\n    expect(']');\n    return expr;\n  }\n\n  function parseLeftHandSideExpressionAllowCall() {\n    var expr, args, property;\n    expr = parsePrimaryExpression();\n\n    for (;;) {\n      if (match('.')) {\n        property = parseNonComputedMember();\n        expr = finishMemberExpression('.', expr, property);\n      } else if (match('(')) {\n        args = parseArguments();\n        expr = finishCallExpression(expr, args);\n      } else if (match('[')) {\n        property = parseComputedMember();\n        expr = finishMemberExpression('[', expr, property);\n      } else {\n        break;\n      }\n    }\n\n    return expr;\n  } // 11.3 Postfix Expressions\n\n\n  function parsePostfixExpression() {\n    const expr = parseLeftHandSideExpressionAllowCall();\n\n    if (lookahead.type === TokenPunctuator) {\n      if (match('++') || match('--')) {\n        throw new Error(DISABLED);\n      }\n    }\n\n    return expr;\n  } // 11.4 Unary Operators\n\n\n  function parseUnaryExpression() {\n    var token, expr;\n\n    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {\n      expr = parsePostfixExpression();\n    } else if (match('++') || match('--')) {\n      throw new Error(DISABLED);\n    } else if (match('+') || match('-') || match('~') || match('!')) {\n      token = lex();\n      expr = parseUnaryExpression();\n      expr = finishUnaryExpression(token.value, expr);\n    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n      throw new Error(DISABLED);\n    } else {\n      expr = parsePostfixExpression();\n    }\n\n    return expr;\n  }\n\n  function binaryPrecedence(token) {\n    let prec = 0;\n\n    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {\n      return 0;\n    }\n\n    switch (token.value) {\n      case '||':\n        prec = 1;\n        break;\n\n      case '&&':\n        prec = 2;\n        break;\n\n      case '|':\n        prec = 3;\n        break;\n\n      case '^':\n        prec = 4;\n        break;\n\n      case '&':\n        prec = 5;\n        break;\n\n      case '==':\n      case '!=':\n      case '===':\n      case '!==':\n        prec = 6;\n        break;\n\n      case '<':\n      case '>':\n      case '<=':\n      case '>=':\n      case 'instanceof':\n      case 'in':\n        prec = 7;\n        break;\n\n      case '<<':\n      case '>>':\n      case '>>>':\n        prec = 8;\n        break;\n\n      case '+':\n      case '-':\n        prec = 9;\n        break;\n\n      case '*':\n      case '/':\n      case '%':\n        prec = 11;\n        break;\n    }\n\n    return prec;\n  } // 11.5 Multiplicative Operators\n  // 11.6 Additive Operators\n  // 11.7 Bitwise Shift Operators\n  // 11.8 Relational Operators\n  // 11.9 Equality Operators\n  // 11.10 Binary Bitwise Operators\n  // 11.11 Binary Logical Operators\n\n\n  function parseBinaryExpression() {\n    var marker, markers, expr, token, prec, stack, right, operator, left, i;\n    marker = lookahead;\n    left = parseUnaryExpression();\n    token = lookahead;\n    prec = binaryPrecedence(token);\n\n    if (prec === 0) {\n      return left;\n    }\n\n    token.prec = prec;\n    lex();\n    markers = [marker, lookahead];\n    right = parseUnaryExpression();\n    stack = [left, token, right];\n\n    while ((prec = binaryPrecedence(lookahead)) > 0) {\n      // Reduce: make a binary expression from the three topmost entries.\n      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n        right = stack.pop();\n        operator = stack.pop().value;\n        left = stack.pop();\n        markers.pop();\n        expr = finishBinaryExpression(operator, left, right);\n        stack.push(expr);\n      } // Shift.\n\n\n      token = lex();\n      token.prec = prec;\n      stack.push(token);\n      markers.push(lookahead);\n      expr = parseUnaryExpression();\n      stack.push(expr);\n    } // Final reduce to clean-up the stack.\n\n\n    i = stack.length - 1;\n    expr = stack[i];\n    markers.pop();\n\n    while (i > 1) {\n      markers.pop();\n      expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n      i -= 2;\n    }\n\n    return expr;\n  } // 11.12 Conditional Operator\n\n\n  function parseConditionalExpression() {\n    var expr, consequent, alternate;\n    expr = parseBinaryExpression();\n\n    if (match('?')) {\n      lex();\n      consequent = parseConditionalExpression();\n      expect(':');\n      alternate = parseConditionalExpression();\n      expr = finishConditionalExpression(expr, consequent, alternate);\n    }\n\n    return expr;\n  } // 11.14 Comma Operator\n\n\n  function parseExpression() {\n    const expr = parseConditionalExpression();\n\n    if (match(',')) {\n      throw new Error(DISABLED); // no sequence expressions\n    }\n\n    return expr;\n  }\n\n  function parser$1(code) {\n    source = code;\n    index = 0;\n    length = source.length;\n    lookahead = null;\n    peek();\n    const expr = parseExpression();\n\n    if (lookahead.type !== TokenEOF) {\n      throw new Error('Unexpect token after expression.');\n    }\n\n    return expr;\n  }\n\n  var Constants = {\n    NaN: 'NaN',\n    E: 'Math.E',\n    LN2: 'Math.LN2',\n    LN10: 'Math.LN10',\n    LOG2E: 'Math.LOG2E',\n    LOG10E: 'Math.LOG10E',\n    PI: 'Math.PI',\n    SQRT1_2: 'Math.SQRT1_2',\n    SQRT2: 'Math.SQRT2',\n    MIN_VALUE: 'Number.MIN_VALUE',\n    MAX_VALUE: 'Number.MAX_VALUE'\n  };\n\n  function Functions(codegen) {\n    function fncall(name, args, cast, type) {\n      let obj = codegen(args[0]);\n\n      if (cast) {\n        obj = cast + '(' + obj + ')';\n        if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';\n      }\n\n      return obj + '.' + name + (type < 0 ? '' : type === 0 ? '()' : '(' + args.slice(1).map(codegen).join(',') + ')');\n    }\n\n    function fn(name, cast, type) {\n      return args => fncall(name, args, cast, type);\n    }\n\n    const DATE = 'new Date',\n          STRING = 'String',\n          REGEXP = 'RegExp';\n    return {\n      // MATH functions\n      isNaN: 'Number.isNaN',\n      isFinite: 'Number.isFinite',\n      abs: 'Math.abs',\n      acos: 'Math.acos',\n      asin: 'Math.asin',\n      atan: 'Math.atan',\n      atan2: 'Math.atan2',\n      ceil: 'Math.ceil',\n      cos: 'Math.cos',\n      exp: 'Math.exp',\n      floor: 'Math.floor',\n      log: 'Math.log',\n      max: 'Math.max',\n      min: 'Math.min',\n      pow: 'Math.pow',\n      random: 'Math.random',\n      round: 'Math.round',\n      sin: 'Math.sin',\n      sqrt: 'Math.sqrt',\n      tan: 'Math.tan',\n      clamp: function (args) {\n        if (args.length < 3) error('Missing arguments to clamp function.');\n        if (args.length > 3) error('Too many arguments to clamp function.');\n        const a = args.map(codegen);\n        return 'Math.max(' + a[1] + ', Math.min(' + a[2] + ',' + a[0] + '))';\n      },\n      // DATE functions\n      now: 'Date.now',\n      utc: 'Date.UTC',\n      datetime: DATE,\n      date: fn('getDate', DATE, 0),\n      day: fn('getDay', DATE, 0),\n      year: fn('getFullYear', DATE, 0),\n      month: fn('getMonth', DATE, 0),\n      hours: fn('getHours', DATE, 0),\n      minutes: fn('getMinutes', DATE, 0),\n      seconds: fn('getSeconds', DATE, 0),\n      milliseconds: fn('getMilliseconds', DATE, 0),\n      time: fn('getTime', DATE, 0),\n      timezoneoffset: fn('getTimezoneOffset', DATE, 0),\n      utcdate: fn('getUTCDate', DATE, 0),\n      utcday: fn('getUTCDay', DATE, 0),\n      utcyear: fn('getUTCFullYear', DATE, 0),\n      utcmonth: fn('getUTCMonth', DATE, 0),\n      utchours: fn('getUTCHours', DATE, 0),\n      utcminutes: fn('getUTCMinutes', DATE, 0),\n      utcseconds: fn('getUTCSeconds', DATE, 0),\n      utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),\n      // sequence functions\n      length: fn('length', null, -1),\n      // STRING functions\n      parseFloat: 'parseFloat',\n      parseInt: 'parseInt',\n      upper: fn('toUpperCase', STRING, 0),\n      lower: fn('toLowerCase', STRING, 0),\n      substring: fn('substring', STRING),\n      split: fn('split', STRING),\n      trim: fn('trim', STRING, 0),\n      // REGEXP functions\n      regexp: REGEXP,\n      test: fn('test', REGEXP),\n      // Control Flow functions\n      if: function (args) {\n        if (args.length < 3) error('Missing arguments to if function.');\n        if (args.length > 3) error('Too many arguments to if function.');\n        const a = args.map(codegen);\n        return '(' + a[0] + '?' + a[1] + ':' + a[2] + ')';\n      }\n    };\n  }\n\n  function stripQuotes(s) {\n    const n = s && s.length - 1;\n    return n && (s[0] === '\"' && s[n] === '\"' || s[0] === '\\'' && s[n] === '\\'') ? s.slice(1, -1) : s;\n  }\n\n  function codegen(opt) {\n    opt = opt || {};\n    const allowed = opt.allowed ? toSet(opt.allowed) : {},\n          forbidden = opt.forbidden ? toSet(opt.forbidden) : {},\n          constants = opt.constants || Constants,\n          functions = (opt.functions || Functions)(visit),\n          globalvar = opt.globalvar,\n          fieldvar = opt.fieldvar,\n          outputGlobal = isFunction(globalvar) ? globalvar : id => `${globalvar}[\"${id}\"]`;\n    let globals = {},\n        fields = {},\n        memberDepth = 0;\n\n    function visit(ast) {\n      if (isString(ast)) return ast;\n      const generator = Generators[ast.type];\n      if (generator == null) error('Unsupported type: ' + ast.type);\n      return generator(ast);\n    }\n\n    const Generators = {\n      Literal: n => n.raw,\n      Identifier: n => {\n        const id = n.name;\n\n        if (memberDepth > 0) {\n          return id;\n        } else if (has$1(forbidden, id)) {\n          return error('Illegal identifier: ' + id);\n        } else if (has$1(constants, id)) {\n          return constants[id];\n        } else if (has$1(allowed, id)) {\n          return id;\n        } else {\n          globals[id] = 1;\n          return outputGlobal(id);\n        }\n      },\n      MemberExpression: n => {\n        const d = !n.computed,\n              o = visit(n.object);\n        if (d) memberDepth += 1;\n        const p = visit(n.property);\n\n        if (o === fieldvar) {\n          // strip quotes to sanitize field name (#1653)\n          fields[stripQuotes(p)] = 1;\n        }\n\n        if (d) memberDepth -= 1;\n        return o + (d ? '.' + p : '[' + p + ']');\n      },\n      CallExpression: n => {\n        if (n.callee.type !== 'Identifier') {\n          error('Illegal callee type: ' + n.callee.type);\n        }\n\n        const callee = n.callee.name,\n              args = n.arguments,\n              fn = has$1(functions, callee) && functions[callee];\n        if (!fn) error('Unrecognized function: ' + callee);\n        return isFunction(fn) ? fn(args) : fn + '(' + args.map(visit).join(',') + ')';\n      },\n      ArrayExpression: n => '[' + n.elements.map(visit).join(',') + ']',\n      BinaryExpression: n => '(' + visit(n.left) + ' ' + n.operator + ' ' + visit(n.right) + ')',\n      UnaryExpression: n => '(' + n.operator + visit(n.argument) + ')',\n      ConditionalExpression: n => '(' + visit(n.test) + '?' + visit(n.consequent) + ':' + visit(n.alternate) + ')',\n      LogicalExpression: n => '(' + visit(n.left) + n.operator + visit(n.right) + ')',\n      ObjectExpression: n => '{' + n.properties.map(visit).join(',') + '}',\n      Property: n => {\n        memberDepth += 1;\n        const k = visit(n.key);\n        memberDepth -= 1;\n        return k + ':' + visit(n.value);\n      }\n    };\n\n    function codegen(ast) {\n      const result = {\n        code: visit(ast),\n        globals: Object.keys(globals),\n        fields: Object.keys(fields)\n      };\n      globals = {};\n      fields = {};\n      return result;\n    }\n\n    codegen.functions = functions;\n    codegen.constants = constants;\n    return codegen;\n  }\n\n  function ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function bisector(f) {\n    let delta = f;\n    let compare = f;\n\n    if (f.length === 1) {\n      delta = (d, x) => f(d) - x;\n\n      compare = ascendingComparator(f);\n    }\n\n    function left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        const mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      }\n\n      return lo;\n    }\n\n    function right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        const mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n      }\n\n      return lo;\n    }\n\n    function center(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      const i = left(a, x, lo, hi - 1);\n      return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n    }\n\n    return {\n      left,\n      center,\n      right\n    };\n  }\n\n  function ascendingComparator(f) {\n    return (d, x) => ascending(f(d), x);\n  }\n\n  const Intersect = 'intersect';\n  const Union = 'union';\n  const VlMulti = 'vlMulti';\n  const VlPoint = 'vlPoint';\n  const Or = 'or';\n  const And = 'and';\n  const SELECTION_ID = '_vgsid_',\n        TYPE_ENUM = 'E',\n        TYPE_RANGE_INC = 'R',\n        TYPE_RANGE_EXC = 'R-E',\n        TYPE_RANGE_LE = 'R-LE',\n        TYPE_RANGE_RE = 'R-RE',\n        UNIT_INDEX = 'index:unit'; // TODO: revisit date coercion?\n\n  function testPoint(datum, entry) {\n    var fields = entry.fields,\n        values = entry.values,\n        n = fields.length,\n        i = 0,\n        dval,\n        f;\n\n    for (; i < n; ++i) {\n      f = fields[i];\n      f.getter = field$1.getter || field$1(f.field);\n      dval = f.getter(datum);\n      if (isDate$1(dval)) dval = toNumber(dval);\n      if (isDate$1(values[i])) values[i] = toNumber(values[i]);\n      if (isDate$1(values[i][0])) values[i] = values[i].map(toNumber);\n\n      if (f.type === TYPE_ENUM) {\n        // Enumerated fields can either specify individual values (single/multi selections)\n        // or an array of values (interval selections).\n        if (isArray(values[i]) ? values[i].indexOf(dval) < 0 : dval !== values[i]) {\n          return false;\n        }\n      } else {\n        if (f.type === TYPE_RANGE_INC) {\n          if (!inrange(dval, values[i])) return false;\n        } else if (f.type === TYPE_RANGE_RE) {\n          // Discrete selection of bins test within the range [bin_start, bin_end).\n          if (!inrange(dval, values[i], true, false)) return false;\n        } else if (f.type === TYPE_RANGE_EXC) {\n          // 'R-E'/'R-LE' included for completeness.\n          if (!inrange(dval, values[i], false, false)) return false;\n        } else if (f.type === TYPE_RANGE_LE) {\n          if (!inrange(dval, values[i], false, true)) return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Tests if a tuple is contained within an interactive selection.\n   * @param {string} name - The name of the data set representing the selection.\n   *  Tuples in the dataset are of the form\n   *  {unit: string, fields: array<fielddef>, values: array<*>}.\n   *  Fielddef is of the form\n   *  {field: string, channel: string, type: 'E' | 'R'} where\n   *  'type' identifies whether tuples in the dataset enumerate\n   *  values for the field, or specify a continuous range.\n   * @param {object} datum - The tuple to test for inclusion.\n   * @param {string} op - The set operation for combining selections.\n   *   One of 'intersect' or 'union' (default).\n   * @return {boolean} - True if the datum is in the selection, false otherwise.\n   */\n\n\n  function selectionTest(name, datum, op) {\n    var data = this.context.data[name],\n        entries = data ? data.values.value : [],\n        unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,\n        intersect = op === Intersect,\n        n = entries.length,\n        i = 0,\n        entry,\n        miss,\n        count,\n        unit,\n        b;\n\n    for (; i < n; ++i) {\n      entry = entries[i];\n\n      if (unitIdx && intersect) {\n        // multi selections union within the same unit and intersect across units.\n        miss = miss || {};\n        count = miss[unit = entry.unit] || 0; // if we've already matched this unit, skip.\n\n        if (count === -1) continue;\n        b = testPoint(datum, entry);\n        miss[unit] = b ? -1 : ++count; // if we match and there are no other units return true\n        // if we've missed against all tuples in this unit return false\n\n        if (b && unitIdx.size === 1) return true;\n        if (!b && count === unitIdx.get(unit).count) return false;\n      } else {\n        b = testPoint(datum, entry); // if we find a miss and we do require intersection return false\n        // if we find a match and we don't require intersection return true\n\n        if (intersect ^ b) return b;\n      }\n    } // if intersecting and we made it here, then we saw no misses\n    // if not intersecting, then we saw no matches\n    // if no active selections, return false\n\n\n    return n && intersect;\n  }\n\n  const selectionId = field$1(SELECTION_ID),\n        bisect = bisector(selectionId),\n        bisectLeft = bisect.left,\n        bisectRight = bisect.right;\n\n  function selectionIdTest(name, datum, op) {\n    const data = this.context.data[name],\n          entries = data ? data.values.value : [],\n          unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,\n          intersect = op === Intersect,\n          value = selectionId(datum),\n          index = bisectLeft(entries, value);\n    if (index === entries.length) return false;\n    if (selectionId(entries[index]) !== value) return false;\n\n    if (unitIdx && intersect) {\n      if (unitIdx.size === 1) return true;\n      if (bisectRight(entries, value) - index < unitIdx.size) return false;\n    }\n\n    return true;\n  }\n  /**\n   * Maps an array of scene graph items to an array of selection tuples.\n   * @param {string} name  - The name of the dataset representing the selection.\n   * @param {string} unit  - The name of the unit view.\n   *\n   * @returns {array} An array of selection entries for the given unit.\n   */\n\n\n  function selectionTuples(array, base) {\n    return array.map(x => extend$1({\n      values: base.fields.map(f => (f.getter || (f.getter = field$1(f.field)))(x.datum))\n    }, base));\n  }\n  /**\n   * Resolves selection for use as a scale domain or reads via the API.\n   * @param {string} name - The name of the dataset representing the selection\n   * @param {string} [op='union'] - The set operation for combining selections.\n   *                 One of 'intersect' or 'union' (default).\n   * @param {boolean} isMulti - Identifies a \"multi\" selection to perform more\n   *                 expensive resolution computation.\n   * @param {boolean} vl5 - With Vega-Lite v5, \"multi\" selections are now called \"point\"\n   *                 selections, and thus the resolved tuple should reflect this name.\n   *                 This parameter allows us to reflect this change without triggering\n   *                 a major version bump for Vega.\n   * @returns {object} An object of selected fields and values.\n   */\n\n\n  function selectionResolve(name, op, isMulti, vl5) {\n    var data = this.context.data[name],\n        entries = data ? data.values.value : [],\n        resolved = {},\n        multiRes = {},\n        types = {},\n        entry,\n        fields,\n        values,\n        unit,\n        field,\n        res,\n        resUnit,\n        type,\n        union,\n        n = entries.length,\n        i = 0,\n        j,\n        m; // First union all entries within the same unit.\n\n    for (; i < n; ++i) {\n      entry = entries[i];\n      unit = entry.unit;\n      fields = entry.fields;\n      values = entry.values;\n\n      for (j = 0, m = fields.length; j < m; ++j) {\n        field = fields[j];\n        res = resolved[field.field] || (resolved[field.field] = {});\n        resUnit = res[unit] || (res[unit] = []);\n        types[field.field] = type = field.type.charAt(0);\n        union = ops[type + '_union'];\n        res[unit] = union(resUnit, array$5(values[j]));\n      } // If the same multi-selection is repeated over views and projected over\n      // an encoding, it may operate over different fields making it especially\n      // tricky to reliably resolve it. At best, we can de-dupe identical entries\n      // but doing so may be more computationally expensive than it is worth.\n      // Instead, for now, we simply transform our store representation into\n      // a more human-friendly one.\n\n\n      if (isMulti) {\n        resUnit = multiRes[unit] || (multiRes[unit] = []);\n        resUnit.push(array$5(values).reduce((obj, curr, j) => (obj[fields[j].field] = curr, obj), {}));\n      }\n    } // Then resolve fields across units as per the op.\n\n\n    op = op || Union;\n    Object.keys(resolved).forEach(field => {\n      resolved[field] = Object.keys(resolved[field]).map(unit => resolved[field][unit]).reduce((acc, curr) => acc === undefined ? curr : ops[types[field] + '_' + op](acc, curr));\n    });\n    entries = Object.keys(multiRes);\n\n    if (isMulti && entries.length) {\n      const key = vl5 ? VlPoint : VlMulti;\n      resolved[key] = op === Union ? {\n        [Or]: entries.reduce((acc, k) => (acc.push(...multiRes[k]), acc), [])\n      } : {\n        [And]: entries.map(k => ({\n          [Or]: multiRes[k]\n        }))\n      };\n    }\n\n    return resolved;\n  }\n\n  var ops = {\n    E_union: function (base, value) {\n      if (!base.length) return value;\n      var i = 0,\n          n = value.length;\n\n      for (; i < n; ++i) if (base.indexOf(value[i]) < 0) base.push(value[i]);\n\n      return base;\n    },\n    E_intersect: function (base, value) {\n      return !base.length ? value : base.filter(v => value.indexOf(v) >= 0);\n    },\n    R_union: function (base, value) {\n      var lo = toNumber(value[0]),\n          hi = toNumber(value[1]);\n\n      if (lo > hi) {\n        lo = value[1];\n        hi = value[0];\n      }\n\n      if (!base.length) return [lo, hi];\n      if (base[0] > lo) base[0] = lo;\n      if (base[1] < hi) base[1] = hi;\n      return base;\n    },\n    R_intersect: function (base, value) {\n      var lo = toNumber(value[0]),\n          hi = toNumber(value[1]);\n\n      if (lo > hi) {\n        lo = value[1];\n        hi = value[0];\n      }\n\n      if (!base.length) return [lo, hi];\n\n      if (hi < base[0] || base[1] < lo) {\n        return [];\n      } else {\n        if (base[0] < lo) base[0] = lo;\n        if (base[1] > hi) base[1] = hi;\n      }\n\n      return base;\n    }\n  };\n  const DataPrefix$1 = ':',\n        IndexPrefix$1 = '@';\n\n  function selectionVisitor(name, args, scope, params) {\n    if (args[0].type !== Literal) error('First argument to selection functions must be a string literal.');\n    const data = args[0].value,\n          op = args.length >= 2 && peek$1(args).value,\n          field = 'unit',\n          indexName = IndexPrefix$1 + field,\n          dataName = DataPrefix$1 + data; // eslint-disable-next-line no-prototype-builtins\n\n    if (op === Intersect && !has$1(params, indexName)) {\n      params[indexName] = scope.getData(data).indataRef(scope, field);\n    } // eslint-disable-next-line no-prototype-builtins\n\n\n    if (!has$1(params, dataName)) {\n      params[dataName] = scope.getData(data).tuplesRef();\n    }\n  }\n\n  function data$1(name) {\n    const data = this.context.data[name];\n    return data ? data.values.value : [];\n  }\n\n  function indata(name, field, value) {\n    const index = this.context.data[name]['index:' + field],\n          entry = index ? index.value.get(value) : undefined;\n    return entry ? entry.count : entry;\n  }\n\n  function setdata(name, tuples) {\n    const df = this.context.dataflow,\n          data = this.context.data[name],\n          input = data.input;\n    df.pulse(input, df.changeset().remove(truthy).insert(tuples));\n    return 1;\n  }\n\n  function encode(item, name, retval) {\n    if (item) {\n      const df = this.context.dataflow,\n            target = item.mark.source;\n      df.pulse(target, df.changeset().encode(item, name));\n    }\n\n    return retval !== undefined ? retval : item;\n  }\n\n  const wrap = method => function (value, spec) {\n    const locale = this.context.dataflow.locale();\n    return locale[method](spec)(value);\n  };\n\n  const format = wrap('format');\n  const timeFormat = wrap('timeFormat');\n  const utcFormat = wrap('utcFormat');\n  const timeParse = wrap('timeParse');\n  const utcParse = wrap('utcParse');\n  const dateObj = new Date(2000, 0, 1);\n\n  function time(month, day, specifier) {\n    if (!Number.isInteger(month) || !Number.isInteger(day)) return '';\n    dateObj.setYear(2000);\n    dateObj.setMonth(month);\n    dateObj.setDate(day);\n    return timeFormat.call(this, dateObj, specifier);\n  }\n\n  function monthFormat(month) {\n    return time.call(this, month, 1, '%B');\n  }\n\n  function monthAbbrevFormat(month) {\n    return time.call(this, month, 1, '%b');\n  }\n\n  function dayFormat(day) {\n    return time.call(this, 0, 2 + day, '%A');\n  }\n\n  function dayAbbrevFormat(day) {\n    return time.call(this, 0, 2 + day, '%a');\n  }\n\n  const DataPrefix = ':';\n  const IndexPrefix = '@';\n  const ScalePrefix = '%';\n  const SignalPrefix = '$';\n\n  function dataVisitor(name, args, scope, params) {\n    if (args[0].type !== Literal) {\n      error('First argument to data functions must be a string literal.');\n    }\n\n    const data = args[0].value,\n          dataName = DataPrefix + data;\n\n    if (!has$1(dataName, params)) {\n      try {\n        params[dataName] = scope.getData(data).tuplesRef();\n      } catch (err) {// if data set does not exist, there's nothing to track\n      }\n    }\n  }\n\n  function indataVisitor(name, args, scope, params) {\n    if (args[0].type !== Literal) error('First argument to indata must be a string literal.');\n    if (args[1].type !== Literal) error('Second argument to indata must be a string literal.');\n    const data = args[0].value,\n          field = args[1].value,\n          indexName = IndexPrefix + field;\n\n    if (!has$1(indexName, params)) {\n      params[indexName] = scope.getData(data).indataRef(scope, field);\n    }\n  }\n\n  function scaleVisitor(name, args, scope, params) {\n    if (args[0].type === Literal) {\n      // add scale dependency\n      addScaleDependency(scope, params, args[0].value);\n    } else {\n      // indirect scale lookup; add all scales as parameters\n      for (name in scope.scales) {\n        addScaleDependency(scope, params, name);\n      }\n    }\n  }\n\n  function addScaleDependency(scope, params, name) {\n    const scaleName = ScalePrefix + name;\n\n    if (!has$1(params, scaleName)) {\n      try {\n        params[scaleName] = scope.scaleRef(name);\n      } catch (err) {// TODO: error handling? warning?\n      }\n    }\n  }\n\n  function getScale(name, ctx) {\n    let s;\n    return isFunction(name) ? name : isString(name) ? (s = ctx.scales[name]) && s.value : undefined;\n  }\n\n  function internalScaleFunctions(codegen, fnctx, visitors) {\n    // add helper method to the 'this' expression function context\n    fnctx.__bandwidth = s => s && s.bandwidth ? s.bandwidth() : 0; // register AST visitors for internal scale functions\n\n\n    visitors._bandwidth = scaleVisitor;\n    visitors._range = scaleVisitor;\n    visitors._scale = scaleVisitor; // resolve scale reference directly to the signal hash argument\n\n    const ref = arg => '_[' + (arg.type === Literal ? $(ScalePrefix + arg.value) : $(ScalePrefix) + '+' + codegen(arg)) + ']'; // define and return internal scale function code generators\n    // these internal functions are called by mark encoders\n\n\n    return {\n      _bandwidth: args => `this.__bandwidth(${ref(args[0])})`,\n      _range: args => `${ref(args[0])}.range()`,\n      _scale: args => `${ref(args[0])}(${codegen(args[1])})`\n    };\n  }\n\n  function geoMethod(methodName, globalMethod) {\n    return function (projection, geojson, group) {\n      if (projection) {\n        // projection defined, use it\n        const p = getScale(projection, (group || this).context);\n        return p && p.path[methodName](geojson);\n      } else {\n        // projection undefined, use global method\n        return globalMethod(geojson);\n      }\n    };\n  }\n\n  const geoArea = geoMethod('area', geoArea$1);\n  const geoBounds = geoMethod('bounds', geoBounds$1);\n  const geoCentroid = geoMethod('centroid', geoCentroid$1);\n\n  function inScope(item) {\n    const group = this.context.group;\n    let value = false;\n    if (group) while (item) {\n      if (item === group) {\n        value = true;\n        break;\n      }\n\n      item = item.mark.group;\n    }\n    return value;\n  }\n\n  function log(df, method, args) {\n    try {\n      df[method].apply(df, ['EXPRESSION'].concat([].slice.call(args)));\n    } catch (err) {\n      df.warn(err);\n    }\n\n    return args[args.length - 1];\n  }\n\n  function warn() {\n    return log(this.context.dataflow, 'warn', arguments);\n  }\n\n  function info() {\n    return log(this.context.dataflow, 'info', arguments);\n  }\n\n  function debug() {\n    return log(this.context.dataflow, 'debug', arguments);\n  }\n\n  function channel_luminance_value(channelValue) {\n    const val = channelValue / 255;\n\n    if (val <= 0.03928) {\n      return val / 12.92;\n    }\n\n    return Math.pow((val + 0.055) / 1.055, 2.4);\n  }\n\n  function luminance(color) {\n    const c = rgb$1(color),\n          r = channel_luminance_value(c.r),\n          g = channel_luminance_value(c.g),\n          b = channel_luminance_value(c.b);\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  } // https://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n\n\n  function contrast(color1, color2) {\n    const lum1 = luminance(color1),\n          lum2 = luminance(color2),\n          lumL = Math.max(lum1, lum2),\n          lumD = Math.min(lum1, lum2);\n    return (lumL + 0.05) / (lumD + 0.05);\n  }\n\n  function merge() {\n    const args = [].slice.call(arguments);\n    args.unshift({});\n    return extend$1(...args);\n  }\n\n  function equal(a, b) {\n    return a === b || a !== a && b !== b ? true : isArray(a) ? isArray(b) && a.length === b.length ? equalArray(a, b) : false : isObject(a) && isObject(b) ? equalObject(a, b) : false;\n  }\n\n  function equalArray(a, b) {\n    for (let i = 0, n = a.length; i < n; ++i) {\n      if (!equal(a[i], b[i])) return false;\n    }\n\n    return true;\n  }\n\n  function equalObject(a, b) {\n    for (const key in a) {\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  function removePredicate(props) {\n    return _ => equalObject(props, _);\n  }\n\n  function modify(name, insert, remove, toggle, modify, values) {\n    const df = this.context.dataflow,\n          data = this.context.data[name],\n          input = data.input,\n          stamp = df.stamp();\n    let changes = data.changes,\n        predicate,\n        key;\n\n    if (df._trigger === false || !(input.value.length || insert || toggle)) {\n      // nothing to do!\n      return 0;\n    }\n\n    if (!changes || changes.stamp < stamp) {\n      data.changes = changes = df.changeset();\n      changes.stamp = stamp;\n      df.runAfter(() => {\n        data.modified = true;\n        df.pulse(input, changes).run();\n      }, true, 1);\n    }\n\n    if (remove) {\n      predicate = remove === true ? truthy : isArray(remove) || isTuple(remove) ? remove : removePredicate(remove);\n      changes.remove(predicate);\n    }\n\n    if (insert) {\n      changes.insert(insert);\n    }\n\n    if (toggle) {\n      predicate = removePredicate(toggle);\n\n      if (input.value.some(predicate)) {\n        changes.remove(predicate);\n      } else {\n        changes.insert(toggle);\n      }\n    }\n\n    if (modify) {\n      for (key in values) {\n        changes.modify(modify, key, values[key]);\n      }\n    }\n\n    return 1;\n  }\n\n  function pinchDistance(event) {\n    const t = event.touches,\n          dx = t[0].clientX - t[1].clientX,\n          dy = t[0].clientY - t[1].clientY;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  function pinchAngle(event) {\n    const t = event.touches;\n    return Math.atan2(t[0].clientY - t[1].clientY, t[0].clientX - t[1].clientX);\n  }\n\n  const accessors = {};\n\n  function pluck(data, name) {\n    const accessor = accessors[name] || (accessors[name] = field$1(name));\n    return isArray(data) ? data.map(accessor) : accessor(data);\n  }\n\n  function array(seq) {\n    return isArray(seq) || ArrayBuffer.isView(seq) ? seq : null;\n  }\n\n  function sequence(seq) {\n    return array(seq) || (isString(seq) ? seq : null);\n  }\n\n  function join(seq, ...args) {\n    return array(seq).join(...args);\n  }\n\n  function indexof(seq, ...args) {\n    return sequence(seq).indexOf(...args);\n  }\n\n  function lastindexof(seq, ...args) {\n    return sequence(seq).lastIndexOf(...args);\n  }\n\n  function slice(seq, ...args) {\n    return sequence(seq).slice(...args);\n  }\n\n  function replace(str, pattern, repl) {\n    if (isFunction(repl)) error('Function argument passed to replace.');\n    return String(str).replace(pattern, repl);\n  }\n\n  function reverse(seq) {\n    return array(seq).slice().reverse();\n  }\n\n  function bandspace(count, paddingInner, paddingOuter) {\n    return bandSpace(count || 0, paddingInner || 0, paddingOuter || 0);\n  }\n\n  function bandwidth(name, group) {\n    const s = getScale(name, (group || this).context);\n    return s && s.bandwidth ? s.bandwidth() : 0;\n  }\n\n  function copy(name, group) {\n    const s = getScale(name, (group || this).context);\n    return s ? s.copy() : undefined;\n  }\n\n  function domain(name, group) {\n    const s = getScale(name, (group || this).context);\n    return s ? s.domain() : [];\n  }\n\n  function invert(name, range, group) {\n    const s = getScale(name, (group || this).context);\n    return !s ? undefined : isArray(range) ? (s.invertRange || s.invert)(range) : (s.invert || s.invertExtent)(range);\n  }\n\n  function range$1(name, group) {\n    const s = getScale(name, (group || this).context);\n    return s && s.range ? s.range() : [];\n  }\n\n  function scale$2(name, value, group) {\n    const s = getScale(name, (group || this).context);\n    return s ? s(value) : undefined;\n  }\n\n  function scaleGradient(scale, p0, p1, count, group) {\n    scale = getScale(scale, (group || this).context);\n    const gradient = Gradient$1(p0, p1);\n    let stops = scale.domain(),\n        min = stops[0],\n        max = peek$1(stops),\n        fraction = identity$6;\n\n    if (!(max - min)) {\n      // expand scale if domain has zero span, fix #1479\n      scale = (scale.interpolator ? scale$4('sequential')().interpolator(scale.interpolator()) : scale$4('linear')().interpolate(scale.interpolate()).range(scale.range())).domain([min = 0, max = 1]);\n    } else {\n      fraction = scaleFraction(scale, min, max);\n    }\n\n    if (scale.ticks) {\n      stops = scale.ticks(+count || 15);\n      if (min !== stops[0]) stops.unshift(min);\n      if (max !== peek$1(stops)) stops.push(max);\n    }\n\n    stops.forEach(_ => gradient.stop(fraction(_), scale(_)));\n    return gradient;\n  }\n\n  function geoShape(projection, geojson, group) {\n    const p = getScale(projection, (group || this).context);\n    return function (context) {\n      return p ? p.path.context(context)(geojson) : '';\n    };\n  }\n\n  function pathShape(path) {\n    let p = null;\n    return function (context) {\n      return context ? pathRender(context, p = p || pathParse(path)) : path;\n    };\n  }\n\n  const datum = d => d.data;\n\n  function treeNodes(name, context) {\n    const tree = data$1.call(context, name);\n    return tree.root && tree.root.lookup || {};\n  }\n\n  function treePath(name, source, target) {\n    const nodes = treeNodes(name, this),\n          s = nodes[source],\n          t = nodes[target];\n    return s && t ? s.path(t).map(datum) : undefined;\n  }\n\n  function treeAncestors(name, node) {\n    const n = treeNodes(name, this)[node];\n    return n ? n.ancestors().map(datum) : undefined;\n  }\n\n  const _window = () => typeof window !== 'undefined' && window || null;\n\n  function screen() {\n    const w = _window();\n\n    return w ? w.screen : {};\n  }\n\n  function windowSize() {\n    const w = _window();\n\n    return w ? [w.innerWidth, w.innerHeight] : [undefined, undefined];\n  }\n\n  function containerSize() {\n    const view = this.context.dataflow,\n          el = view.container && view.container();\n    return el ? [el.clientWidth, el.clientHeight] : [undefined, undefined];\n  }\n\n  function intersect(b, opt, group) {\n    if (!b) return [];\n    const [u, v] = b,\n          box = new Bounds().set(u[0], u[1], v[0], v[1]),\n          scene = group || this.context.dataflow.scenegraph().root;\n    return intersect$2(scene, box, filter(opt));\n  }\n\n  function filter(opt) {\n    let p = null;\n\n    if (opt) {\n      const types = array$5(opt.marktype),\n            names = array$5(opt.markname);\n\n      p = _ => (!types.length || types.some(t => _.marktype === t)) && (!names.length || names.some(s => _.name === s));\n    }\n\n    return p;\n  }\n\n  const functionContext = {\n    random() {\n      return exports.random();\n    },\n\n    // override default\n    cumulativeNormal,\n    cumulativeLogNormal,\n    cumulativeUniform,\n    densityNormal,\n    densityLogNormal,\n    densityUniform,\n    quantileNormal,\n    quantileLogNormal,\n    quantileUniform,\n    sampleNormal,\n    sampleLogNormal,\n    sampleUniform,\n    isArray,\n    isBoolean: isBoolean$1,\n    isDate: isDate$1,\n\n    isDefined(_) {\n      return _ !== undefined;\n    },\n\n    isNumber: isNumber$1,\n    isObject,\n    isRegExp,\n    isString,\n    isTuple,\n\n    isValid(_) {\n      return _ != null && _ === _;\n    },\n\n    toBoolean,\n    toDate,\n    toNumber,\n    toString,\n    indexof,\n    join,\n    lastindexof,\n    replace,\n    reverse,\n    slice,\n    flush,\n    lerp,\n    merge,\n    pad: pad$2,\n    peek: peek$1,\n    pluck,\n    span,\n    inrange,\n    truncate: truncate$1,\n    rgb: rgb$1,\n    lab: lab$1,\n    hcl: hcl$2,\n    hsl: hsl$2,\n    luminance,\n    contrast,\n    sequence: range$1$1,\n    format,\n    utcFormat,\n    utcParse,\n    utcOffset,\n    utcSequence,\n    timeFormat,\n    timeParse,\n    timeOffset,\n    timeSequence,\n    timeUnitSpecifier,\n    monthFormat,\n    monthAbbrevFormat,\n    dayFormat,\n    dayAbbrevFormat,\n    quarter,\n    utcquarter,\n    week,\n    utcweek,\n    dayofyear,\n    utcdayofyear,\n    warn,\n    info,\n    debug,\n    extent,\n    inScope,\n    intersect,\n    clampRange,\n    pinchDistance,\n    pinchAngle,\n    screen,\n    containerSize,\n    windowSize,\n    bandspace,\n    setdata,\n    pathShape,\n    panLinear,\n    panLog,\n    panPow,\n    panSymlog,\n    zoomLinear,\n    zoomLog,\n    zoomPow,\n    zoomSymlog,\n    encode,\n    modify\n  };\n  const eventFunctions = ['view', 'item', 'group', 'xy', 'x', 'y'],\n        // event functions\n  eventPrefix = 'event.vega.',\n        // event function prefix\n  thisPrefix = 'this.',\n        // function context prefix\n  astVisitors = {}; // AST visitors for dependency analysis\n  // export code generator parameters\n\n  const codegenParams = {\n    forbidden: ['_'],\n    allowed: ['datum', 'event', 'item'],\n    fieldvar: 'datum',\n    globalvar: id => `_[${$(SignalPrefix + id)}]`,\n    functions: buildFunctions,\n    constants: Constants,\n    visitors: astVisitors\n  }; // export code generator\n\n  const codeGenerator = codegen(codegenParams); // Build expression function registry\n\n  function buildFunctions(codegen) {\n    const fn = Functions(codegen);\n    eventFunctions.forEach(name => fn[name] = eventPrefix + name);\n\n    for (const name in functionContext) {\n      fn[name] = thisPrefix + name;\n    }\n\n    extend$1(fn, internalScaleFunctions(codegen, functionContext, astVisitors));\n    return fn;\n  } // Register an expression function\n\n\n  function expressionFunction(name, fn, visitor) {\n    if (arguments.length === 1) {\n      return functionContext[name];\n    } // register with the functionContext\n\n\n    functionContext[name] = fn; // if there is an astVisitor register that, too\n\n    if (visitor) astVisitors[name] = visitor; // if the code generator has already been initialized,\n    // we need to also register the function with it\n\n    if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;\n    return this;\n  } // register expression functions with ast visitors\n\n\n  expressionFunction('bandwidth', bandwidth, scaleVisitor);\n  expressionFunction('copy', copy, scaleVisitor);\n  expressionFunction('domain', domain, scaleVisitor);\n  expressionFunction('range', range$1, scaleVisitor);\n  expressionFunction('invert', invert, scaleVisitor);\n  expressionFunction('scale', scale$2, scaleVisitor);\n  expressionFunction('gradient', scaleGradient, scaleVisitor);\n  expressionFunction('geoArea', geoArea, scaleVisitor);\n  expressionFunction('geoBounds', geoBounds, scaleVisitor);\n  expressionFunction('geoCentroid', geoCentroid, scaleVisitor);\n  expressionFunction('geoShape', geoShape, scaleVisitor);\n  expressionFunction('indata', indata, indataVisitor);\n  expressionFunction('data', data$1, dataVisitor);\n  expressionFunction('treePath', treePath, dataVisitor);\n  expressionFunction('treeAncestors', treeAncestors, dataVisitor); // register Vega-Lite selection functions\n\n  expressionFunction('vlSelectionTest', selectionTest, selectionVisitor);\n  expressionFunction('vlSelectionIdTest', selectionIdTest, selectionVisitor);\n  expressionFunction('vlSelectionResolve', selectionResolve, selectionVisitor);\n  expressionFunction('vlSelectionTuples', selectionTuples);\n\n  function parser(expr, scope) {\n    const params = {}; // parse the expression to an abstract syntax tree (ast)\n\n    let ast;\n\n    try {\n      expr = isString(expr) ? expr : $(expr) + '';\n      ast = parser$1(expr);\n    } catch (err) {\n      error('Expression parse error: ' + expr);\n    } // analyze ast function calls for dependencies\n\n\n    ast.visit(node => {\n      if (node.type !== CallExpression) return;\n      const name = node.callee.name,\n            visit = codegenParams.visitors[name];\n      if (visit) visit(name, node.arguments, scope, params);\n    }); // perform code generation\n\n    const gen = codeGenerator(ast); // collect signal dependencies\n\n    gen.globals.forEach(name => {\n      const signalName = SignalPrefix + name;\n\n      if (!has$1(params, signalName) && scope.getSignal(name)) {\n        params[signalName] = scope.signalRef(name);\n      }\n    }); // return generated expression code and dependencies\n\n    return {\n      $expr: extend$1({\n        code: gen.code\n      }, scope.options.ast ? {\n        ast\n      } : null),\n      $fields: gen.fields,\n      $params: params\n    };\n  }\n\n  /**\n   * Parse a serialized dataflow specification.\n   */\n\n  function parse$2(spec) {\n    const ctx = this,\n          operators = spec.operators || []; // parse background\n\n    if (spec.background) {\n      ctx.background = spec.background;\n    } // parse event configuration\n\n\n    if (spec.eventConfig) {\n      ctx.eventConfig = spec.eventConfig;\n    } // parse locale configuration\n\n\n    if (spec.locale) {\n      ctx.locale = spec.locale;\n    } // parse operators\n\n\n    operators.forEach(entry => ctx.parseOperator(entry)); // parse operator parameters\n\n    operators.forEach(entry => ctx.parseOperatorParameters(entry)); // parse streams\n\n    (spec.streams || []).forEach(entry => ctx.parseStream(entry)); // parse updates\n\n    (spec.updates || []).forEach(entry => ctx.parseUpdate(entry));\n    return ctx.resolve();\n  }\n\n  const Skip$2 = toSet(['rule']),\n        Swap = toSet(['group', 'image', 'rect']);\n\n  function adjustSpatial(encode, marktype) {\n    let code = '';\n    if (Skip$2[marktype]) return code;\n\n    if (encode.x2) {\n      if (encode.x) {\n        if (Swap[marktype]) {\n          code += 'if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;';\n        }\n\n        code += 'o.width=o.x2-o.x;';\n      } else {\n        code += 'o.x=o.x2-(o.width||0);';\n      }\n    }\n\n    if (encode.xc) {\n      code += 'o.x=o.xc-(o.width||0)/2;';\n    }\n\n    if (encode.y2) {\n      if (encode.y) {\n        if (Swap[marktype]) {\n          code += 'if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;';\n        }\n\n        code += 'o.height=o.y2-o.y;';\n      } else {\n        code += 'o.y=o.y2-(o.height||0);';\n      }\n    }\n\n    if (encode.yc) {\n      code += 'o.y=o.yc-(o.height||0)/2;';\n    }\n\n    return code;\n  }\n\n  function canonicalType(type) {\n    return (type + '').toLowerCase();\n  }\n\n  function isOperator(type) {\n    return canonicalType(type) === 'operator';\n  }\n\n  function isCollect(type) {\n    return canonicalType(type) === 'collect';\n  }\n\n  function expression(ctx, args, code) {\n    // wrap code in return statement if expression does not terminate\n    if (code[code.length - 1] !== ';') {\n      code = 'return(' + code + ');';\n    }\n\n    const fn = Function(...args.concat(code));\n    return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;\n  } // generate code for comparing a single field\n\n\n  function _compare(u, v, lt, gt) {\n    return `((u = ${u}) < (v = ${v}) || u == null) && v != null ? ${lt}\n  : (u > v || v == null) && u != null ? ${gt}\n  : ((v = v instanceof Date ? +v : v), (u = u instanceof Date ? +u : u)) !== u && v === v ? ${lt}\n  : v !== v && u === u ? ${gt} : `;\n  }\n\n  var expressionCodegen = {\n    /**\n     * Parse an expression used to update an operator value.\n     */\n    operator: (ctx, expr) => expression(ctx, ['_'], expr.code),\n\n    /**\n     * Parse an expression provided as an operator parameter value.\n     */\n    parameter: (ctx, expr) => expression(ctx, ['datum', '_'], expr.code),\n\n    /**\n     * Parse an expression applied to an event stream.\n     */\n    event: (ctx, expr) => expression(ctx, ['event'], expr.code),\n\n    /**\n     * Parse an expression used to handle an event-driven operator update.\n     */\n    handler: (ctx, expr) => {\n      const code = `var datum=event.item&&event.item.datum;return ${expr.code};`;\n      return expression(ctx, ['_', 'event'], code);\n    },\n\n    /**\n     * Parse an expression that performs visual encoding.\n     */\n    encode: (ctx, encode) => {\n      const {\n        marktype,\n        channels\n      } = encode;\n      let code = 'var o=item,datum=o.datum,m=0,$;';\n\n      for (const name in channels) {\n        const o = 'o[' + $(name) + ']';\n        code += `$=${channels[name].code};if(${o}!==$)${o}=$,m=1;`;\n      }\n\n      code += adjustSpatial(channels, marktype);\n      code += 'return m;';\n      return expression(ctx, ['item', '_'], code);\n    },\n\n    /**\n     * Optimized code generators for access and comparison.\n     */\n    codegen: {\n      get(path) {\n        const ref = `[${path.map($).join('][')}]`;\n        const get = Function('_', `return _${ref};`);\n        get.path = ref;\n        return get;\n      },\n\n      comparator(fields, orders) {\n        let t;\n\n        const map = (f, i) => {\n          const o = orders[i];\n          let u, v;\n\n          if (f.path) {\n            u = `a${f.path}`;\n            v = `b${f.path}`;\n          } else {\n            (t = t || {})['f' + i] = f;\n            u = `this.f${i}(a)`;\n            v = `this.f${i}(b)`;\n          }\n\n          return _compare(u, v, -o, o);\n        };\n\n        const fn = Function('a', 'b', 'var u, v; return ' + fields.map(map).join('') + '0;');\n        return t ? fn.bind(t) : fn;\n      }\n\n    }\n  };\n  /**\n   * Parse a dataflow operator.\n   */\n\n  function parseOperator(spec) {\n    const ctx = this;\n\n    if (isOperator(spec.type) || !spec.type) {\n      ctx.operator(spec, spec.update ? ctx.operatorExpression(spec.update) : null);\n    } else {\n      ctx.transform(spec, spec.type);\n    }\n  }\n  /**\n   * Parse and assign operator parameters.\n   */\n\n\n  function parseOperatorParameters(spec) {\n    const ctx = this;\n\n    if (spec.params) {\n      const op = ctx.get(spec.id);\n      if (!op) error('Invalid operator id: ' + spec.id);\n      ctx.dataflow.connect(op, op.parameters(ctx.parseParameters(spec.params), spec.react, spec.initonly));\n    }\n  }\n  /**\n   * Parse a set of operator parameters.\n   */\n\n\n  function parseParameters$1(spec, params) {\n    params = params || {};\n    const ctx = this;\n\n    for (const key in spec) {\n      const value = spec[key];\n      params[key] = isArray(value) ? value.map(v => parseParameter$2(v, ctx, params)) : parseParameter$2(value, ctx, params);\n    }\n\n    return params;\n  }\n  /**\n   * Parse a single parameter.\n   */\n\n\n  function parseParameter$2(spec, ctx, params) {\n    if (!spec || !isObject(spec)) return spec;\n\n    for (let i = 0, n = PARSERS.length, p; i < n; ++i) {\n      p = PARSERS[i];\n\n      if (has$1(spec, p.key)) {\n        return p.parse(spec, ctx, params);\n      }\n    }\n\n    return spec;\n  }\n  /** Reference parsers. */\n\n\n  var PARSERS = [{\n    key: '$ref',\n    parse: getOperator\n  }, {\n    key: '$key',\n    parse: getKey\n  }, {\n    key: '$expr',\n    parse: getExpression\n  }, {\n    key: '$field',\n    parse: getField\n  }, {\n    key: '$encode',\n    parse: getEncode\n  }, {\n    key: '$compare',\n    parse: getCompare\n  }, {\n    key: '$context',\n    parse: getContext\n  }, {\n    key: '$subflow',\n    parse: getSubflow\n  }, {\n    key: '$tupleid',\n    parse: getTupleId\n  }];\n  /**\n   * Resolve an operator reference.\n   */\n\n  function getOperator(_, ctx) {\n    return ctx.get(_.$ref) || error('Operator not defined: ' + _.$ref);\n  }\n  /**\n   * Resolve an expression reference.\n   */\n\n\n  function getExpression(_, ctx, params) {\n    if (_.$params) {\n      // parse expression parameters\n      ctx.parseParameters(_.$params, params);\n    }\n\n    const k = 'e:' + _.$expr.code + '_' + _.$name;\n    return ctx.fn[k] || (ctx.fn[k] = accessor(ctx.parameterExpression(_.$expr), _.$fields, _.$name));\n  }\n  /**\n   * Resolve a key accessor reference.\n   */\n\n\n  function getKey(_, ctx) {\n    const k = 'k:' + _.$key + '_' + !!_.$flat;\n    return ctx.fn[k] || (ctx.fn[k] = key(_.$key, _.$flat, ctx.expr.codegen));\n  }\n  /**\n   * Resolve a field accessor reference.\n   */\n\n\n  function getField(_, ctx) {\n    if (!_.$field) return null;\n    const k = 'f:' + _.$field + '_' + _.$name;\n    return ctx.fn[k] || (ctx.fn[k] = field$1(_.$field, _.$name, ctx.expr.codegen));\n  }\n  /**\n   * Resolve a comparator function reference.\n   */\n\n\n  function getCompare(_, ctx) {\n    // As of Vega 5.5.3, $tupleid sort is no longer used.\n    // Keep here for now for backwards compatibility.\n    const k = 'c:' + _.$compare + '_' + _.$order,\n          c = array$5(_.$compare).map(_ => _ && _.$tupleid ? tupleid : _);\n    return ctx.fn[k] || (ctx.fn[k] = compare$1(c, _.$order, ctx.expr.codegen));\n  }\n  /**\n   * Resolve an encode operator reference.\n   */\n\n\n  function getEncode(_, ctx) {\n    const spec = _.$encode,\n          encode = {};\n\n    for (const name in spec) {\n      const enc = spec[name];\n      encode[name] = accessor(ctx.encodeExpression(enc.$expr), enc.$fields);\n      encode[name].output = enc.$output;\n    }\n\n    return encode;\n  }\n  /**\n   * Resolve a context reference.\n   */\n\n\n  function getContext(_, ctx) {\n    return ctx;\n  }\n  /**\n   * Resolve a recursive subflow specification.\n   */\n\n\n  function getSubflow(_, ctx) {\n    const spec = _.$subflow;\n    return function (dataflow, key, parent) {\n      const subctx = ctx.fork().parse(spec),\n            op = subctx.get(spec.operators[0].id),\n            p = subctx.signals.parent;\n      if (p) p.set(parent);\n\n      op.detachSubflow = () => ctx.detach(subctx);\n\n      return op;\n    };\n  }\n  /**\n   * Resolve a tuple id reference.\n   */\n\n\n  function getTupleId() {\n    return tupleid;\n  }\n  /**\n   * Parse an event stream specification.\n   */\n\n\n  function parseStream$2(spec) {\n    var ctx = this,\n        filter = spec.filter != null ? ctx.eventExpression(spec.filter) : undefined,\n        stream = spec.stream != null ? ctx.get(spec.stream) : undefined,\n        args;\n\n    if (spec.source) {\n      stream = ctx.events(spec.source, spec.type, filter);\n    } else if (spec.merge) {\n      args = spec.merge.map(_ => ctx.get(_));\n      stream = args[0].merge.apply(args[0], args.slice(1));\n    }\n\n    if (spec.between) {\n      args = spec.between.map(_ => ctx.get(_));\n      stream = stream.between(args[0], args[1]);\n    }\n\n    if (spec.filter) {\n      stream = stream.filter(filter);\n    }\n\n    if (spec.throttle != null) {\n      stream = stream.throttle(+spec.throttle);\n    }\n\n    if (spec.debounce != null) {\n      stream = stream.debounce(+spec.debounce);\n    }\n\n    if (stream == null) {\n      error('Invalid stream definition: ' + JSON.stringify(spec));\n    }\n\n    if (spec.consume) stream.consume(true);\n    ctx.stream(spec, stream);\n  }\n  /**\n   * Parse an event-driven operator update.\n   */\n\n\n  function parseUpdate$1(spec) {\n    var ctx = this,\n        srcid = isObject(srcid = spec.source) ? srcid.$ref : srcid,\n        source = ctx.get(srcid),\n        target = null,\n        update = spec.update,\n        params = undefined;\n    if (!source) error('Source not defined: ' + spec.source);\n    target = spec.target && spec.target.$expr ? ctx.eventExpression(spec.target.$expr) : ctx.get(spec.target);\n\n    if (update && update.$expr) {\n      if (update.$params) {\n        params = ctx.parseParameters(update.$params);\n      }\n\n      update = ctx.handlerExpression(update.$expr);\n    }\n\n    ctx.update(spec, source, target, update, params);\n  }\n\n  const SKIP = {\n    skip: true\n  };\n\n  function getState$1(options) {\n    var ctx = this,\n        state = {};\n\n    if (options.signals) {\n      var signals = state.signals = {};\n      Object.keys(ctx.signals).forEach(key => {\n        const op = ctx.signals[key];\n\n        if (options.signals(key, op)) {\n          signals[key] = op.value;\n        }\n      });\n    }\n\n    if (options.data) {\n      var data = state.data = {};\n      Object.keys(ctx.data).forEach(key => {\n        const dataset = ctx.data[key];\n\n        if (options.data(key, dataset)) {\n          data[key] = dataset.input.value;\n        }\n      });\n    }\n\n    if (ctx.subcontext && options.recurse !== false) {\n      state.subcontext = ctx.subcontext.map(ctx => ctx.getState(options));\n    }\n\n    return state;\n  }\n\n  function setState$1(state) {\n    var ctx = this,\n        df = ctx.dataflow,\n        data = state.data,\n        signals = state.signals;\n    Object.keys(signals || {}).forEach(key => {\n      df.update(ctx.signals[key], signals[key], SKIP);\n    });\n    Object.keys(data || {}).forEach(key => {\n      df.pulse(ctx.data[key].input, df.changeset().remove(truthy).insert(data[key]));\n    });\n    (state.subcontext || []).forEach((substate, i) => {\n      const subctx = ctx.subcontext[i];\n      if (subctx) subctx.setState(substate);\n    });\n  }\n  /**\n   * Context objects store the current parse state.\n   * Enables lookup of parsed operators, event streams, accessors, etc.\n   * Provides a 'fork' method for creating child contexts for subflows.\n   */\n\n\n  function context(df, transforms, functions, expr) {\n    return new Context(df, transforms, functions, expr);\n  }\n\n  function Context(df, transforms, functions, expr) {\n    this.dataflow = df;\n    this.transforms = transforms;\n    this.events = df.events.bind(df);\n    this.expr = expr || expressionCodegen, this.signals = {};\n    this.scales = {};\n    this.nodes = {};\n    this.data = {};\n    this.fn = {};\n\n    if (functions) {\n      this.functions = Object.create(functions);\n      this.functions.context = this;\n    }\n  }\n\n  function Subcontext(ctx) {\n    this.dataflow = ctx.dataflow;\n    this.transforms = ctx.transforms;\n    this.events = ctx.events;\n    this.expr = ctx.expr;\n    this.signals = Object.create(ctx.signals);\n    this.scales = Object.create(ctx.scales);\n    this.nodes = Object.create(ctx.nodes);\n    this.data = Object.create(ctx.data);\n    this.fn = Object.create(ctx.fn);\n\n    if (ctx.functions) {\n      this.functions = Object.create(ctx.functions);\n      this.functions.context = this;\n    }\n  }\n\n  Context.prototype = Subcontext.prototype = {\n    fork() {\n      const ctx = new Subcontext(this);\n      (this.subcontext || (this.subcontext = [])).push(ctx);\n      return ctx;\n    },\n\n    detach(ctx) {\n      this.subcontext = this.subcontext.filter(c => c !== ctx); // disconnect all nodes in the subcontext\n      // wipe out targets first for better efficiency\n\n      const keys = Object.keys(ctx.nodes);\n\n      for (const key of keys) ctx.nodes[key]._targets = null;\n\n      for (const key of keys) ctx.nodes[key].detach();\n\n      ctx.nodes = null;\n    },\n\n    get(id) {\n      return this.nodes[id];\n    },\n\n    set(id, node) {\n      return this.nodes[id] = node;\n    },\n\n    add(spec, op) {\n      const ctx = this,\n            df = ctx.dataflow,\n            data = spec.value;\n      ctx.set(spec.id, op);\n\n      if (isCollect(spec.type) && data) {\n        if (data.$ingest) {\n          df.ingest(op, data.$ingest, data.$format);\n        } else if (data.$request) {\n          df.preload(op, data.$request, data.$format);\n        } else {\n          df.pulse(op, df.changeset().insert(data));\n        }\n      }\n\n      if (spec.root) {\n        ctx.root = op;\n      }\n\n      if (spec.parent) {\n        let p = ctx.get(spec.parent.$ref);\n\n        if (p) {\n          df.connect(p, [op]);\n          op.targets().add(p);\n        } else {\n          (ctx.unresolved = ctx.unresolved || []).push(() => {\n            p = ctx.get(spec.parent.$ref);\n            df.connect(p, [op]);\n            op.targets().add(p);\n          });\n        }\n      }\n\n      if (spec.signal) {\n        ctx.signals[spec.signal] = op;\n      }\n\n      if (spec.scale) {\n        ctx.scales[spec.scale] = op;\n      }\n\n      if (spec.data) {\n        for (const name in spec.data) {\n          const data = ctx.data[name] || (ctx.data[name] = {});\n          spec.data[name].forEach(role => data[role] = op);\n        }\n      }\n    },\n\n    resolve() {\n      (this.unresolved || []).forEach(fn => fn());\n      delete this.unresolved;\n      return this;\n    },\n\n    operator(spec, update) {\n      this.add(spec, this.dataflow.add(spec.value, update));\n    },\n\n    transform(spec, type) {\n      this.add(spec, this.dataflow.add(this.transforms[canonicalType(type)]));\n    },\n\n    stream(spec, stream) {\n      this.set(spec.id, stream);\n    },\n\n    update(spec, stream, target, update, params) {\n      this.dataflow.on(stream, target, update, params, spec.options);\n    },\n\n    // expression parsing\n    operatorExpression(expr) {\n      return this.expr.operator(this, expr);\n    },\n\n    parameterExpression(expr) {\n      return this.expr.parameter(this, expr);\n    },\n\n    eventExpression(expr) {\n      return this.expr.event(this, expr);\n    },\n\n    handlerExpression(expr) {\n      return this.expr.handler(this, expr);\n    },\n\n    encodeExpression(encode) {\n      return this.expr.encode(this, encode);\n    },\n\n    // parse methods\n    parse: parse$2,\n    parseOperator,\n    parseOperatorParameters,\n    parseParameters: parseParameters$1,\n    parseStream: parseStream$2,\n    parseUpdate: parseUpdate$1,\n    // state methods\n    getState: getState$1,\n    setState: setState$1\n  };\n\n  function initializeAria(view) {\n    const el = view.container();\n\n    if (el) {\n      el.setAttribute('role', 'graphics-document');\n      el.setAttribute('aria-roleDescription', 'visualization');\n      ariaLabel(el, view.description());\n    }\n  } // update aria-label if we have a DOM container element\n\n\n  function ariaLabel(el, desc) {\n    if (el) desc == null ? el.removeAttribute('aria-label') : el.setAttribute('aria-label', desc);\n  }\n\n  function background(view) {\n    // respond to background signal\n    view.add(null, _ => {\n      view._background = _.bg;\n      view._resize = 1;\n      return _.bg;\n    }, {\n      bg: view._signals.background\n    });\n  }\n\n  const Default = 'default';\n\n  function cursor(view) {\n    // get cursor signal, add to dataflow if needed\n    const cursor = view._signals.cursor || (view._signals.cursor = view.add({\n      user: Default,\n      item: null\n    })); // evaluate cursor on each mousemove event\n\n    view.on(view.events('view', 'mousemove'), cursor, (_, event) => {\n      const value = cursor.value,\n            user = value ? isString(value) ? value : value.user : Default,\n            item = event.item && event.item.cursor || null;\n      return value && user === value.user && item == value.item ? value : {\n        user: user,\n        item: item\n      };\n    }); // when cursor signal updates, set visible cursor\n\n    view.add(null, function (_) {\n      let user = _.cursor,\n          item = this.value;\n\n      if (!isString(user)) {\n        item = user.item;\n        user = user.user;\n      }\n\n      setCursor(view, user && user !== Default ? user : item || user);\n      return item;\n    }, {\n      cursor: cursor\n    });\n  }\n\n  function setCursor(view, cursor) {\n    const el = view.globalCursor() ? typeof document !== 'undefined' && document.body : view.container();\n\n    if (el) {\n      return cursor == null ? el.style.removeProperty('cursor') : el.style.cursor = cursor;\n    }\n  }\n\n  function dataref(view, name) {\n    var data = view._runtime.data;\n\n    if (!has$1(data, name)) {\n      error('Unrecognized data set: ' + name);\n    }\n\n    return data[name];\n  }\n\n  function data(name, values) {\n    return arguments.length < 2 ? dataref(this, name).values.value : change.call(this, name, changeset().remove(truthy).insert(values));\n  }\n\n  function change(name, changes) {\n    if (!isChangeSet(changes)) {\n      error('Second argument to changes must be a changeset.');\n    }\n\n    const dataset = dataref(this, name);\n    dataset.modified = true;\n    return this.pulse(dataset.input, changes);\n  }\n\n  function insert(name, _) {\n    return change.call(this, name, changeset().insert(_));\n  }\n\n  function remove(name, _) {\n    return change.call(this, name, changeset().remove(_));\n  }\n\n  function width(view) {\n    var padding = view.padding();\n    return Math.max(0, view._viewWidth + padding.left + padding.right);\n  }\n\n  function height(view) {\n    var padding = view.padding();\n    return Math.max(0, view._viewHeight + padding.top + padding.bottom);\n  }\n\n  function offset(view) {\n    var padding = view.padding(),\n        origin = view._origin;\n    return [padding.left + origin[0], padding.top + origin[1]];\n  }\n\n  function resizeRenderer(view) {\n    var origin = offset(view),\n        w = width(view),\n        h = height(view);\n\n    view._renderer.background(view.background());\n\n    view._renderer.resize(w, h, origin);\n\n    view._handler.origin(origin);\n\n    view._resizeListeners.forEach(handler => {\n      try {\n        handler(w, h);\n      } catch (error) {\n        view.error(error);\n      }\n    });\n  }\n  /**\n   * Extend an event with additional view-specific methods.\n   * Adds a new property ('vega') to an event that provides a number\n   * of methods for querying information about the current interaction.\n   * The vega object provides the following methods:\n   *   view - Returns the backing View instance.\n   *   item - Returns the currently active scenegraph item (if any).\n   *   group - Returns the currently active scenegraph group (if any).\n   *     This method accepts a single string-typed argument indicating the name\n   *     of the desired parent group. The scenegraph will be traversed from\n   *     the item up towards the root to search for a matching group. If no\n   *     argument is provided the enclosing group for the active item is\n   *     returned, unless the item it itself a group, in which case it is\n   *     returned directly.\n   *   xy - Returns a two-element array containing the x and y coordinates for\n   *     mouse or touch events. For touch events, this is based on the first\n   *     elements in the changedTouches array. This method accepts a single\n   *     argument: either an item instance or mark name that should serve as\n   *     the reference coordinate system. If no argument is provided the\n   *     top-level view coordinate system is assumed.\n   *   x - Returns the current x-coordinate, accepts the same arguments as xy.\n   *   y - Returns the current y-coordinate, accepts the same arguments as xy.\n   * @param {Event} event - The input event to extend.\n   * @param {Item} item - The currently active scenegraph item (if any).\n   * @return {Event} - The extended input event.\n   */\n\n\n  function eventExtend(view, event, item) {\n    var r = view._renderer,\n        el = r && r.canvas(),\n        p,\n        e,\n        translate;\n\n    if (el) {\n      translate = offset(view);\n      e = event.changedTouches ? event.changedTouches[0] : event;\n      p = point(e, el);\n      p[0] -= translate[0];\n      p[1] -= translate[1];\n    }\n\n    event.dataflow = view;\n    event.item = item;\n    event.vega = extension(view, item, p);\n    return event;\n  }\n\n  function extension(view, item, point) {\n    const itemGroup = item ? item.mark.marktype === 'group' ? item : item.mark.group : null;\n\n    function group(name) {\n      var g = itemGroup,\n          i;\n      if (name) for (i = item; i; i = i.mark.group) {\n        if (i.mark.name === name) {\n          g = i;\n          break;\n        }\n      }\n      return g && g.mark && g.mark.interactive ? g : {};\n    }\n\n    function xy(item) {\n      if (!item) return point;\n      if (isString(item)) item = group(item);\n      const p = point.slice();\n\n      while (item) {\n        p[0] -= item.x || 0;\n        p[1] -= item.y || 0;\n        item = item.mark && item.mark.group;\n      }\n\n      return p;\n    }\n\n    return {\n      view: constant$4(view),\n      item: constant$4(item || {}),\n      group: group,\n      xy: xy,\n      x: item => xy(item)[0],\n      y: item => xy(item)[1]\n    };\n  }\n\n  const VIEW$1 = 'view',\n        TIMER = 'timer',\n        WINDOW = 'window',\n        NO_TRAP = {\n    trap: false\n  };\n  /**\n   * Initialize event handling configuration.\n   * @param {object} config - The configuration settings.\n   * @return {object}\n   */\n\n  function initializeEventConfig(config) {\n    const events = extend$1({\n      defaults: {}\n    }, config);\n\n    const unpack = (obj, keys) => {\n      keys.forEach(k => {\n        if (isArray(obj[k])) obj[k] = toSet(obj[k]);\n      });\n    };\n\n    unpack(events.defaults, ['prevent', 'allow']);\n    unpack(events, ['view', 'window', 'selector']);\n    return events;\n  }\n\n  function trackEventListener(view, sources, type, handler) {\n    view._eventListeners.push({\n      type: type,\n      sources: array$5(sources),\n      handler: handler\n    });\n  }\n\n  function prevent(view, type) {\n    var def = view._eventConfig.defaults,\n        prevent = def.prevent,\n        allow = def.allow;\n    return prevent === false || allow === true ? false : prevent === true || allow === false ? true : prevent ? prevent[type] : allow ? !allow[type] : view.preventDefault();\n  }\n\n  function permit(view, key, type) {\n    const rule = view._eventConfig && view._eventConfig[key];\n\n    if (rule === false || isObject(rule) && !rule[type]) {\n      view.warn(`Blocked ${key} ${type} event listener.`);\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Create a new event stream from an event source.\n   * @param {object} source - The event source to monitor.\n   * @param {string} type - The event type.\n   * @param {function(object): boolean} [filter] - Event filter function.\n   * @return {EventStream}\n   */\n\n\n  function events(source, type, filter) {\n    var view = this,\n        s = new EventStream(filter),\n        send = function (e, item) {\n      view.runAsync(null, () => {\n        if (source === VIEW$1 && prevent(view, type)) {\n          e.preventDefault();\n        }\n\n        s.receive(eventExtend(view, e, item));\n      });\n    },\n        sources;\n\n    if (source === TIMER) {\n      if (permit(view, 'timer', type)) {\n        view.timer(send, type);\n      }\n    } else if (source === VIEW$1) {\n      if (permit(view, 'view', type)) {\n        // send traps errors, so use {trap: false} option\n        view.addEventListener(type, send, NO_TRAP);\n      }\n    } else {\n      if (source === WINDOW) {\n        if (permit(view, 'window', type) && typeof window !== 'undefined') {\n          sources = [window];\n        }\n      } else if (typeof document !== 'undefined') {\n        if (permit(view, 'selector', type)) {\n          sources = document.querySelectorAll(source);\n        }\n      }\n\n      if (!sources) {\n        view.warn('Can not resolve event source: ' + source);\n      } else {\n        for (var i = 0, n = sources.length; i < n; ++i) {\n          sources[i].addEventListener(type, send);\n        }\n\n        trackEventListener(view, sources, type, send);\n      }\n    }\n\n    return s;\n  }\n\n  function itemFilter(event) {\n    return event.item;\n  }\n\n  function markTarget(event) {\n    // grab upstream collector feeding the mark operator\n    return event.item.mark.source;\n  }\n\n  function invoke(name) {\n    return function (_, event) {\n      return event.vega.view().changeset().encode(event.item, name);\n    };\n  }\n\n  function hover(hoverSet, leaveSet) {\n    hoverSet = [hoverSet || 'hover'];\n    leaveSet = [leaveSet || 'update', hoverSet[0]]; // invoke hover set upon mouseover\n\n    this.on(this.events('view', 'mouseover', itemFilter), markTarget, invoke(hoverSet)); // invoke leave set upon mouseout\n\n    this.on(this.events('view', 'mouseout', itemFilter), markTarget, invoke(leaveSet));\n    return this;\n  }\n  /**\n   * Finalize a View instance that is being removed.\n   * Cancel any running timers.\n   * Remove all external event listeners.\n   * Remove any currently displayed tooltip.\n   */\n\n\n  function finalize() {\n    var tooltip = this._tooltip,\n        timers = this._timers,\n        listeners = this._eventListeners,\n        n,\n        m,\n        e;\n    n = timers.length;\n\n    while (--n >= 0) {\n      timers[n].stop();\n    }\n\n    n = listeners.length;\n\n    while (--n >= 0) {\n      e = listeners[n];\n      m = e.sources.length;\n\n      while (--m >= 0) {\n        e.sources[m].removeEventListener(e.type, e.handler);\n      }\n    }\n\n    if (tooltip) {\n      tooltip.call(this, this._handler, null, null, null);\n    }\n\n    return this;\n  }\n\n  function element(tag, attr, text) {\n    const el = document.createElement(tag);\n\n    for (const key in attr) el.setAttribute(key, attr[key]);\n\n    if (text != null) el.textContent = text;\n    return el;\n  }\n\n  const BindClass = 'vega-bind',\n        NameClass = 'vega-bind-name',\n        RadioClass = 'vega-bind-radio';\n  /**\n   * Bind a signal to an external HTML input element. The resulting two-way\n   * binding will propagate input changes to signals, and propagate signal\n   * changes to the input element state. If this view instance has no parent\n   * element, we assume the view is headless and no bindings are created.\n   * @param {Element|string} el - The parent DOM element to which the input\n   *   element should be appended as a child. If string-valued, this argument\n   *   will be treated as a CSS selector. If null or undefined, the parent\n   *   element of this view will be used as the element.\n   * @param {object} param - The binding parameters which specify the signal\n   *   to bind to, the input element type, and type-specific configuration.\n   * @return {View} - This view instance.\n   */\n\n  function bind(view, el, binding) {\n    if (!el) return;\n    const param = binding.param;\n    let bind = binding.state;\n\n    if (!bind) {\n      bind = binding.state = {\n        elements: null,\n        active: false,\n        set: null,\n        update: value => {\n          if (value != view.signal(param.signal)) {\n            view.runAsync(null, () => {\n              bind.source = true;\n              view.signal(param.signal, value);\n            });\n          }\n        }\n      };\n\n      if (param.debounce) {\n        bind.update = debounce(param.debounce, bind.update);\n      }\n    }\n\n    const create = param.input == null && param.element ? target : generate;\n    create(bind, el, param, view);\n\n    if (!bind.active) {\n      view.on(view._signals[param.signal], null, () => {\n        bind.source ? bind.source = false : bind.set(view.signal(param.signal));\n      });\n      bind.active = true;\n    }\n\n    return bind;\n  }\n  /**\n   * Bind the signal to an external EventTarget.\n   */\n\n\n  function target(bind, node, param, view) {\n    const type = param.event || 'input';\n\n    const handler = () => bind.update(node.value); // initialize signal value to external input value\n\n\n    view.signal(param.signal, node.value); // listen for changes on the element\n\n    node.addEventListener(type, handler); // register with view, so we can remove it upon finalization\n\n    trackEventListener(view, node, type, handler); // propagate change to element\n\n    bind.set = value => {\n      node.value = value;\n      node.dispatchEvent(event(type));\n    };\n  }\n\n  function event(type) {\n    return typeof Event !== 'undefined' ? new Event(type) : {\n      type\n    };\n  }\n  /**\n   * Generate an HTML input form element and bind it to a signal.\n   */\n\n\n  function generate(bind, el, param, view) {\n    const value = view.signal(param.signal);\n    const div = element('div', {\n      'class': BindClass\n    });\n    const wrapper = param.input === 'radio' ? div : div.appendChild(element('label'));\n    wrapper.appendChild(element('span', {\n      'class': NameClass\n    }, param.name || param.signal));\n    el.appendChild(div);\n    let input = form;\n\n    switch (param.input) {\n      case 'checkbox':\n        input = checkbox;\n        break;\n\n      case 'select':\n        input = select;\n        break;\n\n      case 'radio':\n        input = radio;\n        break;\n\n      case 'range':\n        input = range;\n        break;\n    }\n\n    input(bind, wrapper, param, value);\n  }\n  /**\n   * Generates an arbitrary input form element.\n   * The input type is controlled via user-provided parameters.\n   */\n\n\n  function form(bind, el, param, value) {\n    const node = element('input');\n\n    for (const key in param) {\n      if (key !== 'signal' && key !== 'element') {\n        node.setAttribute(key === 'input' ? 'type' : key, param[key]);\n      }\n    }\n\n    node.setAttribute('name', param.signal);\n    node.value = value;\n    el.appendChild(node);\n    node.addEventListener('input', () => bind.update(node.value));\n    bind.elements = [node];\n\n    bind.set = value => node.value = value;\n  }\n  /**\n   * Generates a checkbox input element.\n   */\n\n\n  function checkbox(bind, el, param, value) {\n    const attr = {\n      type: 'checkbox',\n      name: param.signal\n    };\n    if (value) attr.checked = true;\n    const node = element('input', attr);\n    el.appendChild(node);\n    node.addEventListener('change', () => bind.update(node.checked));\n    bind.elements = [node];\n\n    bind.set = value => node.checked = !!value || null;\n  }\n  /**\n   * Generates a selection list input element.\n   */\n\n\n  function select(bind, el, param, value) {\n    const node = element('select', {\n      name: param.signal\n    }),\n          labels = param.labels || [];\n    param.options.forEach((option, i) => {\n      const attr = {\n        value: option\n      };\n      if (valuesEqual(option, value)) attr.selected = true;\n      node.appendChild(element('option', attr, (labels[i] || option) + ''));\n    });\n    el.appendChild(node);\n    node.addEventListener('change', () => {\n      bind.update(param.options[node.selectedIndex]);\n    });\n    bind.elements = [node];\n\n    bind.set = value => {\n      for (let i = 0, n = param.options.length; i < n; ++i) {\n        if (valuesEqual(param.options[i], value)) {\n          node.selectedIndex = i;\n          return;\n        }\n      }\n    };\n  }\n  /**\n   * Generates a radio button group.\n   */\n\n\n  function radio(bind, el, param, value) {\n    const group = element('span', {\n      'class': RadioClass\n    }),\n          labels = param.labels || [];\n    el.appendChild(group);\n    bind.elements = param.options.map((option, i) => {\n      const attr = {\n        type: 'radio',\n        name: param.signal,\n        value: option\n      };\n      if (valuesEqual(option, value)) attr.checked = true;\n      const input = element('input', attr);\n      input.addEventListener('change', () => bind.update(option));\n      const label = element('label', {}, (labels[i] || option) + '');\n      label.prepend(input);\n      group.appendChild(label);\n      return input;\n    });\n\n    bind.set = value => {\n      const nodes = bind.elements,\n            n = nodes.length;\n\n      for (let i = 0; i < n; ++i) {\n        if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;\n      }\n    };\n  }\n  /**\n   * Generates a slider input element.\n   */\n\n\n  function range(bind, el, param, value) {\n    value = value !== undefined ? value : (+param.max + +param.min) / 2;\n    const max = param.max != null ? param.max : Math.max(100, +value) || 100,\n          min = param.min || Math.min(0, max, +value) || 0,\n          step = param.step || tickStep(min, max, 100);\n    const node = element('input', {\n      type: 'range',\n      name: param.signal,\n      min: min,\n      max: max,\n      step: step\n    });\n    node.value = value;\n    const span = element('span', {}, +value);\n    el.appendChild(node);\n    el.appendChild(span);\n\n    const update = () => {\n      span.textContent = node.value;\n      bind.update(+node.value);\n    }; // subscribe to both input and change\n\n\n    node.addEventListener('input', update);\n    node.addEventListener('change', update);\n    bind.elements = [node];\n\n    bind.set = value => {\n      node.value = value;\n      span.textContent = value;\n    };\n  }\n\n  function valuesEqual(a, b) {\n    return a === b || a + '' === b + '';\n  }\n\n  function initializeRenderer(view, r, el, constructor, scaleFactor, opt) {\n    r = r || new constructor(view.loader());\n    return r.initialize(el, width(view), height(view), offset(view), scaleFactor, opt).background(view.background());\n  }\n\n  function trap(view, fn) {\n    return !fn ? null : function () {\n      try {\n        fn.apply(this, arguments);\n      } catch (error) {\n        view.error(error);\n      }\n    };\n  }\n\n  function initializeHandler(view, prevHandler, el, constructor) {\n    // instantiate scenegraph handler\n    const handler = new constructor(view.loader(), trap(view, view.tooltip())).scene(view.scenegraph().root).initialize(el, offset(view), view); // transfer event handlers\n\n    if (prevHandler) {\n      prevHandler.handlers().forEach(h => {\n        handler.on(h.type, h.handler);\n      });\n    }\n\n    return handler;\n  }\n\n  function initialize(el, elBind) {\n    const view = this,\n          type = view._renderType,\n          config = view._eventConfig.bind,\n          module = renderModule(type); // containing dom element\n\n    el = view._el = el ? lookup$1(view, el, true) : null; // initialize aria attributes\n\n    initializeAria(view); // select appropriate renderer & handler\n\n    if (!module) view.error('Unrecognized renderer type: ' + type);\n    const Handler = module.handler || CanvasHandler,\n          Renderer = el ? module.renderer : module.headless; // initialize renderer and input handler\n\n    view._renderer = !Renderer ? null : initializeRenderer(view, view._renderer, el, Renderer);\n    view._handler = initializeHandler(view, view._handler, el, Handler);\n    view._redraw = true; // initialize signal bindings\n\n    if (el && config !== 'none') {\n      elBind = elBind ? view._elBind = lookup$1(view, elBind, true) : el.appendChild(element('form', {\n        'class': 'vega-bindings'\n      }));\n\n      view._bind.forEach(_ => {\n        if (_.param.element && config !== 'container') {\n          _.element = lookup$1(view, _.param.element, !!_.param.input);\n        }\n      });\n\n      view._bind.forEach(_ => {\n        bind(view, _.element || elBind, _);\n      });\n    }\n\n    return view;\n  }\n\n  function lookup$1(view, el, clear) {\n    if (typeof el === 'string') {\n      if (typeof document !== 'undefined') {\n        el = document.querySelector(el);\n\n        if (!el) {\n          view.error('Signal bind element not found: ' + el);\n          return null;\n        }\n      } else {\n        view.error('DOM document instance not found.');\n        return null;\n      }\n    }\n\n    if (el && clear) {\n      try {\n        el.innerHTML = '';\n      } catch (e) {\n        el = null;\n        view.error(e);\n      }\n    }\n\n    return el;\n  }\n\n  const number$1 = _ => +_ || 0;\n\n  const paddingObject$1 = _ => ({\n    top: _,\n    bottom: _,\n    left: _,\n    right: _\n  });\n\n  function padding(_) {\n    return isObject(_) ? {\n      top: number$1(_.top),\n      bottom: number$1(_.bottom),\n      left: number$1(_.left),\n      right: number$1(_.right)\n    } : paddingObject$1(number$1(_));\n  }\n  /**\n   * Render the current scene in a headless fashion.\n   * This method is asynchronous, returning a Promise instance.\n   * @return {Promise} - A Promise that resolves to a renderer.\n   */\n\n\n  async function renderHeadless(view, type, scaleFactor, opt) {\n    const module = renderModule(type),\n          ctr = module && module.headless;\n    if (!ctr) error('Unrecognized renderer type: ' + type);\n    await view.runAsync();\n    return initializeRenderer(view, null, null, ctr, scaleFactor, opt).renderAsync(view._scenegraph.root);\n  }\n  /**\n   * Produce an image URL for the visualization. Depending on the type\n   * parameter, the generated URL contains data for either a PNG or SVG image.\n   * The URL can be used (for example) to download images of the visualization.\n   * This method is asynchronous, returning a Promise instance.\n   * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.\n   *   The 'canvas' and 'png' types are synonyms for a PNG image.\n   * @return {Promise} - A promise that resolves to an image URL.\n   */\n\n\n  async function renderToImageURL(type, scaleFactor) {\n    if (type !== RenderType.Canvas && type !== RenderType.SVG && type !== RenderType.PNG) {\n      error('Unrecognized image type: ' + type);\n    }\n\n    const r = await renderHeadless(this, type, scaleFactor);\n    return type === RenderType.SVG ? toBlobURL(r.svg(), 'image/svg+xml') : r.canvas().toDataURL('image/png');\n  }\n\n  function toBlobURL(data, mime) {\n    const blob = new Blob([data], {\n      type: mime\n    });\n    return window.URL.createObjectURL(blob);\n  }\n  /**\n   * Produce a Canvas instance containing a rendered visualization.\n   * This method is asynchronous, returning a Promise instance.\n   * @return {Promise} - A promise that resolves to a Canvas instance.\n   */\n\n\n  async function renderToCanvas(scaleFactor, opt) {\n    const r = await renderHeadless(this, RenderType.Canvas, scaleFactor, opt);\n    return r.canvas();\n  }\n  /**\n   * Produce a rendered SVG string of the visualization.\n   * This method is asynchronous, returning a Promise instance.\n   * @return {Promise} - A promise that resolves to an SVG string.\n   */\n\n\n  async function renderToSVG(scaleFactor) {\n    const r = await renderHeadless(this, RenderType.SVG, scaleFactor);\n    return r.svg();\n  }\n\n  function runtime(view, spec, expr) {\n    return context(view, transforms, functionContext, expr).parse(spec);\n  }\n\n  function scale$1(name) {\n    var scales = this._runtime.scales;\n\n    if (!has$1(scales, name)) {\n      error('Unrecognized scale or projection: ' + name);\n    }\n\n    return scales[name].value;\n  }\n\n  var Width = 'width',\n      Height = 'height',\n      Padding = 'padding',\n      Skip$1 = {\n    skip: true\n  };\n\n  function viewWidth(view, width) {\n    var a = view.autosize(),\n        p = view.padding();\n    return width - (a && a.contains === Padding ? p.left + p.right : 0);\n  }\n\n  function viewHeight(view, height) {\n    var a = view.autosize(),\n        p = view.padding();\n    return height - (a && a.contains === Padding ? p.top + p.bottom : 0);\n  }\n\n  function initializeResize(view) {\n    var s = view._signals,\n        w = s[Width],\n        h = s[Height],\n        p = s[Padding];\n\n    function resetSize() {\n      view._autosize = view._resize = 1;\n    } // respond to width signal\n\n\n    view._resizeWidth = view.add(null, _ => {\n      view._width = _.size;\n      view._viewWidth = viewWidth(view, _.size);\n      resetSize();\n    }, {\n      size: w\n    }); // respond to height signal\n\n    view._resizeHeight = view.add(null, _ => {\n      view._height = _.size;\n      view._viewHeight = viewHeight(view, _.size);\n      resetSize();\n    }, {\n      size: h\n    }); // respond to padding signal\n\n    const resizePadding = view.add(null, resetSize, {\n      pad: p\n    }); // set rank to run immediately after source signal\n\n    view._resizeWidth.rank = w.rank + 1;\n    view._resizeHeight.rank = h.rank + 1;\n    resizePadding.rank = p.rank + 1;\n  }\n\n  function resizeView(viewWidth, viewHeight, width, height, origin, auto) {\n    this.runAfter(view => {\n      let rerun = 0; // reset autosize flag\n\n      view._autosize = 0; // width value changed: update signal, skip resize op\n\n      if (view.width() !== width) {\n        rerun = 1;\n        view.signal(Width, width, Skip$1); // set width, skip update calc\n\n        view._resizeWidth.skip(true); // skip width resize handler\n\n      } // height value changed: update signal, skip resize op\n\n\n      if (view.height() !== height) {\n        rerun = 1;\n        view.signal(Height, height, Skip$1); // set height, skip update calc\n\n        view._resizeHeight.skip(true); // skip height resize handler\n\n      } // view width changed: update view property, set resize flag\n\n\n      if (view._viewWidth !== viewWidth) {\n        view._resize = 1;\n        view._viewWidth = viewWidth;\n      } // view height changed: update view property, set resize flag\n\n\n      if (view._viewHeight !== viewHeight) {\n        view._resize = 1;\n        view._viewHeight = viewHeight;\n      } // origin changed: update view property, set resize flag\n\n\n      if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {\n        view._resize = 1;\n        view._origin = origin;\n      } // run dataflow on width/height signal change\n\n\n      if (rerun) view.run('enter');\n      if (auto) view.runAfter(v => v.resize());\n    }, false, 1);\n  }\n  /**\n   * Get the current view state, consisting of signal values and/or data sets.\n   * @param {object} [options] - Options flags indicating which state to export.\n   *   If unspecified, all signals and data sets will be exported.\n   * @param {function(string, Operator):boolean} [options.signals] - Optional\n   *   predicate function for testing if a signal should be included in the\n   *   exported state. If unspecified, all signals will be included, except for\n   *   those named 'parent' or those which refer to a Transform value.\n   * @param {function(string, object):boolean} [options.data] - Optional\n   *   predicate function for testing if a data set's input should be included\n   *   in the exported state. If unspecified, all data sets that have been\n   *   explicitly modified will be included.\n   * @param {boolean} [options.recurse=true] - Flag indicating if the exported\n   *   state should recursively include state from group mark sub-contexts.\n   * @return {object} - An object containing the exported state values.\n   */\n\n\n  function getState(options) {\n    return this._runtime.getState(options || {\n      data: dataTest,\n      signals: signalTest,\n      recurse: true\n    });\n  }\n\n  function dataTest(name, data) {\n    return data.modified && isArray(data.input.value) && name.indexOf('_:vega:_');\n  }\n\n  function signalTest(name, op) {\n    return !(name === 'parent' || op instanceof transforms.proxy);\n  }\n  /**\n   * Sets the current view state and updates the view by invoking run.\n   * @param {object} state - A state object containing signal and/or\n   *   data set values, following the format used by the getState method.\n   * @return {View} - This view instance.\n   */\n\n\n  function setState(state) {\n    this.runAsync(null, v => {\n      v._trigger = false;\n\n      v._runtime.setState(state);\n    }, v => {\n      v._trigger = true;\n    });\n    return this;\n  }\n\n  function timer(callback, delay) {\n    function tick(elapsed) {\n      callback({\n        timestamp: Date.now(),\n        elapsed: elapsed\n      });\n    }\n\n    this._timers.push(interval(tick, delay));\n  }\n\n  function defaultTooltip(handler, event, item, value) {\n    const el = handler.element();\n    if (el) el.setAttribute('title', formatTooltip(value));\n  }\n\n  function formatTooltip(value) {\n    return value == null ? '' : isArray(value) ? formatArray(value) : isObject(value) && !isDate$1(value) ? formatObject(value) : value + '';\n  }\n\n  function formatObject(obj) {\n    return Object.keys(obj).map(key => {\n      const v = obj[key];\n      return key + ': ' + (isArray(v) ? formatArray(v) : formatValue(v));\n    }).join('\\n');\n  }\n\n  function formatArray(value) {\n    return '[' + value.map(formatValue).join(', ') + ']';\n  }\n\n  function formatValue(value) {\n    return isArray(value) ? '[\\u2026]' : isObject(value) && !isDate$1(value) ? '{\\u2026}' : value;\n  }\n  /**\n   * Create a new View instance from a Vega dataflow runtime specification.\n   * The generated View will not immediately be ready for display. Callers\n   * should also invoke the initialize method (e.g., to set the parent\n   * DOM element in browser-based deployment) and then invoke the run\n   * method to evaluate the dataflow graph. Rendering will automatically\n   * be performed upon dataflow runs.\n   * @constructor\n   * @param {object} spec - The Vega dataflow runtime specification.\n   */\n\n\n  function View$1(spec, options) {\n    const view = this;\n    options = options || {};\n    Dataflow.call(view);\n    if (options.loader) view.loader(options.loader);\n    if (options.logger) view.logger(options.logger);\n    if (options.logLevel != null) view.logLevel(options.logLevel);\n\n    if (options.locale || spec.locale) {\n      const loc = extend$1({}, spec.locale, options.locale);\n      view.locale(locale(loc.number, loc.time));\n    }\n\n    view._el = null;\n    view._elBind = null;\n    view._renderType = options.renderer || RenderType.Canvas;\n    view._scenegraph = new Scenegraph();\n    const root = view._scenegraph.root; // initialize renderer, handler and event management\n\n    view._renderer = null;\n    view._tooltip = options.tooltip || defaultTooltip, view._redraw = true;\n    view._handler = new CanvasHandler().scene(root);\n    view._globalCursor = false;\n    view._preventDefault = false;\n    view._timers = [];\n    view._eventListeners = [];\n    view._resizeListeners = []; // initialize event configuration\n\n    view._eventConfig = initializeEventConfig(spec.eventConfig);\n    view.globalCursor(view._eventConfig.globalCursor); // initialize dataflow graph\n\n    const ctx = runtime(view, spec, options.expr);\n    view._runtime = ctx;\n    view._signals = ctx.signals;\n    view._bind = (spec.bindings || []).map(_ => ({\n      state: null,\n      param: extend$1({}, _)\n    })); // initialize scenegraph\n\n    if (ctx.root) ctx.root.set(root);\n    root.source = ctx.data.root.input;\n    view.pulse(ctx.data.root.input, view.changeset().insert(root.items)); // initialize view size\n\n    view._width = view.width();\n    view._height = view.height();\n    view._viewWidth = viewWidth(view, view._width);\n    view._viewHeight = viewHeight(view, view._height);\n    view._origin = [0, 0];\n    view._resize = 0;\n    view._autosize = 1;\n    initializeResize(view); // initialize background color\n\n    background(view); // initialize cursor\n\n    cursor(view); // initialize view description\n\n    view.description(spec.description); // initialize hover proessing, if requested\n\n    if (options.hover) view.hover(); // initialize DOM container(s) and renderer\n\n    if (options.container) view.initialize(options.container, options.bind);\n  }\n\n  function lookupSignal(view, name) {\n    return has$1(view._signals, name) ? view._signals[name] : error('Unrecognized signal name: ' + $(name));\n  }\n\n  function findOperatorHandler(op, handler) {\n    const h = (op._targets || []).filter(op => op._update && op._update.handler === handler);\n    return h.length ? h[0] : null;\n  }\n\n  function addOperatorListener(view, name, op, handler) {\n    let h = findOperatorHandler(op, handler);\n\n    if (!h) {\n      h = trap(view, () => handler(name, op.value));\n      h.handler = handler;\n      view.on(op, null, h);\n    }\n\n    return view;\n  }\n\n  function removeOperatorListener(view, op, handler) {\n    const h = findOperatorHandler(op, handler);\n    if (h) op._targets.remove(h);\n    return view;\n  }\n\n  inherits(View$1, Dataflow, {\n    // -- DATAFLOW / RENDERING ----\n    async evaluate(encode, prerun, postrun) {\n      // evaluate dataflow and prerun\n      await Dataflow.prototype.evaluate.call(this, encode, prerun); // render as needed\n\n      if (this._redraw || this._resize) {\n        try {\n          if (this._renderer) {\n            if (this._resize) {\n              this._resize = 0;\n              resizeRenderer(this);\n            }\n\n            await this._renderer.renderAsync(this._scenegraph.root);\n          }\n\n          this._redraw = false;\n        } catch (e) {\n          this.error(e);\n        }\n      } // evaluate postrun\n\n\n      if (postrun) asyncCallback(this, postrun);\n      return this;\n    },\n\n    dirty(item) {\n      this._redraw = true;\n      this._renderer && this._renderer.dirty(item);\n    },\n\n    // -- GET / SET ----\n    description(text) {\n      if (arguments.length) {\n        const desc = text != null ? text + '' : null;\n        if (desc !== this._desc) ariaLabel(this._el, this._desc = desc);\n        return this;\n      }\n\n      return this._desc;\n    },\n\n    container() {\n      return this._el;\n    },\n\n    scenegraph() {\n      return this._scenegraph;\n    },\n\n    origin() {\n      return this._origin.slice();\n    },\n\n    signal(name, value, options) {\n      const op = lookupSignal(this, name);\n      return arguments.length === 1 ? op.value : this.update(op, value, options);\n    },\n\n    width(_) {\n      return arguments.length ? this.signal('width', _) : this.signal('width');\n    },\n\n    height(_) {\n      return arguments.length ? this.signal('height', _) : this.signal('height');\n    },\n\n    padding(_) {\n      return arguments.length ? this.signal('padding', padding(_)) : padding(this.signal('padding'));\n    },\n\n    autosize(_) {\n      return arguments.length ? this.signal('autosize', _) : this.signal('autosize');\n    },\n\n    background(_) {\n      return arguments.length ? this.signal('background', _) : this.signal('background');\n    },\n\n    renderer(type) {\n      if (!arguments.length) return this._renderType;\n      if (!renderModule(type)) error('Unrecognized renderer type: ' + type);\n\n      if (type !== this._renderType) {\n        this._renderType = type;\n\n        this._resetRenderer();\n      }\n\n      return this;\n    },\n\n    tooltip(handler) {\n      if (!arguments.length) return this._tooltip;\n\n      if (handler !== this._tooltip) {\n        this._tooltip = handler;\n\n        this._resetRenderer();\n      }\n\n      return this;\n    },\n\n    loader(loader) {\n      if (!arguments.length) return this._loader;\n\n      if (loader !== this._loader) {\n        Dataflow.prototype.loader.call(this, loader);\n\n        this._resetRenderer();\n      }\n\n      return this;\n    },\n\n    resize() {\n      // set flag to perform autosize\n      this._autosize = 1; // touch autosize signal to ensure top-level ViewLayout runs\n\n      return this.touch(lookupSignal(this, 'autosize'));\n    },\n\n    _resetRenderer() {\n      if (this._renderer) {\n        this._renderer = null;\n        this.initialize(this._el, this._elBind);\n      }\n    },\n\n    // -- SIZING ----\n    _resizeView: resizeView,\n\n    // -- EVENT HANDLING ----\n    addEventListener(type, handler, options) {\n      let callback = handler;\n\n      if (!(options && options.trap === false)) {\n        // wrap callback in error handler\n        callback = trap(this, handler);\n        callback.raw = handler;\n      }\n\n      this._handler.on(type, callback);\n\n      return this;\n    },\n\n    removeEventListener(type, handler) {\n      var handlers = this._handler.handlers(type),\n          i = handlers.length,\n          h,\n          t; // search registered handlers, remove if match found\n\n\n      while (--i >= 0) {\n        t = handlers[i].type;\n        h = handlers[i].handler;\n\n        if (type === t && (handler === h || handler === h.raw)) {\n          this._handler.off(t, h);\n\n          break;\n        }\n      }\n\n      return this;\n    },\n\n    addResizeListener(handler) {\n      const l = this._resizeListeners;\n\n      if (l.indexOf(handler) < 0) {\n        // add handler if it isn't already registered\n        // note: error trapping handled elsewhere, so\n        // no need to wrap handlers here\n        l.push(handler);\n      }\n\n      return this;\n    },\n\n    removeResizeListener(handler) {\n      var l = this._resizeListeners,\n          i = l.indexOf(handler);\n\n      if (i >= 0) {\n        l.splice(i, 1);\n      }\n\n      return this;\n    },\n\n    addSignalListener(name, handler) {\n      return addOperatorListener(this, name, lookupSignal(this, name), handler);\n    },\n\n    removeSignalListener(name, handler) {\n      return removeOperatorListener(this, lookupSignal(this, name), handler);\n    },\n\n    addDataListener(name, handler) {\n      return addOperatorListener(this, name, dataref(this, name).values, handler);\n    },\n\n    removeDataListener(name, handler) {\n      return removeOperatorListener(this, dataref(this, name).values, handler);\n    },\n\n    globalCursor(_) {\n      if (arguments.length) {\n        if (this._globalCursor !== !!_) {\n          const prev = setCursor(this, null); // clear previous cursor\n\n          this._globalCursor = !!_;\n          if (prev) setCursor(this, prev); // swap cursor\n        }\n\n        return this;\n      } else {\n        return this._globalCursor;\n      }\n    },\n\n    preventDefault(_) {\n      if (arguments.length) {\n        this._preventDefault = _;\n        return this;\n      } else {\n        return this._preventDefault;\n      }\n    },\n\n    timer,\n    events,\n    finalize,\n    hover,\n    // -- DATA ----\n    data,\n    change,\n    insert,\n    remove,\n    // -- SCALES --\n    scale: scale$1,\n    // -- INITIALIZATION ----\n    initialize,\n    // -- HEADLESS RENDERING ----\n    toImageURL: renderToImageURL,\n    toCanvas: renderToCanvas,\n    toSVG: renderToSVG,\n    // -- SAVE / RESTORE STATE ----\n    getState,\n    setState\n  });\n\n  const VIEW = 'view',\n        LBRACK = '[',\n        RBRACK = ']',\n        LBRACE = '{',\n        RBRACE = '}',\n        COLON = ':',\n        COMMA = ',',\n        NAME = '@',\n        GT = '>',\n        ILLEGAL = /[[\\]{}]/,\n        DEFAULT_MARKS = {\n    '*': 1,\n    arc: 1,\n    area: 1,\n    group: 1,\n    image: 1,\n    line: 1,\n    path: 1,\n    rect: 1,\n    rule: 1,\n    shape: 1,\n    symbol: 1,\n    text: 1,\n    trail: 1\n  };\n  let DEFAULT_SOURCE, MARKS;\n  /**\n   * Parse an event selector string.\n   * Returns an array of event stream definitions.\n   */\n\n  function eventSelector(selector, source, marks) {\n    DEFAULT_SOURCE = source || VIEW;\n    MARKS = marks || DEFAULT_MARKS;\n    return parseMerge(selector.trim()).map(parseSelector);\n  }\n\n  function isMarkType(type) {\n    return MARKS[type];\n  }\n\n  function find(s, i, endChar, pushChar, popChar) {\n    const n = s.length;\n    let count = 0,\n        c;\n\n    for (; i < n; ++i) {\n      c = s[i];\n      if (!count && c === endChar) return i;else if (popChar && popChar.indexOf(c) >= 0) --count;else if (pushChar && pushChar.indexOf(c) >= 0) ++count;\n    }\n\n    return i;\n  }\n\n  function parseMerge(s) {\n    const output = [],\n          n = s.length;\n    let start = 0,\n        i = 0;\n\n    while (i < n) {\n      i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);\n      output.push(s.substring(start, i).trim());\n      start = ++i;\n    }\n\n    if (output.length === 0) {\n      throw 'Empty event selector: ' + s;\n    }\n\n    return output;\n  }\n\n  function parseSelector(s) {\n    return s[0] === '[' ? parseBetween(s) : parseStream$1(s);\n  }\n\n  function parseBetween(s) {\n    const n = s.length;\n    let i = 1,\n        b;\n    i = find(s, i, RBRACK, LBRACK, RBRACK);\n\n    if (i === n) {\n      throw 'Empty between selector: ' + s;\n    }\n\n    b = parseMerge(s.substring(1, i));\n\n    if (b.length !== 2) {\n      throw 'Between selector must have two elements: ' + s;\n    }\n\n    s = s.slice(i + 1).trim();\n\n    if (s[0] !== GT) {\n      throw 'Expected \\'>\\' after between selector: ' + s;\n    }\n\n    b = b.map(parseSelector);\n    const stream = parseSelector(s.slice(1).trim());\n\n    if (stream.between) {\n      return {\n        between: b,\n        stream: stream\n      };\n    } else {\n      stream.between = b;\n    }\n\n    return stream;\n  }\n\n  function parseStream$1(s) {\n    const stream = {\n      source: DEFAULT_SOURCE\n    },\n          source = [];\n    let throttle = [0, 0],\n        markname = 0,\n        start = 0,\n        n = s.length,\n        i = 0,\n        j,\n        filter; // extract throttle from end\n\n    if (s[n - 1] === RBRACE) {\n      i = s.lastIndexOf(LBRACE);\n\n      if (i >= 0) {\n        try {\n          throttle = parseThrottle(s.substring(i + 1, n - 1));\n        } catch (e) {\n          throw 'Invalid throttle specification: ' + s;\n        }\n\n        s = s.slice(0, i).trim();\n        n = s.length;\n      } else throw 'Unmatched right brace: ' + s;\n\n      i = 0;\n    }\n\n    if (!n) throw s; // set name flag based on first char\n\n    if (s[0] === NAME) markname = ++i; // extract first part of multi-part stream selector\n\n    j = find(s, i, COLON);\n\n    if (j < n) {\n      source.push(s.substring(start, j).trim());\n      start = i = ++j;\n    } // extract remaining part of stream selector\n\n\n    i = find(s, i, LBRACK);\n\n    if (i === n) {\n      source.push(s.substring(start, n).trim());\n    } else {\n      source.push(s.substring(start, i).trim());\n      filter = [];\n      start = ++i;\n      if (start === n) throw 'Unmatched left bracket: ' + s;\n    } // extract filters\n\n\n    while (i < n) {\n      i = find(s, i, RBRACK);\n      if (i === n) throw 'Unmatched left bracket: ' + s;\n      filter.push(s.substring(start, i).trim());\n      if (i < n - 1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;\n      start = ++i;\n    } // marshall event stream specification\n\n\n    if (!(n = source.length) || ILLEGAL.test(source[n - 1])) {\n      throw 'Invalid event selector: ' + s;\n    }\n\n    if (n > 1) {\n      stream.type = source[1];\n\n      if (markname) {\n        stream.markname = source[0].slice(1);\n      } else if (isMarkType(source[0])) {\n        stream.marktype = source[0];\n      } else {\n        stream.source = source[0];\n      }\n    } else {\n      stream.type = source[0];\n    }\n\n    if (stream.type.slice(-1) === '!') {\n      stream.consume = true;\n      stream.type = stream.type.slice(0, -1);\n    }\n\n    if (filter != null) stream.filter = filter;\n    if (throttle[0]) stream.throttle = throttle[0];\n    if (throttle[1]) stream.debounce = throttle[1];\n    return stream;\n  }\n\n  function parseThrottle(s) {\n    const a = s.split(COMMA);\n    if (!s.length || a.length > 2) throw s;\n    return a.map(_ => {\n      const x = +_;\n      if (x !== x) throw s;\n      return x;\n    });\n  }\n\n  function parseAutosize(spec) {\n    return isObject(spec) ? spec : {\n      type: spec || 'pad'\n    };\n  }\n\n  const number = _ => +_ || 0;\n\n  const paddingObject = _ => ({\n    top: _,\n    bottom: _,\n    left: _,\n    right: _\n  });\n\n  function parsePadding(spec) {\n    return !isObject(spec) ? paddingObject(number(spec)) : spec.signal ? spec : {\n      top: number(spec.top),\n      bottom: number(spec.bottom),\n      left: number(spec.left),\n      right: number(spec.right)\n    };\n  }\n\n  const encoder = _ => isObject(_) && !isArray(_) ? extend$1({}, _) : {\n    value: _\n  };\n\n  function addEncode(object, name, value, set) {\n    if (value != null) {\n      const isEncoder = isObject(value) && !isArray(value) || isArray(value) && value.length && isObject(value[0]); // Always assign signal to update, even if the signal is from the enter block\n\n      if (isEncoder) {\n        object.update[name] = value;\n      } else {\n        object[set || 'enter'][name] = {\n          value: value\n        };\n      }\n\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  function addEncoders(object, enter, update) {\n    for (const name in enter) {\n      addEncode(object, name, enter[name]);\n    }\n\n    for (const name in update) {\n      addEncode(object, name, update[name], 'update');\n    }\n  }\n\n  function extendEncode(encode, extra, skip) {\n    for (const name in extra) {\n      if (skip && has$1(skip, name)) continue;\n      encode[name] = extend$1(encode[name] || {}, extra[name]);\n    }\n\n    return encode;\n  }\n\n  function has(key, encode) {\n    return encode && (encode.enter && encode.enter[key] || encode.update && encode.update[key]);\n  }\n\n  const MarkRole = 'mark';\n  const FrameRole = 'frame';\n  const ScopeRole = 'scope';\n  const AxisRole = 'axis';\n  const AxisDomainRole = 'axis-domain';\n  const AxisGridRole = 'axis-grid';\n  const AxisLabelRole = 'axis-label';\n  const AxisTickRole = 'axis-tick';\n  const AxisTitleRole = 'axis-title';\n  const LegendRole = 'legend';\n  const LegendBandRole = 'legend-band';\n  const LegendEntryRole = 'legend-entry';\n  const LegendGradientRole = 'legend-gradient';\n  const LegendLabelRole = 'legend-label';\n  const LegendSymbolRole = 'legend-symbol';\n  const LegendTitleRole = 'legend-title';\n  const TitleRole = 'title';\n  const TitleTextRole = 'title-text';\n  const TitleSubtitleRole = 'title-subtitle';\n\n  function applyDefaults(encode, type, role, style, config) {\n    const defaults = {},\n          enter = {};\n    let update, key, skip, props; // if text mark, apply global lineBreak settings (#2370)\n\n    key = 'lineBreak';\n\n    if (type === 'text' && config[key] != null && !has(key, encode)) {\n      applyDefault(defaults, key, config[key]);\n    } // ignore legend and axis roles\n\n\n    if (role == 'legend' || String(role).startsWith('axis')) {\n      role = null;\n    } // resolve mark config\n\n\n    props = role === FrameRole ? config.group : role === MarkRole ? extend$1({}, config.mark, config[type]) : null;\n\n    for (key in props) {\n      // do not apply defaults if relevant fields are defined\n      skip = has(key, encode) || (key === 'fill' || key === 'stroke') && (has('fill', encode) || has('stroke', encode));\n      if (!skip) applyDefault(defaults, key, props[key]);\n    } // resolve styles, apply with increasing precedence\n\n\n    array$5(style).forEach(name => {\n      const props = config.style && config.style[name];\n\n      for (const key in props) {\n        if (!has(key, encode)) {\n          applyDefault(defaults, key, props[key]);\n        }\n      }\n    });\n    encode = extend$1({}, encode); // defensive copy\n\n    for (key in defaults) {\n      props = defaults[key];\n\n      if (props.signal) {\n        (update = update || {})[key] = props;\n      } else {\n        enter[key] = props;\n      }\n    }\n\n    encode.enter = extend$1(enter, encode.enter);\n    if (update) encode.update = extend$1(update, encode.update);\n    return encode;\n  }\n\n  function applyDefault(defaults, key, value) {\n    defaults[key] = value && value.signal ? {\n      signal: value.signal\n    } : {\n      value: value\n    };\n  }\n\n  const scaleRef = scale => isString(scale) ? $(scale) : scale.signal ? `(${scale.signal})` : field(scale);\n\n  function entry$1(enc) {\n    if (enc.gradient != null) {\n      return gradient(enc);\n    }\n\n    let value = enc.signal ? `(${enc.signal})` : enc.color ? color(enc.color) : enc.field != null ? field(enc.field) : enc.value !== undefined ? $(enc.value) : undefined;\n\n    if (enc.scale != null) {\n      value = scale(enc, value);\n    }\n\n    if (value === undefined) {\n      value = null;\n    }\n\n    if (enc.exponent != null) {\n      value = `pow(${value},${property(enc.exponent)})`;\n    }\n\n    if (enc.mult != null) {\n      value += `*${property(enc.mult)}`;\n    }\n\n    if (enc.offset != null) {\n      value += `+${property(enc.offset)}`;\n    }\n\n    if (enc.round) {\n      value = `round(${value})`;\n    }\n\n    return value;\n  }\n\n  const _color = (type, x, y, z) => `(${type}(${[x, y, z].map(entry$1).join(',')})+'')`;\n\n  function color(enc) {\n    return enc.c ? _color('hcl', enc.h, enc.c, enc.l) : enc.h || enc.s ? _color('hsl', enc.h, enc.s, enc.l) : enc.l || enc.a ? _color('lab', enc.l, enc.a, enc.b) : enc.r || enc.g || enc.b ? _color('rgb', enc.r, enc.g, enc.b) : null;\n  }\n\n  function gradient(enc) {\n    // map undefined to null; expression lang does not allow undefined\n    const args = [enc.start, enc.stop, enc.count].map(_ => _ == null ? null : $(_)); // trim null inputs from the end\n\n    while (args.length && peek$1(args) == null) args.pop();\n\n    args.unshift(scaleRef(enc.gradient));\n    return `gradient(${args.join(',')})`;\n  }\n\n  function property(property) {\n    return isObject(property) ? '(' + entry$1(property) + ')' : property;\n  }\n\n  function field(ref) {\n    return resolveField(isObject(ref) ? ref : {\n      datum: ref\n    });\n  }\n\n  function resolveField(ref) {\n    let object, level, field;\n\n    if (ref.signal) {\n      object = 'datum';\n      field = ref.signal;\n    } else if (ref.group || ref.parent) {\n      level = Math.max(1, ref.level || 1);\n      object = 'item';\n\n      while (level-- > 0) {\n        object += '.mark.group';\n      }\n\n      if (ref.parent) {\n        field = ref.parent;\n        object += '.datum';\n      } else {\n        field = ref.group;\n      }\n    } else if (ref.datum) {\n      object = 'datum';\n      field = ref.datum;\n    } else {\n      error('Invalid field reference: ' + $(ref));\n    }\n\n    if (!ref.signal) {\n      field = isString(field) ? splitAccessPath(field).map($).join('][') : resolveField(field);\n    }\n\n    return object + '[' + field + ']';\n  }\n\n  function scale(enc, value) {\n    const scale = scaleRef(enc.scale);\n\n    if (enc.range != null) {\n      // pull value from scale range\n      value = `lerp(_range(${scale}), ${+enc.range})`;\n    } else {\n      // run value through scale and/or pull scale bandwidth\n      if (value !== undefined) value = `_scale(${scale}, ${value})`;\n\n      if (enc.band) {\n        value = (value ? value + '+' : '') + `_bandwidth(${scale})` + (+enc.band === 1 ? '' : '*' + property(enc.band));\n\n        if (enc.extra) {\n          // include logic to handle extraneous elements\n          value = `(datum.extra ? _scale(${scale}, datum.extra.value) : ${value})`;\n        }\n      }\n\n      if (value == null) value = '0';\n    }\n\n    return value;\n  }\n\n  function rule(enc) {\n    let code = '';\n    enc.forEach(rule => {\n      const value = entry$1(rule);\n      code += rule.test ? `(${rule.test})?${value}:` : value;\n    }); // if no else clause, terminate with null (#1366)\n\n    if (peek$1(code) === ':') {\n      code += 'null';\n    }\n\n    return code;\n  }\n\n  function parseEncode(encode, type, role, style, scope, params) {\n    const enc = {};\n    params = params || {};\n    params.encoders = {\n      $encode: enc\n    };\n    encode = applyDefaults(encode, type, role, style, scope.config);\n\n    for (const key in encode) {\n      enc[key] = parseBlock(encode[key], type, params, scope);\n    }\n\n    return params;\n  }\n\n  function parseBlock(block, marktype, params, scope) {\n    const channels = {},\n          fields = {};\n\n    for (const name in block) {\n      if (block[name] != null) {\n        // skip any null entries\n        channels[name] = parse$1(expr(block[name]), scope, params, fields);\n      }\n    }\n\n    return {\n      $expr: {\n        marktype,\n        channels\n      },\n      $fields: Object.keys(fields),\n      $output: Object.keys(block)\n    };\n  }\n\n  function expr(enc) {\n    return isArray(enc) ? rule(enc) : entry$1(enc);\n  }\n\n  function parse$1(code, scope, params, fields) {\n    const expr = parser(code, scope);\n    expr.$fields.forEach(name => fields[name] = 1);\n    extend$1(params, expr.$params);\n    return expr.$expr;\n  }\n\n  const OUTER = 'outer',\n        OUTER_INVALID = ['value', 'update', 'init', 'react', 'bind'];\n\n  function outerError(prefix, name) {\n    error(prefix + ' for \"outer\" push: ' + $(name));\n  }\n\n  function parseSignal(signal, scope) {\n    const name = signal.name;\n\n    if (signal.push === OUTER) {\n      // signal must already be defined, raise error if not\n      if (!scope.signals[name]) outerError('No prior signal definition', name); // signal push must not use properties reserved for standard definition\n\n      OUTER_INVALID.forEach(prop => {\n        if (signal[prop] !== undefined) outerError('Invalid property ', prop);\n      });\n    } else {\n      // define a new signal in the current scope\n      const op = scope.addSignal(name, signal.value);\n      if (signal.react === false) op.react = false;\n      if (signal.bind) scope.addBinding(name, signal.bind);\n    }\n  }\n\n  function Entry(type, value, params, parent) {\n    this.id = -1;\n    this.type = type;\n    this.value = value;\n    this.params = params;\n    if (parent) this.parent = parent;\n  }\n\n  function entry(type, value, params, parent) {\n    return new Entry(type, value, params, parent);\n  }\n\n  function operator(value, params) {\n    return entry('operator', value, params);\n  } // -----\n\n\n  function ref(op) {\n    const ref = {\n      $ref: op.id\n    }; // if operator not yet registered, cache ref to resolve later\n\n    if (op.id < 0) (op.refs = op.refs || []).push(ref);\n    return ref;\n  }\n\n  function fieldRef$1(field, name) {\n    return name ? {\n      $field: field,\n      $name: name\n    } : {\n      $field: field\n    };\n  }\n\n  const keyFieldRef = fieldRef$1('key');\n\n  function compareRef(fields, orders) {\n    return {\n      $compare: fields,\n      $order: orders\n    };\n  }\n\n  function keyRef(fields, flat) {\n    const ref = {\n      $key: fields\n    };\n    if (flat) ref.$flat = true;\n    return ref;\n  } // -----\n\n\n  const Ascending = 'ascending';\n  const Descending = 'descending';\n\n  function sortKey(sort) {\n    return !isObject(sort) ? '' : (sort.order === Descending ? '-' : '+') + aggrField(sort.op, sort.field);\n  }\n\n  function aggrField(op, field) {\n    return (op && op.signal ? '$' + op.signal : op || '') + (op && field ? '_' : '') + (field && field.signal ? '$' + field.signal : field || '');\n  } // -----\n\n\n  const Scope$1 = 'scope';\n  const View = 'view';\n\n  function isSignal(_) {\n    return _ && _.signal;\n  }\n\n  function isExpr$1(_) {\n    return _ && _.expr;\n  }\n\n  function hasSignal(_) {\n    if (isSignal(_)) return true;\n    if (isObject(_)) for (const key in _) {\n      if (hasSignal(_[key])) return true;\n    }\n    return false;\n  }\n\n  function value(specValue, defaultValue) {\n    return specValue != null ? specValue : defaultValue;\n  }\n\n  function deref(v) {\n    return v && v.signal || v;\n  }\n\n  const Timer = 'timer';\n\n  function parseStream(stream, scope) {\n    const method = stream.merge ? mergeStream : stream.stream ? nestedStream : stream.type ? eventStream : error('Invalid stream specification: ' + $(stream));\n    return method(stream, scope);\n  }\n\n  function eventSource(source) {\n    return source === Scope$1 ? View : source || View;\n  }\n\n  function mergeStream(stream, scope) {\n    const list = stream.merge.map(s => parseStream(s, scope)),\n          entry = streamParameters({\n      merge: list\n    }, stream, scope);\n    return scope.addStream(entry).id;\n  }\n\n  function nestedStream(stream, scope) {\n    const id = parseStream(stream.stream, scope),\n          entry = streamParameters({\n      stream: id\n    }, stream, scope);\n    return scope.addStream(entry).id;\n  }\n\n  function eventStream(stream, scope) {\n    let id;\n\n    if (stream.type === Timer) {\n      id = scope.event(Timer, stream.throttle);\n      stream = {\n        between: stream.between,\n        filter: stream.filter\n      };\n    } else {\n      id = scope.event(eventSource(stream.source), stream.type);\n    }\n\n    const entry = streamParameters({\n      stream: id\n    }, stream, scope);\n    return Object.keys(entry).length === 1 ? id : scope.addStream(entry).id;\n  }\n\n  function streamParameters(entry, stream, scope) {\n    let param = stream.between;\n\n    if (param) {\n      if (param.length !== 2) {\n        error('Stream \"between\" parameter must have 2 entries: ' + $(stream));\n      }\n\n      entry.between = [parseStream(param[0], scope), parseStream(param[1], scope)];\n    }\n\n    param = stream.filter ? [].concat(stream.filter) : [];\n\n    if (stream.marktype || stream.markname || stream.markrole) {\n      // add filter for mark type, name and/or role\n      param.push(filterMark(stream.marktype, stream.markname, stream.markrole));\n    }\n\n    if (stream.source === Scope$1) {\n      // add filter to limit events from sub-scope only\n      param.push('inScope(event.item)');\n    }\n\n    if (param.length) {\n      entry.filter = parser('(' + param.join(')&&(') + ')', scope).$expr;\n    }\n\n    if ((param = stream.throttle) != null) {\n      entry.throttle = +param;\n    }\n\n    if ((param = stream.debounce) != null) {\n      entry.debounce = +param;\n    }\n\n    if (stream.consume) {\n      entry.consume = true;\n    }\n\n    return entry;\n  }\n\n  function filterMark(type, name, role) {\n    const item = 'event.item';\n    return item + (type && type !== '*' ? '&&' + item + '.mark.marktype===\\'' + type + '\\'' : '') + (role ? '&&' + item + '.mark.role===\\'' + role + '\\'' : '') + (name ? '&&' + item + '.mark.name===\\'' + name + '\\'' : '');\n  }\n\n  const OP_VALUE_EXPR = {\n    code: '_.$value',\n    ast: {\n      type: 'Identifier',\n      value: 'value'\n    }\n  };\n\n  function parseUpdate(spec, scope, target) {\n    const encode = spec.encode,\n          entry = {\n      target: target\n    };\n    let events = spec.events,\n        update = spec.update,\n        sources = [];\n\n    if (!events) {\n      error('Signal update missing events specification.');\n    } // interpret as an event selector string\n\n\n    if (isString(events)) {\n      events = eventSelector(events, scope.isSubscope() ? Scope$1 : View);\n    } // separate event streams from signal updates\n\n\n    events = array$5(events).filter(s => s.signal || s.scale ? (sources.push(s), 0) : 1); // merge internal operator listeners\n\n    if (sources.length > 1) {\n      sources = [mergeSources(sources)];\n    } // merge event streams, include as source\n\n\n    if (events.length) {\n      sources.push(events.length > 1 ? {\n        merge: events\n      } : events[0]);\n    }\n\n    if (encode != null) {\n      if (update) error('Signal encode and update are mutually exclusive.');\n      update = 'encode(item(),' + $(encode) + ')';\n    } // resolve update value\n\n\n    entry.update = isString(update) ? parser(update, scope) : update.expr != null ? parser(update.expr, scope) : update.value != null ? update.value : update.signal != null ? {\n      $expr: OP_VALUE_EXPR,\n      $params: {\n        $value: scope.signalRef(update.signal)\n      }\n    } : error('Invalid signal update specification.');\n\n    if (spec.force) {\n      entry.options = {\n        force: true\n      };\n    }\n\n    sources.forEach(source => scope.addUpdate(extend$1(streamSource(source, scope), entry)));\n  }\n\n  function streamSource(stream, scope) {\n    return {\n      source: stream.signal ? scope.signalRef(stream.signal) : stream.scale ? scope.scaleRef(stream.scale) : parseStream(stream, scope)\n    };\n  }\n\n  function mergeSources(sources) {\n    return {\n      signal: '[' + sources.map(s => s.scale ? 'scale(\"' + s.scale + '\")' : s.signal) + ']'\n    };\n  }\n\n  function parseSignalUpdates(signal, scope) {\n    const op = scope.getSignal(signal.name);\n    let expr = signal.update;\n\n    if (signal.init) {\n      if (expr) {\n        error('Signals can not include both init and update expressions.');\n      } else {\n        expr = signal.init;\n        op.initonly = true;\n      }\n    }\n\n    if (expr) {\n      expr = parser(expr, scope);\n      op.update = expr.$expr;\n      op.params = expr.$params;\n    }\n\n    if (signal.on) {\n      signal.on.forEach(_ => parseUpdate(_, scope, op.id));\n    }\n  }\n\n  const transform = name => (params, value, parent) => entry(name, value, params || undefined, parent);\n\n  const Aggregate = transform('aggregate');\n  const AxisTicks = transform('axisticks');\n  const Bound = transform('bound');\n  const Collect = transform('collect');\n  const Compare = transform('compare');\n  const DataJoin = transform('datajoin');\n  const Encode = transform('encode');\n  const Expression = transform('expression');\n  const Facet = transform('facet');\n  const Field = transform('field');\n  const Key = transform('key');\n  const LegendEntries = transform('legendentries');\n  const Load = transform('load');\n  const Mark = transform('mark');\n  const MultiExtent = transform('multiextent');\n  const MultiValues = transform('multivalues');\n  const Overlap = transform('overlap');\n  const Params = transform('params');\n  const PreFacet = transform('prefacet');\n  const Projection = transform('projection');\n  const Proxy = transform('proxy');\n  const Relay = transform('relay');\n  const Render = transform('render');\n  const Scale = transform('scale');\n  const Sieve = transform('sieve');\n  const SortItems = transform('sortitems');\n  const ViewLayout = transform('viewlayout');\n  const Values = transform('values');\n  let FIELD_REF_ID = 0;\n  const MULTIDOMAIN_SORT_OPS = {\n    min: 'min',\n    max: 'max',\n    count: 'sum'\n  };\n\n  function initScale(spec, scope) {\n    const type = spec.type || 'linear';\n\n    if (!isValidScaleType(type)) {\n      error('Unrecognized scale type: ' + $(type));\n    }\n\n    scope.addScale(spec.name, {\n      type,\n      domain: undefined\n    });\n  }\n\n  function parseScale(spec, scope) {\n    const params = scope.getScale(spec.name).params;\n    let key;\n    params.domain = parseScaleDomain(spec.domain, spec, scope);\n\n    if (spec.range != null) {\n      params.range = parseScaleRange(spec, scope, params);\n    }\n\n    if (spec.interpolate != null) {\n      parseScaleInterpolate(spec.interpolate, params);\n    }\n\n    if (spec.nice != null) {\n      params.nice = parseScaleNice(spec.nice);\n    }\n\n    if (spec.bins != null) {\n      params.bins = parseScaleBins(spec.bins, scope);\n    }\n\n    for (key in spec) {\n      if (has$1(params, key) || key === 'name') continue;\n      params[key] = parseLiteral(spec[key], scope);\n    }\n  }\n\n  function parseLiteral(v, scope) {\n    return !isObject(v) ? v : v.signal ? scope.signalRef(v.signal) : error('Unsupported object: ' + $(v));\n  }\n\n  function parseArray(v, scope) {\n    return v.signal ? scope.signalRef(v.signal) : v.map(v => parseLiteral(v, scope));\n  }\n\n  function dataLookupError(name) {\n    error('Can not find data set: ' + $(name));\n  } // -- SCALE DOMAIN ----\n\n\n  function parseScaleDomain(domain, spec, scope) {\n    if (!domain) {\n      if (spec.domainMin != null || spec.domainMax != null) {\n        error('No scale domain defined for domainMin/domainMax to override.');\n      }\n\n      return; // default domain\n    }\n\n    return domain.signal ? scope.signalRef(domain.signal) : (isArray(domain) ? explicitDomain : domain.fields ? multipleDomain : singularDomain)(domain, spec, scope);\n  }\n\n  function explicitDomain(domain, spec, scope) {\n    return domain.map(v => parseLiteral(v, scope));\n  }\n\n  function singularDomain(domain, spec, scope) {\n    const data = scope.getData(domain.data);\n    if (!data) dataLookupError(domain.data);\n    return isDiscrete(spec.type) ? data.valuesRef(scope, domain.field, parseSort(domain.sort, false)) : isQuantile(spec.type) ? data.domainRef(scope, domain.field) : data.extentRef(scope, domain.field);\n  }\n\n  function multipleDomain(domain, spec, scope) {\n    const data = domain.data,\n          fields = domain.fields.reduce((dom, d) => {\n      d = isString(d) ? {\n        data: data,\n        field: d\n      } : isArray(d) || d.signal ? fieldRef(d, scope) : d;\n      dom.push(d);\n      return dom;\n    }, []);\n    return (isDiscrete(spec.type) ? ordinalMultipleDomain : isQuantile(spec.type) ? quantileMultipleDomain : numericMultipleDomain)(domain, scope, fields);\n  }\n\n  function fieldRef(data, scope) {\n    const name = '_:vega:_' + FIELD_REF_ID++,\n          coll = Collect({});\n\n    if (isArray(data)) {\n      coll.value = {\n        $ingest: data\n      };\n    } else if (data.signal) {\n      const code = 'setdata(' + $(name) + ',' + data.signal + ')';\n      coll.params.input = scope.signalRef(code);\n    }\n\n    scope.addDataPipeline(name, [coll, Sieve({})]);\n    return {\n      data: name,\n      field: 'data'\n    };\n  }\n\n  function ordinalMultipleDomain(domain, scope, fields) {\n    const sort = parseSort(domain.sort, true);\n    let a, v; // get value counts for each domain field\n\n    const counts = fields.map(f => {\n      const data = scope.getData(f.data);\n      if (!data) dataLookupError(f.data);\n      return data.countsRef(scope, f.field, sort);\n    }); // aggregate the results from each domain field\n\n    const p = {\n      groupby: keyFieldRef,\n      pulse: counts\n    };\n\n    if (sort) {\n      a = sort.op || 'count';\n      v = sort.field ? aggrField(a, sort.field) : 'count';\n      p.ops = [MULTIDOMAIN_SORT_OPS[a]];\n      p.fields = [scope.fieldRef(v)];\n      p.as = [v];\n    }\n\n    a = scope.add(Aggregate(p)); // collect aggregate output\n\n    const c = scope.add(Collect({\n      pulse: ref(a)\n    })); // extract values for combined domain\n\n    v = scope.add(Values({\n      field: keyFieldRef,\n      sort: scope.sortRef(sort),\n      pulse: ref(c)\n    }));\n    return ref(v);\n  }\n\n  function parseSort(sort, multidomain) {\n    if (sort) {\n      if (!sort.field && !sort.op) {\n        if (isObject(sort)) sort.field = 'key';else sort = {\n          field: 'key'\n        };\n      } else if (!sort.field && sort.op !== 'count') {\n        error('No field provided for sort aggregate op: ' + sort.op);\n      } else if (multidomain && sort.field) {\n        if (sort.op && !MULTIDOMAIN_SORT_OPS[sort.op]) {\n          error('Multiple domain scales can not be sorted using ' + sort.op);\n        }\n      }\n    }\n\n    return sort;\n  }\n\n  function quantileMultipleDomain(domain, scope, fields) {\n    // get value arrays for each domain field\n    const values = fields.map(f => {\n      const data = scope.getData(f.data);\n      if (!data) dataLookupError(f.data);\n      return data.domainRef(scope, f.field);\n    }); // combine value arrays\n\n    return ref(scope.add(MultiValues({\n      values: values\n    })));\n  }\n\n  function numericMultipleDomain(domain, scope, fields) {\n    // get extents for each domain field\n    const extents = fields.map(f => {\n      const data = scope.getData(f.data);\n      if (!data) dataLookupError(f.data);\n      return data.extentRef(scope, f.field);\n    }); // combine extents\n\n    return ref(scope.add(MultiExtent({\n      extents: extents\n    })));\n  } // -- SCALE BINS -----\n\n\n  function parseScaleBins(v, scope) {\n    return v.signal || isArray(v) ? parseArray(v, scope) : scope.objectProperty(v);\n  } // -- SCALE NICE -----\n\n\n  function parseScaleNice(nice) {\n    return isObject(nice) ? {\n      interval: parseLiteral(nice.interval),\n      step: parseLiteral(nice.step)\n    } : parseLiteral(nice);\n  } // -- SCALE INTERPOLATION -----\n\n\n  function parseScaleInterpolate(interpolate, params) {\n    params.interpolate = parseLiteral(interpolate.type || interpolate);\n\n    if (interpolate.gamma != null) {\n      params.interpolateGamma = parseLiteral(interpolate.gamma);\n    }\n  } // -- SCALE RANGE -----\n\n\n  function parseScaleRange(spec, scope, params) {\n    const config = scope.config.range;\n    let range = spec.range;\n\n    if (range.signal) {\n      return scope.signalRef(range.signal);\n    } else if (isString(range)) {\n      if (config && has$1(config, range)) {\n        spec = extend$1({}, spec, {\n          range: config[range]\n        });\n        return parseScaleRange(spec, scope, params);\n      } else if (range === 'width') {\n        range = [0, {\n          signal: 'width'\n        }];\n      } else if (range === 'height') {\n        range = isDiscrete(spec.type) ? [0, {\n          signal: 'height'\n        }] : [{\n          signal: 'height'\n        }, 0];\n      } else {\n        error('Unrecognized scale range value: ' + $(range));\n      }\n    } else if (range.scheme) {\n      params.scheme = isArray(range.scheme) ? parseArray(range.scheme, scope) : parseLiteral(range.scheme, scope);\n      if (range.extent) params.schemeExtent = parseArray(range.extent, scope);\n      if (range.count) params.schemeCount = parseLiteral(range.count, scope);\n      return;\n    } else if (range.step) {\n      params.rangeStep = parseLiteral(range.step, scope);\n      return;\n    } else if (isDiscrete(spec.type) && !isArray(range)) {\n      return parseScaleDomain(range, spec, scope);\n    } else if (!isArray(range)) {\n      error('Unsupported range type: ' + $(range));\n    }\n\n    return range.map(v => (isArray(v) ? parseArray : parseLiteral)(v, scope));\n  }\n\n  function parseProjection(proj, scope) {\n    const config = scope.config.projection || {},\n          params = {};\n\n    for (const name in proj) {\n      if (name === 'name') continue;\n      params[name] = parseParameter$1(proj[name], name, scope);\n    } // apply projection defaults from config\n\n\n    for (const name in config) {\n      if (params[name] == null) {\n        params[name] = parseParameter$1(config[name], name, scope);\n      }\n    }\n\n    scope.addProjection(proj.name, params);\n  }\n\n  function parseParameter$1(_, name, scope) {\n    return isArray(_) ? _.map(_ => parseParameter$1(_, name, scope)) : !isObject(_) ? _ : _.signal ? scope.signalRef(_.signal) : name === 'fit' ? _ : error('Unsupported parameter object: ' + $(_));\n  }\n\n  const Top = 'top';\n  const Left = 'left';\n  const Right = 'right';\n  const Bottom = 'bottom';\n  const Center = 'center';\n  const Vertical = 'vertical';\n  const Start = 'start';\n  const Middle = 'middle';\n  const End = 'end';\n  const Index = 'index';\n  const Label = 'label';\n  const Offset = 'offset';\n  const Perc = 'perc';\n  const Perc2 = 'perc2';\n  const Value = 'value';\n  const GuideLabelStyle = 'guide-label';\n  const GuideTitleStyle = 'guide-title';\n  const GroupTitleStyle = 'group-title';\n  const GroupSubtitleStyle = 'group-subtitle';\n  const Symbols = 'symbol';\n  const Gradient = 'gradient';\n  const Discrete = 'discrete';\n  const Size = 'size';\n  const Shape = 'shape';\n  const Fill = 'fill';\n  const Stroke = 'stroke';\n  const StrokeWidth = 'strokeWidth';\n  const StrokeDash = 'strokeDash';\n  const Opacity = 'opacity'; // Encoding channels supported by legends\n  // In priority order of 'canonical' scale\n\n  const LegendScales = [Size, Shape, Fill, Stroke, StrokeWidth, StrokeDash, Opacity];\n  const Skip = {\n    name: 1,\n    style: 1,\n    interactive: 1\n  };\n  const zero = {\n    value: 0\n  };\n  const one = {\n    value: 1\n  };\n  const GroupMark = 'group';\n  const RectMark = 'rect';\n  const RuleMark = 'rule';\n  const SymbolMark = 'symbol';\n  const TextMark = 'text';\n\n  function guideGroup(mark) {\n    mark.type = GroupMark;\n    mark.interactive = mark.interactive || false;\n    return mark;\n  }\n\n  function lookup(spec, config) {\n    const _ = (name, dflt) => value(spec[name], value(config[name], dflt));\n\n    _.isVertical = s => Vertical === value(spec.direction, config.direction || (s ? config.symbolDirection : config.gradientDirection));\n\n    _.gradientLength = () => value(spec.gradientLength, config.gradientLength || config.gradientWidth);\n\n    _.gradientThickness = () => value(spec.gradientThickness, config.gradientThickness || config.gradientHeight);\n\n    _.entryColumns = () => value(spec.columns, value(config.columns, +_.isVertical(true)));\n\n    return _;\n  }\n\n  function getEncoding(name, encode) {\n    const v = encode && (encode.update && encode.update[name] || encode.enter && encode.enter[name]);\n    return v && v.signal ? v : v ? v.value : null;\n  }\n\n  function getStyle(name, scope, style) {\n    const s = scope.config.style[style];\n    return s && s[name];\n  }\n\n  function anchorExpr(s, e, m) {\n    return `item.anchor === '${Start}' ? ${s} : item.anchor === '${End}' ? ${e} : ${m}`;\n  }\n\n  const alignExpr$1 = anchorExpr($(Left), $(Right), $(Center));\n\n  function tickBand(_) {\n    const v = _('tickBand');\n\n    let offset = _('tickOffset'),\n        band,\n        extra;\n\n    if (!v) {\n      // if no tick band entry, fall back on other properties\n      band = _('bandPosition');\n      extra = _('tickExtra');\n    } else if (v.signal) {\n      // if signal, augment code to interpret values\n      band = {\n        signal: `(${v.signal}) === 'extent' ? 1 : 0.5`\n      };\n      extra = {\n        signal: `(${v.signal}) === 'extent'`\n      };\n\n      if (!isObject(offset)) {\n        offset = {\n          signal: `(${v.signal}) === 'extent' ? 0 : ${offset}`\n        };\n      }\n    } else if (v === 'extent') {\n      // if constant, simply set values\n      band = 1;\n      extra = true;\n      offset = 0;\n    } else {\n      band = 0.5;\n      extra = false;\n    }\n\n    return {\n      extra,\n      band,\n      offset\n    };\n  }\n\n  function extendOffset(value, offset) {\n    return !offset ? value : !value ? offset : !isObject(value) ? {\n      value,\n      offset\n    } : Object.assign({}, value, {\n      offset: extendOffset(value.offset, offset)\n    });\n  }\n\n  function guideMark(mark, extras) {\n    if (extras) {\n      mark.name = extras.name;\n      mark.style = extras.style || mark.style;\n      mark.interactive = !!extras.interactive;\n      mark.encode = extendEncode(mark.encode, extras, Skip);\n    } else {\n      mark.interactive = false;\n    }\n\n    return mark;\n  }\n\n  function legendGradient(spec, scale, config, userEncode) {\n    const _ = lookup(spec, config),\n          vertical = _.isVertical(),\n          thickness = _.gradientThickness(),\n          length = _.gradientLength();\n\n    let enter, start, stop, width, height;\n\n    if (vertical) {\n      start = [0, 1];\n      stop = [0, 0];\n      width = thickness;\n      height = length;\n    } else {\n      start = [0, 0];\n      stop = [1, 0];\n      width = length;\n      height = thickness;\n    }\n\n    const encode = {\n      enter: enter = {\n        opacity: zero,\n        x: zero,\n        y: zero,\n        width: encoder(width),\n        height: encoder(height)\n      },\n      update: extend$1({}, enter, {\n        opacity: one,\n        fill: {\n          gradient: scale,\n          start: start,\n          stop: stop\n        }\n      }),\n      exit: {\n        opacity: zero\n      }\n    };\n    addEncoders(encode, {\n      stroke: _('gradientStrokeColor'),\n      strokeWidth: _('gradientStrokeWidth')\n    }, {\n      // update\n      opacity: _('gradientOpacity')\n    });\n    return guideMark({\n      type: RectMark,\n      role: LegendGradientRole,\n      encode\n    }, userEncode);\n  }\n\n  function legendGradientDiscrete(spec, scale, config, userEncode, dataRef) {\n    const _ = lookup(spec, config),\n          vertical = _.isVertical(),\n          thickness = _.gradientThickness(),\n          length = _.gradientLength();\n\n    let u,\n        v,\n        uu,\n        vv,\n        adjust = '';\n    vertical ? (u = 'y', uu = 'y2', v = 'x', vv = 'width', adjust = '1-') : (u = 'x', uu = 'x2', v = 'y', vv = 'height');\n    const enter = {\n      opacity: zero,\n      fill: {\n        scale: scale,\n        field: Value\n      }\n    };\n    enter[u] = {\n      signal: adjust + 'datum.' + Perc,\n      mult: length\n    };\n    enter[v] = zero;\n    enter[uu] = {\n      signal: adjust + 'datum.' + Perc2,\n      mult: length\n    };\n    enter[vv] = encoder(thickness);\n    const encode = {\n      enter: enter,\n      update: extend$1({}, enter, {\n        opacity: one\n      }),\n      exit: {\n        opacity: zero\n      }\n    };\n    addEncoders(encode, {\n      stroke: _('gradientStrokeColor'),\n      strokeWidth: _('gradientStrokeWidth')\n    }, {\n      // update\n      opacity: _('gradientOpacity')\n    });\n    return guideMark({\n      type: RectMark,\n      role: LegendBandRole,\n      key: Value,\n      from: dataRef,\n      encode\n    }, userEncode);\n  }\n\n  const alignExpr = `datum.${Perc}<=0?\"${Left}\":datum.${Perc}>=1?\"${Right}\":\"${Center}\"`,\n        baselineExpr = `datum.${Perc}<=0?\"${Bottom}\":datum.${Perc}>=1?\"${Top}\":\"${Middle}\"`;\n\n  function legendGradientLabels(spec, config, userEncode, dataRef) {\n    const _ = lookup(spec, config),\n          vertical = _.isVertical(),\n          thickness = encoder(_.gradientThickness()),\n          length = _.gradientLength();\n\n    let overlap = _('labelOverlap'),\n        enter,\n        update,\n        u,\n        v,\n        adjust = '';\n\n    const encode = {\n      enter: enter = {\n        opacity: zero\n      },\n      update: update = {\n        opacity: one,\n        text: {\n          field: Label\n        }\n      },\n      exit: {\n        opacity: zero\n      }\n    };\n    addEncoders(encode, {\n      fill: _('labelColor'),\n      fillOpacity: _('labelOpacity'),\n      font: _('labelFont'),\n      fontSize: _('labelFontSize'),\n      fontStyle: _('labelFontStyle'),\n      fontWeight: _('labelFontWeight'),\n      limit: value(spec.labelLimit, config.gradientLabelLimit)\n    });\n\n    if (vertical) {\n      enter.align = {\n        value: 'left'\n      };\n      enter.baseline = update.baseline = {\n        signal: baselineExpr\n      };\n      u = 'y';\n      v = 'x';\n      adjust = '1-';\n    } else {\n      enter.align = update.align = {\n        signal: alignExpr\n      };\n      enter.baseline = {\n        value: 'top'\n      };\n      u = 'x';\n      v = 'y';\n    }\n\n    enter[u] = update[u] = {\n      signal: adjust + 'datum.' + Perc,\n      mult: length\n    };\n    enter[v] = update[v] = thickness;\n    thickness.offset = value(spec.labelOffset, config.gradientLabelOffset) || 0;\n    overlap = overlap ? {\n      separation: _('labelSeparation'),\n      method: overlap,\n      order: 'datum.' + Index\n    } : undefined; // type, role, style, key, dataRef, encode, extras\n\n    return guideMark({\n      type: TextMark,\n      role: LegendLabelRole,\n      style: GuideLabelStyle,\n      key: Value,\n      from: dataRef,\n      encode,\n      overlap\n    }, userEncode);\n  }\n\n  function legendSymbolGroups(spec, config, userEncode, dataRef, columns) {\n    const _ = lookup(spec, config),\n          entries = userEncode.entries,\n          interactive = !!(entries && entries.interactive),\n          name = entries ? entries.name : undefined,\n          height = _('clipHeight'),\n          symbolOffset = _('symbolOffset'),\n          valueRef = {\n      data: 'value'\n    },\n          xSignal = `(${columns}) ? datum.${Offset} : datum.${Size}`,\n          yEncode = height ? encoder(height) : {\n      field: Size\n    },\n          index = `datum.${Index}`,\n          ncols = `max(1, ${columns})`;\n\n    let encode, enter, update, nrows, sort;\n    yEncode.mult = 0.5; // -- LEGEND SYMBOLS --\n\n    encode = {\n      enter: enter = {\n        opacity: zero,\n        x: {\n          signal: xSignal,\n          mult: 0.5,\n          offset: symbolOffset\n        },\n        y: yEncode\n      },\n      update: update = {\n        opacity: one,\n        x: enter.x,\n        y: enter.y\n      },\n      exit: {\n        opacity: zero\n      }\n    };\n    let baseFill = null,\n        baseStroke = null;\n\n    if (!spec.fill) {\n      baseFill = config.symbolBaseFillColor;\n      baseStroke = config.symbolBaseStrokeColor;\n    }\n\n    addEncoders(encode, {\n      fill: _('symbolFillColor', baseFill),\n      shape: _('symbolType'),\n      size: _('symbolSize'),\n      stroke: _('symbolStrokeColor', baseStroke),\n      strokeDash: _('symbolDash'),\n      strokeDashOffset: _('symbolDashOffset'),\n      strokeWidth: _('symbolStrokeWidth')\n    }, {\n      // update\n      opacity: _('symbolOpacity')\n    });\n    LegendScales.forEach(scale => {\n      if (spec[scale]) {\n        update[scale] = enter[scale] = {\n          scale: spec[scale],\n          field: Value\n        };\n      }\n    });\n    const symbols = guideMark({\n      type: SymbolMark,\n      role: LegendSymbolRole,\n      key: Value,\n      from: valueRef,\n      clip: height ? true : undefined,\n      encode\n    }, userEncode.symbols); // -- LEGEND LABELS --\n\n    const labelOffset = encoder(symbolOffset);\n    labelOffset.offset = _('labelOffset');\n    encode = {\n      enter: enter = {\n        opacity: zero,\n        x: {\n          signal: xSignal,\n          offset: labelOffset\n        },\n        y: yEncode\n      },\n      update: update = {\n        opacity: one,\n        text: {\n          field: Label\n        },\n        x: enter.x,\n        y: enter.y\n      },\n      exit: {\n        opacity: zero\n      }\n    };\n    addEncoders(encode, {\n      align: _('labelAlign'),\n      baseline: _('labelBaseline'),\n      fill: _('labelColor'),\n      fillOpacity: _('labelOpacity'),\n      font: _('labelFont'),\n      fontSize: _('labelFontSize'),\n      fontStyle: _('labelFontStyle'),\n      fontWeight: _('labelFontWeight'),\n      limit: _('labelLimit')\n    });\n    const labels = guideMark({\n      type: TextMark,\n      role: LegendLabelRole,\n      style: GuideLabelStyle,\n      key: Value,\n      from: valueRef,\n      encode\n    }, userEncode.labels); // -- LEGEND ENTRY GROUPS --\n\n    encode = {\n      enter: {\n        noBound: {\n          value: !height\n        },\n        // ignore width/height in bounds calc\n        width: zero,\n        height: height ? encoder(height) : zero,\n        opacity: zero\n      },\n      exit: {\n        opacity: zero\n      },\n      update: update = {\n        opacity: one,\n        row: {\n          signal: null\n        },\n        column: {\n          signal: null\n        }\n      }\n    }; // annotate and sort groups to ensure correct ordering\n\n    if (_.isVertical(true)) {\n      nrows = `ceil(item.mark.items.length / ${ncols})`;\n      update.row.signal = `${index}%${nrows}`;\n      update.column.signal = `floor(${index} / ${nrows})`;\n      sort = {\n        field: ['row', index]\n      };\n    } else {\n      update.row.signal = `floor(${index} / ${ncols})`;\n      update.column.signal = `${index} % ${ncols}`;\n      sort = {\n        field: index\n      };\n    } // handle zero column case (implies infinite columns)\n\n\n    update.column.signal = `(${columns})?${update.column.signal}:${index}`; // facet legend entries into sub-groups\n\n    dataRef = {\n      facet: {\n        data: dataRef,\n        name: 'value',\n        groupby: Index\n      }\n    };\n    return guideGroup({\n      role: ScopeRole,\n      from: dataRef,\n      encode: extendEncode(encode, entries, Skip),\n      marks: [symbols, labels],\n      name,\n      interactive,\n      sort\n    });\n  }\n\n  function legendSymbolLayout(spec, config) {\n    const _ = lookup(spec, config); // layout parameters for legend entries\n\n\n    return {\n      align: _('gridAlign'),\n      columns: _.entryColumns(),\n      center: {\n        row: true,\n        column: false\n      },\n      padding: {\n        row: _('rowPadding'),\n        column: _('columnPadding')\n      }\n    };\n  }\n\n  const isL = 'item.orient === \"left\"',\n        isR = 'item.orient === \"right\"',\n        isLR = `(${isL} || ${isR})`,\n        isVG = `datum.vgrad && ${isLR}`,\n        baseline = anchorExpr('\"top\"', '\"bottom\"', '\"middle\"'),\n        alignFlip = anchorExpr('\"right\"', '\"left\"', '\"center\"'),\n        exprAlign = `datum.vgrad && ${isR} ? (${alignFlip}) : (${isLR} && !(datum.vgrad && ${isL})) ? \"left\" : ${alignExpr$1}`,\n        exprAnchor = `item._anchor || (${isLR} ? \"middle\" : \"start\")`,\n        exprAngle = `${isVG} ? (${isL} ? -90 : 90) : 0`,\n        exprBaseline = `${isLR} ? (datum.vgrad ? (${isR} ? \"bottom\" : \"top\") : ${baseline}) : \"top\"`;\n\n  function legendTitle(spec, config, userEncode, dataRef) {\n    const _ = lookup(spec, config);\n\n    const encode = {\n      enter: {\n        opacity: zero\n      },\n      update: {\n        opacity: one,\n        x: {\n          field: {\n            group: 'padding'\n          }\n        },\n        y: {\n          field: {\n            group: 'padding'\n          }\n        }\n      },\n      exit: {\n        opacity: zero\n      }\n    };\n    addEncoders(encode, {\n      orient: _('titleOrient'),\n      _anchor: _('titleAnchor'),\n      anchor: {\n        signal: exprAnchor\n      },\n      angle: {\n        signal: exprAngle\n      },\n      align: {\n        signal: exprAlign\n      },\n      baseline: {\n        signal: exprBaseline\n      },\n      text: spec.title,\n      fill: _('titleColor'),\n      fillOpacity: _('titleOpacity'),\n      font: _('titleFont'),\n      fontSize: _('titleFontSize'),\n      fontStyle: _('titleFontStyle'),\n      fontWeight: _('titleFontWeight'),\n      limit: _('titleLimit'),\n      lineHeight: _('titleLineHeight')\n    }, {\n      // require update\n      align: _('titleAlign'),\n      baseline: _('titleBaseline')\n    });\n    return guideMark({\n      type: TextMark,\n      role: LegendTitleRole,\n      style: GuideTitleStyle,\n      from: dataRef,\n      encode\n    }, userEncode);\n  }\n\n  function clip(clip, scope) {\n    let expr;\n\n    if (isObject(clip)) {\n      if (clip.signal) {\n        expr = clip.signal;\n      } else if (clip.path) {\n        expr = 'pathShape(' + param(clip.path) + ')';\n      } else if (clip.sphere) {\n        expr = 'geoShape(' + param(clip.sphere) + ', {type: \"Sphere\"})';\n      }\n    }\n\n    return expr ? scope.signalRef(expr) : !!clip;\n  }\n\n  function param(value) {\n    return isObject(value) && value.signal ? value.signal : $(value);\n  }\n\n  function getRole(spec) {\n    const role = spec.role || '';\n    return !role.indexOf('axis') || !role.indexOf('legend') || !role.indexOf('title') ? role : spec.type === GroupMark ? ScopeRole : role || MarkRole;\n  }\n\n  function definition(spec) {\n    return {\n      marktype: spec.type,\n      name: spec.name || undefined,\n      role: spec.role || getRole(spec),\n      zindex: +spec.zindex || undefined,\n      aria: spec.aria,\n      description: spec.description\n    };\n  }\n\n  function interactive(spec, scope) {\n    return spec && spec.signal ? scope.signalRef(spec.signal) : spec === false ? false : true;\n  }\n  /**\n   * Parse a data transform specification.\n   */\n\n\n  function parseTransform(spec, scope) {\n    const def = definition$1(spec.type);\n    if (!def) error('Unrecognized transform type: ' + $(spec.type));\n    const t = entry(def.type.toLowerCase(), null, parseParameters(def, spec, scope));\n    if (spec.signal) scope.addSignal(spec.signal, scope.proxy(t));\n    t.metadata = def.metadata || {};\n    return t;\n  }\n  /**\n   * Parse all parameters of a data transform.\n   */\n\n\n  function parseParameters(def, spec, scope) {\n    const params = {},\n          n = def.params.length;\n\n    for (let i = 0; i < n; ++i) {\n      const pdef = def.params[i];\n      params[pdef.name] = parseParameter(pdef, spec, scope);\n    }\n\n    return params;\n  }\n  /**\n   * Parse a data transform parameter.\n   */\n\n\n  function parseParameter(def, spec, scope) {\n    const type = def.type,\n          value = spec[def.name];\n\n    if (type === 'index') {\n      return parseIndexParameter(def, spec, scope);\n    } else if (value === undefined) {\n      if (def.required) {\n        error('Missing required ' + $(spec.type) + ' parameter: ' + $(def.name));\n      }\n\n      return;\n    } else if (type === 'param') {\n      return parseSubParameters(def, spec, scope);\n    } else if (type === 'projection') {\n      return scope.projectionRef(spec[def.name]);\n    }\n\n    return def.array && !isSignal(value) ? value.map(v => parameterValue(def, v, scope)) : parameterValue(def, value, scope);\n  }\n  /**\n   * Parse a single parameter value.\n   */\n\n\n  function parameterValue(def, value, scope) {\n    const type = def.type;\n\n    if (isSignal(value)) {\n      return isExpr(type) ? error('Expression references can not be signals.') : isField(type) ? scope.fieldRef(value) : isCompare(type) ? scope.compareRef(value) : scope.signalRef(value.signal);\n    } else {\n      const expr = def.expr || isField(type);\n      return expr && outerExpr(value) ? scope.exprRef(value.expr, value.as) : expr && outerField(value) ? fieldRef$1(value.field, value.as) : isExpr(type) ? parser(value, scope) : isData(type) ? ref(scope.getData(value).values) : isField(type) ? fieldRef$1(value) : isCompare(type) ? scope.compareRef(value) : value;\n    }\n  }\n  /**\n   * Parse parameter for accessing an index of another data set.\n   */\n\n\n  function parseIndexParameter(def, spec, scope) {\n    if (!isString(spec.from)) {\n      error('Lookup \"from\" parameter must be a string literal.');\n    }\n\n    return scope.getData(spec.from).lookupRef(scope, spec.key);\n  }\n  /**\n   * Parse a parameter that contains one or more sub-parameter objects.\n   */\n\n\n  function parseSubParameters(def, spec, scope) {\n    const value = spec[def.name];\n\n    if (def.array) {\n      if (!isArray(value)) {\n        // signals not allowed!\n        error('Expected an array of sub-parameters. Instead: ' + $(value));\n      }\n\n      return value.map(v => parseSubParameter(def, v, scope));\n    } else {\n      return parseSubParameter(def, value, scope);\n    }\n  }\n  /**\n   * Parse a sub-parameter object.\n   */\n\n\n  function parseSubParameter(def, value, scope) {\n    const n = def.params.length;\n    let pdef; // loop over defs to find matching key\n\n    for (let i = 0; i < n; ++i) {\n      pdef = def.params[i];\n\n      for (const k in pdef.key) {\n        if (pdef.key[k] !== value[k]) {\n          pdef = null;\n          break;\n        }\n      }\n\n      if (pdef) break;\n    } // raise error if matching key not found\n\n\n    if (!pdef) error('Unsupported parameter: ' + $(value)); // parse params, create Params transform, return ref\n\n    const params = extend$1(parseParameters(pdef, value, scope), pdef.key);\n    return ref(scope.add(Params(params)));\n  } // -- Utilities -----\n\n\n  const outerExpr = _ => _ && _.expr;\n\n  const outerField = _ => _ && _.field;\n\n  const isData = _ => _ === 'data';\n\n  const isExpr = _ => _ === 'expr';\n\n  const isField = _ => _ === 'field';\n\n  const isCompare = _ => _ === 'compare';\n\n  function parseData$1(from, group, scope) {\n    let facet, key, op, dataRef, parent; // if no source data, generate singleton datum\n\n    if (!from) {\n      dataRef = ref(scope.add(Collect(null, [{}])));\n    } // if faceted, process facet specification\n    else if (facet = from.facet) {\n        if (!group) error('Only group marks can be faceted.'); // use pre-faceted source data, if available\n\n        if (facet.field != null) {\n          dataRef = parent = getDataRef(facet, scope);\n        } else {\n          // generate facet aggregates if no direct data specification\n          if (!from.data) {\n            op = parseTransform(extend$1({\n              type: 'aggregate',\n              groupby: array$5(facet.groupby)\n            }, facet.aggregate), scope);\n            op.params.key = scope.keyRef(facet.groupby);\n            op.params.pulse = getDataRef(facet, scope);\n            dataRef = parent = ref(scope.add(op));\n          } else {\n            parent = ref(scope.getData(from.data).aggregate);\n          }\n\n          key = scope.keyRef(facet.groupby, true);\n        }\n      } // if not yet defined, get source data reference\n\n\n    if (!dataRef) {\n      dataRef = getDataRef(from, scope);\n    }\n\n    return {\n      key: key,\n      pulse: dataRef,\n      parent: parent\n    };\n  }\n\n  function getDataRef(from, scope) {\n    return from.$ref ? from : from.data && from.data.$ref ? from.data : ref(scope.getData(from.data).output);\n  }\n\n  function DataScope(scope, input, output, values, aggr) {\n    this.scope = scope; // parent scope object\n\n    this.input = input; // first operator in pipeline (tuple input)\n\n    this.output = output; // last operator in pipeline (tuple output)\n\n    this.values = values; // operator for accessing tuples (but not tuple flow)\n    // last aggregate in transform pipeline\n\n    this.aggregate = aggr; // lookup table of field indices\n\n    this.index = {};\n  }\n\n  DataScope.fromEntries = function (scope, entries) {\n    const n = entries.length,\n          values = entries[n - 1],\n          output = entries[n - 2];\n    let input = entries[0],\n        aggr = null,\n        i = 1;\n\n    if (input && input.type === 'load') {\n      input = entries[1];\n    } // add operator entries to this scope, wire up pulse chain\n\n\n    scope.add(entries[0]);\n\n    for (; i < n; ++i) {\n      entries[i].params.pulse = ref(entries[i - 1]);\n      scope.add(entries[i]);\n      if (entries[i].type === 'aggregate') aggr = entries[i];\n    }\n\n    return new DataScope(scope, input, output, values, aggr);\n  };\n\n  function fieldKey(field) {\n    return isString(field) ? field : null;\n  }\n\n  function addSortField(scope, p, sort) {\n    const as = aggrField(sort.op, sort.field);\n    let s;\n\n    if (p.ops) {\n      for (let i = 0, n = p.as.length; i < n; ++i) {\n        if (p.as[i] === as) return;\n      }\n    } else {\n      p.ops = ['count'];\n      p.fields = [null];\n      p.as = ['count'];\n    }\n\n    if (sort.op) {\n      p.ops.push((s = sort.op.signal) ? scope.signalRef(s) : sort.op);\n      p.fields.push(scope.fieldRef(sort.field));\n      p.as.push(as);\n    }\n  }\n\n  function cache(scope, ds, name, optype, field, counts, index) {\n    const cache = ds[name] || (ds[name] = {}),\n          sort = sortKey(counts);\n    let k = fieldKey(field),\n        v,\n        op;\n\n    if (k != null) {\n      scope = ds.scope;\n      k = k + (sort ? '|' + sort : '');\n      v = cache[k];\n    }\n\n    if (!v) {\n      const params = counts ? {\n        field: keyFieldRef,\n        pulse: ds.countsRef(scope, field, counts)\n      } : {\n        field: scope.fieldRef(field),\n        pulse: ref(ds.output)\n      };\n      if (sort) params.sort = scope.sortRef(counts);\n      op = scope.add(entry(optype, undefined, params));\n      if (index) ds.index[field] = op;\n      v = ref(op);\n      if (k != null) cache[k] = v;\n    }\n\n    return v;\n  }\n\n  DataScope.prototype = {\n    countsRef(scope, field, sort) {\n      const ds = this,\n            cache = ds.counts || (ds.counts = {}),\n            k = fieldKey(field);\n      let v, a, p;\n\n      if (k != null) {\n        scope = ds.scope;\n        v = cache[k];\n      }\n\n      if (!v) {\n        p = {\n          groupby: scope.fieldRef(field, 'key'),\n          pulse: ref(ds.output)\n        };\n        if (sort && sort.field) addSortField(scope, p, sort);\n        a = scope.add(Aggregate(p));\n        v = scope.add(Collect({\n          pulse: ref(a)\n        }));\n        v = {\n          agg: a,\n          ref: ref(v)\n        };\n        if (k != null) cache[k] = v;\n      } else if (sort && sort.field) {\n        addSortField(scope, v.agg.params, sort);\n      }\n\n      return v.ref;\n    },\n\n    tuplesRef() {\n      return ref(this.values);\n    },\n\n    extentRef(scope, field) {\n      return cache(scope, this, 'extent', 'extent', field, false);\n    },\n\n    domainRef(scope, field) {\n      return cache(scope, this, 'domain', 'values', field, false);\n    },\n\n    valuesRef(scope, field, sort) {\n      return cache(scope, this, 'vals', 'values', field, sort || true);\n    },\n\n    lookupRef(scope, field) {\n      return cache(scope, this, 'lookup', 'tupleindex', field, false);\n    },\n\n    indataRef(scope, field) {\n      return cache(scope, this, 'indata', 'tupleindex', field, true, true);\n    }\n\n  };\n\n  function parseFacet(spec, scope, group) {\n    const facet = spec.from.facet,\n          name = facet.name,\n          data = getDataRef(facet, scope);\n    let op;\n\n    if (!facet.name) {\n      error('Facet must have a name: ' + $(facet));\n    }\n\n    if (!facet.data) {\n      error('Facet must reference a data set: ' + $(facet));\n    }\n\n    if (facet.field) {\n      op = scope.add(PreFacet({\n        field: scope.fieldRef(facet.field),\n        pulse: data\n      }));\n    } else if (facet.groupby) {\n      op = scope.add(Facet({\n        key: scope.keyRef(facet.groupby),\n        group: ref(scope.proxy(group.parent)),\n        pulse: data\n      }));\n    } else {\n      error('Facet must specify groupby or field: ' + $(facet));\n    } // initialize facet subscope\n\n\n    const subscope = scope.fork(),\n          source = subscope.add(Collect()),\n          values = subscope.add(Sieve({\n      pulse: ref(source)\n    }));\n    subscope.addData(name, new DataScope(subscope, source, source, values));\n    subscope.addSignal('parent', null); // parse faceted subflow\n\n    op.params.subflow = {\n      $subflow: subscope.parse(spec).toRuntime()\n    };\n  }\n\n  function parseSubflow(spec, scope, input) {\n    const op = scope.add(PreFacet({\n      pulse: input.pulse\n    })),\n          subscope = scope.fork();\n    subscope.add(Sieve());\n    subscope.addSignal('parent', null); // parse group mark subflow\n\n    op.params.subflow = {\n      $subflow: subscope.parse(spec).toRuntime()\n    };\n  }\n\n  function parseTrigger(spec, scope, name) {\n    const remove = spec.remove,\n          insert = spec.insert,\n          toggle = spec.toggle,\n          modify = spec.modify,\n          values = spec.values,\n          op = scope.add(operator());\n    const update = 'if(' + spec.trigger + ',modify(\"' + name + '\",' + [insert, remove, toggle, modify, values].map(_ => _ == null ? 'null' : _).join(',') + '),0)';\n    const expr = parser(update, scope);\n    op.update = expr.$expr;\n    op.params = expr.$params;\n  }\n\n  function parseMark(spec, scope) {\n    const role = getRole(spec),\n          group = spec.type === GroupMark,\n          facet = spec.from && spec.from.facet,\n          overlap = spec.overlap;\n    let layout = spec.layout || role === ScopeRole || role === FrameRole,\n        ops,\n        op,\n        store,\n        enc,\n        name,\n        layoutRef,\n        boundRef;\n    const nested = role === MarkRole || layout || facet; // resolve input data\n\n    const input = parseData$1(spec.from, group, scope); // data join to map tuples to visual items\n\n    op = scope.add(DataJoin({\n      key: input.key || (spec.key ? fieldRef$1(spec.key) : undefined),\n      pulse: input.pulse,\n      clean: !group\n    }));\n    const joinRef = ref(op); // collect visual items\n\n    op = store = scope.add(Collect({\n      pulse: joinRef\n    })); // connect visual items to scenegraph\n\n    op = scope.add(Mark({\n      markdef: definition(spec),\n      interactive: interactive(spec.interactive, scope),\n      clip: clip(spec.clip, scope),\n      context: {\n        $context: true\n      },\n      groups: scope.lookup(),\n      parent: scope.signals.parent ? scope.signalRef('parent') : null,\n      index: scope.markpath(),\n      pulse: ref(op)\n    }));\n    const markRef = ref(op); // add visual encoders\n\n    op = enc = scope.add(Encode(parseEncode(spec.encode, spec.type, role, spec.style, scope, {\n      mod: false,\n      pulse: markRef\n    }))); // monitor parent marks to propagate changes\n\n    op.params.parent = scope.encode(); // add post-encoding transforms, if defined\n\n    if (spec.transform) {\n      spec.transform.forEach(_ => {\n        const tx = parseTransform(_, scope),\n              md = tx.metadata;\n\n        if (md.generates || md.changes) {\n          error('Mark transforms should not generate new data.');\n        }\n\n        if (!md.nomod) enc.params.mod = true; // update encode mod handling\n\n        tx.params.pulse = ref(op);\n        scope.add(op = tx);\n      });\n    } // if item sort specified, perform post-encoding\n\n\n    if (spec.sort) {\n      op = scope.add(SortItems({\n        sort: scope.compareRef(spec.sort),\n        pulse: ref(op)\n      }));\n    }\n\n    const encodeRef = ref(op); // add view layout operator if needed\n\n    if (facet || layout) {\n      layout = scope.add(ViewLayout({\n        layout: scope.objectProperty(spec.layout),\n        legends: scope.legends,\n        mark: markRef,\n        pulse: encodeRef\n      }));\n      layoutRef = ref(layout);\n    } // compute bounding boxes\n\n\n    const bound = scope.add(Bound({\n      mark: markRef,\n      pulse: layoutRef || encodeRef\n    }));\n    boundRef = ref(bound); // if group mark, recurse to parse nested content\n\n    if (group) {\n      // juggle layout & bounds to ensure they run *after* any faceting transforms\n      if (nested) {\n        ops = scope.operators;\n        ops.pop();\n        if (layout) ops.pop();\n      }\n\n      scope.pushState(encodeRef, layoutRef || boundRef, joinRef);\n      facet ? parseFacet(spec, scope, input) // explicit facet\n      : nested ? parseSubflow(spec, scope, input) // standard mark group\n      : scope.parse(spec); // guide group, we can avoid nested scopes\n\n      scope.popState();\n\n      if (nested) {\n        if (layout) ops.push(layout);\n        ops.push(bound);\n      }\n    } // if requested, add overlap removal transform\n\n\n    if (overlap) {\n      boundRef = parseOverlap(overlap, boundRef, scope);\n    } // render / sieve items\n\n\n    const render = scope.add(Render({\n      pulse: boundRef\n    })),\n          sieve = scope.add(Sieve({\n      pulse: ref(render)\n    }, undefined, scope.parent())); // if mark is named, make accessible as reactive geometry\n    // add trigger updates if defined\n\n    if (spec.name != null) {\n      name = spec.name;\n      scope.addData(name, new DataScope(scope, store, render, sieve));\n      if (spec.on) spec.on.forEach(on => {\n        if (on.insert || on.remove || on.toggle) {\n          error('Marks only support modify triggers.');\n        }\n\n        parseTrigger(on, scope, name);\n      });\n    }\n  }\n\n  function parseOverlap(overlap, source, scope) {\n    const method = overlap.method,\n          bound = overlap.bound,\n          sep = overlap.separation;\n    const params = {\n      separation: isSignal(sep) ? scope.signalRef(sep.signal) : sep,\n      method: isSignal(method) ? scope.signalRef(method.signal) : method,\n      pulse: source\n    };\n\n    if (overlap.order) {\n      params.sort = scope.compareRef({\n        field: overlap.order\n      });\n    }\n\n    if (bound) {\n      const tol = bound.tolerance;\n      params.boundTolerance = isSignal(tol) ? scope.signalRef(tol.signal) : +tol;\n      params.boundScale = scope.scaleRef(bound.scale);\n      params.boundOrient = bound.orient;\n    }\n\n    return ref(scope.add(Overlap(params)));\n  }\n\n  function parseLegend(spec, scope) {\n    const config = scope.config.legend,\n          encode = spec.encode || {},\n          _ = lookup(spec, config),\n          legendEncode = encode.legend || {},\n          name = legendEncode.name || undefined,\n          interactive = legendEncode.interactive,\n          style = legendEncode.style,\n          scales = {};\n\n    let scale = 0,\n        entryLayout,\n        params,\n        children; // resolve scales and 'canonical' scale name\n\n    LegendScales.forEach(s => spec[s] ? (scales[s] = spec[s], scale = scale || spec[s]) : 0);\n    if (!scale) error('Missing valid scale for legend.'); // resolve legend type (symbol, gradient, or discrete gradient)\n\n    const type = legendType(spec, scope.scaleType(scale)); // single-element data source for legend group\n\n    const datum = {\n      title: spec.title != null,\n      scales: scales,\n      type: type,\n      vgrad: type !== 'symbol' && _.isVertical()\n    };\n    const dataRef = ref(scope.add(Collect(null, [datum]))); // encoding properties for legend entry sub-group\n\n    const entryEncode = {\n      enter: {\n        x: {\n          value: 0\n        },\n        y: {\n          value: 0\n        }\n      }\n    }; // data source for legend values\n\n    const entryRef = ref(scope.add(LegendEntries(params = {\n      type: type,\n      scale: scope.scaleRef(scale),\n      count: scope.objectProperty(_('tickCount')),\n      limit: scope.property(_('symbolLimit')),\n      values: scope.objectProperty(spec.values),\n      minstep: scope.property(spec.tickMinStep),\n      formatType: scope.property(spec.formatType),\n      formatSpecifier: scope.property(spec.format)\n    }))); // continuous gradient legend\n\n    if (type === Gradient) {\n      children = [legendGradient(spec, scale, config, encode.gradient), legendGradientLabels(spec, config, encode.labels, entryRef)]; // adjust default tick count based on the gradient length\n\n      params.count = params.count || scope.signalRef(`max(2,2*floor((${deref(_.gradientLength())})/100))`);\n    } // discrete gradient legend\n    else if (type === Discrete) {\n        children = [legendGradientDiscrete(spec, scale, config, encode.gradient, entryRef), legendGradientLabels(spec, config, encode.labels, entryRef)];\n      } // symbol legend\n      else {\n          // determine legend symbol group layout\n          entryLayout = legendSymbolLayout(spec, config);\n          children = [legendSymbolGroups(spec, config, encode, entryRef, deref(entryLayout.columns))]; // pass symbol size information to legend entry generator\n\n          params.size = sizeExpression(spec, scope, children[0].marks);\n        } // generate legend marks\n\n\n    children = [guideGroup({\n      role: LegendEntryRole,\n      from: dataRef,\n      encode: entryEncode,\n      marks: children,\n      layout: entryLayout,\n      interactive\n    })]; // include legend title if defined\n\n    if (datum.title) {\n      children.push(legendTitle(spec, config, encode.title, dataRef));\n    } // parse legend specification\n\n\n    return parseMark(guideGroup({\n      role: LegendRole,\n      from: dataRef,\n      encode: extendEncode(buildLegendEncode(_, spec, config), legendEncode, Skip),\n      marks: children,\n      aria: _('aria'),\n      description: _('description'),\n      zindex: _('zindex'),\n      name,\n      interactive,\n      style\n    }), scope);\n  }\n\n  function legendType(spec, scaleType) {\n    let type = spec.type || Symbols;\n\n    if (!spec.type && scaleCount(spec) === 1 && (spec.fill || spec.stroke)) {\n      type = isContinuous(scaleType) ? Gradient : isDiscretizing(scaleType) ? Discrete : Symbols;\n    }\n\n    return type !== Gradient ? type : isDiscretizing(scaleType) ? Discrete : Gradient;\n  }\n\n  function scaleCount(spec) {\n    return LegendScales.reduce((count, type) => count + (spec[type] ? 1 : 0), 0);\n  }\n\n  function buildLegendEncode(_, spec, config) {\n    const encode = {\n      enter: {},\n      update: {}\n    };\n    addEncoders(encode, {\n      orient: _('orient'),\n      offset: _('offset'),\n      padding: _('padding'),\n      titlePadding: _('titlePadding'),\n      cornerRadius: _('cornerRadius'),\n      fill: _('fillColor'),\n      stroke: _('strokeColor'),\n      strokeWidth: config.strokeWidth,\n      strokeDash: config.strokeDash,\n      x: _('legendX'),\n      y: _('legendY'),\n      // accessibility support\n      format: spec.format,\n      formatType: spec.formatType\n    });\n    return encode;\n  }\n\n  function sizeExpression(spec, scope, marks) {\n    const size = deref(getChannel('size', spec, marks)),\n          strokeWidth = deref(getChannel('strokeWidth', spec, marks)),\n          fontSize = deref(getFontSize(marks[1].encode, scope, GuideLabelStyle));\n    return parser(`max(ceil(sqrt(${size})+${strokeWidth}),${fontSize})`, scope);\n  }\n\n  function getChannel(name, spec, marks) {\n    return spec[name] ? `scale(\"${spec[name]}\",datum)` : getEncoding(name, marks[0].encode);\n  }\n\n  function getFontSize(encode, scope, style) {\n    return getEncoding('fontSize', encode) || getStyle('fontSize', scope, style);\n  }\n\n  const angleExpr = `item.orient===\"${Left}\"?-90:item.orient===\"${Right}\"?90:0`;\n\n  function parseTitle(spec, scope) {\n    spec = isString(spec) ? {\n      text: spec\n    } : spec;\n\n    const _ = lookup(spec, scope.config.title),\n          encode = spec.encode || {},\n          userEncode = encode.group || {},\n          name = userEncode.name || undefined,\n          interactive = userEncode.interactive,\n          style = userEncode.style,\n          children = []; // single-element data source for group title\n\n\n    const datum = {},\n          dataRef = ref(scope.add(Collect(null, [datum]))); // include title text\n\n    children.push(buildTitle(spec, _, titleEncode(spec), dataRef)); // include subtitle text\n\n    if (spec.subtitle) {\n      children.push(buildSubTitle(spec, _, encode.subtitle, dataRef));\n    } // parse title specification\n\n\n    return parseMark(guideGroup({\n      role: TitleRole,\n      from: dataRef,\n      encode: groupEncode(_, userEncode),\n      marks: children,\n      aria: _('aria'),\n      description: _('description'),\n      zindex: _('zindex'),\n      name,\n      interactive,\n      style\n    }), scope);\n  } // provide backwards-compatibility for title custom encode;\n  // the top-level encode block has been *deprecated*.\n\n\n  function titleEncode(spec) {\n    const encode = spec.encode;\n    return encode && encode.title || extend$1({\n      name: spec.name,\n      interactive: spec.interactive,\n      style: spec.style\n    }, encode);\n  }\n\n  function groupEncode(_, userEncode) {\n    const encode = {\n      enter: {},\n      update: {}\n    };\n    addEncoders(encode, {\n      orient: _('orient'),\n      anchor: _('anchor'),\n      align: {\n        signal: alignExpr$1\n      },\n      angle: {\n        signal: angleExpr\n      },\n      limit: _('limit'),\n      frame: _('frame'),\n      offset: _('offset') || 0,\n      padding: _('subtitlePadding')\n    });\n    return extendEncode(encode, userEncode, Skip);\n  }\n\n  function buildTitle(spec, _, userEncode, dataRef) {\n    const zero = {\n      value: 0\n    },\n          text = spec.text,\n          encode = {\n      enter: {\n        opacity: zero\n      },\n      update: {\n        opacity: {\n          value: 1\n        }\n      },\n      exit: {\n        opacity: zero\n      }\n    };\n    addEncoders(encode, {\n      text: text,\n      align: {\n        signal: 'item.mark.group.align'\n      },\n      angle: {\n        signal: 'item.mark.group.angle'\n      },\n      limit: {\n        signal: 'item.mark.group.limit'\n      },\n      baseline: 'top',\n      dx: _('dx'),\n      dy: _('dy'),\n      fill: _('color'),\n      font: _('font'),\n      fontSize: _('fontSize'),\n      fontStyle: _('fontStyle'),\n      fontWeight: _('fontWeight'),\n      lineHeight: _('lineHeight')\n    }, {\n      // update\n      align: _('align'),\n      angle: _('angle'),\n      baseline: _('baseline')\n    });\n    return guideMark({\n      type: TextMark,\n      role: TitleTextRole,\n      style: GroupTitleStyle,\n      from: dataRef,\n      encode\n    }, userEncode);\n  }\n\n  function buildSubTitle(spec, _, userEncode, dataRef) {\n    const zero = {\n      value: 0\n    },\n          text = spec.subtitle,\n          encode = {\n      enter: {\n        opacity: zero\n      },\n      update: {\n        opacity: {\n          value: 1\n        }\n      },\n      exit: {\n        opacity: zero\n      }\n    };\n    addEncoders(encode, {\n      text: text,\n      align: {\n        signal: 'item.mark.group.align'\n      },\n      angle: {\n        signal: 'item.mark.group.angle'\n      },\n      limit: {\n        signal: 'item.mark.group.limit'\n      },\n      baseline: 'top',\n      dx: _('dx'),\n      dy: _('dy'),\n      fill: _('subtitleColor'),\n      font: _('subtitleFont'),\n      fontSize: _('subtitleFontSize'),\n      fontStyle: _('subtitleFontStyle'),\n      fontWeight: _('subtitleFontWeight'),\n      lineHeight: _('subtitleLineHeight')\n    }, {\n      // update\n      align: _('align'),\n      angle: _('angle'),\n      baseline: _('baseline')\n    });\n    return guideMark({\n      type: TextMark,\n      role: TitleSubtitleRole,\n      style: GroupSubtitleStyle,\n      from: dataRef,\n      encode\n    }, userEncode);\n  }\n\n  function parseData(data, scope) {\n    const transforms = [];\n\n    if (data.transform) {\n      data.transform.forEach(tx => {\n        transforms.push(parseTransform(tx, scope));\n      });\n    }\n\n    if (data.on) {\n      data.on.forEach(on => {\n        parseTrigger(on, scope, data.name);\n      });\n    }\n\n    scope.addDataPipeline(data.name, analyze(data, scope, transforms));\n  }\n  /**\n   * Analyze a data pipeline, add needed operators.\n   */\n\n\n  function analyze(data, scope, ops) {\n    const output = [];\n    let source = null,\n        modify = false,\n        generate = false,\n        upstream,\n        i,\n        n,\n        t,\n        m;\n\n    if (data.values) {\n      // hard-wired input data set\n      if (isSignal(data.values) || hasSignal(data.format)) {\n        // if either values is signal or format has signal, use dynamic loader\n        output.push(load(scope, data));\n        output.push(source = collect());\n      } else {\n        // otherwise, ingest upon dataflow init\n        output.push(source = collect({\n          $ingest: data.values,\n          $format: data.format\n        }));\n      }\n    } else if (data.url) {\n      // load data from external source\n      if (hasSignal(data.url) || hasSignal(data.format)) {\n        // if either url or format has signal, use dynamic loader\n        output.push(load(scope, data));\n        output.push(source = collect());\n      } else {\n        // otherwise, request load upon dataflow init\n        output.push(source = collect({\n          $request: data.url,\n          $format: data.format\n        }));\n      }\n    } else if (data.source) {\n      // derives from one or more other data sets\n      source = upstream = array$5(data.source).map(d => ref(scope.getData(d).output));\n      output.push(null); // populate later\n    } // scan data transforms, add collectors as needed\n\n\n    for (i = 0, n = ops.length; i < n; ++i) {\n      t = ops[i];\n      m = t.metadata;\n\n      if (!source && !m.source) {\n        output.push(source = collect());\n      }\n\n      output.push(t);\n      if (m.generates) generate = true;\n      if (m.modifies && !generate) modify = true;\n      if (m.source) source = t;else if (m.changes) source = null;\n    }\n\n    if (upstream) {\n      n = upstream.length - 1;\n      output[0] = Relay({\n        derive: modify,\n        pulse: n ? upstream : upstream[0]\n      });\n\n      if (modify || n) {\n        // collect derived and multi-pulse tuples\n        output.splice(1, 0, collect());\n      }\n    }\n\n    if (!source) output.push(collect());\n    output.push(Sieve({}));\n    return output;\n  }\n\n  function collect(values) {\n    const s = Collect({}, values);\n    s.metadata = {\n      source: true\n    };\n    return s;\n  }\n\n  function load(scope, data) {\n    return Load({\n      url: data.url ? scope.property(data.url) : undefined,\n      async: data.async ? scope.property(data.async) : undefined,\n      values: data.values ? scope.property(data.values) : undefined,\n      format: scope.objectProperty(data.format)\n    });\n  }\n\n  const isX = orient => orient === Bottom || orient === Top; // get sign coefficient based on axis orient\n\n\n  const getSign = (orient, a, b) => isSignal(orient) ? ifLeftTopExpr(orient.signal, a, b) : orient === Left || orient === Top ? a : b; // condition on axis x-direction\n\n\n  const ifX = (orient, a, b) => isSignal(orient) ? ifXEnc(orient.signal, a, b) : isX(orient) ? a : b; // condition on axis y-direction\n\n\n  const ifY = (orient, a, b) => isSignal(orient) ? ifYEnc(orient.signal, a, b) : isX(orient) ? b : a;\n\n  const ifTop = (orient, a, b) => isSignal(orient) ? ifTopExpr(orient.signal, a, b) : orient === Top ? {\n    value: a\n  } : {\n    value: b\n  };\n\n  const ifRight = (orient, a, b) => isSignal(orient) ? ifRightExpr(orient.signal, a, b) : orient === Right ? {\n    value: a\n  } : {\n    value: b\n  };\n\n  const ifXEnc = ($orient, a, b) => ifEnc(`${$orient} === '${Top}' || ${$orient} === '${Bottom}'`, a, b);\n\n  const ifYEnc = ($orient, a, b) => ifEnc(`${$orient} !== '${Top}' && ${$orient} !== '${Bottom}'`, a, b);\n\n  const ifLeftTopExpr = ($orient, a, b) => ifExpr(`${$orient} === '${Left}' || ${$orient} === '${Top}'`, a, b);\n\n  const ifTopExpr = ($orient, a, b) => ifExpr(`${$orient} === '${Top}'`, a, b);\n\n  const ifRightExpr = ($orient, a, b) => ifExpr(`${$orient} === '${Right}'`, a, b);\n\n  const ifEnc = (test, a, b) => {\n    // ensure inputs are encoder objects (or null)\n    a = a != null ? encoder(a) : a;\n    b = b != null ? encoder(b) : b;\n\n    if (isSimple(a) && isSimple(b)) {\n      // if possible generate simple signal expression\n      a = a ? a.signal || $(a.value) : null;\n      b = b ? b.signal || $(b.value) : null;\n      return {\n        signal: `${test} ? (${a}) : (${b})`\n      };\n    } else {\n      // otherwise generate rule set\n      return [extend$1({\n        test\n      }, a)].concat(b || []);\n    }\n  };\n\n  const isSimple = enc => enc == null || Object.keys(enc).length === 1;\n\n  const ifExpr = (test, a, b) => ({\n    signal: `${test} ? (${toExpr(a)}) : (${toExpr(b)})`\n  });\n\n  const ifOrient = ($orient, t, b, l, r) => ({\n    signal: (l != null ? `${$orient} === '${Left}' ? (${toExpr(l)}) : ` : '') + (b != null ? `${$orient} === '${Bottom}' ? (${toExpr(b)}) : ` : '') + (r != null ? `${$orient} === '${Right}' ? (${toExpr(r)}) : ` : '') + (t != null ? `${$orient} === '${Top}' ? (${toExpr(t)}) : ` : '') + '(null)'\n  });\n\n  const toExpr = v => isSignal(v) ? v.signal : v == null ? null : $(v);\n\n  const mult = (sign, value) => value === 0 ? 0 : isSignal(sign) ? {\n    signal: `(${sign.signal}) * ${value}`\n  } : {\n    value: sign * value\n  };\n\n  const patch = (value, base) => {\n    const s = value.signal;\n    return s && s.endsWith('(null)') ? {\n      signal: s.slice(0, -6) + base.signal\n    } : value;\n  };\n\n  function fallback(prop, config, axisConfig, style) {\n    let styleProp;\n\n    if (config && has$1(config, prop)) {\n      return config[prop];\n    } else if (has$1(axisConfig, prop)) {\n      return axisConfig[prop];\n    } else if (prop.startsWith('title')) {\n      switch (prop) {\n        case 'titleColor':\n          styleProp = 'fill';\n          break;\n\n        case 'titleFont':\n        case 'titleFontSize':\n        case 'titleFontWeight':\n          styleProp = prop[5].toLowerCase() + prop.slice(6);\n      }\n\n      return style[GuideTitleStyle][styleProp];\n    } else if (prop.startsWith('label')) {\n      switch (prop) {\n        case 'labelColor':\n          styleProp = 'fill';\n          break;\n\n        case 'labelFont':\n        case 'labelFontSize':\n          styleProp = prop[5].toLowerCase() + prop.slice(6);\n      }\n\n      return style[GuideLabelStyle][styleProp];\n    }\n\n    return null;\n  }\n\n  function keys(objects) {\n    const map = {};\n\n    for (const obj of objects) {\n      if (!obj) continue;\n\n      for (const key in obj) map[key] = 1;\n    }\n\n    return Object.keys(map);\n  }\n\n  function axisConfig(spec, scope) {\n    var config = scope.config,\n        style = config.style,\n        axis = config.axis,\n        band = scope.scaleType(spec.scale) === 'band' && config.axisBand,\n        orient = spec.orient,\n        xy,\n        or,\n        key;\n\n    if (isSignal(orient)) {\n      const xyKeys = keys([config.axisX, config.axisY]),\n            orientKeys = keys([config.axisTop, config.axisBottom, config.axisLeft, config.axisRight]);\n      xy = {};\n\n      for (key of xyKeys) {\n        xy[key] = ifX(orient, fallback(key, config.axisX, axis, style), fallback(key, config.axisY, axis, style));\n      }\n\n      or = {};\n\n      for (key of orientKeys) {\n        or[key] = ifOrient(orient.signal, fallback(key, config.axisTop, axis, style), fallback(key, config.axisBottom, axis, style), fallback(key, config.axisLeft, axis, style), fallback(key, config.axisRight, axis, style));\n      }\n    } else {\n      xy = orient === Top || orient === Bottom ? config.axisX : config.axisY;\n      or = config['axis' + orient[0].toUpperCase() + orient.slice(1)];\n    }\n\n    const result = xy || or || band ? extend$1({}, axis, xy, or, band) : axis;\n    return result;\n  }\n\n  function axisDomain(spec, config, userEncode, dataRef) {\n    const _ = lookup(spec, config),\n          orient = spec.orient;\n\n    let enter, update;\n    const encode = {\n      enter: enter = {\n        opacity: zero\n      },\n      update: update = {\n        opacity: one\n      },\n      exit: {\n        opacity: zero\n      }\n    };\n    addEncoders(encode, {\n      stroke: _('domainColor'),\n      strokeCap: _('domainCap'),\n      strokeDash: _('domainDash'),\n      strokeDashOffset: _('domainDashOffset'),\n      strokeWidth: _('domainWidth'),\n      strokeOpacity: _('domainOpacity')\n    });\n    const pos0 = position(spec, 0);\n    const pos1 = position(spec, 1);\n    enter.x = update.x = ifX(orient, pos0, zero);\n    enter.x2 = update.x2 = ifX(orient, pos1);\n    enter.y = update.y = ifY(orient, pos0, zero);\n    enter.y2 = update.y2 = ifY(orient, pos1);\n    return guideMark({\n      type: RuleMark,\n      role: AxisDomainRole,\n      from: dataRef,\n      encode\n    }, userEncode);\n  }\n\n  function position(spec, pos) {\n    return {\n      scale: spec.scale,\n      range: pos\n    };\n  }\n\n  function axisGrid(spec, config, userEncode, dataRef, band) {\n    const _ = lookup(spec, config),\n          orient = spec.orient,\n          vscale = spec.gridScale,\n          sign = getSign(orient, 1, -1),\n          offset = offsetValue(spec.offset, sign);\n\n    let enter, exit, update;\n    const encode = {\n      enter: enter = {\n        opacity: zero\n      },\n      update: update = {\n        opacity: one\n      },\n      exit: exit = {\n        opacity: zero\n      }\n    };\n    addEncoders(encode, {\n      stroke: _('gridColor'),\n      strokeCap: _('gridCap'),\n      strokeDash: _('gridDash'),\n      strokeDashOffset: _('gridDashOffset'),\n      strokeOpacity: _('gridOpacity'),\n      strokeWidth: _('gridWidth')\n    });\n    const tickPos = {\n      scale: spec.scale,\n      field: Value,\n      band: band.band,\n      extra: band.extra,\n      offset: band.offset,\n      round: _('tickRound')\n    };\n    const sz = ifX(orient, {\n      signal: 'height'\n    }, {\n      signal: 'width'\n    });\n    const gridStart = vscale ? {\n      scale: vscale,\n      range: 0,\n      mult: sign,\n      offset: offset\n    } : {\n      value: 0,\n      offset: offset\n    };\n    const gridEnd = vscale ? {\n      scale: vscale,\n      range: 1,\n      mult: sign,\n      offset: offset\n    } : extend$1(sz, {\n      mult: sign,\n      offset: offset\n    });\n    enter.x = update.x = ifX(orient, tickPos, gridStart);\n    enter.y = update.y = ifY(orient, tickPos, gridStart);\n    enter.x2 = update.x2 = ifY(orient, gridEnd);\n    enter.y2 = update.y2 = ifX(orient, gridEnd);\n    exit.x = ifX(orient, tickPos);\n    exit.y = ifY(orient, tickPos);\n    return guideMark({\n      type: RuleMark,\n      role: AxisGridRole,\n      key: Value,\n      from: dataRef,\n      encode\n    }, userEncode);\n  }\n\n  function offsetValue(offset, sign) {\n    if (sign === 1) ;else if (!isObject(offset)) {\n      offset = isSignal(sign) ? {\n        signal: `(${sign.signal}) * (${offset || 0})`\n      } : sign * (offset || 0);\n    } else {\n      let entry = offset = extend$1({}, offset);\n\n      while (entry.mult != null) {\n        if (!isObject(entry.mult)) {\n          entry.mult = isSignal(sign) // no offset if sign === 1\n          ? {\n            signal: `(${entry.mult}) * (${sign.signal})`\n          } : entry.mult * sign;\n          return offset;\n        } else {\n          entry = entry.mult = extend$1({}, entry.mult);\n        }\n      }\n\n      entry.mult = sign;\n    }\n    return offset;\n  }\n\n  function axisTicks(spec, config, userEncode, dataRef, size, band) {\n    const _ = lookup(spec, config),\n          orient = spec.orient,\n          sign = getSign(orient, -1, 1);\n\n    let enter, exit, update;\n    const encode = {\n      enter: enter = {\n        opacity: zero\n      },\n      update: update = {\n        opacity: one\n      },\n      exit: exit = {\n        opacity: zero\n      }\n    };\n    addEncoders(encode, {\n      stroke: _('tickColor'),\n      strokeCap: _('tickCap'),\n      strokeDash: _('tickDash'),\n      strokeDashOffset: _('tickDashOffset'),\n      strokeOpacity: _('tickOpacity'),\n      strokeWidth: _('tickWidth')\n    });\n    const tickSize = encoder(size);\n    tickSize.mult = sign;\n    const tickPos = {\n      scale: spec.scale,\n      field: Value,\n      band: band.band,\n      extra: band.extra,\n      offset: band.offset,\n      round: _('tickRound')\n    };\n    update.y = enter.y = ifX(orient, zero, tickPos);\n    update.y2 = enter.y2 = ifX(orient, tickSize);\n    exit.x = ifX(orient, tickPos);\n    update.x = enter.x = ifY(orient, zero, tickPos);\n    update.x2 = enter.x2 = ifY(orient, tickSize);\n    exit.y = ifY(orient, tickPos);\n    return guideMark({\n      type: RuleMark,\n      role: AxisTickRole,\n      key: Value,\n      from: dataRef,\n      encode\n    }, userEncode);\n  }\n\n  function flushExpr(scale, threshold, a, b, c) {\n    return {\n      signal: 'flush(range(\"' + scale + '\"), ' + 'scale(\"' + scale + '\", datum.value), ' + threshold + ',' + a + ',' + b + ',' + c + ')'\n    };\n  }\n\n  function axisLabels(spec, config, userEncode, dataRef, size, band) {\n    const _ = lookup(spec, config),\n          orient = spec.orient,\n          scale = spec.scale,\n          sign = getSign(orient, -1, 1),\n          flush = deref(_('labelFlush')),\n          flushOffset = deref(_('labelFlushOffset')),\n          labelAlign = _('labelAlign'),\n          labelBaseline = _('labelBaseline');\n\n    let flushOn = flush === 0 || !!flush,\n        update;\n    const tickSize = encoder(size);\n    tickSize.mult = sign;\n    tickSize.offset = encoder(_('labelPadding') || 0);\n    tickSize.offset.mult = sign;\n    const tickPos = {\n      scale: scale,\n      field: Value,\n      band: 0.5,\n      offset: extendOffset(band.offset, _('labelOffset'))\n    };\n    const align = ifX(orient, flushOn ? flushExpr(scale, flush, '\"left\"', '\"right\"', '\"center\"') : {\n      value: 'center'\n    }, ifRight(orient, 'left', 'right'));\n    const baseline = ifX(orient, ifTop(orient, 'bottom', 'top'), flushOn ? flushExpr(scale, flush, '\"top\"', '\"bottom\"', '\"middle\"') : {\n      value: 'middle'\n    });\n    const offsetExpr = flushExpr(scale, flush, `-(${flushOffset})`, flushOffset, 0);\n    flushOn = flushOn && flushOffset;\n    const enter = {\n      opacity: zero,\n      x: ifX(orient, tickPos, tickSize),\n      y: ifY(orient, tickPos, tickSize)\n    };\n    const encode = {\n      enter: enter,\n      update: update = {\n        opacity: one,\n        text: {\n          field: Label\n        },\n        x: enter.x,\n        y: enter.y,\n        align,\n        baseline\n      },\n      exit: {\n        opacity: zero,\n        x: enter.x,\n        y: enter.y\n      }\n    };\n    addEncoders(encode, {\n      dx: !labelAlign && flushOn ? ifX(orient, offsetExpr) : null,\n      dy: !labelBaseline && flushOn ? ifY(orient, offsetExpr) : null\n    });\n    addEncoders(encode, {\n      angle: _('labelAngle'),\n      fill: _('labelColor'),\n      fillOpacity: _('labelOpacity'),\n      font: _('labelFont'),\n      fontSize: _('labelFontSize'),\n      fontWeight: _('labelFontWeight'),\n      fontStyle: _('labelFontStyle'),\n      limit: _('labelLimit'),\n      lineHeight: _('labelLineHeight')\n    }, {\n      align: labelAlign,\n      baseline: labelBaseline\n    });\n\n    const bound = _('labelBound');\n\n    let overlap = _('labelOverlap'); // if overlap method or bound defined, request label overlap removal\n\n\n    overlap = overlap || bound ? {\n      separation: _('labelSeparation'),\n      method: overlap,\n      order: 'datum.index',\n      bound: bound ? {\n        scale,\n        orient,\n        tolerance: bound\n      } : null\n    } : undefined;\n\n    if (update.align !== align) {\n      update.align = patch(update.align, align);\n    }\n\n    if (update.baseline !== baseline) {\n      update.baseline = patch(update.baseline, baseline);\n    }\n\n    return guideMark({\n      type: TextMark,\n      role: AxisLabelRole,\n      style: GuideLabelStyle,\n      key: Value,\n      from: dataRef,\n      encode,\n      overlap\n    }, userEncode);\n  }\n\n  function axisTitle(spec, config, userEncode, dataRef) {\n    const _ = lookup(spec, config),\n          orient = spec.orient,\n          sign = getSign(orient, -1, 1);\n\n    let enter, update;\n    const encode = {\n      enter: enter = {\n        opacity: zero,\n        anchor: encoder(_('titleAnchor', null)),\n        align: {\n          signal: alignExpr$1\n        }\n      },\n      update: update = extend$1({}, enter, {\n        opacity: one,\n        text: encoder(spec.title)\n      }),\n      exit: {\n        opacity: zero\n      }\n    };\n    const titlePos = {\n      signal: `lerp(range(\"${spec.scale}\"), ${anchorExpr(0, 1, 0.5)})`\n    };\n    update.x = ifX(orient, titlePos);\n    update.y = ifY(orient, titlePos);\n    enter.angle = ifX(orient, zero, mult(sign, 90));\n    enter.baseline = ifX(orient, ifTop(orient, Bottom, Top), {\n      value: Bottom\n    });\n    update.angle = enter.angle;\n    update.baseline = enter.baseline;\n    addEncoders(encode, {\n      fill: _('titleColor'),\n      fillOpacity: _('titleOpacity'),\n      font: _('titleFont'),\n      fontSize: _('titleFontSize'),\n      fontStyle: _('titleFontStyle'),\n      fontWeight: _('titleFontWeight'),\n      limit: _('titleLimit'),\n      lineHeight: _('titleLineHeight')\n    }, {\n      // require update\n      align: _('titleAlign'),\n      angle: _('titleAngle'),\n      baseline: _('titleBaseline')\n    });\n    autoLayout(_, orient, encode, userEncode);\n    encode.update.align = patch(encode.update.align, enter.align);\n    encode.update.angle = patch(encode.update.angle, enter.angle);\n    encode.update.baseline = patch(encode.update.baseline, enter.baseline);\n    return guideMark({\n      type: TextMark,\n      role: AxisTitleRole,\n      style: GuideTitleStyle,\n      from: dataRef,\n      encode\n    }, userEncode);\n  }\n\n  function autoLayout(_, orient, encode, userEncode) {\n    const auto = (value, dim) => value != null ? (encode.update[dim] = patch(encoder(value), encode.update[dim]), false) : !has(dim, userEncode) ? true : false;\n\n    const autoY = auto(_('titleX'), 'x'),\n          autoX = auto(_('titleY'), 'y');\n    encode.enter.auto = autoX === autoY ? encoder(autoX) : ifX(orient, encoder(autoX), encoder(autoY));\n  }\n\n  function parseAxis(spec, scope) {\n    const config = axisConfig(spec, scope),\n          encode = spec.encode || {},\n          axisEncode = encode.axis || {},\n          name = axisEncode.name || undefined,\n          interactive = axisEncode.interactive,\n          style = axisEncode.style,\n          _ = lookup(spec, config),\n          band = tickBand(_); // single-element data source for axis group\n\n\n    const datum = {\n      scale: spec.scale,\n      ticks: !!_('ticks'),\n      labels: !!_('labels'),\n      grid: !!_('grid'),\n      domain: !!_('domain'),\n      title: spec.title != null\n    };\n    const dataRef = ref(scope.add(Collect({}, [datum]))); // data source for axis ticks\n\n    const ticksRef = ref(scope.add(AxisTicks({\n      scale: scope.scaleRef(spec.scale),\n      extra: scope.property(band.extra),\n      count: scope.objectProperty(spec.tickCount),\n      values: scope.objectProperty(spec.values),\n      minstep: scope.property(spec.tickMinStep),\n      formatType: scope.property(spec.formatType),\n      formatSpecifier: scope.property(spec.format)\n    }))); // generate axis marks\n\n    const children = [];\n    let size; // include axis gridlines if requested\n\n    if (datum.grid) {\n      children.push(axisGrid(spec, config, encode.grid, ticksRef, band));\n    } // include axis ticks if requested\n\n\n    if (datum.ticks) {\n      size = _('tickSize');\n      children.push(axisTicks(spec, config, encode.ticks, ticksRef, size, band));\n    } // include axis labels if requested\n\n\n    if (datum.labels) {\n      size = datum.ticks ? size : 0;\n      children.push(axisLabels(spec, config, encode.labels, ticksRef, size, band));\n    } // include axis domain path if requested\n\n\n    if (datum.domain) {\n      children.push(axisDomain(spec, config, encode.domain, dataRef));\n    } // include axis title if defined\n\n\n    if (datum.title) {\n      children.push(axisTitle(spec, config, encode.title, dataRef));\n    } // parse axis specification\n\n\n    return parseMark(guideGroup({\n      role: AxisRole,\n      from: dataRef,\n      encode: extendEncode(buildAxisEncode(_, spec), axisEncode, Skip),\n      marks: children,\n      aria: _('aria'),\n      description: _('description'),\n      zindex: _('zindex'),\n      name,\n      interactive,\n      style\n    }), scope);\n  }\n\n  function buildAxisEncode(_, spec) {\n    const encode = {\n      enter: {},\n      update: {}\n    };\n    addEncoders(encode, {\n      orient: _('orient'),\n      offset: _('offset') || 0,\n      position: value(spec.position, 0),\n      titlePadding: _('titlePadding'),\n      minExtent: _('minExtent'),\n      maxExtent: _('maxExtent'),\n      range: {\n        signal: `abs(span(range(\"${spec.scale}\")))`\n      },\n      translate: _('translate'),\n      // accessibility support\n      format: spec.format,\n      formatType: spec.formatType\n    });\n    return encode;\n  }\n\n  function parseScope(spec, scope, preprocessed) {\n    const signals = array$5(spec.signals),\n          scales = array$5(spec.scales); // parse signal definitions, if not already preprocessed\n\n    if (!preprocessed) signals.forEach(_ => parseSignal(_, scope)); // parse cartographic projection definitions\n\n    array$5(spec.projections).forEach(_ => parseProjection(_, scope)); // initialize scale references\n\n    scales.forEach(_ => initScale(_, scope)); // parse data sources\n\n    array$5(spec.data).forEach(_ => parseData(_, scope)); // parse scale definitions\n\n    scales.forEach(_ => parseScale(_, scope)); // parse signal updates\n\n    (preprocessed || signals).forEach(_ => parseSignalUpdates(_, scope)); // parse axis definitions\n\n    array$5(spec.axes).forEach(_ => parseAxis(_, scope)); // parse mark definitions\n\n    array$5(spec.marks).forEach(_ => parseMark(_, scope)); // parse legend definitions\n\n    array$5(spec.legends).forEach(_ => parseLegend(_, scope)); // parse title, if defined\n\n    if (spec.title) parseTitle(spec.title, scope); // parse collected lambda (anonymous) expressions\n\n    scope.parseLambdas();\n    return scope;\n  }\n\n  const rootEncode = spec => extendEncode({\n    enter: {\n      x: {\n        value: 0\n      },\n      y: {\n        value: 0\n      }\n    },\n    update: {\n      width: {\n        signal: 'width'\n      },\n      height: {\n        signal: 'height'\n      }\n    }\n  }, spec);\n\n  function parseView(spec, scope) {\n    const config = scope.config; // add scenegraph root\n\n    const root = ref(scope.root = scope.add(operator())); // parse top-level signal definitions\n\n    const signals = collectSignals(spec, config);\n    signals.forEach(_ => parseSignal(_, scope)); // assign description, event, legend, and locale configuration\n\n    scope.description = spec.description || config.description;\n    scope.eventConfig = config.events;\n    scope.legends = scope.objectProperty(config.legend && config.legend.layout);\n    scope.locale = config.locale; // store root group item\n\n    const input = scope.add(Collect()); // encode root group item\n\n    const encode = scope.add(Encode(parseEncode(rootEncode(spec.encode), GroupMark, FrameRole, spec.style, scope, {\n      pulse: ref(input)\n    }))); // perform view layout\n\n    const parent = scope.add(ViewLayout({\n      layout: scope.objectProperty(spec.layout),\n      legends: scope.legends,\n      autosize: scope.signalRef('autosize'),\n      mark: root,\n      pulse: ref(encode)\n    }));\n    scope.operators.pop(); // parse remainder of specification\n\n    scope.pushState(ref(encode), ref(parent), null);\n    parseScope(spec, scope, signals);\n    scope.operators.push(parent); // bound / render / sieve root item\n\n    let op = scope.add(Bound({\n      mark: root,\n      pulse: ref(parent)\n    }));\n    op = scope.add(Render({\n      pulse: ref(op)\n    }));\n    op = scope.add(Sieve({\n      pulse: ref(op)\n    })); // track metadata for root item\n\n    scope.addData('root', new DataScope(scope, input, input, op));\n    return scope;\n  }\n\n  function signalObject(name, value) {\n    return value && value.signal ? {\n      name,\n      update: value.signal\n    } : {\n      name,\n      value\n    };\n  }\n  /**\n   * Collect top-level signals, merging values as needed. Signals\n   * defined in the config signals arrays are added only if that\n   * signal is not explicitly defined in the specification.\n   * Built-in signals (autosize, background, padding, width, height)\n   * receive special treatment. They are initialized using the\n   * top-level spec property, or, if undefined in the spec, using\n   * the corresponding top-level config property. If this property\n   * is a signal reference object, the signal expression maps to the\n   * signal 'update' property. If the spec's top-level signal array\n   * contains an entry that matches a built-in signal, that entry\n   * will be merged with the built-in specification, potentially\n   * overwriting existing 'value' or 'update' properties.\n   */\n\n\n  function collectSignals(spec, config) {\n    const _ = name => value(spec[name], config[name]),\n          signals = [signalObject('background', _('background')), signalObject('autosize', parseAutosize(_('autosize'))), signalObject('padding', parsePadding(_('padding'))), signalObject('width', _('width') || 0), signalObject('height', _('height') || 0)],\n          pre = signals.reduce((p, s) => (p[s.name] = s, p), {}),\n          map = {}; // add spec signal array\n\n\n    array$5(spec.signals).forEach(s => {\n      if (has$1(pre, s.name)) {\n        // merge if built-in signal\n        s = extend$1(pre[s.name], s);\n      } else {\n        // otherwise add to signal list\n        signals.push(s);\n      }\n\n      map[s.name] = s;\n    }); // add config signal array\n\n    array$5(config.signals).forEach(s => {\n      if (!has$1(map, s.name) && !has$1(pre, s.name)) {\n        // add to signal list if not already defined\n        signals.push(s);\n      }\n    });\n    return signals;\n  }\n\n  function Scope(config, options) {\n    this.config = config || {};\n    this.options = options || {};\n    this.bindings = [];\n    this.field = {};\n    this.signals = {};\n    this.lambdas = {};\n    this.scales = {};\n    this.events = {};\n    this.data = {};\n    this.streams = [];\n    this.updates = [];\n    this.operators = [];\n    this.eventConfig = null;\n    this.locale = null;\n    this._id = 0;\n    this._subid = 0;\n    this._nextsub = [0];\n    this._parent = [];\n    this._encode = [];\n    this._lookup = [];\n    this._markpath = [];\n  }\n\n  function Subscope(scope) {\n    this.config = scope.config;\n    this.options = scope.options;\n    this.legends = scope.legends;\n    this.field = Object.create(scope.field);\n    this.signals = Object.create(scope.signals);\n    this.lambdas = Object.create(scope.lambdas);\n    this.scales = Object.create(scope.scales);\n    this.events = Object.create(scope.events);\n    this.data = Object.create(scope.data);\n    this.streams = [];\n    this.updates = [];\n    this.operators = [];\n    this._id = 0;\n    this._subid = ++scope._nextsub[0];\n    this._nextsub = scope._nextsub;\n    this._parent = scope._parent.slice();\n    this._encode = scope._encode.slice();\n    this._lookup = scope._lookup.slice();\n    this._markpath = scope._markpath;\n  }\n\n  Scope.prototype = Subscope.prototype = {\n    parse(spec) {\n      return parseScope(spec, this);\n    },\n\n    fork() {\n      return new Subscope(this);\n    },\n\n    isSubscope() {\n      return this._subid > 0;\n    },\n\n    toRuntime() {\n      this.finish();\n      return {\n        description: this.description,\n        operators: this.operators,\n        streams: this.streams,\n        updates: this.updates,\n        bindings: this.bindings,\n        eventConfig: this.eventConfig,\n        locale: this.locale\n      };\n    },\n\n    id() {\n      return (this._subid ? this._subid + ':' : 0) + this._id++;\n    },\n\n    add(op) {\n      this.operators.push(op);\n      op.id = this.id(); // if pre-registration references exist, resolve them now\n\n      if (op.refs) {\n        op.refs.forEach(ref => {\n          ref.$ref = op.id;\n        });\n        op.refs = null;\n      }\n\n      return op;\n    },\n\n    proxy(op) {\n      const vref = op instanceof Entry ? ref(op) : op;\n      return this.add(Proxy({\n        value: vref\n      }));\n    },\n\n    addStream(stream) {\n      this.streams.push(stream);\n      stream.id = this.id();\n      return stream;\n    },\n\n    addUpdate(update) {\n      this.updates.push(update);\n      return update;\n    },\n\n    // Apply metadata\n    finish() {\n      let name, ds; // annotate root\n\n      if (this.root) this.root.root = true; // annotate signals\n\n      for (name in this.signals) {\n        this.signals[name].signal = name;\n      } // annotate scales\n\n\n      for (name in this.scales) {\n        this.scales[name].scale = name;\n      } // annotate data sets\n\n\n      function annotate(op, name, type) {\n        let data, list;\n\n        if (op) {\n          data = op.data || (op.data = {});\n          list = data[name] || (data[name] = []);\n          list.push(type);\n        }\n      }\n\n      for (name in this.data) {\n        ds = this.data[name];\n        annotate(ds.input, name, 'input');\n        annotate(ds.output, name, 'output');\n        annotate(ds.values, name, 'values');\n\n        for (const field in ds.index) {\n          annotate(ds.index[field], name, 'index:' + field);\n        }\n      }\n\n      return this;\n    },\n\n    // ----\n    pushState(encode, parent, lookup) {\n      this._encode.push(ref(this.add(Sieve({\n        pulse: encode\n      }))));\n\n      this._parent.push(parent);\n\n      this._lookup.push(lookup ? ref(this.proxy(lookup)) : null);\n\n      this._markpath.push(-1);\n    },\n\n    popState() {\n      this._encode.pop();\n\n      this._parent.pop();\n\n      this._lookup.pop();\n\n      this._markpath.pop();\n    },\n\n    parent() {\n      return peek$1(this._parent);\n    },\n\n    encode() {\n      return peek$1(this._encode);\n    },\n\n    lookup() {\n      return peek$1(this._lookup);\n    },\n\n    markpath() {\n      const p = this._markpath;\n      return ++p[p.length - 1];\n    },\n\n    // ----\n    fieldRef(field, name) {\n      if (isString(field)) return fieldRef$1(field, name);\n\n      if (!field.signal) {\n        error('Unsupported field reference: ' + $(field));\n      }\n\n      const s = field.signal;\n      let f = this.field[s];\n\n      if (!f) {\n        const params = {\n          name: this.signalRef(s)\n        };\n        if (name) params.as = name;\n        this.field[s] = f = ref(this.add(Field(params)));\n      }\n\n      return f;\n    },\n\n    compareRef(cmp) {\n      let signal = false;\n\n      const check = _ => isSignal(_) ? (signal = true, this.signalRef(_.signal)) : isExpr$1(_) ? (signal = true, this.exprRef(_.expr)) : _;\n\n      const fields = array$5(cmp.field).map(check),\n            orders = array$5(cmp.order).map(check);\n      return signal ? ref(this.add(Compare({\n        fields: fields,\n        orders: orders\n      }))) : compareRef(fields, orders);\n    },\n\n    keyRef(fields, flat) {\n      let signal = false;\n\n      const check = _ => isSignal(_) ? (signal = true, ref(sig[_.signal])) : _;\n\n      const sig = this.signals;\n      fields = array$5(fields).map(check);\n      return signal ? ref(this.add(Key({\n        fields: fields,\n        flat: flat\n      }))) : keyRef(fields, flat);\n    },\n\n    sortRef(sort) {\n      if (!sort) return sort; // including id ensures stable sorting\n\n      const a = aggrField(sort.op, sort.field),\n            o = sort.order || Ascending;\n      return o.signal ? ref(this.add(Compare({\n        fields: a,\n        orders: this.signalRef(o.signal)\n      }))) : compareRef(a, o);\n    },\n\n    // ----\n    event(source, type) {\n      const key = source + ':' + type;\n\n      if (!this.events[key]) {\n        const id = this.id();\n        this.streams.push({\n          id: id,\n          source: source,\n          type: type\n        });\n        this.events[key] = id;\n      }\n\n      return this.events[key];\n    },\n\n    // ----\n    hasOwnSignal(name) {\n      return has$1(this.signals, name);\n    },\n\n    addSignal(name, value) {\n      if (this.hasOwnSignal(name)) {\n        error('Duplicate signal name: ' + $(name));\n      }\n\n      const op = value instanceof Entry ? value : this.add(operator(value));\n      return this.signals[name] = op;\n    },\n\n    getSignal(name) {\n      if (!this.signals[name]) {\n        error('Unrecognized signal name: ' + $(name));\n      }\n\n      return this.signals[name];\n    },\n\n    signalRef(s) {\n      if (this.signals[s]) {\n        return ref(this.signals[s]);\n      } else if (!has$1(this.lambdas, s)) {\n        this.lambdas[s] = this.add(operator(null));\n      }\n\n      return ref(this.lambdas[s]);\n    },\n\n    parseLambdas() {\n      const code = Object.keys(this.lambdas);\n\n      for (let i = 0, n = code.length; i < n; ++i) {\n        const s = code[i],\n              e = parser(s, this),\n              op = this.lambdas[s];\n        op.params = e.$params;\n        op.update = e.$expr;\n      }\n    },\n\n    property(spec) {\n      return spec && spec.signal ? this.signalRef(spec.signal) : spec;\n    },\n\n    objectProperty(spec) {\n      return !spec || !isObject(spec) ? spec : this.signalRef(spec.signal || propertyLambda(spec));\n    },\n\n    exprRef(code, name) {\n      const params = {\n        expr: parser(code, this)\n      };\n      if (name) params.expr.$name = name;\n      return ref(this.add(Expression(params)));\n    },\n\n    addBinding(name, bind) {\n      if (!this.bindings) {\n        error('Nested signals do not support binding: ' + $(name));\n      }\n\n      this.bindings.push(extend$1({\n        signal: name\n      }, bind));\n    },\n\n    // ----\n    addScaleProj(name, transform) {\n      if (has$1(this.scales, name)) {\n        error('Duplicate scale or projection name: ' + $(name));\n      }\n\n      this.scales[name] = this.add(transform);\n    },\n\n    addScale(name, params) {\n      this.addScaleProj(name, Scale(params));\n    },\n\n    addProjection(name, params) {\n      this.addScaleProj(name, Projection(params));\n    },\n\n    getScale(name) {\n      if (!this.scales[name]) {\n        error('Unrecognized scale name: ' + $(name));\n      }\n\n      return this.scales[name];\n    },\n\n    scaleRef(name) {\n      return ref(this.getScale(name));\n    },\n\n    scaleType(name) {\n      return this.getScale(name).params.type;\n    },\n\n    projectionRef(name) {\n      return this.scaleRef(name);\n    },\n\n    projectionType(name) {\n      return this.scaleType(name);\n    },\n\n    // ----\n    addData(name, dataScope) {\n      if (has$1(this.data, name)) {\n        error('Duplicate data set name: ' + $(name));\n      }\n\n      return this.data[name] = dataScope;\n    },\n\n    getData(name) {\n      if (!this.data[name]) {\n        error('Undefined data set name: ' + $(name));\n      }\n\n      return this.data[name];\n    },\n\n    addDataPipeline(name, entries) {\n      if (has$1(this.data, name)) {\n        error('Duplicate data set name: ' + $(name));\n      }\n\n      return this.addData(name, DataScope.fromEntries(this, entries));\n    }\n\n  };\n\n  function propertyLambda(spec) {\n    return (isArray(spec) ? arrayLambda : objectLambda)(spec);\n  }\n\n  function arrayLambda(array) {\n    const n = array.length;\n    let code = '[';\n\n    for (let i = 0; i < n; ++i) {\n      const value = array[i];\n      code += (i > 0 ? ',' : '') + (isObject(value) ? value.signal || propertyLambda(value) : $(value));\n    }\n\n    return code + ']';\n  }\n\n  function objectLambda(obj) {\n    let code = '{',\n        i = 0,\n        key,\n        value;\n\n    for (key in obj) {\n      value = obj[key];\n      code += (++i > 1 ? ',' : '') + $(key) + ':' + (isObject(value) ? value.signal || propertyLambda(value) : $(value));\n    }\n\n    return code + '}';\n  }\n  /**\n   * Standard configuration defaults for Vega specification parsing.\n   * Users can provide their own (sub-)set of these default values\n   * by passing in a config object to the top-level parse method.\n   */\n\n\n  function defaults() {\n    const defaultFont = 'sans-serif',\n          defaultSymbolSize = 30,\n          defaultStrokeWidth = 2,\n          defaultColor = '#4c78a8',\n          black = '#000',\n          gray = '#888',\n          lightGray = '#ddd';\n    return {\n      // default visualization description\n      description: 'Vega visualization',\n      // default padding around visualization\n      padding: 0,\n      // default for automatic sizing; options: 'none', 'pad', 'fit'\n      // or provide an object (e.g., {'type': 'pad', 'resize': true})\n      autosize: 'pad',\n      // default view background color\n      // covers the entire view component\n      background: null,\n      // default event handling configuration\n      // preventDefault for view-sourced event types except 'wheel'\n      events: {\n        defaults: {\n          allow: ['wheel']\n        }\n      },\n      // defaults for top-level group marks\n      // accepts mark properties (fill, stroke, etc)\n      // covers the data rectangle within group width/height\n      group: null,\n      // defaults for basic mark types\n      // each subset accepts mark properties (fill, stroke, etc)\n      mark: null,\n      arc: {\n        fill: defaultColor\n      },\n      area: {\n        fill: defaultColor\n      },\n      image: null,\n      line: {\n        stroke: defaultColor,\n        strokeWidth: defaultStrokeWidth\n      },\n      path: {\n        stroke: defaultColor\n      },\n      rect: {\n        fill: defaultColor\n      },\n      rule: {\n        stroke: black\n      },\n      shape: {\n        stroke: defaultColor\n      },\n      symbol: {\n        fill: defaultColor,\n        size: 64\n      },\n      text: {\n        fill: black,\n        font: defaultFont,\n        fontSize: 11\n      },\n      trail: {\n        fill: defaultColor,\n        size: defaultStrokeWidth\n      },\n      // style definitions\n      style: {\n        // axis & legend labels\n        'guide-label': {\n          fill: black,\n          font: defaultFont,\n          fontSize: 10\n        },\n        // axis & legend titles\n        'guide-title': {\n          fill: black,\n          font: defaultFont,\n          fontSize: 11,\n          fontWeight: 'bold'\n        },\n        // headers, including chart title\n        'group-title': {\n          fill: black,\n          font: defaultFont,\n          fontSize: 13,\n          fontWeight: 'bold'\n        },\n        // chart subtitle\n        'group-subtitle': {\n          fill: black,\n          font: defaultFont,\n          fontSize: 12\n        },\n        // defaults for styled point marks in Vega-Lite\n        point: {\n          size: defaultSymbolSize,\n          strokeWidth: defaultStrokeWidth,\n          shape: 'circle'\n        },\n        circle: {\n          size: defaultSymbolSize,\n          strokeWidth: defaultStrokeWidth\n        },\n        square: {\n          size: defaultSymbolSize,\n          strokeWidth: defaultStrokeWidth,\n          shape: 'square'\n        },\n        // defaults for styled group marks in Vega-Lite\n        cell: {\n          fill: 'transparent',\n          stroke: lightGray\n        }\n      },\n      // defaults for title\n      title: {\n        orient: 'top',\n        anchor: 'middle',\n        offset: 4,\n        subtitlePadding: 3\n      },\n      // defaults for axes\n      axis: {\n        minExtent: 0,\n        maxExtent: 200,\n        bandPosition: 0.5,\n        domain: true,\n        domainWidth: 1,\n        domainColor: gray,\n        grid: false,\n        gridWidth: 1,\n        gridColor: lightGray,\n        labels: true,\n        labelAngle: 0,\n        labelLimit: 180,\n        labelOffset: 0,\n        labelPadding: 2,\n        ticks: true,\n        tickColor: gray,\n        tickOffset: 0,\n        tickRound: true,\n        tickSize: 5,\n        tickWidth: 1,\n        titlePadding: 4\n      },\n      // correction for centering bias\n      axisBand: {\n        tickOffset: -0.5\n      },\n      // defaults for cartographic projection\n      projection: {\n        type: 'mercator'\n      },\n      // defaults for legends\n      legend: {\n        orient: 'right',\n        padding: 0,\n        gridAlign: 'each',\n        columnPadding: 10,\n        rowPadding: 2,\n        symbolDirection: 'vertical',\n        gradientDirection: 'vertical',\n        gradientLength: 200,\n        gradientThickness: 16,\n        gradientStrokeColor: lightGray,\n        gradientStrokeWidth: 0,\n        gradientLabelOffset: 2,\n        labelAlign: 'left',\n        labelBaseline: 'middle',\n        labelLimit: 160,\n        labelOffset: 4,\n        labelOverlap: true,\n        symbolLimit: 30,\n        symbolType: 'circle',\n        symbolSize: 100,\n        symbolOffset: 0,\n        symbolStrokeWidth: 1.5,\n        symbolBaseFillColor: 'transparent',\n        symbolBaseStrokeColor: gray,\n        titleLimit: 180,\n        titleOrient: 'top',\n        titlePadding: 5,\n        layout: {\n          offset: 18,\n          direction: 'horizontal',\n          left: {\n            direction: 'vertical'\n          },\n          right: {\n            direction: 'vertical'\n          }\n        }\n      },\n      // defaults for scale ranges\n      range: {\n        category: {\n          scheme: 'tableau10'\n        },\n        ordinal: {\n          scheme: 'blues'\n        },\n        heatmap: {\n          scheme: 'yellowgreenblue'\n        },\n        ramp: {\n          scheme: 'blues'\n        },\n        diverging: {\n          scheme: 'blueorange',\n          extent: [1, 0]\n        },\n        symbol: ['circle', 'square', 'triangle-up', 'cross', 'diamond', 'triangle-right', 'triangle-down', 'triangle-left']\n      }\n    };\n  }\n\n  function parse(spec, config, options) {\n    if (!isObject(spec)) {\n      error('Input Vega specification must be an object.');\n    }\n\n    config = mergeConfig(defaults(), config, spec.config);\n    return parseView(spec, new Scope(config, options)).toRuntime();\n  }\n\n  // -- Transforms -----\n  extend$1(transforms, tx, vtx, encode$1, geo, force, label, tree, reg, voronoi, wordcloud, xf); // -- Exports -----\n\n  const version = pkg.version;\n\n  exports.Bounds = Bounds;\n  exports.CanvasHandler = CanvasHandler;\n  exports.CanvasRenderer = CanvasRenderer;\n  exports.DATE = DATE;\n  exports.DAY = DAY;\n  exports.DAYOFYEAR = DAYOFYEAR;\n  exports.Dataflow = Dataflow;\n  exports.Debug = Debug;\n  exports.Error = Error$1;\n  exports.EventStream = EventStream;\n  exports.Gradient = Gradient$1;\n  exports.GroupItem = GroupItem;\n  exports.HOURS = HOURS;\n  exports.Handler = Handler;\n  exports.Info = Info;\n  exports.Item = Item;\n  exports.MILLISECONDS = MILLISECONDS;\n  exports.MINUTES = MINUTES;\n  exports.MONTH = MONTH;\n  exports.Marks = Marks;\n  exports.MultiPulse = MultiPulse;\n  exports.None = None$2;\n  exports.Operator = Operator;\n  exports.Parameters = Parameters;\n  exports.Pulse = Pulse;\n  exports.QUARTER = QUARTER;\n  exports.RenderType = RenderType;\n  exports.Renderer = Renderer;\n  exports.ResourceLoader = ResourceLoader;\n  exports.SECONDS = SECONDS;\n  exports.SVGHandler = SVGHandler;\n  exports.SVGRenderer = SVGRenderer;\n  exports.SVGStringRenderer = SVGStringRenderer;\n  exports.Scenegraph = Scenegraph;\n  exports.TIME_UNITS = TIME_UNITS;\n  exports.Transform = Transform;\n  exports.View = View$1;\n  exports.WEEK = WEEK;\n  exports.Warn = Warn;\n  exports.YEAR = YEAR;\n  exports.accessor = accessor;\n  exports.accessorFields = accessorFields;\n  exports.accessorName = accessorName;\n  exports.array = array$5;\n  exports.ascending = ascending$3;\n  exports.bandwidthNRD = estimateBandwidth;\n  exports.bin = bin;\n  exports.bootstrapCI = bootstrapCI;\n  exports.boundClip = boundClip;\n  exports.boundContext = boundContext;\n  exports.boundItem = boundItem$1;\n  exports.boundMark = boundMark;\n  exports.boundStroke = boundStroke;\n  exports.changeset = changeset;\n  exports.clampRange = clampRange;\n  exports.codegenExpression = codegen;\n  exports.compare = compare$1;\n  exports.constant = constant$4;\n  exports.cumulativeLogNormal = cumulativeLogNormal;\n  exports.cumulativeNormal = cumulativeNormal;\n  exports.cumulativeUniform = cumulativeUniform;\n  exports.dayofyear = dayofyear;\n  exports.debounce = debounce;\n  exports.defaultLocale = defaultLocale;\n  exports.definition = definition$1;\n  exports.densityLogNormal = densityLogNormal;\n  exports.densityNormal = densityNormal;\n  exports.densityUniform = densityUniform;\n  exports.domChild = domChild;\n  exports.domClear = domClear;\n  exports.domCreate = domCreate;\n  exports.domFind = domFind;\n  exports.dotbin = dotbin;\n  exports.error = error;\n  exports.expressionFunction = expressionFunction;\n  exports.extend = extend$1;\n  exports.extent = extent;\n  exports.extentIndex = extentIndex;\n  exports.falsy = falsy;\n  exports.fastmap = fastmap;\n  exports.field = field$1;\n  exports.flush = flush;\n  exports.font = font;\n  exports.fontFamily = fontFamily;\n  exports.fontSize = fontSize;\n  exports.format = format$2;\n  exports.formatLocale = numberFormatDefaultLocale;\n  exports.formats = formats$1;\n  exports.hasOwnProperty = has$1;\n  exports.id = id;\n  exports.identity = identity$6;\n  exports.inferType = inferType;\n  exports.inferTypes = inferTypes;\n  exports.ingest = ingest$1;\n  exports.inherits = inherits;\n  exports.inrange = inrange;\n  exports.interpolate = interpolate;\n  exports.interpolateColors = interpolateColors;\n  exports.interpolateRange = interpolateRange;\n  exports.intersect = intersect$2;\n  exports.intersectBoxLine = intersectBoxLine;\n  exports.intersectPath = intersectPath;\n  exports.intersectPoint = intersectPoint;\n  exports.intersectRule = intersectRule;\n  exports.isArray = isArray;\n  exports.isBoolean = isBoolean$1;\n  exports.isDate = isDate$1;\n  exports.isFunction = isFunction;\n  exports.isIterable = isIterable;\n  exports.isNumber = isNumber$1;\n  exports.isObject = isObject;\n  exports.isRegExp = isRegExp;\n  exports.isString = isString;\n  exports.isTuple = isTuple;\n  exports.key = key;\n  exports.lerp = lerp;\n  exports.lineHeight = lineHeight;\n  exports.loader = loader;\n  exports.locale = locale;\n  exports.logger = logger;\n  exports.lruCache = lruCache;\n  exports.markup = markup;\n  exports.merge = merge$3;\n  exports.mergeConfig = mergeConfig;\n  exports.multiLineOffset = multiLineOffset;\n  exports.one = one$2;\n  exports.pad = pad$2;\n  exports.panLinear = panLinear;\n  exports.panLog = panLog;\n  exports.panPow = panPow;\n  exports.panSymlog = panSymlog;\n  exports.parse = parse;\n  exports.parseExpression = parser$1;\n  exports.parseSelector = eventSelector;\n  exports.pathCurves = curves;\n  exports.pathEqual = pathEqual;\n  exports.pathParse = pathParse;\n  exports.pathRectangle = vg_rect;\n  exports.pathRender = pathRender;\n  exports.pathSymbols = symbols;\n  exports.pathTrail = vg_trail;\n  exports.peek = peek$1;\n  exports.point = point;\n  exports.projection = projection;\n  exports.quantileLogNormal = quantileLogNormal;\n  exports.quantileNormal = quantileNormal;\n  exports.quantileUniform = quantileUniform;\n  exports.quantiles = quantiles;\n  exports.quantizeInterpolator = quantizeInterpolator;\n  exports.quarter = quarter;\n  exports.quartiles = quartiles;\n  exports.randomInteger = integer;\n  exports.randomKDE = kde;\n  exports.randomLCG = lcg$1;\n  exports.randomLogNormal = lognormal;\n  exports.randomMixture = mixture$1;\n  exports.randomNormal = gaussian;\n  exports.randomUniform = uniform;\n  exports.read = read;\n  exports.regressionExp = exp$1;\n  exports.regressionLinear = linear$2;\n  exports.regressionLoess = loess;\n  exports.regressionLog = log$3;\n  exports.regressionPoly = poly;\n  exports.regressionPow = pow$3;\n  exports.regressionQuad = quad;\n  exports.renderModule = renderModule;\n  exports.repeat = repeat;\n  exports.resetDefaultLocale = resetDefaultLocale;\n  exports.resetSVGClipId = resetSVGClipId;\n  exports.resetSVGDefIds = resetSVGDefIds;\n  exports.responseType = responseType;\n  exports.runtimeContext = context;\n  exports.sampleCurve = sampleCurve;\n  exports.sampleLogNormal = sampleLogNormal;\n  exports.sampleNormal = sampleNormal;\n  exports.sampleUniform = sampleUniform;\n  exports.scale = scale$4;\n  exports.sceneEqual = sceneEqual;\n  exports.sceneFromJSON = sceneFromJSON;\n  exports.scenePickVisit = pickVisit;\n  exports.sceneToJSON = sceneToJSON;\n  exports.sceneVisit = visit;\n  exports.sceneZOrder = zorder;\n  exports.scheme = scheme;\n  exports.serializeXML = serializeXML;\n  exports.setRandom = setRandom;\n  exports.span = span;\n  exports.splitAccessPath = splitAccessPath;\n  exports.stringValue = $;\n  exports.textMetrics = textMetrics;\n  exports.timeBin = bin$1;\n  exports.timeFloor = timeFloor;\n  exports.timeFormatLocale = timeFormatDefaultLocale;\n  exports.timeInterval = timeInterval;\n  exports.timeOffset = timeOffset;\n  exports.timeSequence = timeSequence;\n  exports.timeUnitSpecifier = timeUnitSpecifier;\n  exports.timeUnits = timeUnits;\n  exports.toBoolean = toBoolean;\n  exports.toDate = toDate;\n  exports.toNumber = toNumber;\n  exports.toSet = toSet;\n  exports.toString = toString;\n  exports.transform = transform$2;\n  exports.transforms = transforms;\n  exports.truncate = truncate$1;\n  exports.truthy = truthy;\n  exports.tupleid = tupleid;\n  exports.typeParsers = typeParsers;\n  exports.utcFloor = utcFloor;\n  exports.utcInterval = utcInterval;\n  exports.utcOffset = utcOffset;\n  exports.utcSequence = utcSequence;\n  exports.utcdayofyear = utcdayofyear;\n  exports.utcquarter = utcquarter;\n  exports.utcweek = utcweek;\n  exports.version = version;\n  exports.visitArray = visitArray;\n  exports.week = week;\n  exports.writeConfig = writeConfig;\n  exports.zero = zero$2;\n  exports.zoomLinear = zoomLinear;\n  exports.zoomLog = zoomLog;\n  exports.zoomPow = zoomPow;\n  exports.zoomSymlog = zoomSymlog;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"];
gvjs_BM.raw=[""];gvjs_AM(gvjs_xM(gvjs_BM));var gvjs_Dha=window.vega;var gvjs_Eha={},gvjs_CM=['/*\n\nCopyright (c) 2015, University of Washington Interactive Data Lab.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n  may be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\nvar $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.createTemplateTagFirstArg=function(u){return u.raw=u};$jscomp.createTemplateTagFirstArgWithRaw=function(u,q){u.raw=q;return u};$jscomp.arrayIteratorImpl=function(u){var q=0;return function(){return q<u.length?{done:!1,value:u[q++]}:{done:!0}}};$jscomp.arrayIterator=function(u){return{next:$jscomp.arrayIteratorImpl(u)}};$jscomp.makeIterator=function(u){var q="undefined"!=typeof Symbol&&Symbol.iterator&&u[Symbol.iterator];return q?q.call(u):$jscomp.arrayIterator(u)};\n$jscomp.arrayFromIterator=function(u){for(var q,x=[];!(q=u.next()).done;)x.push(q.value);return x};$jscomp.arrayFromIterable=function(u){return u instanceof Array?u:$jscomp.arrayFromIterator($jscomp.makeIterator(u))};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;$jscomp.ISOLATE_POLYFILLS=!1;$jscomp.FORCE_POLYFILL_PROMISE=!1;$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION=!1;\n$jscomp.objectCreate=$jscomp.ASSUME_ES5||"function"==typeof Object.create?Object.create:function(u){var q=function(){};q.prototype=u;return new q};$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(u,q,x){if(u==Array.prototype||u==Object.prototype)return u;u[q]=x.value;return u};\n$jscomp.getGlobal=function(u){u=["object"==typeof globalThis&&globalThis,u,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var q=0;q<u.length;++q){var x=u[q];if(x&&x.Math==Math)return x}throw Error("Cannot find global object");};$jscomp.global=$jscomp.getGlobal(this);$jscomp.IS_SYMBOL_NATIVE="function"===typeof Symbol&&"symbol"===typeof Symbol("x");$jscomp.TRUST_ES6_POLYFILLS=!$jscomp.ISOLATE_POLYFILLS||$jscomp.IS_SYMBOL_NATIVE;$jscomp.polyfills={};\n$jscomp.propertyToPolyfillSymbol={};$jscomp.POLYFILL_PREFIX="$jscp$";var $jscomp$lookupPolyfilledValue=function(u,q){var x=$jscomp.propertyToPolyfillSymbol[q];if(null==x)return u[q];x=u[x];return void 0!==x?x:u[q]};$jscomp.polyfill=function(u,q,x,z){q&&($jscomp.ISOLATE_POLYFILLS?$jscomp.polyfillIsolated(u,q,x,z):$jscomp.polyfillUnisolated(u,q,x,z))};\n$jscomp.polyfillUnisolated=function(u,q,x,z){x=$jscomp.global;u=u.split(".");for(z=0;z<u.length-1;z++){var C=u[z];if(!(C in x))return;x=x[C]}u=u[u.length-1];z=x[u];q=q(z);q!=z&&null!=q&&$jscomp.defineProperty(x,u,{configurable:!0,writable:!0,value:q})};\n$jscomp.polyfillIsolated=function(u,q,x,z){var C=u.split(".");u=1===C.length;z=C[0];z=!u&&z in $jscomp.polyfills?$jscomp.polyfills:$jscomp.global;for(var V=0;V<C.length-1;V++){var D=C[V];if(!(D in z))return;z=z[D]}C=C[C.length-1];x=$jscomp.IS_SYMBOL_NATIVE&&"es6"===x?z[C]:null;q=q(x);null!=q&&(u?$jscomp.defineProperty($jscomp.polyfills,C,{configurable:!0,writable:!0,value:q}):q!==x&&(void 0===$jscomp.propertyToPolyfillSymbol[C]&&(x=1E9*Math.random()>>>0,$jscomp.propertyToPolyfillSymbol[C]=$jscomp.IS_SYMBOL_NATIVE?\n$jscomp.global.Symbol(C):$jscomp.POLYFILL_PREFIX+x+"$"+C),$jscomp.defineProperty(z,$jscomp.propertyToPolyfillSymbol[C],{configurable:!0,writable:!0,value:q})))};\n$jscomp.getConstructImplementation=function(){function u(){function x(){}new x;Reflect.construct(x,[],function(){});return new x instanceof x}if($jscomp.TRUST_ES6_POLYFILLS&&"undefined"!=typeof Reflect&&Reflect.construct){if(u())return Reflect.construct;var q=Reflect.construct;return function(x,z,C){x=q(x,z);C&&Reflect.setPrototypeOf(x,C.prototype);return x}}return function(x,z,C){void 0===C&&(C=x);C=$jscomp.objectCreate(C.prototype||Object.prototype);return Function.prototype.apply.call(x,C,z)||\nC}};$jscomp.construct={valueOf:$jscomp.getConstructImplementation}.valueOf();$jscomp.underscoreProtoCanBeSet=function(){var u={a:!0},q={};try{return q.__proto__=u,q.a}catch(x){}return!1};$jscomp.setPrototypeOf=$jscomp.TRUST_ES6_POLYFILLS&&"function"==typeof Object.setPrototypeOf?Object.setPrototypeOf:$jscomp.underscoreProtoCanBeSet()?function(u,q){u.__proto__=q;if(u.__proto__!==q)throw new TypeError(u+" is not extensible");return u}:null;\n$jscomp.inherits=function(u,q){u.prototype=$jscomp.objectCreate(q.prototype);u.prototype.constructor=u;if($jscomp.setPrototypeOf){var x=$jscomp.setPrototypeOf;x(u,q)}else for(x in q)if("prototype"!=x)if(Object.defineProperties){var z=Object.getOwnPropertyDescriptor(q,x);z&&Object.defineProperty(u,x,z)}else u[x]=q[x];u.superClass_=q.prototype};$jscomp.polyfill("Reflect",function(u){return u?u:{}},"es6","es3");$jscomp.polyfill("Reflect.construct",function(u){return $jscomp.construct},"es6","es3");\n$jscomp.polyfill("Reflect.setPrototypeOf",function(u){if(u)return u;if($jscomp.setPrototypeOf){var q=$jscomp.setPrototypeOf;return function(x,z){try{return q(x,z),!0}catch(C){return!1}}}return null},"es6","es5");$jscomp.polyfill("Array.prototype.flat",function(u){return u?u:function(q){q=void 0===q?1:q;for(var x=[],z=0;z<this.length;z++){var C=this[z];Array.isArray(C)&&0<q?(C=Array.prototype.flat.call(C,q-1),x.push.apply(x,C)):x.push(C)}return x}},"es9","es5");\n$jscomp.polyfill("Array.prototype.flatMap",function(u){return u?u:function(q,x){for(var z=[],C=0;C<this.length;C++){var V=q.call(x,this[C],C,this);Array.isArray(V)?z.push.apply(z,V):z.push(V)}return z}},"es9","es5");$jscomp.checkEs6ConformanceViaProxy=function(){try{var u={},q=Object.create(new $jscomp.global.Proxy(u,{get:function(x,z,C){return x==u&&"q"==z&&C==q}}));return!0===q.q}catch(x){return!1}};$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS=!1;\n$jscomp.ES6_CONFORMANCE=$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS&&$jscomp.checkEs6ConformanceViaProxy();$jscomp.initSymbol=function(){};\n$jscomp.polyfill("Symbol",function(u){if(u)return u;var q=function(V,D){this.$jscomp$symbol$id_=V;$jscomp.defineProperty(this,"description",{configurable:!0,writable:!0,value:D})};q.prototype.toString=function(){return this.$jscomp$symbol$id_};var x="jscomp_symbol_"+(1E9*Math.random()>>>0)+"_",z=0,C=function(V){if(this instanceof C)throw new TypeError("Symbol is not a constructor");return new q(x+(V||"")+"_"+z++,V)};return C},"es6","es3");\n$jscomp.polyfill("Symbol.iterator",function(u){if(u)return u;u=Symbol("Symbol.iterator");for(var q="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),x=0;x<q.length;x++){var z=$jscomp.global[q[x]];"function"===typeof z&&"function"!=typeof z.prototype[u]&&$jscomp.defineProperty(z.prototype,u,{configurable:!0,writable:!0,value:function(){return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this))}})}return u},"es6",\n"es3");$jscomp.iteratorPrototype=function(u){u={next:u};u[Symbol.iterator]=function(){return this};return u};$jscomp.owns=function(u,q){return Object.prototype.hasOwnProperty.call(u,q)};\n$jscomp.polyfill("WeakMap",function(u){function q(){if(!u||!Object.seal)return!1;try{var B=Object.seal({}),L=Object.seal({}),Z=new u([[B,2],[L,3]]);if(2!=Z.get(B)||3!=Z.get(L))return!1;Z.delete(B);Z.set(L,4);return!Z.has(B)&&4==Z.get(L)}catch(xa){return!1}}function x(){}function z(B){var L=typeof B;return"object"===L&&null!==B||"function"===L}function C(B){if(!$jscomp.owns(B,D)){var L=new x;$jscomp.defineProperty(B,D,{value:L})}}function V(B){if(!$jscomp.ISOLATE_POLYFILLS){var L=Object[B];L&&(Object[B]=\nfunction(Z){if(Z instanceof x)return Z;Object.isExtensible(Z)&&C(Z);return L(Z)})}}if($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(u&&$jscomp.ES6_CONFORMANCE)return u}else if(q())return u;var D="$jscomp_hidden_"+Math.random();V("freeze");V("preventExtensions");V("seal");var I=0,F=function(B){this.id_=(I+=Math.random()+1).toString();if(B){B=$jscomp.makeIterator(B);for(var L;!(L=B.next()).done;)L=L.value,this.set(L[0],L[1])}};F.prototype.set=function(B,L){if(!z(B))throw Error("Invalid WeakMap key");\nC(B);if(!$jscomp.owns(B,D))throw Error("WeakMap key fail: "+B);B[D][this.id_]=L;return this};F.prototype.get=function(B){return z(B)&&$jscomp.owns(B,D)?B[D][this.id_]:void 0};F.prototype.has=function(B){return z(B)&&$jscomp.owns(B,D)&&$jscomp.owns(B[D],this.id_)};F.prototype.delete=function(B){return z(B)&&$jscomp.owns(B,D)&&$jscomp.owns(B[D],this.id_)?delete B[D][this.id_]:!1};return F},"es6","es3");$jscomp.MapEntry=function(){};\n$jscomp.polyfill("Map",function(u){function q(){if($jscomp.ASSUME_NO_NATIVE_MAP||!u||"function"!=typeof u||!u.prototype.entries||"function"!=typeof Object.seal)return!1;try{var F=Object.seal({x:4}),B=new u($jscomp.makeIterator([[F,"s"]]));if("s"!=B.get(F)||1!=B.size||B.get({x:4})||B.set({x:4},"t")!=B||2!=B.size)return!1;var L=B.entries(),Z=L.next();if(Z.done||Z.value[0]!=F||"s"!=Z.value[1])return!1;Z=L.next();return Z.done||4!=Z.value[0].x||"t"!=Z.value[1]||!L.next().done?!1:!0}catch(xa){return!1}}\nif($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(u&&$jscomp.ES6_CONFORMANCE)return u}else if(q())return u;var x=new WeakMap,z=function(F){this.data_={};this.head_=D();this.size=0;if(F){F=$jscomp.makeIterator(F);for(var B;!(B=F.next()).done;)B=B.value,this.set(B[0],B[1])}};z.prototype.set=function(F,B){F=0===F?0:F;var L=C(this,F);L.list||(L.list=this.data_[L.id]=[]);L.entry?L.entry.value=B:(L.entry={next:this.head_,previous:this.head_.previous,head:this.head_,key:F,value:B},L.list.push(L.entry),\nthis.head_.previous.next=L.entry,this.head_.previous=L.entry,this.size++);return this};z.prototype.delete=function(F){F=C(this,F);return F.entry&&F.list?(F.list.splice(F.index,1),F.list.length||delete this.data_[F.id],F.entry.previous.next=F.entry.next,F.entry.next.previous=F.entry.previous,F.entry.head=null,this.size--,!0):!1};z.prototype.clear=function(){this.data_={};this.head_=this.head_.previous=D();this.size=0};z.prototype.has=function(F){return!!C(this,F).entry};z.prototype.get=function(F){return(F=\nC(this,F).entry)&&F.value};z.prototype.entries=function(){return V(this,function(F){return[F.key,F.value]})};z.prototype.keys=function(){return V(this,function(F){return F.key})};z.prototype.values=function(){return V(this,function(F){return F.value})};z.prototype.forEach=function(F,B){for(var L=this.entries(),Z;!(Z=L.next()).done;)Z=Z.value,F.call(B,Z[1],Z[0],this)};z.prototype[Symbol.iterator]=z.prototype.entries;var C=function(F,B){var L=B&&typeof B;"object"==L||"function"==L?x.has(B)?L=x.get(B):\n(L=""+ ++I,x.set(B,L)):L="p_"+B;var Z=F.data_[L];if(Z&&$jscomp.owns(F.data_,L))for(F=0;F<Z.length;F++){var xa=Z[F];if(B!==B&&xa.key!==xa.key||B===xa.key)return{id:L,list:Z,index:F,entry:xa}}return{id:L,list:Z,index:-1,entry:void 0}},V=function(F,B){var L=F.head_;return $jscomp.iteratorPrototype(function(){if(L){for(;L.head!=F.head_;)L=L.previous;for(;L.next!=L.head;)return L=L.next,{done:!1,value:B(L)};L=null}return{done:!0,value:void 0}})},D=function(){var F={};return F.previous=F.next=F.head=F},\nI=0;return z},"es6","es3");\n$jscomp.polyfill("Set",function(u){function q(){if($jscomp.ASSUME_NO_NATIVE_SET||!u||"function"!=typeof u||!u.prototype.entries||"function"!=typeof Object.seal)return!1;try{var z=Object.seal({x:4}),C=new u($jscomp.makeIterator([z]));if(!C.has(z)||1!=C.size||C.add(z)!=C||1!=C.size||C.add({x:4})!=C||2!=C.size)return!1;var V=C.entries(),D=V.next();if(D.done||D.value[0]!=z||D.value[1]!=z)return!1;D=V.next();return D.done||D.value[0]==z||4!=D.value[0].x||D.value[1]!=D.value[0]?!1:V.next().done}catch(I){return!1}}\nif($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(u&&$jscomp.ES6_CONFORMANCE)return u}else if(q())return u;var x=function(z){this.map_=new Map;if(z){z=$jscomp.makeIterator(z);for(var C;!(C=z.next()).done;)this.add(C.value)}this.size=this.map_.size};x.prototype.add=function(z){z=0===z?0:z;this.map_.set(z,z);this.size=this.map_.size;return this};x.prototype.delete=function(z){z=this.map_.delete(z);this.size=this.map_.size;return z};x.prototype.clear=function(){this.map_.clear();this.size=0};x.prototype.has=\nfunction(z){return this.map_.has(z)};x.prototype.entries=function(){return this.map_.entries()};x.prototype.values=function(){return this.map_.values()};x.prototype.keys=x.prototype.values;x.prototype[Symbol.iterator]=x.prototype.values;x.prototype.forEach=function(z,C){var V=this;this.map_.forEach(function(D){return z.call(C,D,D,V)})};return x},"es6","es3");\n$jscomp.polyfill("Promise",function(u){function q(){this.batch_=null}function x(D){return D instanceof C?D:new C(function(I,F){I(D)})}if(u&&(!($jscomp.FORCE_POLYFILL_PROMISE||$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION&&"undefined"===typeof $jscomp.global.PromiseRejectionEvent)||!$jscomp.global.Promise||-1===$jscomp.global.Promise.toString().indexOf("[native code]")))return u;q.prototype.asyncExecute=function(D){if(null==this.batch_){this.batch_=[];var I=this;this.asyncExecuteFunction(function(){I.executeBatch_()})}this.batch_.push(D)};\nvar z=$jscomp.global.setTimeout;q.prototype.asyncExecuteFunction=function(D){z(D,0)};q.prototype.executeBatch_=function(){for(;this.batch_&&this.batch_.length;){var D=this.batch_;this.batch_=[];for(var I=0;I<D.length;++I){var F=D[I];D[I]=null;try{F()}catch(B){this.asyncThrow_(B)}}}this.batch_=null};q.prototype.asyncThrow_=function(D){this.asyncExecuteFunction(function(){throw D;})};var C=function(D){this.state_=0;this.result_=void 0;this.onSettledCallbacks_=[];this.isRejectionHandled_=!1;var I=this.createResolveAndReject_();\ntry{D(I.resolve,I.reject)}catch(F){I.reject(F)}};C.prototype.createResolveAndReject_=function(){function D(B){return function(L){F||(F=!0,B.call(I,L))}}var I=this,F=!1;return{resolve:D(this.resolveTo_),reject:D(this.reject_)}};C.prototype.resolveTo_=function(D){if(D===this)this.reject_(new TypeError("A Promise cannot resolve to itself"));else if(D instanceof C)this.settleSameAsPromise_(D);else{a:switch(typeof D){case "object":var I=null!=D;break a;case "function":I=!0;break a;default:I=!1}I?this.resolveToNonPromiseObj_(D):\nthis.fulfill_(D)}};C.prototype.resolveToNonPromiseObj_=function(D){var I=void 0;try{I=D.then}catch(F){this.reject_(F);return}"function"==typeof I?this.settleSameAsThenable_(I,D):this.fulfill_(D)};C.prototype.reject_=function(D){this.settle_(2,D)};C.prototype.fulfill_=function(D){this.settle_(1,D)};C.prototype.settle_=function(D,I){if(0!=this.state_)throw Error("Cannot settle("+D+", "+I+"): Promise already settled in state"+this.state_);this.state_=D;this.result_=I;2===this.state_&&this.scheduleUnhandledRejectionCheck_();\nthis.executeOnSettledCallbacks_()};C.prototype.scheduleUnhandledRejectionCheck_=function(){var D=this;z(function(){if(D.notifyUnhandledRejection_()){var I=$jscomp.global.console;"undefined"!==typeof I&&I.error(D.result_)}},1)};C.prototype.notifyUnhandledRejection_=function(){if(this.isRejectionHandled_)return!1;var D=$jscomp.global.CustomEvent,I=$jscomp.global.Event,F=$jscomp.global.dispatchEvent;if("undefined"===typeof F)return!0;"function"===typeof D?D=new D("unhandledrejection",{cancelable:!0}):\n"function"===typeof I?D=new I("unhandledrejection",{cancelable:!0}):(D=$jscomp.global.document.createEvent("CustomEvent"),D.initCustomEvent("unhandledrejection",!1,!0,D));D.promise=this;D.reason=this.result_;return F(D)};C.prototype.executeOnSettledCallbacks_=function(){if(null!=this.onSettledCallbacks_){for(var D=0;D<this.onSettledCallbacks_.length;++D)V.asyncExecute(this.onSettledCallbacks_[D]);this.onSettledCallbacks_=null}};var V=new q;C.prototype.settleSameAsPromise_=function(D){var I=this.createResolveAndReject_();\nD.callWhenSettled_(I.resolve,I.reject)};C.prototype.settleSameAsThenable_=function(D,I){var F=this.createResolveAndReject_();try{D.call(I,F.resolve,F.reject)}catch(B){F.reject(B)}};C.prototype.then=function(D,I){function F(xa,Ca){return"function"==typeof xa?function(xc){try{B(xa(xc))}catch(mc){L(mc)}}:Ca}var B,L,Z=new C(function(xa,Ca){B=xa;L=Ca});this.callWhenSettled_(F(D,B),F(I,L));return Z};C.prototype.catch=function(D){return this.then(void 0,D)};C.prototype.callWhenSettled_=function(D,I){function F(){switch(B.state_){case 1:D(B.result_);\nbreak;case 2:I(B.result_);break;default:throw Error("Unexpected state: "+B.state_);}}var B=this;null==this.onSettledCallbacks_?V.asyncExecute(F):this.onSettledCallbacks_.push(F);this.isRejectionHandled_=!0};C.resolve=x;C.reject=function(D){return new C(function(I,F){F(D)})};C.race=function(D){return new C(function(I,F){for(var B=$jscomp.makeIterator(D),L=B.next();!L.done;L=B.next())x(L.value).callWhenSettled_(I,F)})};C.all=function(D){var I=$jscomp.makeIterator(D),F=I.next();return F.done?x([]):new C(function(B,\nL){function Z(xc){return function(mc){xa[xc]=mc;Ca--;0==Ca&&B(xa)}}var xa=[],Ca=0;do xa.push(void 0),Ca++,x(F.value).callWhenSettled_(Z(xa.length-1),L),F=I.next();while(!F.done)})};return C},"es6","es3");$jscomp.iteratorFromArray=function(u,q){u instanceof String&&(u+="");var x=0,z=!1,C={next:function(){if(!z&&x<u.length){var V=x++;return{value:q(V,u[V]),done:!1}}z=!0;return{done:!0,value:void 0}}};C[Symbol.iterator]=function(){return C};return C};\n$jscomp.polyfill("Array.prototype.keys",function(u){return u?u:function(){return $jscomp.iteratorFromArray(this,function(q){return q})}},"es6","es3");$jscomp.polyfill("Object.is",function(u){return u?u:function(q,x){return q===x?0!==q||1/q===1/x:q!==q&&x!==x}},"es6","es3");\n$jscomp.polyfill("Array.prototype.includes",function(u){return u?u:function(q,x){var z=this;z instanceof String&&(z=String(z));var C=z.length;x=x||0;for(0>x&&(x=Math.max(x+C,0));x<C;x++){var V=z[x];if(V===q||Object.is(V,q))return!0}return!1}},"es7","es3");\n$jscomp.checkStringArgs=function(u,q,x){if(null==u)throw new TypeError("The \'this\' value for String.prototype."+x+" must not be null or undefined");if(q instanceof RegExp)throw new TypeError("First argument to String.prototype."+x+" must not be a regular expression");return u+""};$jscomp.polyfill("String.prototype.includes",function(u){return u?u:function(q,x){return-1!==$jscomp.checkStringArgs(this,q,"includes").indexOf(q,x||0)}},"es6","es3");\n$jscomp.polyfill("Array.prototype.entries",function(u){return u?u:function(){return $jscomp.iteratorFromArray(this,function(q,x){return[q,x]})}},"es6","es3");$jscomp.polyfill("Object.values",function(u){return u?u:function(q){var x=[],z;for(z in q)$jscomp.owns(q,z)&&x.push(q[z]);return x}},"es8","es3");$jscomp.polyfill("Object.entries",function(u){return u?u:function(q){var x=[],z;for(z in q)$jscomp.owns(q,z)&&x.push([z,q[z]]);return x}},"es8","es3");\n$jscomp.polyfill("String.prototype.startsWith",function(u){return u?u:function(q,x){var z=$jscomp.checkStringArgs(this,q,"startsWith");q+="";var C=z.length,V=q.length;x=Math.max(0,Math.min(x|0,z.length));for(var D=0;D<V&&x<C;)if(z[x++]!=q[D++])return!1;return D>=V}},"es6","es3");\n$jscomp.polyfill("String.prototype.repeat",function(u){return u?u:function(q){var x=$jscomp.checkStringArgs(this,null,"repeat");if(0>q||1342177279<q)throw new RangeError("Invalid count value");q|=0;for(var z="";q;)if(q&1&&(z+=x),q>>>=1)x+=x;return z}},"es6","es3");$jscomp.findInternal=function(u,q,x){u instanceof String&&(u=String(u));for(var z=u.length,C=0;C<z;C++){var V=u[C];if(q.call(x,V,C,u))return{i:C,v:V}}return{i:-1,v:void 0}};\n$jscomp.polyfill("Array.prototype.findIndex",function(u){return u?u:function(q,x){return $jscomp.findInternal(this,q,x).i}},"es6","es3");$jscomp.polyfill("Array.prototype.find",function(u){return u?u:function(q,x){return $jscomp.findInternal(this,q,x).v}},"es6","es3");$jscomp.assign=$jscomp.TRUST_ES6_POLYFILLS&&"function"==typeof Object.assign?Object.assign:function(u,q){for(var x=1;x<arguments.length;x++){var z=arguments[x];if(z)for(var C in z)$jscomp.owns(z,C)&&(u[C]=z[C])}return u};\n$jscomp.polyfill("Object.assign",function(u){return u||$jscomp.assign},"es6","es3");$jscomp.polyfill("Array.prototype.values",function(u){return u?u:function(){return $jscomp.iteratorFromArray(this,function(q,x){return x})}},"es8","es3");\n$jscomp.polyfill("String.prototype.endsWith",function(u){return u?u:function(q,x){var z=$jscomp.checkStringArgs(this,q,"endsWith");q+="";void 0===x&&(x=z.length);x=Math.max(0,Math.min(x|0,z.length));for(var C=q.length;0<C&&0<x;)if(z[--x]!=q[--C])return!1;return 0>=C}},"es6","es3");\n(function(u,q){"object"===typeof exports&&"undefined"!==typeof module?q(exports,void 0,void 0):"function"===typeof define&&define.amd?define(["exports","vega-util","vega"],q):(u="undefined"!==typeof globalThis?globalThis:u||self,q(u.vegaLite={},u.vega,u.vega))})(this,function(u,q,x){function z(b,e){if(b.not)z(b.not,e);else if(b.and){var a=$jscomp.makeIterator(b.and);for(b=a.next();!b.done;b=a.next())z(b.value,e)}else if(b.or)for(a=$jscomp.makeIterator(b.or),b=a.next();!b.done;b=a.next())z(b.value,\ne);else e(b)}function C(b,e){return b.not?{not:C(b.not,e)}:b.and?{and:b.and.map(function(a){return C(a,e)})}:b.or?{or:b.or.map(function(a){return C(a,e)})}:e(b)}function V(b,e){var a={};e=$jscomp.makeIterator(e);for(var c=e.next();!c.done;c=e.next())c=c.value,q.hasOwnProperty(b,c)&&(a[c]=b[c]);return a}function D(b,e){b=Object.assign({},b);e=$jscomp.makeIterator(e);for(var a=e.next();!a.done;a=e.next())delete b[a.value];return b}function I(b){if(q.isNumber(b))return b;b=q.isString(b)?b:me(b);if(250>\nb.length)return b;for(var e=0,a=0;a<b.length;a++){var c=b.charCodeAt(a);e=(e<<5)-e+c;e&=e}return e}function F(b){return!1===b||null===b}function B(b,e){return b.includes(e)}function L(b,e){var a=0;b=$jscomp.makeIterator(b.entries());for(var c=b.next();!c.done;c=b.next()){var d=$jscomp.makeIterator(c.value);c=d.next().value;d=d.next().value;if(e(d,c,a++))return!0}return!1}function Z(b,e){var a=0;b=$jscomp.makeIterator(b.entries());for(var c=b.next();!c.done;c=b.next()){var d=$jscomp.makeIterator(c.value);\nc=d.next().value;d=d.next().value;if(!e(d,c,a++))return!1}return!0}function xa(b,e){for(var a=[],c=1;c<arguments.length;++c)a[c-1]=arguments[c];a=$jscomp.makeIterator(a);for(c=a.next();!c.done;c=a.next()){var d=c.value;c=b;d=null!==d&&void 0!==d?d:{};for(var f=$jscomp.makeIterator(G(d)),g=f.next();!g.done;g=f.next())g=g.value,q.writeConfig(c,g,d[g],!0)}return b}function Ca(b,e){var a=[],c={},d;b=$jscomp.makeIterator(b);for(d=b.next();!d.done;d=b.next()){var f=d.value;d=e(f);d in c||(c[d]=1,a.push(f))}return a}\nfunction xc(b,e){if(b.size!==e.size)return!1;b=$jscomp.makeIterator(b);for(var a=b.next();!a.done;a=b.next())if(!e.has(a.value))return!1;return!0}function mc(b,e){b=$jscomp.makeIterator(b);for(var a=b.next();!a.done;a=b.next())if(e.has(a.value))return!0;return!1}function ne(b){var e=new Set,a={};b=$jscomp.makeIterator(b);for(var c=b.next();!c.done;a={$jscomp$loop$prop$wrappedWithAccessors$438:a.$jscomp$loop$prop$wrappedWithAccessors$438},c=b.next()){c=q.splitAccessPath(c.value);a.$jscomp$loop$prop$wrappedWithAccessors$438=\nc.map(function(f,g){return 0===g?f:"["+f+"]"});c=a.$jscomp$loop$prop$wrappedWithAccessors$438.map(function(f){return function(g,h){return f.$jscomp$loop$prop$wrappedWithAccessors$438.slice(0,h+1).join("")}}(a));c=$jscomp.makeIterator(c);for(var d=c.next();!d.done;d=c.next())e.add(d.value)}return e}function oe(b,e){return void 0===b||void 0===e?!0:mc(ne(b),ne(e))}function ha(b){return 0===G(b).length}function Rc(b){return!0===b||!1===b}function oa(b){var e=b.replace(/\\W/g,"_");return(b.match(/^\\d+/)?\n"_":"")+e}function Sc(b,e){return b.not?"!("+Sc(b.not,e)+")":b.and?"("+b.and.map(function(a){return Sc(a,e)}).join(") && (")+")":b.or?"("+b.or.map(function(a){return Sc(a,e)}).join(") || (")+")":e(b)}function nd(b,e){if(0===e.length)return!0;var a=e.shift();a in b&&nd(b[a],e)&&delete b[a];return ha(b)}function yc(b){return b.charAt(0).toUpperCase()+b.substr(1)}function pe(b,e){e=void 0===e?"datum":e;b=q.splitAccessPath(b);for(var a=[],c=1;c<=b.length;c++){var d="["+b.slice(0,c).map(q.stringValue).join("][")+\n"]";a.push(""+e+d)}return a.join(" && ")}function lg(b,e){return(void 0===e?"datum":e)+"["+q.stringValue(q.splitAccessPath(b).join("."))+"]"}function bk(b){return b.replace(/(\\[|\\]|\\.|\'|")/g,"\\\\$1")}function eb(b){return""+q.splitAccessPath(b).map(bk).join("\\\\.")}function nc(b,e,a){return b.replace(new RegExp(e.replace(/[-/\\\\^$*+?.()|[\\]{}]/g,"\\\\$&"),"g"),a)}function qe(b){return""+q.splitAccessPath(b).join(".")}function zc(b){return b?q.splitAccessPath(b).length:0}function sa(b){for(var e=[],a=0;a<\narguments.length;++a)e[a-0]=arguments[a];e=$jscomp.makeIterator(e);for(a=e.next();!a.done;a=e.next())if(a=a.value,void 0!==a)return a}function mg(b){var e=++ng;return b?String(b)+e:e}function og(b){return pg(b)?b:"__"+b}function pg(b){return b.startsWith("__")}function Tc(b){if(void 0!==b)return(b%360+360)%360}function od(b){return q.isNumber(b)?!0:!isNaN(b)&&!isNaN(parseFloat(b))}function ck(b){switch(b){case "latitude":return"y";case "latitude2":return"y2";case "longitude":return"x";case "longitude2":return"x2"}}\nfunction Ac(b){return"color"===b||"fill"===b||"stroke"===b}function qg(b){return oc(b)!==b}function oc(b){switch(b){case "x2":return"x";case "y2":return"y";case "latitude2":return"latitude";case "longitude2":return"longitude";case "theta2":return"theta";case "radius2":return"radius"}return b}function Zb(b){if(b in re)switch(b){case "theta":return"startAngle";case "theta2":return"endAngle";case "radius":return"outerRadius";case "radius2":return"innerRadius"}return b}function Ib(b){switch(b){case "x":return"x2";\ncase "y":return"y2";case "latitude":return"latitude2";case "longitude":return"longitude2";case "theta":return"theta2";case "radius":return"radius2"}}function fb(b){switch(b){case "x":case "x2":return"width";case "y":case "y2":return"height"}}function dk(b){switch(b){case "x":return"xOffset";case "y":return"yOffset";case "x2":return"x2Offset";case "y2":return"y2Offset";case "theta":return"thetaOffset";case "radius":return"radiusOffset";case "theta2":return"theta2Offset";case "radius2":return"radius2Offset"}}\nfunction pd(b){return"width"===b?"x":"y"}function ek(b){switch(b){case "color":case "fill":case "stroke":case "description":case "detail":case "key":case "tooltip":case "href":case "order":case "opacity":case "fillOpacity":case "strokeOpacity":case "strokeWidth":case "facet":case "row":case "column":return rg;case "x":case "y":case "latitude":case "longitude":return fk;case "x2":case "y2":case "latitude2":case "longitude2":return{area:"always",bar:"always",image:"always",rect:"always",rule:"always",\ncircle:"binned",point:"binned",square:"binned",tick:"binned",line:"binned",trail:"binned"};case "size":return{point:"always",tick:"always",rule:"always",circle:"always",square:"always",bar:"always",text:"always",line:"always",trail:"always"};case "strokeDash":return{line:"always",point:"always",tick:"always",rule:"always",circle:"always",square:"always",bar:"always",geoshape:"always"};case "shape":return{point:"always",geoshape:"always"};case "text":return{text:"always"};case "angle":return{point:"always",\nsquare:"always",text:"always"};case "url":return{image:"always"};case "theta":return{text:"always",arc:"always"};case "radius":return{text:"always",arc:"always"};case "theta2":case "radius2":return{arc:"always"}}}function se(b){switch(b){case "facet":case "row":case "column":case "shape":case "strokeDash":case "text":case "tooltip":case "href":case "url":case "description":return"discrete";case "color":case "fill":case "stroke":return"flexible"}}function Jb(b){return!!b&&!!b.argmin}function $b(b){return!!b&&\n!!b.argmax}function te(b){return q.isString(b)&&!!gk[b]}function ue(b){q.isBoolean(b)&&(b=qd(b,void 0));return"bin"+G(b).map(function(e){return rd(b[e])?oa("_"+e+"_"+ac(b[e])):oa("_"+e+"_"+b[e])}).join("")}function ka(b){return!0===b||q.isObject(b)&&!b.binned}function Na(b){return"binned"===b||q.isObject(b)&&!0===b.binned}function rd(b){return null===b||void 0===b?void 0:b.param}function sg(b){switch(b){case "row":case "column":case "size":case "color":case "fill":case "stroke":case "strokeWidth":case "opacity":case "fillOpacity":case "strokeOpacity":case "shape":return 6;\ncase "strokeDash":return 4;default:return 10}}function Uc(b){return b&&!!b.expr}function Va(b){var e=G(b||{}),a={};e=$jscomp.makeIterator(e);for(var c=e.next();!c.done;c=e.next())c=c.value,a[c]=Za(b[c]);return a}function tg(b){var e=Object.assign({},b),a=b.anchor,c=b.frame,d=b.offset,f=b.orient,g=b.color,h=b.subtitleColor,k=b.subtitleFont,l=b.subtitleFontSize,m=b.subtitleFontStyle,n=b.subtitleFontWeight,p=b.subtitleLineHeight;b=b.subtitlePadding;e=(delete e.anchor,delete e.frame,delete e.offset,delete e.orient,\ndelete e.color,delete e.subtitleColor,delete e.subtitleFont,delete e.subtitleFontSize,delete e.subtitleFontStyle,delete e.subtitleFontWeight,delete e.subtitleLineHeight,delete e.subtitlePadding,e);g=Object.assign({},e,g?{fill:g}:{});a=Object.assign({},a?{anchor:a}:{},c?{frame:c}:{},d?{offset:d}:{},f?{orient:f}:{});h=Object.assign({},h?{subtitleColor:h}:{},k?{subtitleFont:k}:{},l?{subtitleFontSize:l}:{},m?{subtitleFontStyle:m}:{},n?{subtitleFontWeight:n}:{},p?{subtitleLineHeight:p}:{},b?{subtitlePadding:b}:\n{});k=V(g,["align","baseline","dx","dy","limit"]);return{titleMarkConfig:g,subtitleMarkConfig:k,nonMark:a,subtitle:h}}function bc(b){return q.isString(b)||q.isArray(b)&&q.isString(b[0])}function T(b){return b&&!!b.signal}function cc(b){return!!b.step}function Kb(b){return q.isArray(b)?!1:"field"in b&&"data"in b}function ug(b){var e=q.isArray(b.condition)?b.condition.map(vg):vg(b.condition);return Object.assign({},Za(b),{condition:e})}function Za(b){if(Uc(b)){var e=Object.assign({},b);b=b.expr;e=(delete e.expr,\ne);return Object.assign({},{signal:b},e)}return b}function vg(b){if(Uc(b)){var e=Object.assign({},b);b=b.expr;e=(delete e.expr,e);return Object.assign({},{signal:b},e)}return b}function pa(b){if(Uc(b)){var e=Object.assign({},b);b=b.expr;e=(delete e.expr,e);return Object.assign({},{signal:b},e)}return T(b)?b:void 0!==b?{value:b}:void 0}function Lb(b){return T(b)?b.signal:null==b?null:q.stringValue(b)}function wg(b){var e;return[].concat(b.type,null!==(e=b.style)&&void 0!==e?e:[])}function ea(b,e,a,\nc){var d=c=void 0===c?{}:c,f=d.vgChannel;if(f&&void 0!==e[f])return e[f];if(void 0!==e[b])return e[b];if(!d.ignoreVgConfig||f&&f!==b)return pc(b,e,a,c)}function pc(b,e,a,c){c=(void 0===c?{}:c).vgChannel;return sa(c?sd(b,e,a.style):void 0,sd(b,e,a.style),c?a[e.type][c]:void 0,a[e.type][b],c?a.mark[c]:a.mark[b])}function sd(b,e,a){return xg(b,wg(e),a)}function xg(b,e,a){e=q.array(e);var c;e=$jscomp.makeIterator(e);for(var d=e.next();!d.done;d=e.next())(d=a[d.value])&&void 0!==d[b]&&(c=d[b]);return c}\nfunction yg(b,e){return q.array(b).reduce(function(a,c){var d;a.field.push(J(c,e));a.order.push(null!==(d=c.sort)&&void 0!==d?d:"ascending");return a},{field:[],order:[]})}function zg(b,e){var a=[].concat($jscomp.arrayFromIterable(b));e.forEach(function(c){for(var d=$jscomp.makeIterator(a),f=d.next();!f.done;f=d.next())if(wb(f.value,c))return;a.push(c)});return a}function Ag(b,e){return wb(b,e)||!e?b:b?[].concat($jscomp.arrayFromIterable(q.array(b)),$jscomp.arrayFromIterable(q.array(e))).join(", "):\ne}function Bg(b,e){var a=b.value;e=e.value;if(null==a||null===e)return{explicit:b.explicit,value:null};if((bc(a)||T(a))&&(bc(e)||T(e)))return{explicit:b.explicit,value:Ag(a,e)};if(bc(a)||T(a))return{explicit:b.explicit,value:a};if(bc(e)||T(e))return{explicit:b.explicit,value:e};if(!(bc(a)||T(a)||bc(e)||T(e)))return{explicit:b.explicit,value:zg(a,e)};throw Error("It should never reach here");}function S(b,e,a){e in b?Object.defineProperty(b,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):b[e]=\na;return b}function hk(b,e){e=Cg(b,e,"get");return ik(b,e)}function Dg(b,e,a){e=Cg(b,e,"set");jk(b,e,a);return a}function Cg(b,e,a){if(!e.has(b))throw new TypeError("attempted to "+a+" private field on non-instance");return e.get(b)}function ik(b,e){return e.get?e.get.call(b):e.value}function jk(b,e,a){if(e.set)e.set.call(b,a);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=a}}function ve(b){return"Invalid specification "+ia(b)+\'. Make sure the specification includes at least one of the following properties: "mark", "layer", "facet", "hconcat", "vconcat", "concat", or "repeat".\'}\nfunction Eg(b){return("width"==b?"Width":"Height")+\' "container" only works for single views and layered views.\'}function Fg(b){return("width"==b?"Width":"Height")+\' "container" only works well with autosize "fit" or "fit-\'+("width"==b?"x":"y")+\'".\'}function Gg(b){return b?\'Dropping "fit-\'+b+\'" because spec has discrete \'+fb(b)+".":\'Dropping "fit" because spec has discrete size.\'}function we(b){return"Unknown field for "+b+". Cannot calculate view size."}function Hg(b){return\'Cannot project a selection on encoding channel "\'+\nb+\'", which has no field.\'}function Ig(b){return"Selection not supported for "+b+" yet."}function Jg(b){return\'The "columns" property cannot be used when "\'+b+\'" has nested row/column.\'}function Kg(b,e,a){return\'An ancestor parsed field "\'+b+\'" as \'+a+" but a child wants to parse the field as "+e+"."}function Lg(b){return"Config.customFormatTypes is not true, thus custom format type and format for channel "+b+" are dropped."}function Mg(b,e){var a=e.fill;e=e.stroke;return"Dropping color "+b+" as the plot also has "+\n(a&&e?"fill and stroke":a?"fill":"stroke")+"."}function xe(b,e){return"Dropping "+ia(b)+\' from channel "\'+e+\'" since it does not contain any data field, datum, value, or signal.\'}function td(b,e,a){return b+\' dropped as it is incompatible with "\'+e+\'"\'+(a?" when "+a:"")+"."}function ye(b,e){return\'Using discrete channel "\'+b+\'" to encode "\'+e+\'" field can be misleading as it does not encode \'+("ordinal"===e?"order":"magnitude")+"."}function Ng(b,e,a){return a+"-scale\'s \\""+e+\'" is dropped as it does not work with \'+\nb+" scale."}function Og(b){return\'The step for "\'+b+\'" is dropped because the \'+("width"===b?"x":"y")+" is continuous."}function ud(b,e){return"Invalid "+b+": "+ia(e)+"."}function Pg(b){return"1D error band does not support "+b+"."}function Qg(b){return"Channel "+b+\' is required for "binned" bin.\'}function H(b){for(var e=[],a=0;a<arguments.length;++a)e[a-0]=arguments[a];Bc.warn.apply(Bc,$jscomp.arrayFromIterable(e))}function kk(b){for(var e=[],a=0;a<arguments.length;++a)e[a-0]=arguments[a];Bc.debug.apply(Bc,\n$jscomp.arrayFromIterable(e))}function qc(b){if(b&&q.isObject(b))for(var e=$jscomp.makeIterator(ze),a=e.next();!a.done;a=e.next())if(a.value in b)return!0;return!1}function lk(b){od(b)&&(b=+b);if(q.isNumber(b))return b-1;var e=b.toLowerCase(),a=Rg.indexOf(e);if(-1!==a)return a;e=e.substr(0,3);e=mk.indexOf(e);if(-1!==e)return e;throw Error(ud("month",b));}function nk(b){od(b)&&(b=+b);if(q.isNumber(b))return b%7;var e=b.toLowerCase(),a=Sg.indexOf(e);if(-1!==a)return a;e=e.substr(0,3);e=ok.indexOf(e);\nif(-1!==e)return e;throw Error(ud("day",b));}function Ae(b,e){var a=[];e&&void 0!==b.day&&1<G(b).length&&(H("Dropping day from datetime "+ia(b)+" as day cannot be combined with other units."),b=Y(b),delete b.day);void 0!==b.year?a.push(b.year):a.push(2012);if(void 0!==b.month){var c=e?lk(b.month):b.month;a.push(c)}else if(void 0!==b.quarter){if(e)if(c=b.quarter,od(c)&&(c=+c),q.isNumber(c))4<c&&H(ud("quarter",c)),--c;else throw Error(ud("quarter",c));else c=b.quarter;a.push(q.isNumber(c)?3*c:c+"*3")}else a.push(0);\nvoid 0!==b.date?a.push(b.date):void 0!==b.day?(e=e?nk(b.day):b.day,a.push(q.isNumber(e)?e+1:e+"+1")):a.push(1);e=$jscomp.makeIterator(["hours","minutes","seconds","milliseconds"]);for(c=e.next();!c.done;c=e.next())c=b[c.value],a.push("undefined"===typeof c?0:c);return a}function Vc(b){var e=Ae(b,!0).join(", ");return b.utc?"utc("+e+")":"datetime("+e+")"}function pk(b){var e=Ae(b,!0);return b.utc?+new Date(Date.UTC.apply(Date,$jscomp.arrayFromIterable(e))):+new (Function.prototype.bind.apply(Date,\n[null].concat($jscomp.arrayFromIterable(e))))}function Be(b){return ze.filter(function(e){return Tg(b,e)})}function Tg(b,e){var a=b.indexOf(e);return 0>a||0<a&&"seconds"===e&&"i"===b.charAt(a-1)||b.length>a+3&&"day"===e&&"o"===b.charAt(a+3)||0<a&&"year"===e&&"f"===b.charAt(a-1)?!1:!0}function Ug(b){if(b)return b=Be(b),"timeUnitSpecifier("+ia(b)+", "+ia(qk)+")"}function Oa(b){if(b){var e;q.isString(b)?e={unit:b}:q.isObject(b)&&(e=Object.assign({},b,b.unit?{unit:b.unit}:{}));e.unit.startsWith("utc")&&\n(e.utc=!0,e.unit=e.unit.substr(3));return e}}function rk(b){var e=Oa(b);b=Object.assign({},e);e=e.utc;var a=(delete b.utc,b);return a.unit?(e?"utc":"")+G(a).map(function(c){return oa(("unit"===c?"":"_"+c+"_")+a[c])}).join(""):(e?"utc":"")+"timeunit"+G(a).map(function(c){return oa("_"+c+"_"+a[c])}).join("")}function Ce(b){return b&&!!b.field&&void 0!==b.equal}function De(b){return b&&!!b.field&&void 0!==b.lt}function Ee(b){return b&&!!b.field&&void 0!==b.lte}function Fe(b){return b&&!!b.field&&void 0!==\nb.gt}function Ge(b){return b&&!!b.field&&void 0!==b.gte}function He(b){return b&&b.field&&(q.isArray(b.range)&&2===b.range.length||T(b.range))?!0:!1}function Ie(b){return b&&!!b.field&&(q.isArray(b.oneOf)||q.isArray(b.in))}function Vg(b){return Ie(b)||Ce(b)||He(b)||De(b)||Fe(b)||Ee(b)||Ge(b)}function xb(b,e){return vd(b,{timeUnit:e,wrapTime:!0})}function sk(b,e){return b.map(function(a){return xb(a,e)})}function Wg(b,e){e=void 0===e?!0:e;var a,c=b.field,d=null===(a=Oa(b.timeUnit))||void 0===a?void 0:\na.unit;if(d){var f=pe(c),g=d.startsWith("utc")?"utc":"";c={};for(var h=$jscomp.makeIterator(ze),k=h.next();!k.done;k=h.next())if(k=k.value,Tg(d,k)){var l="quarter"===k?"("+g+"quarter("+f+")-1)":""+g+k+"("+f+")";c[k]=l}f=Ae(c,!1).join(", ");c="time("+(c.utc?"utc("+f+")":"datetime("+f+")")+")"}else c=J(b,{expr:"datum"});if(Ce(b))return c+"==="+xb(b.equal,d);if(De(b))return c+"<"+xb(b.lt,d);if(Fe(b))return c+">"+xb(b.gt,d);if(Ee(b))return c+"<="+xb(b.lte,d);if(Ge(b))return c+">="+xb(b.gte,d);if(Ie(b))return"indexof(["+\nsk(b.oneOf,d).join(",")+"], "+c+") !== -1";if(b&&b.field&&void 0!==b.valid)return Je(c,b.valid);if(He(b)){f=b.range;b=T(f)?{signal:f.signal+"[0]"}:f[0];f=T(f)?{signal:f.signal+"[1]"}:f[1];if(null!==b&&null!==f&&e)return"inrange("+c+", ["+xb(b,d)+", "+xb(f,d)+"])";e=[];null!==b&&e.push(c+" >= "+xb(b,d));null!==f&&e.push(c+" <= "+xb(f,d));return 0<e.length?e.join(" && "):"true"}throw Error("Invalid field predicate: "+ia(b));}function Je(b,e){return void 0===e||e?"isValid("+b+") && isFinite(+"+b+")":\n"!isValid("+b+") || !isFinite(+"+b+")"}function tk(b){if(Vg(b)&&b.timeUnit){var e;return Object.assign({},b,{timeUnit:null===(e=Oa(b.timeUnit))||void 0===e?void 0:e.unit})}return b}function uk(b){if(b)switch(b=b.toLowerCase(),b){case "q":case "quantitative":return"quantitative";case "t":case "temporal":return"temporal";case "o":case "ordinal":return"ordinal";case "n":case "nominal":return"nominal";case "geojson":return"geojson"}}function Xg(b){return null===b||void 0===b?void 0:b.param}function Ke(b,\ne){switch(e){case "type":case "domain":case "reverse":case "range":return!0;case "scheme":case "interpolate":return!["point","band","identity"].includes(b);case "bins":return!["point","band","identity","ordinal"].includes(b);case "round":return b in mb||"band"===b||"point"===b;case "padding":case "rangeMin":case "rangeMax":return b in mb||["point","band"].includes(b);case "paddingOuter":case "align":return["point","band"].includes(b);case "paddingInner":return"band"===b;case "domainMax":case "domainMid":case "domainMin":case "clamp":return b in\nmb;case "nice":return b in mb||"quantize"===b||"threshold"===b;case "exponent":return"pow"===b;case "base":return"log"===b;case "constant":return"symlog"===b;case "zero":return b in $a&&!B(["log","time","utc","threshold","quantile"],b)}}function Yg(b,e){switch(e){case "interpolate":case "scheme":case "domainMid":if(!Ac(b))return\'Cannot use the scale property "\'+b+\'" with non-color channel.\'}}function vk(b,e){if(!Mb[b])return!1;switch(b){case "x":case "y":case "theta":case "radius":return e in mb||\nB(["band","point"],e);case "size":case "strokeWidth":case "opacity":case "fillOpacity":case "strokeOpacity":case "angle":return e in mb||e in Wc||B(["band","point","ordinal"],e);case "color":case "fill":case "stroke":return"band"!==e;case "strokeDash":case "shape":return"ordinal"===e||e in Wc}}function dc(b){return["line","area","trail"].includes(b)}function yb(b){return b.type}function Cc(b){return b&&void 0!=b.band}function Le(b){var e=b.channel,a=b.channelDef,c=b.markDef,d=b.scale,f=b.config;b=\nZg(b);var g;if(g=K(a))g=a.aggregate,g=!(q.isString(g)&&$g.includes(g));return g&&d&&d.get("type")in mb&&!1===d.get("zero")?ah({fieldDef:a,channel:e,markDef:c,ref:b,config:f}):b}function ah(b){var e=b.fieldDef,a=b.channel,c=b.markDef,d=b.ref;b=b.config;if(dc(c.type)||null===ea("invalid",c,b))return d;e=Me(e,!0);a="y"===oc(a)?{field:{group:"height"}}:{value:0};return[Object.assign({},{test:e},a),d]}function Me(b,e){e=void 0===e?!0:e;return Je(q.isString(b)?b:J(b,{expr:"datum"}),!e)}function rc(b,e,\na,c){var d={};e&&(d.scale=e);ec(b)?(b=b.datum,qc(b)?d.signal=Vc(b):T(b)?d.signal=b.signal:Uc(b)?d.signal=b.expr:d.value=b):d.field=J(b,a);c&&(b=c.offset,c=c.band,b&&(d.offset=b),c&&(d.band=c));return d}function wd(b){var e=b.scaleName,a=b.fieldOrDatumDef,c=b.fieldOrDatumDef2,d=b.offset,f=void 0===b.bandPosition?.5:b.bandPosition,g=0<f&&1>f?"datum":void 0;b=J(a,{expr:g,suffix:b.startSuffix});c=void 0!==c?J(c,{expr:g}):J(a,{suffix:"end",expr:g});a={};0===f||1===f?(a.scale=e,a.field=0===f?b:c):(f=T(f)?\nf.signal+" * "+b+" + (1-"+f.signal+") * "+c:f+" * "+b+" + "+(1-f)+" * "+c,a.signal=\'scale("\'+e+\'", \'+f+")");d&&(a.offset=d);return a}function Zg(b){var e=b.channel,a=b.channelDef,c=b.channel2Def,d=b.markDef,f=b.config,g=b.scaleName,h=b.scale,k=b.stack,l=b.offset,m=b.defaultRef;b=b.bandPosition;if(a){if(X(a)){var n,p;if(gb(a)){var r;null!==(r=b)&&void 0!==r?r:b=bh({fieldDef:a,fieldDef2:c,markDef:d,config:f});d=a.bin;f=a.timeUnit;m=a.type;if(ka(d)||b&&f&&"temporal"===m)return k&&k.impute?rc(a,g,{binSuffix:"mid"},\n{offset:l}):b?wd({scaleName:g,fieldOrDatumDef:a,bandPosition:b,offset:l}):rc(a,g,Xc(a,e)?{binSuffix:"range"}:{},{offset:l});if(Na(d)){if(K(c))return wd({scaleName:g,fieldOrDatumDef:a,fieldOrDatumDef2:c,bandPosition:b,offset:l});H(Qg("x"===e?"x2":"y2"))}}e=null===h||void 0===h?void 0:h.get("type");return rc(a,g,e in Ha?{binSuffix:"range"}:{},{offset:l,band:"band"===e?null!==(n=null!==(p=b)&&void 0!==p?p:a.bandPosition)&&void 0!==n?n:.5:void 0})}if(nb(a))return g=l?{offset:l}:{},Object.assign({},Yc(e,\na.value),g)}q.isFunction(m)&&(m=m());return m?Object.assign({},m,l?{offset:l}:{}):m}function Yc(b,e){return B(["x","x2"],b)&&"width"===e?{field:{group:"width"}}:B(["y","y2"],b)&&"height"===e?{field:{group:"height"}}:pa(e)}function sc(b){return b&&"number"!==b&&"time"!==b}function Ne(b){var e=b.fieldOrDatumDef,a=b.format,c=b.formatType,d=b.expr,f=b.normalizeStack;b=b.config;if(sc(c))return Oe({fieldOrDatumDef:e,format:a,formatType:c,expr:d,config:b});f=ch(e,d,f);if(Dc(e)){var g,h;c=K(e)?null===(g=\nOa(e.timeUnit))||void 0===g?void 0:g.unit:void 0;b=b.timeFormat;e=Ec(e)&&(null===(h=e.scale)||void 0===h?void 0:h.type)===ya.UTC;!c||a?(a=q.isString(a)?a:b,f=(e?"utc":"time")+"Format("+f+", \'"+a+"\')"):c?(a=Ug(c),f=(e||c.startsWith("utc")?"utc":"time")+"Format("+f+", "+a+")"):f=void 0;return f?{signal:f}:void 0}a=dh(fc(e),a,b);return K(e)&&ka(e.bin)?(e=J(e,{expr:d,binSuffix:"end"}),{signal:xd(f,e,a,c,b)}):a||"quantitative"===fc(e)?{signal:"format("+f+\', "\'+(a||"")+\'")\'}:{signal:"isValid("+f+") ? "+\nf+\' : ""+\'+f}}function ch(b,e,a){if(K(b))return a?J(b,{expr:e,suffix:"end"})+"-"+J(b,{expr:e,suffix:"start"}):J(b,{expr:e});b=b.datum;b=qc(b)?Vc(b):""+ia(b);return b}function Oe(b){var e=b.fieldOrDatumDef,a=b.format,c=b.formatType,d=b.expr,f=b.normalizeStack,g=b.config;b=b.field;var h;null!==(h=b)&&void 0!==h?h:b=ch(e,d,f);return K(e)&&ka(e.bin)?(e=J(e,{expr:d,binSuffix:"end"}),{signal:xd(b,e,a,c,g)}):{signal:c+"("+b+(a?", "+ia(a):"")+")"}}function eh(b,e,a,c,d,f){if(!sc(c)){if(Dc(b)){var g;b=K(b)?\nnull===(g=Oa(b.timeUnit))||void 0===g?void 0:g.unit:void 0;a=a?a:b?{signal:Ug(b)}:f?void 0:d.timeFormat;return a}return dh(e,a,d)}}function fh(b,e,a){if(b&&(T(b)||"number"===b||"time"===b))return b;if(Dc(e)&&"time"!==a&&"utc"!==a)return"time"}function dh(b,e,a){if(q.isString(e))return e;if("quantitative"===b)return a.numberFormat}function gh(b,e,a,c){var d;if(sc(a))return a+"("+b+(e?", "+ia(e):"")+")";e=null!==(d=q.isString(e)?e:void 0)&&void 0!==d?d:c.numberFormat;return"format("+b+\', "\'+(e||"")+\n\'")\'}function xd(b,e,a,c,d){var f=gh(b,a,c,d);e=gh(e,a,c,d);return Je(b,!1)+\' ? "null" : \'+f+\' + " \\u2013 " + \'+e}function zb(b){return!!b&&("count"===b.op||!!b.field)}function hh(b){return!!b&&q.isArray(b)}function Zc(b){return"row"in b||"column"in b}function ih(b){var e=b.timeUnit,a=b.bin,c=b.aggregate;return Object.assign({},e?{timeUnit:e}:{},a?{bin:a}:{},c?{aggregate:c}:{},{field:b.field})}function bh(b){var e=b.fieldDef,a=b.fieldDef2,c=b.markDef;b=b.config;if(X(e)&&void 0!==e.bandPosition)return e.bandPosition;\nif(K(e)){var d=e.bin;if(e.timeUnit&&!a)return["rect","bar","image","arc"].includes(c.type)?0:pc("timeUnitBandPosition",c,b);if(ka(d))return.5}}function jh(b){var e=b.fieldDef,a=b.fieldDef2,c=b.markDef,d=b.config,f=b.scaleType,g=b.useVlSizeChannel;b=fb(b.channel);g=ea(g?"size":b,c,d,{vgChannel:b});if(void 0!==g)return g;if(K(e)){g=e.bin;if(e.timeUnit&&!a)return{band:pc("timeUnitBandSize",c,d)};if(ka(g)&&!(f in Ha))return{band:1}}if(["rect","bar","image","arc"].includes(c.type)){var h;if(f){if(f in\nHa){var k;return(null===(k=d[c.type])||void 0===k?void 0:k.discreteBandSize)||{band:1}}var l;return null===(l=d[c.type])||void 0===l?void 0:l.continuousBandSize}return null===(h=d[c.type])||void 0===h?void 0:h.discreteBandSize}}function kh(b,e,a,c){return ka(b.bin)||b.timeUnit&&gb(b)&&"temporal"===b.type?void 0!==bh({fieldDef:b,fieldDef2:e,markDef:a,config:c}):!1}function yd(b){return!!b&&"condition"in b}function zd(b){b=b&&b.condition;return!!b&&!q.isArray(b)&&K(b)}function Ad(b){b=b&&b.condition;\nreturn!!b&&!q.isArray(b)&&X(b)}function K(b){return!!b&&(!!b.field||"count"===b.aggregate)}function fc(b){return b&&b.type}function ec(b){return!!b&&"datum"in b}function Ab(b){return gb(b)&&!Bd(b)||Pe(b)}function Pe(b){return ec(b)&&q.isNumber(b.datum)}function X(b){return K(b)||ec(b)}function gb(b){return!!b&&("field"in b||"count"===b.aggregate)&&"type"in b}function nb(b){return b&&"value"in b&&"value"in b}function Ec(b){return!!b&&("scale"in b||"sort"in b)}function Qe(b){return b&&("axis"in b||\n"stack"in b||"impute"in b)}function lh(b){return!!b&&("format"in b||"formatType"in b)}function wk(b){return D(b,["legend","axis","header","scale"])}function J(b,e){e=void 0===e?{}:e;var a=b.field,c=e.prefix,d=e.suffix,f="";if("count"===b.aggregate)a=og("count");else{if(!e.nofn)if("op"in b)var g=b.op;else{var h=b.bin,k=b.aggregate;b=b.timeUnit;if(ka(h)){var l,m;g=ue(h);d=(null!==(l=e.binSuffix)&&void 0!==l?l:"")+(null!==(m=e.suffix)&&void 0!==m?m:"")}else if(k)$b(k)?(f=\'["\'+a+\'"]\',a="argmax_"+k.argmax):\nJb(k)?(f=\'["\'+a+\'"]\',a="argmin_"+k.argmin):g=String(k);else if(b){var n;g=rk(b);d=(!["range","mid"].includes(e.binSuffix)&&e.binSuffix||"")+(null!==(n=e.suffix)&&void 0!==n?n:"")}}g&&(a=a?g+"_"+a:g)}d&&(a=a+"_"+d);c&&(a=c+"_"+a);return e.forAs?qe(a):e.expr?lg(a,e.expr)+f:eb(a)+f}function Bd(b){switch(b.type){case "nominal":case "ordinal":case "geojson":return!0;case "quantitative":return K(b)&&!!b.bin;case "temporal":return!1}throw Error(\'Invalid field type "\'+b.type+\'".\');}function xk(b,e){var a=\nb.field,c=b.timeUnit,d=b.aggregate;if("count"===d)return e.countTitle;if(ka(b.bin))return a+" (binned)";if(c){var f;if(b=null===(f=Oa(c))||void 0===f?void 0:f.unit)return a+" ("+Be(b).join("-")+")"}else if(d)return $b(d)?a+" for max "+d.argmax:Jb(d)?a+" for min "+d.argmin:yc(d)+" of "+a;return a}function Fc(b,e,a){var c=a.allowDisabling,d=void 0===a.includeDefault?!0:a.includeDefault,f;a=null===(f=Re(b))||void 0===f?void 0:f.title;if(!K(b))return a;e=d?$c(b,e):void 0;if(c)return sa(a,b.title,e);var g;\nreturn null!==(g=null!==a&&void 0!==a?a:b.title)&&void 0!==g?g:e}function Re(b){if(Qe(b)&&b.axis)return b.axis;if(b&&"legend"in b&&b.legend)return b.legend;if(b&&"header"in b&&b.header)return b.header}function Cd(b){if(lh(b))return{format:b.format,formatType:b.formatType};var e;b=null!==(e=Re(b))&&void 0!==e?e:{};return{format:b.format,formatType:b.formatType}}function yk(b,e){var a;switch(e){case "latitude":case "longitude":return"quantitative";case "row":case "column":case "facet":case "shape":case "strokeDash":return"nominal";\ncase "order":return"ordinal"}if("sort"in b&&q.isArray(b.sort))return"ordinal";e=b.aggregate;if(b.timeUnit)return"temporal";if(b.bin||e&&!$b(e)&&!Jb(e))return"quantitative";if(Ec(b)&&null!==(a=b.scale)&&void 0!==a&&a.type)switch(Se[b.scale.type]){case "numeric":case "discretizing":return"quantitative";case "time":return"temporal"}return"nominal"}function Bb(b){if(K(b))return b;if(zd(b))return b.condition}function za(b){if(X(b))return b;if(Ad(b))return b.condition}function mh(b,e,a,c){c=void 0===c?\n{}:c;return q.isString(b)||q.isNumber(b)||q.isBoolean(b)?(a=q.isString(b)?"string":q.isNumber(b)?"number":"boolean",H("Channel "+e+" is a "+a+". Converted to {value: "+ia(b)+"}."),{value:b}):X(b)?Dd(b,e,a,c):Ad(b)?Object.assign({},b,{condition:Dd(b.condition,e,a,c)}):b}function Dd(b,e,a,c){if(lh(b)){var d=Object.assign({},b),f=b.formatType;d=(delete d.format,delete d.formatType,d);if(sc(f)&&!a.customFormatTypes)return H(Lg(e)),Dd(d,e,a,c)}else if((f=Qe(b)?"axis":b&&"legend"in b?"legend":b&&"header"in\nb?"header":null)&&b[f]){var g=b[f];d=Object.assign({},g);g=g.formatType;d=(delete d.format,delete d.formatType,d);if(sc(g)&&!a.customFormatTypes)return H(Lg(e)),g={},Dd(Object.assign({},b,(g[f]=d,g)),e,a,c)}if(K(b))return Te(b,e,c);e=b.type;e||(e=b.datum,e=q.isNumber(e)?"quantitative":q.isString(e)?"nominal":qc(e)?"temporal":void 0,b=Object.assign({},b,{type:e}));return b}function Te(b,e,a){a=void 0===a?{}:a;var c=void 0===a.compositeMark?!1:a.compositeMark;a=b.aggregate;var d=b.timeUnit,f=b.bin,\ng=b.field;b=Object.assign({},b);c||!a||te(a)||$b(a)||Jb(a)||(H(\'Invalid aggregation operator "\'+a+\'".\'),delete b.aggregate);d&&(b.timeUnit=Oa(d));g&&(b.field=""+g);ka(f)&&(b.bin=qd(f,e));!Na(f)||e in Fa||H("Channel "+e+\' should not be used with "binned" bin.\');gb(b)?(c=b.type,d=uk(c),c!==d&&(b.type=d),"quantitative"!==c&&q.isString(a)&&$g.includes(a)&&(H(\'Invalid field type "\'+c+\'" for aggregate: "\'+a+\'", using "quantitative" instead.\'),b.type="quantitative")):qg(e)||(a=yk(b,e),b.type=a);gb(b)&&(e=\nzk(b,e)||{},a=e.warning,!1===e.compatible&&H(a));if("sort"in b&&q.isString(b.sort)){e=b.sort;if(e in nh)return Object.assign({},b,{sort:{encoding:e}});a=e.substr(1);if("-"===e.charAt(0)&&a in nh)return Object.assign({},b,{sort:{encoding:a,order:"descending"}})}return b&&"header"in b&&(e=b.header)&&(c=Object.assign({},e),a=e.orient,c=(delete c.orient,c),a)?Object.assign({},b,{header:Object.assign({},c,{labelOrient:e.labelOrient||a,titleOrient:e.titleOrient||a})}):b}function qd(b,e){return q.isBoolean(b)?\n{maxbins:sg(e)}:"binned"===b?{binned:!0}:b.maxbins||b.step?b:Object.assign({},b,{maxbins:sg(e)})}function zk(b,e){var a=b.type;if("geojson"===a&&"shape"!==e)return{compatible:!1,warning:"Channel "+e+" should not be used with a geojson data."};switch(e){case "row":case "column":case "facet":return Bd(b)?Gc:{compatible:!1,warning:e+" encoding should be discrete (ordinal / nominal / binned)."};case "x":case "y":case "color":case "fill":case "stroke":case "text":case "detail":case "key":case "tooltip":case "href":case "url":case "angle":case "theta":case "radius":case "description":return Gc;\ncase "longitude":case "longitude2":case "latitude":case "latitude2":return"quantitative"!==a?{compatible:!1,warning:"Channel "+e+" should be used with a quantitative field only, not "+b.type+" field."}:Gc;case "opacity":case "fillOpacity":case "strokeOpacity":case "strokeWidth":case "size":case "theta2":case "radius2":case "x2":case "y2":return"nominal"!==a||b.sort?Gc:{compatible:!1,warning:"Channel "+e+" should not be used with an unsorted discrete field."};case "shape":case "strokeDash":if(a=!Bd(b)){var c;\na=!(Ec(b)&&(null===(c=b.scale)||void 0===c?void 0:c.type)in Wc)}return a?{compatible:!1,warning:e+" encoding should be discrete (ordinal / nominal / binned) or use a discretizing scale (e.g. threshold)."}:Gc;case "order":return"nominal"!==b.type||"sort"in b?Gc:{compatible:!1,warning:"Channel order is inappropriate for nominal field, which has no inherent order."}}}function Dc(b){var e=Cd(b).formatType,a;if(!(a="time"===e)){if(e=!e)e=b&&("temporal"===b.type||K(b)&&!!b.timeUnit);a=e}return a}function vd(b,\ne){var a=e.timeUnit,c=e.type,d=e.wrapTime;e=e.undefinedIfExprNotRequired;var f;c=(a=a&&(null===(f=Oa(a))||void 0===f?void 0:f.unit))||"temporal"===c;if(Uc(b))var g=b.expr;else T(b)?g=b.signal:qc(b)?(c=!0,g=Vc(b)):(q.isString(b)||q.isNumber(b))&&c&&(g="datetime("+ia(b)+")",oh[a]&&(q.isNumber(b)&&1E4>b||q.isString(b)&&isNaN(Date.parse(b)))&&(g={},g=Vc((g[a]=b,g))));return g?d&&c?"time("+g+")":g:e?void 0:ia(b)}function ph(b,e){var a=b.type;return e.map(function(c){var d=vd(c,{timeUnit:K(b)?b.timeUnit:\nvoid 0,type:a,undefinedIfExprNotRequired:!0});return void 0!==d?{signal:d}:c})}function Xc(b,e){return ka(b.bin)?!!Mb[e]&&["ordinal","nominal"].includes(b.type):(console.warn("Only call this method for binned field defs."),!1)}function ad(b){return b&&b.condition}function Nb(b){return"mark"in b}function tc(b,e){return(b=b&&b[e])?q.isArray(b)?L(b,function(a){return!!a.field}):K(b)||zd(b):!1}function Ue(b){return L(Ak,function(e){return tc(b,e)?(e=b[e],q.isArray(e)?L(e,function(a){return!!a.aggregate}):\n(e=Bb(e))&&!!e.aggregate):!1})}function qh(b,e){var a=[],c=[],d=[],f=[],g={};Ve(b,function(h,k){if(K(h)){var l=Object.assign({},h),m=h.field,n=h.aggregate,p=h.bin,r=h.timeUnit;l=(delete l.field,delete l.aggregate,delete l.bin,delete l.timeUnit,l);if(n||r||p){var v=Re(h),t=v&&v.title;v=J(h,{forAs:!0});l=Object.assign({},t?[]:{title:Fc(h,e,{allowDisabling:!0})},l,{field:v});if(n){if($b(n)){var y="argmax";v=J({op:"argmax",field:n.argmax},{forAs:!0});l.field=v+"."+m}else Jb(n)?(y="argmin",v=J({op:"argmin",\nfield:n.argmin},{forAs:!0}),l.field=v+"."+m):"boxplot"!==n&&"errorbar"!==n&&"errorband"!==n&&(y=n);y&&(h={op:y,as:v},m&&(h.field=m),f.push(h))}else a.push(v),gb(h)&&ka(p)?(c.push({bin:p,field:m,as:v}),a.push(J(h,{binSuffix:"end"})),Xc(h,k)&&a.push(J(h,{binSuffix:"range"})),k in Fa&&(g[k+"2"]={field:v+"_end"}),l.bin="binned",qg(k)||(l.type="quantitative")):r&&(d.push({timeUnit:r,field:m,as:v}),(m=gb(h)&&"temporal"!==h.type&&"time")&&("text"===k||"tooltip"===k?l.formatType=m:We[k]?l.legend=Object.assign({},\n{formatType:m},l.legend):k in Fa&&(l.axis=Object.assign({},{formatType:m},l.axis))));g[k]=l}else a.push(m),g[k]=b[k]}else g[k]=b[k]});return{bins:c,timeUnits:d,aggregate:f,groupby:a,encoding:g}}function Bk(b,e,a){a=ek(e)[a];return a&&("binned"!==a||(a=b["x2"===e?"x":"y"],K(a)&&K(b[e])&&Na(a.bin)))?!0:!1}function Ck(b,e,a,c){return G(b).reduce(function(d,f){if(!Ed[f])return H(f+"-encoding is dropped as "+f+" is not a valid encoding channel."),d;var g=b[f];"angle"!==f||"arc"!==e||b.theta||(H("Arc marks uses theta channel rather than angle, replacing angle with theta."),\nf="theta");if(!Bk(b,f,e))return H(td(f,e)),d;if("size"===f&&"line"===e){var h=Bb(b[f]);if(null!==h&&void 0!==h&&h.aggregate)return H("Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead."),d}if("color"===f&&(a?"fill"in b:"stroke"in b))return H(Mg("encoding",{fill:"fill"in b,stroke:"stroke"in b})),d;if("detail"===f||"order"===f&&!q.isArray(g)&&!nb(g)||"tooltip"===f&&q.isArray(g))g&&(d[f]=q.array(g).reduce(function(k,l){K(l)?k.push(Te(l,f)):H(xe(l,f));return k},\n[]));else{if("tooltip"===f&&null===g)d[f]=null;else if(!(K(g)||ec(g)||nb(g)||yd(g)||T(g)))return H(xe(g,f)),d;d[f]=mh(g,f,c)}return d},{})}function Fd(b,e){for(var a={},c=$jscomp.makeIterator(G(b)),d=c.next();!d.done;d=c.next()){d=d.value;var f=mh(b[d],d,e,{compositeMark:!0});a[d]=f}return a}function Dk(b){for(var e=[],a=$jscomp.makeIterator(G(b)),c=a.next();!c.done;c=a.next())if(c=c.value,tc(b,c)){c=q.array(b[c]);c=$jscomp.makeIterator(c);for(var d=c.next();!d.done;d=c.next())d=d.value,K(d)?e.push(d):\nzd(d)&&e.push(d.condition)}return e}function Ve(b,e,a){if(b)for(var c=$jscomp.makeIterator(G(b)),d=c.next();!d.done;d=c.next()){d=d.value;var f=b[d];if(q.isArray(f)){f=$jscomp.makeIterator(f);for(var g=f.next();!g.done;g=f.next())e.call(a,g.value,d)}else e.call(a,f,d)}}function Ek(b,e,a,c){return b?G(b).reduce(function(d,f){var g=b[f];return q.isArray(g)?g.reduce(function(h,k){return e.call(c,h,k,f)},d):e.call(c,d,g,f)},a):a}function rh(b,e){return G(e).reduce(function(a,c){switch(c){case "x":case "y":case "href":case "description":case "url":case "x2":case "y2":case "theta":case "theta2":case "radius":case "radius2":case "latitude":case "longitude":case "latitude2":case "longitude2":case "text":case "shape":case "angle":case "tooltip":return a;\ncase "order":if("line"===b||"trail"===b)return a;case "detail":case "key":c=e[c];if(q.isArray(c)||K(c)){c=$jscomp.makeIterator(q.array(c));for(var d=c.next();!d.done;d=c.next())d=d.value,d.aggregate||a.push(J(d,{}))}return a;case "size":if("trail"===b)return a;case "color":case "fill":case "stroke":case "opacity":case "fillOpacity":case "strokeOpacity":case "strokeDash":case "strokeWidth":return(c=Bb(e[c]))&&!c.aggregate&&a.push(J(c,{})),a}},[])}function Xe(b,e,a,c){c=void 0===c?!0:c;if("tooltip"in\na)return{tooltip:a.tooltip};b=b.map(function(d){var f=d.fieldPrefix;d=d.titlePrefix;var g=c?" of "+sa(e.title,e.field):"";return{field:f+e.field,type:e.type,title:T(d)?{signal:d+\'"\'+escape(g)+\'"\'}:d+g}});a=Dk(a).map(wk);return{tooltip:[].concat($jscomp.arrayFromIterable(b),$jscomp.arrayFromIterable(Ca(a,I)))}}function bd(b,e,a,c,d){var f=a.scale,g=a.axis;return function(h){var k=h.partName,l=h.mark,m=h.positionPrefix,n=void 0===h.endPositionPrefix?void 0:h.endPositionPrefix;h=void 0===h.extraEncoding?\n{}:h.extraEncoding;var p=sa(a.title,a.field),r={},v={};return sh(b,k,d,{mark:l,encoding:Object.assign({},(r[e]=Object.assign({},{field:m+"_"+a.field,type:a.type},void 0!==p?{title:p}:{},void 0!==f?{scale:f}:{},void 0!==g?{axis:g}:{}),r),q.isString(n)?(v[e+"2"]={field:n+"_"+a.field},v):{},c,h)})}}function sh(b,e,a,c){var d=b.clip,f=b.color,g=b.opacity,h=b.type;return b[e]||void 0===b[e]&&a[e]?[Object.assign({},c,{mark:Object.assign({},a[e],d?{clip:d}:{},f?{color:f}:{},g?{opacity:g}:{},yb(c.mark)?c.mark:\n{type:c.mark},{style:h+"-"+e},q.isBoolean(b[e])?{}:b[e])})]:[]}function th(b,e,a){b=b.encoding;e="vertical"===e?"y":"x";var c=b[e+"2"],d=b[e+"Error"],f=b[e+"Error2"];return{continuousAxisChannelDef:Gd(b[e],a),continuousAxisChannelDef2:Gd(c,a),continuousAxisChannelDefError:Gd(d,a),continuousAxisChannelDefError2:Gd(f,a),continuousAxis:e}}function Gd(b,e){if(b&&b.aggregate){var a=Object.assign({},b);b=b.aggregate;a=(delete a.aggregate,a);b!==e&&H("Continuous axis should not have customized aggregation function "+\nb+"; "+e+" already agregates the axis.");return a}return b}function uh(b,e){var a=b.mark,c=b.encoding;b=c.x;c=c.y;if(yb(a)&&a.orient)return a.orient;if(Ab(b)){if(Ab(c)){a=K(b)&&b.aggregate;var d=K(c)&&c.aggregate;if(!a&&d===e)return"vertical";if(d||a!==e){if(a===e&&d===e)throw Error("Both x and y cannot have aggregate");return Dc(c)&&!Dc(b)?"horizontal":"vertical"}}return"horizontal"}if(Ab(c))return"vertical";throw Error("Need a valid continuous axis for "+e+"s");}function vh(b,e){var a=e.config,\nc,d=b=Object.assign({},b,{encoding:Fd(b.encoding,a)});e=Object.assign({},d);var f=d.mark;d=d.params;e=(delete e.mark,delete e.encoding,delete e.params,delete e.projection,e);f=yb(f)?f:{type:f};d&&H(Ig("boxplot"));var g=null!==(c=f.extent)&&void 0!==c?c:a.boxplot.extent,h=ea("size",f,a),k=q.isNumber(g)?"tukey":g,l=b,m=uh(l,"boxplot");d=th(l,m,"boxplot");b=d.continuousAxisChannelDef;d=d.continuousAxis;var n=b.field,p=q.isNumber(g)?"tukey":g,r=[].concat($jscomp.arrayFromIterable(wh(n)),[{op:"median",\nfield:n,as:"mid_box_"+n},{op:"min",field:n,as:("min-max"===p?"lower_whisker_":"min_")+n},{op:"max",field:n,as:("min-max"===p?"upper_whisker_":"max_")+n}]);n="min-max"===p||"tukey"===p?[]:[{calculate:\'datum["upper_box_\'+n+\'"] - datum["lower_box_\'+n+\'"]\',as:"iqr_"+n},{calculate:\'min(datum["upper_box_\'+n+\'"] + datum["iqr_\'+n+\'"] * \'+g+\', datum["max_\'+n+\'"])\',as:"upper_whisker_"+n},{calculate:\'max(datum["lower_box_\'+n+\'"] - datum["iqr_\'+n+\'"] * \'+g+\', datum["min_\'+n+\'"])\',as:"lower_whisker_"+n}];l=Object.assign({},\nl.encoding);var v;p=(delete l[d],l);l=Object.assign({},p);p=p.tooltip;l=(delete l.tooltip,l);if(p){var t;if(q.isArray(p)){p=$jscomp.makeIterator(p);for(var y=p.next();!y.done;y=p.next())y=y.value,y.aggregate?(v||(v=[]),v.push(y)):(t||(t=[]),t.push(y));v&&(l.tooltip=v)}else p.aggregate?l.tooltip=p:t=p;q.isArray(t)&&1===t.length&&(t=t[0]);v={customTooltipWithoutAggregatedField:t,filteredEncoding:l}}else v={filteredEncoding:l};t=v;v=t.customTooltipWithoutAggregatedField;var w=qh(t.filteredEncoding,a);\nt=w.bins;l=w.timeUnits;p=w.aggregate;y=w.groupby;var E=w.encoding,Q="vertical"===m?"horizontal":"vertical";r=[].concat($jscomp.arrayFromIterable(t),$jscomp.arrayFromIterable(l),[{aggregate:[].concat($jscomp.arrayFromIterable(p),$jscomp.arrayFromIterable(r)),groupby:y}],$jscomp.arrayFromIterable(n));w=Object.assign({},E);n=E.color;var M=E.size;w=(delete w.color,delete w.size,w);var O=bd(f,d,b,w,a.boxplot),N=bd(f,d,b,E,a.boxplot);M=bd(f,d,b,Object.assign({},w,M?{size:M}:{}),a.boxplot);var W=Xe([{fieldPrefix:"min-max"===\nk?"upper_whisker_":"max_",titlePrefix:"Max"},{fieldPrefix:"upper_box_",titlePrefix:"Q3"},{fieldPrefix:"mid_box_",titlePrefix:"Median"},{fieldPrefix:"lower_box_",titlePrefix:"Q1"},{fieldPrefix:"min-max"===k?"lower_whisker_":"min_",titlePrefix:"Min"}],b,E),U={type:"tick",color:"black",opacity:1,orient:Q,invalid:null,aria:!1};E="min-max"===k?W:Xe([{fieldPrefix:"upper_whisker_",titlePrefix:"Upper Whisker"},{fieldPrefix:"lower_whisker_",titlePrefix:"Lower Whisker"}],b,E);E=[].concat($jscomp.arrayFromIterable(O({partName:"rule",\nmark:{type:"rule",invalid:null,aria:!1},positionPrefix:"lower_whisker",endPositionPrefix:"lower_box",extraEncoding:E})),$jscomp.arrayFromIterable(O({partName:"rule",mark:{type:"rule",invalid:null,aria:!1},positionPrefix:"upper_box",endPositionPrefix:"upper_whisker",extraEncoding:E})),$jscomp.arrayFromIterable(O({partName:"ticks",mark:U,positionPrefix:"lower_whisker",extraEncoding:E})),$jscomp.arrayFromIterable(O({partName:"ticks",mark:U,positionPrefix:"upper_whisker",extraEncoding:E})));h=[].concat($jscomp.arrayFromIterable("tukey"!==\nk?E:[]),$jscomp.arrayFromIterable(N({partName:"box",mark:Object.assign({},{type:"bar"},h?{size:h}:{},{orient:m,invalid:null,ariaRoleDescription:"box"}),positionPrefix:"lower_box",endPositionPrefix:"upper_box",extraEncoding:W})),$jscomp.arrayFromIterable(M({partName:"median",mark:Object.assign({},{type:"tick",invalid:null},q.isObject(a.boxplot.median)&&a.boxplot.median.color?{color:a.boxplot.median.color}:{},h?{size:h}:{},{orient:Q,aria:!1}),positionPrefix:"mid_box",extraEncoding:W})));if("min-max"===\nk){var ba;return Object.assign({},e,{transform:(null!==(ba=e.transform)&&void 0!==ba?ba:[]).concat(r),layer:h})}k=\'datum["lower_box_\'+b.field+\'"]\';m=\'datum["upper_box_\'+b.field+\'"]\';Q="("+m+" - "+k+")";k=k+" - "+g+" * "+Q;m=m+" + "+g+" * "+Q;Q=\'datum["\'+b.field+\'"]\';g={joinaggregate:wh(b.field),groupby:y};p={transform:[{filter:"("+k+" <= "+Q+") && ("+Q+" <= "+m+")"},{aggregate:[{op:"min",field:b.field,as:"lower_whisker_"+b.field},{op:"max",field:b.field,as:"upper_whisker_"+b.field},{op:"min",field:"lower_box_"+\nb.field,as:"lower_box_"+b.field},{op:"max",field:"upper_box_"+b.field,as:"upper_box_"+b.field}].concat($jscomp.arrayFromIterable(p)),groupby:y}],layer:E};y=Object.assign({},w);y=(delete y.tooltip,y);w=b.scale;N=b.axis;E=sa(b.title,b.field);N=D(N,["title"]);O={};a=sh(f,"outliers",a.boxplot,{transform:[{filter:"("+Q+" < "+k+") || ("+Q+" > "+m+")"}],mark:"point",encoding:Object.assign({},(O[d]=Object.assign({},{field:b.field,type:b.type},void 0!==E?{title:E}:{},void 0!==w?{scale:w}:{},ha(N)?{}:{axis:N}),\nO),y,n?{color:n}:{},v?{tooltip:v}:{})})[0];f=[].concat($jscomp.arrayFromIterable(t),$jscomp.arrayFromIterable(l),[g]);a?a={transform:f,layer:[a,p]}:(a=p,a.transform.unshift.apply(a.transform,$jscomp.arrayFromIterable(f)));return Object.assign({},e,{layer:[a,{transform:r,layer:h}]})}function wh(b){return[{op:"q1",field:b,as:"lower_box_"+b},{op:"q3",field:b,as:"upper_box_"+b}]}function xh(b,e){var a=e.config;b=Object.assign({},b,{encoding:Fd(b.encoding,a)});var c=yh(b,"errorbar",a);b=c.transform;var d=\nc.continuousAxisChannelDef,f=c.continuousAxis,g=c.encodingWithoutContinuousAxis,h=c.ticksOrient,k=c.markDef;e=c.outerSpec;c=c.tooltipEncoding;delete g.size;a=bd(k,f,d,g,a.errorbar);d=k.thickness;k=k.size;h=Object.assign({},{type:"tick",orient:h,aria:!1},void 0!==d?{thickness:d}:{},void 0!==k?{size:k}:{});h=[].concat($jscomp.arrayFromIterable(a({partName:"ticks",mark:h,positionPrefix:"lower",extraEncoding:c})),$jscomp.arrayFromIterable(a({partName:"ticks",mark:h,positionPrefix:"upper",extraEncoding:c})),\n$jscomp.arrayFromIterable(a({partName:"rule",mark:Object.assign({},{type:"rule",ariaRoleDescription:"errorbar"},void 0!==d?{size:d}:{}),positionPrefix:"lower",endPositionPrefix:"upper",extraEncoding:c})));return Object.assign({},e,{transform:b},1<h.length?{layer:h}:Object.assign({},h[0]))}function Fk(b,e){var a=b.encoding;if(!(!X(a.x)&&!X(a.y)||X(a.x2)||X(a.y2)||X(a.xError)||X(a.xError2)||X(a.yError)||X(a.yError2)))return{orient:uh(b,e),inputType:"raw"};var c=X(a.x2)||X(a.y2),d=X(a.xError)||X(a.xError2)||\nX(a.yError)||X(a.yError2);b=a.x;var f=a.y;if(c){if(d)throw Error(e+" cannot be both type aggregated-upper-lower and aggregated-error");c=a.x2;a=a.y2;if(X(c)&&X(a))throw Error(e+" cannot have both x2 and y2");if(X(c)){if(Ab(b))return{orient:"horizontal",inputType:"aggregated-upper-lower"};throw Error("Both x and x2 have to be quantitative in "+e);}if(X(a)){if(Ab(f))return{orient:"vertical",inputType:"aggregated-upper-lower"};throw Error("Both y and y2 have to be quantitative in "+e);}}else{c=a.xError;\nd=a.yError;var g=a.yError2;if(X(a.xError2)&&!X(c))throw Error(e+" cannot have xError2 without xError");if(X(g)&&!X(d))throw Error(e+" cannot have yError2 without yError");if(X(c)&&X(d))throw Error(e+" cannot have both xError and yError with both are quantiative");if(X(c)){if(Ab(b))return{orient:"horizontal",inputType:"aggregated-error"};throw Error("All x, xError, and xError2 (if exist) have to be quantitative");}if(X(d)){if(Ab(f))return{orient:"vertical",inputType:"aggregated-error"};throw Error("All y, yError, and yError2 (if exist) have to be quantitative");\n}}throw Error("No ranged axis");}function yh(b,e,a){var c,d=Object.assign({},b),f=b.mark,g=b.encoding,h=b.params;d=(delete d.mark,delete d.encoding,delete d.params,delete d.projection,d);f=yb(f)?f:{type:f};h&&H(Ig(e));var k=Fk(b,e);h=k.orient;k=k.inputType;var l=th(b,h,e);b=l.continuousAxisChannelDef;var m=l.continuousAxisChannelDef2,n=l.continuousAxisChannelDefError,p=l.continuousAxisChannelDefError2;l=l.continuousAxis;var r=[];var v=[];var t=b.field,y=!1;if("raw"===k){var w=f.center?f.center:f.extent?\n"iqr"===f.extent?"median":"mean":a.errorbar.center;m=f.extent?f.extent:"mean"===w?"stderr":"iqr";"median"===w!==("iqr"===m)&&H(w+" is not usually used with "+m+" for "+e+".");"stderr"===m||"stdev"===m?(r=[{op:m,field:t,as:"extent_"+t},{op:w,field:t,as:"center_"+t}],v=[{calculate:\'datum["center_\'+t+\'"] + datum["extent_\'+t+\'"]\',as:"upper_"+t},{calculate:\'datum["center_\'+t+\'"] - datum["extent_\'+t+\'"]\',as:"lower_"+t}],w=[{fieldPrefix:"center_",titlePrefix:yc(w)},{fieldPrefix:"upper_",titlePrefix:yc(w)+\n" + "+m},{fieldPrefix:"lower_",titlePrefix:yc(w)+" - "+m}],y=!0):("ci"===m?(w="mean",e="ci0",m="ci1"):(w="median",e="q1",m="q3"),r=[{op:e,field:t,as:"lower_"+t},{op:m,field:t,as:"upper_"+t},{op:w,field:t,as:"center_"+t}],w=[{fieldPrefix:"upper_",titlePrefix:Fc({field:t,aggregate:m,type:"quantitative"},a,{allowDisabling:!1})},{fieldPrefix:"lower_",titlePrefix:Fc({field:t,aggregate:e,type:"quantitative"},a,{allowDisabling:!1})},{fieldPrefix:"center_",titlePrefix:Fc({field:t,aggregate:w,type:"quantitative"},\na,{allowDisabling:!1})}])}else{if(f.center||f.extent){e=f.center;var E=f.extent;H((E?"extent ":"")+(E&&e?"and ":"")+(e?"center ":"")+(E&&e?"are ":"is ")+"not needed when data are aggregated.")}"aggregated-upper-lower"===k?(w=[],v=[{calculate:\'datum["\'+m.field+\'"]\',as:"upper_"+t},{calculate:\'datum["\'+t+\'"]\',as:"lower_"+t}]):"aggregated-error"===k&&(w=[{fieldPrefix:"",titlePrefix:t}],v=[{calculate:\'datum["\'+t+\'"] + datum["\'+n.field+\'"]\',as:"upper_"+t}],p?v.push({calculate:\'datum["\'+t+\'"] + datum["\'+\np.field+\'"]\',as:"lower_"+t}):v.push({calculate:\'datum["\'+t+\'"] - datum["\'+n.field+\'"]\',as:"lower_"+t}));e=$jscomp.makeIterator(v);for(t=e.next();!t.done;t=e.next())t=t.value,w.push({fieldPrefix:t.as.substring(0,6),titlePrefix:nc(nc(t.calculate,\'datum["\',""),\'"]\',"")})}g=Object.assign({},g);e="x"===l?"x2":"y2";t="x"===l?"xError":"yError";m="x"===l?"xError2":"yError2";g=(delete g[l],delete g[e],delete g[t],delete g[m],g);m=qh(g,a);a=m.bins;g=m.timeUnits;t=m.groupby;e=m.encoding;r=[].concat($jscomp.arrayFromIterable(m.aggregate),\n$jscomp.arrayFromIterable(r));k="raw"!==k?[]:t;w=Xe(w,b,e,y);return{transform:[].concat($jscomp.arrayFromIterable(null!==(c=d.transform)&&void 0!==c?c:[]),$jscomp.arrayFromIterable(a),$jscomp.arrayFromIterable(g),$jscomp.arrayFromIterable(0===r.length?[]:[{aggregate:r,groupby:k}]),$jscomp.arrayFromIterable(v)),groupby:k,continuousAxisChannelDef:b,continuousAxis:l,encodingWithoutContinuousAxis:e,ticksOrient:"vertical"===h?"horizontal":"vertical",markDef:f,outerSpec:d,tooltipEncoding:w}}function zh(b,\ne){var a=e.config;b=Object.assign({},b,{encoding:Fd(b.encoding,a)});var c=yh(b,"errorband",a);e=c.transform;var d=c.outerSpec,f=c.tooltipEncoding,g=c.markDef;a=bd(g,c.continuousAxis,c.continuousAxisChannelDef,c.encodingWithoutContinuousAxis,a.errorband);b=void 0!==b.encoding.x&&void 0!==b.encoding.y;c={type:b?"area":"rect"};var h={type:b?"line":"rule"},k=Object.assign({},g.interpolate?{interpolate:g.interpolate}:{},g.tension&&g.interpolate?{tension:g.tension}:{});b?(c=Object.assign({},c,k,{ariaRoleDescription:"errorband"}),\nh=Object.assign({},h,k,{aria:!1})):g.interpolate?H(Pg("interpolate")):g.tension&&H(Pg("tension"));return Object.assign({},d,{transform:e,layer:[].concat($jscomp.arrayFromIterable(a({partName:"band",mark:c,positionPrefix:"lower",endPositionPrefix:"upper",extraEncoding:f})),$jscomp.arrayFromIterable(a({partName:"borders",mark:h,positionPrefix:"lower",extraEncoding:f})),$jscomp.arrayFromIterable(a({partName:"borders",mark:h,positionPrefix:"upper",extraEncoding:f})))})}function Ye(b,e,a){e=new cd(b,e);\nAh[b]={normalizer:e,parts:a}}function Ze(b){return!!b&&("legend"===b||!!b.legend)}function $e(b){return Ze(b)&&q.isObject(b)}function Bh(b){var e=[];b=$jscomp.makeIterator(b||[]);for(var a=b.next();!a.done;a=b.next())if(a=a.value,!a.select){var c=a,d=Object.assign({},c);a=c.expr;c=c.bind;d=(delete d.expr,delete d.bind,d);c&&a?(a=Object.assign({},d,{bind:c,init:a}),e.push(a)):(a=Object.assign({},d,a?{update:a}:{},c?{bind:c}:{}),e.push(a))}return e}function Ch(b,e){for(var a={},c=$jscomp.makeIterator(Gk),\nd=c.next();!d.done;d=c.next())d=d.value,b&&void 0!==b[d]&&(a[d]=Za(b[d]));e&&(a.params=b.params);return a}function Cb(b){return q.isObject(b)&&void 0!==b.step}function Dh(b){return b.view||b.width||b.height}function Hk(b,e,a){var c={};a=a[e];e=a.spacing;a=a.columns;void 0!==e&&(c.spacing=e);void 0!==a&&("facet"in b&&!Zc(b.facet)||"concat"in b)&&(c.columns=a);"vconcat"in b&&(c.columns=1);a=$jscomp.makeIterator(Ik);for(var d=a.next();!d.done;d=a.next())if(d=d.value,void 0!==b[d])if("spacing"===d){var f,\ng,h=b[d];c[d]=q.isNumber(h)?h:{row:null!==(f=h.row)&&void 0!==f?f:e,column:null!==(g=h.column)&&void 0!==g?g:e}}else c[d]=b[d];return c}function af(b,e){var a;return null!==(a=b[e])&&void 0!==a?a:b["width"===e?"continuousWidth":"continuousHeight"]}function Hd(b,e){b=dd(b,e);return Cb(b)?b.step:20}function dd(b,e){var a;e=null!==(a=b[e])&&void 0!==a?a:b["width"===e?"discreteWidth":"discreteHeight"];return sa(e,{step:b.step})}function Eh(b){var e=G(b||{}),a={};e=$jscomp.makeIterator(e);for(var c=e.next();!c.done;c=\ne.next()){c=c.value;var d=b[c];a[c]=ad(d)?ug(d):Za(d)}return a}function Fh(b){b=void 0===b?{}:b;var e=Object.assign({},b),a=b.color,c=b.font;b=b.fontSize;e=(delete e.color,delete e.font,delete e.fontSize,e);var d=q.mergeConfig;c=c?{text:{font:c},style:{"guide-label":{font:c},"guide-title":{font:c},"group-title":{font:c},"group-subtitle":{font:c}}}:{};a?(a=void 0===a?{}:a,a={signals:[{name:"color",value:q.isObject(a)?Object.assign({},Gh,a):Gh}],mark:{color:{signal:"color.blue"}},rule:{color:{signal:"color.gray0"}},\ntext:{color:{signal:"color.gray0"}},style:{"guide-label":{fill:{signal:"color.gray0"}},"guide-title":{fill:{signal:"color.gray0"}},"group-title":{fill:{signal:"color.gray0"}},"group-subtitle":{fill:{signal:"color.gray0"}},cell:{stroke:{signal:"color.gray8"}}},axis:{domainColor:{signal:"color.gray13"},gridColor:{signal:"color.gray8"},tickColor:{signal:"color.gray13"}},range:{category:[{signal:"color.blue"},{signal:"color.orange"},{signal:"color.red"},{signal:"color.teal"},{signal:"color.green"},{signal:"color.yellow"},\n{signal:"color.purple"},{signal:"color.pink"},{signal:"color.brown"},{signal:"color.grey8"}]}}):a={};b=d.call(q,{},Jk,c,a,b?{signals:[{name:"fontSize",value:q.isObject(b)?Object.assign({},Hh,b):Hh}],text:{fontSize:{signal:"fontSize.text"}},style:{"guide-label":{fontSize:{signal:"fontSize.guideLabel"}},"guide-title":{fontSize:{signal:"fontSize.guideTitle"}},"group-title":{fontSize:{signal:"fontSize.groupTitle"}},"group-subtitle":{fontSize:{signal:"fontSize.groupSubtitle"}}}}:{},e||{});a=D(b,Kk);e=\n$jscomp.makeIterator(["background","lineBreak","padding"]);for(d=e.next();!d.done;d=e.next())d=d.value,b[d]&&(a[d]=Za(b[d]));e=$jscomp.makeIterator(Ih);for(d=e.next();!d.done;d=e.next())d=d.value,b[d]&&(a[d]=Va(b[d]));e=$jscomp.makeIterator(Jh);for(d=e.next();!d.done;d=e.next())d=d.value,b[d]&&(a[d]=Eh(b[d]));e=$jscomp.makeIterator(Kh);for(d=e.next();!d.done;d=e.next())d=d.value,b[d]&&(a[d]=Va(b[d]));b.legend&&(a.legend=Va(b.legend));b.scale&&(a.scale=Va(b.scale));if(b.style){e=b.style;c=G(e);d={};\nc=$jscomp.makeIterator(c);for(var f=c.next();!f.done;f=c.next())f=f.value,d[f]=Eh(e[f]);a.style=d}b.title&&(a.title=Va(b.title));b.view&&(a.view=Va(b.view));return a}function Lk(b){b=Y(b);for(var e=$jscomp.makeIterator(Mk),a=e.next();!a.done;a=e.next())delete b[a.value];if(b.axis)for(var c in b.axis)ad(b.axis[c])&&delete b.axis[c];if(b.legend)for(e=$jscomp.makeIterator(Nk),a=e.next();!a.done;a=e.next())delete b.legend[a.value];if(b.mark){e=$jscomp.makeIterator(Lh);for(a=e.next();!a.done;a=e.next())delete b.mark[a.value];\nb.mark.tooltip&&q.isObject(b.mark.tooltip)&&delete b.mark.tooltip}b.params&&(b.signals=(b.signals||[]).concat(Bh(b.params)),delete b.params);e=$jscomp.makeIterator(Ok);for(c=e.next();!c.done;c=e.next()){c=c.value;var d=$jscomp.makeIterator(Lh);for(a=d.next();!a.done;a=d.next())delete b[c][a.value];if(a=Pk[c])for(d=$jscomp.makeIterator(a),a=d.next();!a.done;a=d.next())delete b[c][a.value];d=a=void 0;var f=b,g=void 0,h=f[c];"view"===c&&(g="cell");h=Object.assign({},h,f.style[null!==(d=g)&&void 0!==\nd?d:c]);ha(h)||(f.style[null!==(a=g)&&void 0!==a?a:c]=h);delete f[c]}e=$jscomp.makeIterator(G(Ah));for(c=e.next();!c.done;c=e.next())delete b[c.value];e=b;d=tg(e.title);c=d.titleMarkConfig;a=d.subtitleMarkConfig;d=d.subtitle;ha(c)||(e.style["group-title"]=Object.assign({},e.style["group-title"],c));ha(a)||(e.style["group-subtitle"]=Object.assign({},e.style["group-subtitle"],a));ha(d)?delete e.title:e.title=d;for(var k in b)q.isObject(b[k])&&ha(b[k])&&delete b[k];return ha(b)?void 0:b}function Mh(b,\ne){var a="x"===e?"y":"radius",c=b[e];b=b[a];if(K(c)&&K(b))if("quantitative"===fc(c)&&"quantitative"===fc(b)){if(c.stack)return e;if(b.stack)return a;var d=K(c)&&!!c.aggregate,f=K(b)&&!!b.aggregate;if(d!==f)return d?e:a;var g,h;c=null===(g=c.scale)||void 0===g?void 0:g.type;b=null===(h=b.scale)||void 0===h?void 0:h.type;if(c&&"linear"!==c)return a;if(b&&"linear"!==b)return e}else{if("quantitative"===fc(c))return e;if("quantitative"===fc(b))return a}else{if("quantitative"===fc(c))return e;if("quantitative"===\nfc(b))return a}}function Qk(b){switch(b){case "x":return"y";case "y":return"x";case "theta":return"radius";case "radius":return"theta"}}function Nh(b,e,a){a=void 0===a?{}:a;var c,d;b=yb(b)?b.type:b;if(!Rk.has(b))return null;var f=Mh(e,"x")||Mh(e,"theta");if(!f)return null;var g=e[f],h=K(g)?J(g,{}):void 0,k=Qk(f),l=e[k],m=K(l)?J(l,{}):void 0;m===h&&(k=l=m=void 0);h=Sk.reduce(function(p,r){if("tooltip"!==r&&tc(e,r))for(var v=$jscomp.makeIterator(q.array(e[r])),t=v.next();!t.done;t=v.next())if(t=Bb(t.value),\n!t.aggregate){var y=J(t,{});y&&y===m||p.push({channel:r,fieldDef:t})}return p},[]);var n;void 0!==g.stack?n=q.isBoolean(g.stack)?g.stack?"zero":null:g.stack:Tk.has(b)&&(n="zero");if(!(n&&n in Uk)||Ue(e)&&0===h.length)return null;if(null!==g&&void 0!==g&&null!==(c=g.scale)&&void 0!==c&&c.type&&(null===g||void 0===g?void 0:null===(d=g.scale)||void 0===d?void 0:d.type)!==ya.LINEAR){if(a.disallowNonLinearStack)return null;H("Cannot stack non-linear scale ("+g.scale.type+").")}if(X(e[Ib(f)]))return void 0!==\ng.stack&&H(\'Cannot stack "\'+f+\'" if there is already "\'+f+\'2".\'),null;K(g)&&g.aggregate&&!Vk.includes(g.aggregate)&&H(\'Stacking is applied even though the aggregate function is non-summative ("\'+g.aggregate+\'").\');return{groupbyChannel:l?k:void 0,groupbyField:m,fieldChannel:f,impute:null===g.impute?!1:dc(b),stackBy:h,offset:n}}function bf(b,e,a){e=void 0===e?{}:e;if("transparent"===b.point)return{opacity:0};if(b.point)return q.isObject(b.point)?b.point:{};if(void 0!==b.point)return null;if(e.point||\na.shape)return q.isObject(e.point)?e.point:{}}function Oh(b,e){e=void 0===e?{}:e;if(b.line)return!0===b.line?{}:b.line;if(void 0!==b.line)return null;if(e.line)return!0===e.line?{}:e.line}function cf(b,e){return e?Ph(b,e):b}function df(b,e,a){var c=e[b];if(c&&!q.isString(c)&&"repeat"in c){if(c.repeat in a){var d={};return Object.assign({},e,(d[b]=a[c.repeat],d))}H(\'Unknown repeated value "\'+c.repeat+\'".\')}else return e}function Qh(b,e){b=df("field",b,e);if(void 0!==b){if(null===b)return null;"sort"in\nb&&zb(b.sort)&&(e=df("field",b.sort,e),b=Object.assign({},b,e?{sort:e}:{}));return b}}function Rh(b,e){if(K(b))return Qh(b,e);e=df("datum",b,e);e===b||e.type||(e.type="nominal");return e}function Sh(b,e){if(X(b)){if(e=Rh(b,e))return e;if(yd(b))return{condition:b.condition}}else{if(Ad(b)){if(e=Rh(b.condition,e))return Object.assign({},b,{condition:e});b=Object.assign({},b);return delete b.condition,b}return b}}function Ph(b,e){var a={},c;for(c in b)if(q.hasOwnProperty(b,c)){var d=b[c];q.isArray(d)?\na[c]=d.map(function(f){return Sh(f,e)}).filter(function(f){return f}):(d=Sh(d,e),void 0!==d&&(a[c]=d))}return a}function Th(b){var e=b.parentEncoding,a=void 0===b.encoding?{}:b.encoding;b=b.layer;var c={};if(e){var d=new Set([].concat($jscomp.arrayFromIterable(G(e)),$jscomp.arrayFromIterable(G(a))));d=$jscomp.makeIterator(d);for(var f=d.next();!f.done;f=d.next()){f=f.value;var g=a[f],h=e[f];if(X(g))g=Object.assign({},h,g),c[f]=g;else if(Ad(g))c[f]=Object.assign({},g,{condition:Object.assign({},h,\ng.condition)});else if(g||null===g)c[f]=g;else if(b||nb(h)||T(h)||X(h)||q.isArray(h))c[f]=h}}else c=a;return!c||ha(c)?void 0:c}function Uh(b){var e=b.parentProjection;b=b.projection;if(e&&b){var a="Layer\'s shared projection "+ia(e)+" is overridden by a child projection "+ia(b)+".";H(a)}return null!==b&&void 0!==b?b:e}function Wk(b){return b.map(function(e){return"filter"in e?{filter:C(e.filter,tk)}:e})}function Vh(b,e){var a=Object.assign({},b),c=b.transform;a=(delete a.transform,a);return c?(b=c.map(function(d){if("filter"in\nd)return{filter:ef(d,e)};if("bin"in d&&q.isObject(d.bin))return Object.assign({},d,{bin:Wh(d.bin)});if("lookup"in d){var f=d.from,g=Object.assign({},f);f=f.selection;g=(delete g.selection,g);return f?Object.assign({},d,{from:Object.assign({},{param:f},g)}):d}return d}),Object.assign({},a,{transform:b})):b}function Xh(b,e){var a,c;b=Y(b);K(b)&&q.isObject(b.bin)&&(b.bin=Wh(b.bin));if(Ec(b)&&null!==(a=b.scale)&&void 0!==a&&null!==(c=a.domain)&&void 0!==c&&c.selection){var d=b.scale.domain,f=Object.assign({},\nd);d=d.selection;f=(delete f.selection,f);b.scale.domain=Object.assign({},f,d?{param:d}:{})}yd(b)&&(x.isArray(b.condition)?b.condition=b.condition.map(function(g){var h=Object.assign({},g),k=g.param;h=(delete h.selection,delete h.param,delete h.test,h);return k?g:Object.assign({},h,{test:ef(g,e)})}):(d=Xh(b.condition,e),f=Object.assign({},d),d=d.param,f=(delete f.selection,delete f.param,delete f.test,f),b.condition=d?b.condition:Object.assign({},f,{test:ef(b.condition,e)})));return b}function Wh(b){var e=\nb.extent;if(null!==e&&void 0!==e&&e.selection){var a=Object.assign({},e);e=e.selection;a=(delete a.selection,a);return Object.assign({},b,{extent:Object.assign({},a,{param:e})})}return b}function ef(b,e){var a=function(c){return C(c,function(d){var f,g,h,k=null!==(f=e.emptySelections[d])&&void 0!==f?f:!0;k={param:d,empty:k};null!==(h=(g=e.selectionPredicates)[d])&&void 0!==h?h:g[d]=[];e.selectionPredicates[d].push(k);return k})};return b.selection?a(b.selection):C(b.test||b.filter,function(c){return c.selection?\na(c.selection):c})}function Yh(b,e){var a;return b.name?Object.assign({},e,{path:(null!==(a=e.path)&&void 0!==a?a:[]).concat(b.name)}):e}function Zh(b,e){void 0===e&&(e=Fh(b.config));var a=e;a=void 0===a?{}:a;a={config:a};a=Xk.map(Yk.map(Zk.map(b,a),a),a);var c=e;e=b.width;b=b.height;var d=Nb(a)||"layer"in a,f={};d?"container"==e&&"container"==b?(f.type="fit",f.contains="padding"):"container"==e?(f.type="fit-x",f.contains="padding"):"container"==b&&(f.type="fit-y",f.contains="padding"):("container"==\ne&&(H(Eg("width")),e=void 0),"container"==b&&(H(Eg("height")),b=void 0));c=Object.assign({},{type:"pad"},f,c?$h(c.autosize):{},$h(a.autosize));"fit"!==c.type||d||(H(\'Autosize "fit" only works for single views and layered views.\'),c.type="pad");"container"==e&&"fit"!=c.type&&"fit-x"!=c.type&&H(Fg("width"));"container"==b&&"fit"!=c.type&&"fit-y"!=c.type&&H(Fg("height"));e=wb(c,{type:"pad"})?void 0:c;return Object.assign({},a,e?{autosize:e}:{})}function $h(b){return q.isString(b)?{type:b}:null!==b&&\nvoid 0!==b?b:{}}function Ob(b){return{explicit:!0,value:b}}function ab(b){return{explicit:!1,value:b}}function ai(b){return function(e,a,c,d){var f=b(e.value,a.value);return 0<f?e:0>f?a:Id(e,a,c,d)}}function Id(b,e,a,c){if(b.explicit&&e.explicit){var d=b.value;e=e.value;a="Conflicting "+c.toString()+\' property "\'+a.toString()+\'" (\'+ia(d)+" and "+ia(e)+"). Using "+ia(d)+".";H(a)}return b}function gc(b,e,a,c,d){d=void 0===d?Id:d;return void 0===b||void 0===b.value?e:b.explicit&&!e.explicit?b:e.explicit&&\n!b.explicit?e:wb(b.value,e.value)?b:d(b,e,a,c)}function bi(b){return"name"in b&&!("url"in b)&&!("values"in b)&&!uc(b)}function uc(b){return b&&("sequence"in b||"sphere"in b||"graticule"in b)}function Hc(b,e,a){ci=e||"view";di=a||$k;return ei(b.trim()).map(ff)}function ed(b,e,a,c,d){for(var f=b.length,g=0,h;e<f;++e)if(h=b[e],g||h!==a)d&&0<=d.indexOf(h)?--g:c&&0<=c.indexOf(h)&&++g;else break;return e}function ei(b){for(var e=[],a=b.length,c=0,d=0;d<a;)d=ed(b,d,",","[{","]}"),e.push(b.substring(c,d).trim()),\nc=++d;if(0===e.length)throw"Empty event selector: "+b;return e}function ff(b){if("["===b[0]){var e=b;var a=e.length;b=ed(e,1,"]","[","]");if(b===a)throw"Empty between selector: "+e;a=ei(e.substring(1,b));if(2!==a.length)throw"Between selector must have two elements: "+e;e=e.slice(b+1).trim();if(">"!==e[0])throw"Expected \'>\' after between selector: "+e;a=a.map(ff);e=ff(e.slice(1).trim());e.between?e={between:a,stream:e}:e.between=a}else{a={source:ci};var c=[],d=[0,0],f=0,g=0,h=b.length,k=0;if("}"===\nb[h-1]){k=b.lastIndexOf("{");if(0<=k){try{d=al(b.substring(k+1,h-1))}catch(m){throw"Invalid throttle specification: "+b;}b=b.slice(0,k).trim();h=b.length}else throw"Unmatched right brace: "+b;k=0}if(!h)throw b;"@"===b[0]&&(f=++k);var l=ed(b,k,":");l<h&&(c.push(b.substring(g,l).trim()),g=k=++l);k=ed(b,k,"[");if(k===h)c.push(b.substring(g,h).trim());else if(c.push(b.substring(g,k).trim()),e=[],g=++k,g===h)throw"Unmatched left bracket: "+b;for(;k<h;){k=ed(b,k,"]");if(k===h)throw"Unmatched left bracket: "+\nb;e.push(b.substring(g,k).trim());if(k<h-1&&"["!==b[++k])throw"Expected left bracket: "+b;g=++k}if(!(h=c.length)||bl.test(c[h-1]))throw"Invalid event selector: "+b;1<h?(a.type=c[1],f?a.markname=c[0].slice(1):di[c[0]]?a.marktype=c[0]:a.source=c[0]):a.type=c[0];"!"===a.type.slice(-1)&&(a.consume=!0,a.type=a.type.slice(0,-1));null!=e&&(a.filter=e);d[0]&&(a.throttle=d[0]);d[1]&&(a.debounce=d[1]);e=a}return e}function al(b){var e=b.split(",");if(!b.length||2<e.length)throw b;return e.map(function(a){var c=\n+a;if(c!==c)throw b;return c})}function Ic(b,e,a){e=void 0===e?!0:e;a=void 0===a?q.identity:a;return q.isArray(b)?(b=b.map(function(c){return Ic(c,e,a)}),e?"["+b.join(", ")+"]":b):qc(b)?e?a(Vc(b)):a(pk(b)):e?a(ia(b)):b}function cl(b,e){b.component.selection&&G(b.component.selection).length&&(b=q.stringValue(b.getName("cell")),e.unshift({name:"facet",value:{},on:[{events:Hc("mousemove","scope"),update:"isTuple(facet) ? facet : group("+b+").datum"}]}));return gf(e)}function dl(b,e){for(var a=!1,c={},\nd=$jscomp.makeIterator(Pa(null!==(g=b.component.selection)&&void 0!==g?g:{})),f=d.next();!f.done;c={$jscomp$loop$prop$name$331$442:c.$jscomp$loop$prop$name$331$442},f=d.next()){f=f.value;var g;c.$jscomp$loop$prop$name$331$442=f.name;a=q.stringValue(c.$jscomp$loop$prop$name$331$442+"_store");if(0===e.filter(function(l){return function(m){return m.name===l.$jscomp$loop$prop$name$331$442}}(c)).length){var h="point"===f.type?", true, true)":")";e.push({name:f.name,update:"vlSelectionResolve("+a+", "+\nq.stringValue("global"===f.resolve?"union":f.resolve)+h})}a=!0;h=$jscomp.makeIterator(Jd);for(var k=h.next();!k.done;k=h.next())k=k.value,k.defined(f)&&k.topLevelSignals&&(e=k.topLevelSignals(b,f,e))}a&&0===e.filter(function(l){return"unit"===l.name}).length&&e.unshift({name:"unit",value:{},on:[{events:"mousemove",update:"isTuple(group()) ? group() : unit"}]});return gf(e)}function el(b,e){e=[].concat($jscomp.arrayFromIterable(e));for(var a={},c=$jscomp.makeIterator(Pa(null!==(f=b.component.selection)&&\nvoid 0!==f?f:{})),d=c.next();!d.done;a={$jscomp$loop$prop$fields$444:a.$jscomp$loop$prop$fields$444,$jscomp$loop$prop$selCmpt$445:a.$jscomp$loop$prop$selCmpt$445},d=c.next()){a.$jscomp$loop$prop$selCmpt$445=d.value;var f;d={name:a.$jscomp$loop$prop$selCmpt$445.name+"_store"};a.$jscomp$loop$prop$selCmpt$445.init&&(a.$jscomp$loop$prop$fields$444=a.$jscomp$loop$prop$selCmpt$445.project.items.map(function(g){g=Object.assign({},g);return delete g.signals,g}),d.values=a.$jscomp$loop$prop$selCmpt$445.init.map(function(g){return function(h){return{unit:Jc(b,\n{escape:!1}),fields:g.$jscomp$loop$prop$fields$444,values:Ic(h,!1)}}}(a)));e.filter(function(g){return function(h){return h.name===g.$jscomp$loop$prop$selCmpt$445.name+"_store"}}(a)).length||e.push(d)}return e}function fi(b,e){for(var a=$jscomp.makeIterator(Pa(null!==(d=b.component.selection)&&void 0!==d?d:{})),c=a.next();!c.done;c=a.next()){c=c.value;for(var d,f=$jscomp.makeIterator(Jd),g=f.next();!g.done;g=f.next())g=g.value,g.defined(c)&&g.marks&&(e=g.marks(b,c,e))}return e}function fl(b,e){b=\n$jscomp.makeIterator(b.children);for(var a=b.next();!a.done;a=b.next())a=a.value,ta(a)&&(e=fi(a,e));return e}function gf(b){return b.map(function(e){e.on&&!e.on.length&&delete e.on;return e})}function hf(b,e){return"domain("+q.stringValue(b.scaleName(e))+")"}function jf(b){var e;return b.parent&&Kc(b.parent)&&(null!==(e=!b.parent.parent)&&void 0!==e?e:jf(b.parent.parent))}function gl(b,e,a,c){var d=a.channel,f=a.signals.visual;a=a.signals.data;var g=hc.defined(e),h=q.stringValue(b.scaleName(d)),k=\nb.getScaleComponent(d);k=k?k.get("type"):void 0;var l=function(p){return"scale("+h+", "+p+")"},m=b.getSizeSignalRef("x"===d?"width":"height").signal,n=d+"(unit)";b=gi(e,function(p,r){return[].concat($jscomp.arrayFromIterable(p),[{events:r.between[0],update:"["+n+", "+n+"]"},{events:r,update:"["+f+"[0], clamp("+n+", 0, "+m+")]"}])});b.push({events:{signal:e.name+"_scale_trigger"},update:k in $a?"["+l(a+"[0]")+", "+l(a+"[1]")+"]":"[0, 0]"});return g?[{name:a,on:[]}]:[Object.assign({},{name:f},c?{init:Ic(c,\n!0,l)}:{value:[]},{on:b}),Object.assign({},{name:a},c?{init:Ic(c)}:{},{on:[{events:{signal:f},update:f+"[0] === "+f+"[1] ? null : invert("+h+", "+f+")"}]})]}function gi(b,e){return b.events.reduce(function(a,c){return c.between?e(a,c):(H(c+" is not an ordered event stream for interval selections."),a)},[])}function Lc(b,e,a,c){var d=yd(e)&&e.condition;e=c(e);if(d){d=q.array(d).map(function(g){var h=c(g);if(g.param)return g=hi(b,{param:g.param,empty:g.empty}),Object.assign({},{test:g},h);g=Kd(b,g.test);\nreturn Object.assign({},{test:g},h)});var f={};return f[a]=[].concat($jscomp.arrayFromIterable(d),$jscomp.arrayFromIterable(void 0!==e?[e]:[])),f}d={};return void 0!==e?(d[a]=e,d):{}}function kf(b,e){e=void 0===e?"text":e;return Lc(b,b.encoding[e],e,function(a){return Ld(a,b.config)})}function Ld(b,e,a){a=void 0===a?"datum":a;if(b){if(nb(b))return pa(b.value);if(X(b)){var c=Cd(b);return Ne({fieldOrDatumDef:b,format:c.format,formatType:c.formatType,expr:a,config:e})}}}function ii(b,e){e=void 0===e?\n{}:e;var a=b.encoding,c=b.markDef,d=b.config,f=b.stack,g=a.tooltip;if(q.isArray(g))return{tooltip:ji({tooltip:g},f,d,e)};var h=e.reactiveGeom?"datum.datum":"datum";return Lc(b,g,"tooltip",function(k){var l=Ld(k,d,h);if(l)return l;if(null!==k){k=ea("tooltip",c,d);!0===k&&(k={content:"encoding"});if(q.isString(k))return{value:k};if(q.isObject(k))return T(k)?k:"encoding"===k.content?ji(a,f,d,e):{signal:h}}})}function ki(b,e,a,c){function d(p,r){var v,t=oc(r);p=gb(p)?p:Object.assign({},p,{type:b[t].type});\nt=p.title||$c(p,a);t=q.array(t).join(", ");if(r in Fa){var y="x"===r?"x2":"y2",w=Bb(b[y]);if(Na(p.bin)&&w){var E=J(p,{expr:g});w=J(w,{expr:g});var Q=Cd(p);E=xd(E,w,Q.format,Q.formatType,a);f[y]=!0}else e&&e.fieldChannel===r&&"normalize"===e.offset&&(E=Cd(p),E=Ne({fieldOrDatumDef:p,format:E.format,formatType:E.formatType,expr:g,config:a,normalizeStack:!0}).signal)}null!==(v=E)&&void 0!==v?v:E=Ld(p,a,g).signal;h.push({channel:r,key:t,value:E})}var f={},g=(void 0===c?{}:c).reactiveGeom?"datum.datum":\n"datum",h=[];Ve(b,function(p,r){K(p)?d(p,r):zd(p)&&d(p.condition,r)});c={};for(var k=$jscomp.makeIterator(h),l=k.next();!l.done;l=k.next()){l=l.value;var m=l.key,n=l.value;f[l.channel]||c[m]||(c[m]=n)}return c}function ji(b,e,a,c){b=ki(b,e,a,{reactiveGeom:(void 0===c?{}:c).reactiveGeom});b=ac(b).map(function(d){var f=$jscomp.makeIterator(d);d=f.next().value;f=f.next().value;return\'"\'+d+\'": \'+f});return 0<b.length?{signal:"{"+b.join(", ")+"}"}:void 0}function hl(b){var e=b.encoding,a=b.markDef,c=b.config,\nd=b.stack,f=e.description;if(f)return Lc(b,f,"description",function(g){return Ld(g,b.config)});a=ea("description",a,c);if(null!=a)return{description:pa(a)};if(!1===c.aria)return{};e=ki(e,d,c);if(!ha(e))return{description:{signal:ac(e).map(function(g,h){var k=$jscomp.makeIterator(g);g=k.next().value;k=k.next().value;return\'"\'+(0<h?"; ":"")+g+\': " + (\'+k+")"}).join(" + ")}}}function Da(b,e,a){a=void 0===a?{}:a;var c=e.markDef,d=e.encoding,f=e.config,g=a.vgChannel,h=a.defaultRef;a=a.defaultValue;if(void 0===\nh){var k;null!==(k=a)&&void 0!==k?k:a=ea(b,c,f,{vgChannel:g,ignoreVgConfig:!0});void 0!==a&&(h=pa(a))}return Lc(e,d[b],null!==g&&void 0!==g?g:b,function(l){return Zg({channel:b,channelDef:l,markDef:c,config:f,scaleName:e.scaleName(b),scale:e.getScaleComponent(b),stack:null,defaultRef:h})})}function li(b,e){e=void 0===e?{filled:void 0}:e;var a,c,d,f,g=b.markDef,h=b.encoding,k=b.config,l=g.type;e=null!==(a=e.filled)&&void 0!==a?a:ea("filled",g,k);l=B(["bar","point","circle","square","geoshape"],l)?\n"transparent":void 0;l=null!==(c=null!==(d=ea(!0===e?"color":void 0,g,k,{vgChannel:"fill"}))&&void 0!==d?d:k.mark[!0===e&&"color"])&&void 0!==c?c:l;k=null!==(f=ea(!1===e?"color":void 0,g,k,{vgChannel:"stroke"}))&&void 0!==f?f:k.mark[!1===e&&"color"];var m=e?"fill":"stroke",n=Object.assign({},l?{fill:pa(l)}:{},k?{stroke:pa(k)}:{});g.color&&(e?g.fill:g.stroke)&&H(Mg("property",{fill:"fill"in g,stroke:"stroke"in g}));return Object.assign({},n,Da("color",b,{vgChannel:m,defaultValue:e?l:k}),Da("fill",\nb,{defaultValue:h.fill?l:void 0}),Da("stroke",b,{defaultValue:h.stroke?k:void 0}))}function il(b){var e=b.encoding.order;return!dc(b.mark)&&nb(e)?Lc(b,e,"zindex",function(a){return pa(a.value)}):{}}function fd(b,e){b=dk(b);if(e=e[b])return e}function Ia(b,e,a){var c=a.defaultPos;a=a.vgChannel;var d=e.encoding,f=e.markDef,g=e.config,h=e.stack,k=d[b],l=d[Ib(b)],m=e.scaleName(b),n=e.getScaleComponent(b),p=fd(b,f);c=lf({model:e,defaultPos:c,channel:b,scaleName:m,scale:n});if(!k&&b in Fa&&(d.latitude||\nd.longitude))e={field:e.getName(b)};else a:if(h={channel:b,channelDef:k,channel2Def:l,markDef:f,config:g,scaleName:m,scale:n,stack:h,offset:p,defaultRef:c},e=h.channel,c=h.channelDef,d=h.scaleName,k=h.stack,f=h.offset,g=h.markDef,X(c)&&k&&e===k.fieldChannel){if(K(c)&&(h=c.bandPosition,void 0!==h||"text"!==g.type||"radius"!==e&&"theta"!==e||(h=.5),void 0!==h)){e=wd({scaleName:d,fieldOrDatumDef:c,startSuffix:"start",bandPosition:h,offset:f});break a}e=rc(c,d,{suffix:"end"},{offset:f})}else e=Le(h);\nc={};return e?(c[a||b]=e,c):void 0}function lf(b){var e=b.model,a=b.defaultPos,c=b.channel,d=b.scaleName,f=b.scale,g=e.markDef,h=e.config;return function(){var k=oc(c),l=Zb(c);l=ea(c,g,h,{vgChannel:l});if(void 0!==l)return Yc(c,l);switch(a){case "zeroOrMin":case "zeroOrMax":if(d&&(l=f.get("type"),!B([ya.LOG,ya.TIME,ya.UTC],l)&&f.domainDefinitelyIncludesZero()))return{scale:d,value:0};if("zeroOrMin"===a)return"y"===k?{field:{group:"height"}}:{value:0};switch(k){case "radius":return{signal:"min("+e.width.signal+\n","+e.height.signal+")/2"};case "theta":return{signal:"2*PI"};case "x":return{field:{group:"width"}};case "y":return{value:0}}break;case "mid":return k=e[fb(c)],Object.assign({},k,{mult:.5})}}}function mi(b,e,a,c){c=void 0===c?"middle":c;if("radius"===b||"theta"===b)return Zb(b);var d="x"===b?"align":"baseline";e=ea(d,e,a);T(e)?(H("The "+d+" for range marks cannot be an expression"),d=void 0):d=e;return"x"===b?jl[d||("top"===c?"left":"center")]:kl[d||c]}function Md(b,e,a){var c=a.defaultPos,d=a.defaultPos2;\nreturn a.range?ni(b,e,{defaultPos:c,defaultPos2:d}):Ia(b,e,{defaultPos:c})}function ni(b,e,a){var c=a.defaultPos,d=a.defaultPos2;a=e.markDef;var f=e.config,g=Ib(b),h=fb(b);var k=e.encoding,l=e.mark,m=e.markDef,n=e.stack,p=e.config,r=oc(g),v=fb(g);var t=Zb(g);var y=k[r],w=e.scaleName(r),E=e.getScaleComponent(r);r=g in k||g in m?fd(g,e.markDef):fd(r,e.markDef);y||"x2"!==g&&"y2"!==g||!k.latitude&&!k.longitude?(k=k[g],n=X(y)&&n&&g.charAt(0)===n.fieldChannel.charAt(0)?rc(y,w,{suffix:"start"},{offset:r}):\nLe({channel:g,channelDef:k,scaleName:w,scale:E,stack:n,markDef:m,config:p,offset:r,defaultRef:void 0}),void 0!==n?(g={},t=(g[t]=n,g)):(n={},y={},t=Nd(g,m)||Nd(g,(n[g]=sd(g,m,p.style),n[v]=sd(v,m,p.style),n))||Nd(g,p[l])||Nd(g,p.mark)||(y[t]=lf({model:e,defaultPos:d,channel:g,scaleName:w,scale:E})(),y))):(d=fb(g),l=e.markDef[d],null!=l?(t={},t=(t[d]={value:l},t)):(d={},t=(d[t]={field:e.getName(g)},d)));a=t[h]?mi(b,a,f):Zb(b);return Object.assign({},Ia(b,e,{defaultPos:c,vgChannel:a}),t)}function Nd(b,\ne){var a=fb(b),c=Zb(b);if(void 0!==e[c])return a={},a[c]=Yc(b,e[c]),a;if(void 0!==e[b])return a={},a[c]=Yc(b,e[b]),a;if(e[a])if(e=e[a],Cc(e))H("Position range does not support relative band size for "+a+".");else return c={},c[a]=Yc(b,e),c}function ic(b,e,a){var c,d,f=b.config,g=b.encoding,h=b.markDef,k=Ib(e),l=fb(e),m=g[e],n=g[k],p=b.getScaleComponent(e),r=p?p.get("type"):void 0;k=b.scaleName(e);var v=h.orient;g=null!==(c=null!==(d=g[l])&&void 0!==d?d:g.size)&&void 0!==c?c:ea("size",h,f,{vgChannel:l});\na="bar"===a&&("x"===e?"vertical"===v:"horizontal"===v);if(!K(m)||!(ka(m.bin)||Na(m.bin)||m.timeUnit&&!n)||g&&!Cc(g)||r in Ha){if((X(m)&&r in Ha||a)&&!n){n=b.markDef;h=b.encoding;p=b.config;a=b.stack;l=n.orient;r=b.scaleName(e);g=b.getScaleComponent(e);k=fb(e);f=Ib(e);l="horizontal"===l&&"y"===e||"vertical"===l&&"x"===e;var t;if(h.size||n.size)l?t=Da("size",b,{vgChannel:k,defaultRef:pa(n.size)}):H(\'Cannot apply size to non-oriented mark "\'+n.type+\'".\');v=jh({channel:e,fieldDef:m,markDef:n,config:p,\nscaleType:null===g||void 0===g?void 0:g.get("type"),useVlSizeChannel:l});h={};t=t||(h[k]=ll(k,r,g,p,v),h);h="band"===(null===g||void 0===g?void 0:g.get("type"))&&"band"in t[k]?"top":"middle";h=mi(e,n,p,h);var y="xc"===h||"yc"===h;l=fd(e,n);e=Le({channel:e,channelDef:m,markDef:n,config:p,scaleName:r,scale:g,stack:a,offset:l,defaultRef:lf({model:b,defaultPos:"mid",channel:e,scaleName:r,scale:g}),bandPosition:y?.5:T(v)?{signal:"(1-"+v+")/2"}:Cc(v)?(1-v.band)/2:0});k?(m={},e=Object.assign({},(m[h]=e,\nm),t)):(m=Zb(f),t=t[k],t=l?Object.assign({},t,{offset:l}):t,b={},e=(b[h]=e,b[m]=q.isArray(e)?[e[0],Object.assign({},e[1],{offset:t})]:Object.assign({},e,{offset:t}),b));return e}return ni(e,b,{defaultPos:"zeroOrMax",defaultPos2:"zeroOrMin"})}var w,E;l=jh({channel:e,fieldDef:m,markDef:h,config:f,scaleType:r});t=null===(w=b.component.axes[e])||void 0===w?void 0:w[0];t=null!==(E=null===t||void 0===t?void 0:t.get("translate"))&&void 0!==E?E:.5;a:if(a=e in Fa?ea("binSpacing",h,f):void 0,b=p.get("reverse"),\np=void 0===a?0:a,v=Ib(e),a=Zb(e),r=Zb(v),g=fd(e,h),l=T(l)?{signal:"(1-"+l.signal+")/2"}:Cc(l)?(1-l.band)/2:.5,ka(m.bin)||m.timeUnit)n={},e=(n[r]=oi({channel:e,fieldDef:m,scaleName:k,markDef:h,bandPosition:l,offset:gd(v,p,b,t,g),config:f}),n[a]=oi({channel:e,fieldDef:m,scaleName:k,markDef:h,bandPosition:T(l)?{signal:"1-"+l.signal}:1-l,offset:gd(e,p,b,t,g),config:f}),n);else{if(Na(m.bin)){f=rc(m,k,{},{offset:gd(v,p,b,t,g)});if(K(n)){m={};e=(m[r]=f,m[a]=rc(n,k,{},{offset:gd(e,p,b,t,g)}),m);break a}if(q.isObject(m.bin)&&\nm.bin.step){h={};e=(h[r]=f,h[a]={signal:\'scale("\'+k+\'", \'+J(m,{expr:"datum"})+" + "+m.bin.step+")",offset:gd(e,p,b,t,g)},h);break a}}H(Qg(v));e=void 0}return e}function ll(b,e,a,c,d){if(Cc(d))if(a){var f=a.get("type");if("band"===f)return{scale:e,band:d.band};1!==d.band&&H("Cannot use the relative band size with "+f+" scale.")}else return{mult:d.band,field:{group:b}};else{if(T(d))return d;if(d)return{value:d}}return a&&(e=a.get("range"),cc(e)&&q.isNumber(e.step))?{value:e.step-2}:{value:Hd(c.view,\nb)-2}}function gd(b,e,a,c,d){if(b in re)return 0;b="x"===b||"y2"===b?-e/2:e/2;if(T(a)||T(d)||T(c))return a=Lb(a),d=Lb(d),c=Lb(c),{signal:(c?c+" + ":"")+(a?"("+a+" ? -1 : 1) * ":"")+(d?"("+d+" + "+b+")":b)};d=d||0;return c+(a?-d-b:+d+b)}function oi(b){var e=b.channel,a=b.fieldDef,c=b.markDef,d=b.config;b=wd({scaleName:b.scaleName,fieldOrDatumDef:a,bandPosition:b.bandPosition,offset:b.offset});return ah({fieldDef:a,channel:e,markDef:c,ref:b,config:d})}function hb(b,e){var a="include"===e.color?li(b):\n{},c=void 0===a.fill?void 0:a.fill,d=void 0===a.stroke?void 0:a.stroke;a=Object;var f=a.assign;e=ml(b.markDef,e);c=pi(b,"fill",c);d=pi(b,"stroke",d);var g=Da("opacity",b),h=Da("fillOpacity",b),k=Da("strokeOpacity",b),l=Da("strokeWidth",b),m=Da("strokeDash",b),n=il(b),p=ii(b),r=kf(b,"href");var v=ea("aria",b.markDef,b.config);if(!1===v)b={};else{var t=Object,y=t.assign;var w=b.mark;var E=b.config;!1===E.aria?w={}:(E=ea("ariaRoleDescription",b.markDef,E),w=null!=E?{ariaRoleDescription:{value:E}}:w in\nnl?{}:{ariaRoleDescription:{value:w}});b=y.call(t,{},v?{aria:v}:{},w,hl(b))}return f.call(a,{},e,c,d,g,h,k,l,m,n,p,r,b)}function pi(b,e,a){var c=b.mark;if("hide"===ea("invalid",b.markDef,b.config)&&a&&!dc(c)&&(b=ol(b,{invalid:!0,channels:Od})))return c={},c[e]=[{test:b,value:null}].concat($jscomp.arrayFromIterable(q.array(a))),c;b={};return a?(b[e]=a,b):{}}function ml(b,e){return pl.reduce(function(a,c){ql.has(c)||void 0===b[c]||"ignore"===e[c]||(a[c]=pa(b[c]));return a},{})}function ol(b,e){var a=\nvoid 0===e.invalid?!1:e.invalid;e=e.channels.reduce(function(d,f){var g=b.getScaleComponent(f);g&&(g=g.get("type"),(f=b.vgField(f,{expr:"datum"}))&&g in $a&&(d[f]=!0));return d},{});e=G(e);if(0<e.length){var c=a?"||":"&&";return e.map(function(d){return Me(d,a)}).join(" "+c+" ")}}function mf(b){return ea("invalid",b.markDef,b.config)&&(b=rl(b,{channels:Db}))?{defined:{signal:b}}:{}}function rl(b,e){var a=void 0===e.invalid?!1:e.invalid;e=e.channels.reduce(function(d,f){var g=b.getScaleComponent(f);\ng&&(g=g.get("type"),(f=b.vgField(f,{expr:"datum"}))&&g in $a&&(d[f]=!0));return d},{});e=G(e);if(0<e.length){var c=a?"||":"&&";return e.map(function(d){return Me(d,a)}).join(" "+c+" ")}}function qi(b,e){if(void 0!==e){var a={};return a[b]=pa(e),a}}function ri(b,e,a,c,d){var f,g,h=e.name,k=h+"_translate_anchor";h+="_translate_delta";var l=a.channel,m=hc.defined(e);e=d.filter(function(p){return p.name===a.signals[m?"data":"visual"]})[0];c=b.getSizeSignalRef(c).signal;b=b.getScaleComponent(l);d=b.get("type");\nvar n=b.get("reverse");k=k+".extent_"+l;l=(m?"x"===l?n?"":"-":n?"-":"":"")+h+"."+l+" / "+(m?""+c:"span("+k+")");n=m?"log"===d?"panLog":"symlog"===d?"panSymlog":"pow"===d?"panPow":"panLinear":"panLinear";b=m?"pow"===d?", "+(null!==(f=b.get("exponent"))&&void 0!==f?f:1):"symlog"===d?", "+(null!==(g=b.get("constant"))&&void 0!==g?g:1):"":"";k=n+"("+k+", "+l+b+")";e.on.push({events:{signal:h},update:m?k:"clampRange("+k+", 0, "+c+")"})}function si(b,e,a,c,d){var f,g,h=e.name,k=a.channel,l=hc.defined(e);\ne=d.filter(function(p){return p.name===a.signals[l?"data":"visual"]})[0];c=b.getSizeSignalRef(c).signal;d=b.getScaleComponent(k);var m=d.get("type"),n=l?hf(b,k):e.name;b=h+"_zoom_delta";h=""+h+"_zoom_anchor."+k;k=l?"log"===m?"zoomLog":"symlog"===m?"zoomSymlog":"pow"===m?"zoomPow":"zoomLinear":"zoomLinear";d=l?"pow"===m?", "+(null!==(f=d.get("exponent"))&&void 0!==f?f:1):"symlog"===m?", "+(null!==(g=d.get("constant"))&&void 0!==g?g:1):"":"";h=k+"("+n+", "+h+", "+b+d+")";e.on.push({events:{signal:b},\nupdate:l?h:"clampRange("+h+", 0, "+c+")"})}function Jc(b,e){e=(void 0===e?{escape:!0}:e).escape?q.stringValue(b.name):b.name;for(b=b.parent;b&&!ob(b);)b=b.parent;if(b)for(var a=b.facet,c=$jscomp.makeIterator(ib),d=c.next();!d.done;d=c.next())d=d.value,a[d]&&(e+=" + \'__facet_"+d+"_\' + (facet["+q.stringValue(b.vgField(d))+"])");return e}function nf(b){var e;return Pa(null!==(e=b.component.selection)&&void 0!==e?e:{}).reduce(function(a,c){return a||c.project.items.some(function(d){return"_vgsid_"===\nd.field})},!1)}function ti(b,e){!x.isString(e.select)&&e.select.on||delete b.events;!x.isString(e.select)&&e.select.clear||delete b.clear;!x.isString(e.select)&&e.select.toggle||delete b.toggle}function pb(b){this.type=b}function sl(b){switch(b.type){case "ArrayExpression":return b.elements;case "BinaryExpression":case "LogicalExpression":return[b.left,b.right];case "CallExpression":return[b.callee].concat(b.arguments);case "ConditionalExpression":return[b.test,b.consequent,b.alternate];case "MemberExpression":return[b.object,\nb.property];case "ObjectExpression":return b.properties;case "Property":return[b.key,b.value];case "UnaryExpression":return[b.argument];default:return[]}}function Pd(b,e){if(!b)throw Error("ASSERT: "+e);}function Pb(b){return 48<=b&&57>=b}function of(b){return 0<="0123456789abcdefABCDEF".indexOf(b)}function hd(b){return 0<="01234567".indexOf(b)}function id(b){return 10===b||13===b||8232===b||8233===b}function jd(b){return 36===b||95===b||65<=b&&90>=b||97<=b&&122>=b||92===b||128<=b&&tl.test(String.fromCharCode(b))}\nfunction Qd(b){return 36===b||95===b||65<=b&&90>=b||97<=b&&122>=b||48<=b&&57>=b||92===b||128<=b&&ul.test(String.fromCharCode(b))}function ui(){for(;A<Ja;){var b=R.charCodeAt(A);if(32===b||9===b||11===b||12===b||160===b||5760<=b&&0<=[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(b)||id(b))++A;else break}}function pf(b){var e=0;var a="u"===b?4:2;for(b=0;b<a;++b)if(A<Ja&&of(R[A])){var c=R[A++];e=16*e+"0123456789abcdef".indexOf(c.toLowerCase())}else da({},\n"Unexpected token %0","ILLEGAL");return String.fromCharCode(e)}function vi(){var b=R.charCodeAt(A++);var e=String.fromCharCode(b);92===b&&(117!==R.charCodeAt(A)&&da({},"Unexpected token %0","ILLEGAL"),++A,(b=pf("u"))&&"\\\\"!==b&&jd(b.charCodeAt(0))||da({},"Unexpected token %0","ILLEGAL"),e=b);for(;A<Ja;){b=R.charCodeAt(A);if(!Qd(b))break;++A;e+=String.fromCharCode(b);92===b&&(e=e.substr(0,e.length-1),117!==R.charCodeAt(A)&&da({},"Unexpected token %0","ILLEGAL"),++A,(b=pf("u"))&&"\\\\"!==b&&Qd(b.charCodeAt(0))||\nda({},"Unexpected token %0","ILLEGAL"),e+=b)}return e}function qf(){var b=A,e=R.charCodeAt(A),a=R[A];switch(e){case 46:case 40:case 41:case 59:case 44:case 123:case 125:case 91:case 93:case 58:case 63:case 126:return++A,{type:7,value:String.fromCharCode(e),start:b,end:A};default:var c=R.charCodeAt(A+1);if(61===c)switch(e){case 43:case 45:case 47:case 60:case 62:case 94:case 124:case 37:case 38:case 42:return A+=2,{type:7,value:String.fromCharCode(e)+String.fromCharCode(c),start:b,end:A};case 33:case 61:return A+=\n2,61===R.charCodeAt(A)&&++A,{type:7,value:R.slice(b,A),start:b,end:A}}}e=R.substr(A,4);if(">>>="===e)return A+=4,{type:7,value:e,start:b,end:A};e=e.substr(0,3);if(">>>"===e||"<<="===e||">>="===e)return A+=3,{type:7,value:e,start:b,end:A};e=e.substr(0,2);if(a===e[1]&&0<="+-<>&|".indexOf(a)||"=>"===e)return A+=2,{type:7,value:e,start:b,end:A};"//"===e&&da({},"Unexpected token %0","ILLEGAL");if(0<="<>=!+-*%&|^/".indexOf(a))return++A,{type:7,value:a,start:b,end:A};da({},"Unexpected token %0","ILLEGAL")}\nfunction wi(){var b=R[A];Pd(Pb(b.charCodeAt(0))||"."===b,"Numeric literal must start with a decimal digit or a decimal point");var e=A;var a="";if("."!==b){a=R[A++];b=R[A];if("0"===a){if("x"===b||"X"===b){++A;for(a="";A<Ja&&of(R[A]);)a+=R[A++];0===a.length&&da({},"Unexpected token %0","ILLEGAL");jd(R.charCodeAt(A))&&da({},"Unexpected token %0","ILLEGAL");return{type:6,value:parseInt("0x"+a,16),start:e,end:A}}if(hd(b)){for(a="0"+R[A++];A<Ja&&hd(R[A]);)a+=R[A++];(jd(R.charCodeAt(A))||Pb(R.charCodeAt(A)))&&\nda({},"Unexpected token %0","ILLEGAL");return{type:6,value:parseInt(a,8),octal:!0,start:e,end:A}}b&&Pb(b.charCodeAt(0))&&da({},"Unexpected token %0","ILLEGAL")}for(;Pb(R.charCodeAt(A));)a+=R[A++];b=R[A]}if("."===b){for(a+=R[A++];Pb(R.charCodeAt(A));)a+=R[A++];b=R[A]}if("e"===b||"E"===b){a+=R[A++];b=R[A];if("+"===b||"-"===b)a+=R[A++];if(Pb(R.charCodeAt(A)))for(;Pb(R.charCodeAt(A));)a+=R[A++];else da({},"Unexpected token %0","ILLEGAL")}jd(R.charCodeAt(A))&&da({},"Unexpected token %0","ILLEGAL");return{type:6,\nvalue:parseFloat(a),start:e,end:A}}function vl(b,e){var a=b;0<=e.indexOf("u")&&(a=a.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g,function(c,d){if(1114111>=parseInt(d,16))return"x";da({},"Invalid regular expression")}).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,"x"));try{new RegExp(a)}catch(c){da({},"Invalid regular expression")}try{return new RegExp(b,e)}catch(c){return null}}function rf(){ui();if(A>=Ja)return{type:2,start:A,end:A};var b=R.charCodeAt(A);if(jd(b)){b=A;if(92===R.charCodeAt(A))var e=vi();else a:{for(e=\nA++;A<Ja;){var a=R.charCodeAt(A);if(92===a){A=e;e=vi();break a}if(Qd(a))++A;else break}e=R.slice(e,A)}return{type:1===e.length?3:wl.hasOwnProperty(e)?4:"null"===e?5:"true"===e||"false"===e?1:3,value:e,start:b,end:A}}if(40===b||41===b||59===b)return qf();if(39===b||34===b){var c="";a=!1;b=R[A];Pd("\'"===b||\'"\'===b,"String literal must starts with a quote");e=A;for(++A;A<Ja;){var d=R[A++];if(d===b){b="";break}else if("\\\\"===d)if((d=R[A++])&&id(d.charCodeAt(0)))"\\r"===d&&"\\n"===R[A]&&++A;else switch(d){case "u":case "x":if("{"===\nR[A]){++A;var f=R[A];d=0;for("}"===f&&da({},"Unexpected token %0","ILLEGAL");A<Ja;){f=R[A++];if(!of(f))break;d=16*d+"0123456789abcdef".indexOf(f.toLowerCase())}(1114111<d||"}"!==f)&&da({},"Unexpected token %0","ILLEGAL");d=65535>=d?String.fromCharCode(d):String.fromCharCode((d-65536>>10)+55296,(d-65536&1023)+56320);c+=d}else c+=pf(d);break;case "n":c+="\\n";break;case "r":c+="\\r";break;case "t":c+="\\t";break;case "b":c+="\\b";break;case "f":c+="\\f";break;case "v":c+="\\x0B";break;default:hd(d)?(f="01234567".indexOf(d),\n0!==f&&(a=!0),A<Ja&&hd(R[A])&&(a=!0,f=8*f+"01234567".indexOf(R[A++]),0<="0123".indexOf(d)&&A<Ja&&hd(R[A])&&(f=8*f+"01234567".indexOf(R[A++]))),c+=String.fromCharCode(f)):c+=d}else if(id(d.charCodeAt(0)))break;else c+=d}""!==b&&da({},"Unexpected token %0","ILLEGAL");return{type:8,value:c,octal:a,start:e,end:A}}return 46===b?Pb(R.charCodeAt(A+1))?wi():qf():Pb(b)?wi():qf()}function Wa(){var b=ca;A=b.end;ca=rf();A=b.end;return b}function xi(b,e,a){var c=new pb("||"===b||"&&"===b?"LogicalExpression":"BinaryExpression");\nc.operator=b;c.left=e;c.right=a;return c}function sf(b){var e=new pb("Identifier");e.name=b;return e}function kd(b){var e=new pb("Literal");e.value=b.value;e.raw=R.slice(b.start,b.end);b.regex&&("//"===e.raw&&(e.raw="/(?:)/"),e.regex=b.regex);return e}function yi(b,e,a){var c=new pb("MemberExpression");c.computed="["===b;c.object=e;c.property=a;c.computed||(a.member=!0);return c}function zi(b,e,a){var c=new pb("Property");c.key=e;c.value=a;c.kind=b;return c}function da(b,e){var a=Array.prototype.slice.call(arguments,\n2),c=e.replace(/%(\\d)/g,function(f,g){Pd(g<a.length,"Message reference must be in range");return a[g]});var d=Error(c);d.index=A;d.description=c;throw d;}function Rd(b){2===b.type&&da(b,"Unexpected end of input");6===b.type&&da(b,"Unexpected number");8===b.type&&da(b,"Unexpected string");3===b.type&&da(b,"Unexpected identifier");4===b.type&&da(b,"Unexpected reserved word");da(b,"Unexpected token %0",b.value)}function Ka(b){var e=Wa();7===e.type&&e.value===b||Rd(e)}function na(b){return 7===ca.type&&\nca.value===b}function Ai(){A=ca.start;var b=Wa();return 8===b.type||6===b.type?(b.octal&&da(b,"Octal literals are not allowed in strict mode."),kd(b)):sf(b.value)}function xl(){if(na("(")){Ka("(");var b=tf();Ka(")");return b}if(na("[")){b=[];A=ca.start;for(Ka("[");!na("]");)na(",")?(Wa(),b.push(null)):(b.push(vc()),na("]")||Ka(","));Wa();var e=new pb("ArrayExpression");e.elements=b;return e}if(na("{")){b=[];e={};var a=String;A=ca.start;for(Ka("{");!na("}");){A=ca.start;var c=ca;if(3===c.type){var d=\nAi();Ka(":");c=vc();c=zi("init",d,c)}else 2===c.type||7===c.type?(Rd(c),c=void 0):(d=Ai(),Ka(":"),c=vc(),c=zi("init",d,c));d="Identifier"===c.key.type?c.key.name:a(c.key.value);d="$"+d;Object.prototype.hasOwnProperty.call(e,d)?da({},"Duplicate data property in object literal not allowed in strict mode"):e[d]=!0;b.push(c);na("}")||Ka(",")}Ka("}");e=new pb("ObjectExpression");e.properties=b;return e}e=ca.type;A=ca.start;if(3===e||yl[ca.value])b=sf(Wa().value);else if(8===e||6===e)ca.octal&&da(ca,"Octal literals are not allowed in strict mode."),\nb=kd(Wa());else{if(4===e)throw Error("Disabled.");if(1===e)b=Wa(),b.value="true"===b.value,b=kd(b);else if(5===e)b=Wa(),b.value=null,b=kd(b);else if(na("/")||na("/=")){var f;ca=null;ui();b=A;e=R[A];Pd("/"===e,"Regular expression literal must start with a slash");a=R[A++];for(d=c=!1;A<Ja;)if(e=R[A++],a+=e,"\\\\"===e)e=R[A++],id(e.charCodeAt(0))&&da({},"Invalid regular expression: missing /"),a+=e;else if(id(e.charCodeAt(0)))da({},"Invalid regular expression: missing /");else if(c)"]"===e&&(c=!1);else if("/"===\ne){d=!0;break}else"["===e&&(c=!0);d||da({},"Invalid regular expression: missing /");e=a.substr(1,a.length-2);for(f=d="";A<Ja;){c=R[A];if(!Qd(c.charCodeAt(0)))break;++A;"\\\\"===c&&A<Ja?da({},"Unexpected token %0","ILLEGAL"):(f+=c,d+=c)}0<=f.search(/[^gimuy]/g)&&da({},"Invalid regular expression",f);c=f;f=vl(e,c);b=kd({literal:a+d,value:f,regex:{pattern:e,flags:c},start:b,end:A});e=A;ca=rf();A=e}else Rd(Wa())}return b}function Bi(){var b;for(b=xl();;)if(na(".")){Ka(".");A=ca.start;var e=Wa();3===e.type||\n4===e.type||1===e.type||5===e.type||Rd(e);e=sf(e.value);b=yi(".",b,e)}else if(na("(")){e=[];Ka("(");if(!na(")"))for(;A<Ja;){e.push(vc());if(na(")"))break;Ka(",")}Ka(")");var a=new pb("CallExpression");a.callee=b;a.arguments=e;b=a}else if(na("["))Ka("["),e=tf(),Ka("]"),b=yi("[",b,e);else break;if(7===ca.type&&(na("++")||na("--")))throw Error("Disabled.");return b}function Sd(){if(7!==ca.type&&4!==ca.type)var b=Bi();else{if(na("++")||na("--"))throw Error("Disabled.");if(na("+")||na("-")||na("~")||na("!")){var e=\nWa();b=Sd();e=e.value;var a=new pb("UnaryExpression");a.operator=e;a.argument=b;a.prefix=!0;b=a}else{if(4===ca.type&&"delete"===ca.value||4===ca.type&&"void"===ca.value||4===ca.type&&"typeof"===ca.value)throw Error("Disabled.");b=Bi()}}return b}function Ci(b){var e=0;if(7!==b.type&&4!==b.type)return 0;switch(b.value){case "||":e=1;break;case "&&":e=2;break;case "|":e=3;break;case "^":e=4;break;case "&":e=5;break;case "==":case "!=":case "===":case "!==":e=6;break;case "<":case ">":case "<=":case ">=":case "instanceof":case "in":e=\n7;break;case "<<":case ">>":case ">>>":e=8;break;case "+":case "-":e=9;break;case "*":case "/":case "%":e=11}return e}function vc(){var b=ca;var e=Sd();var a=ca;var c=Ci(a);if(0===c)var d=e;else{a.prec=c;Wa();b=[b,ca];var f=Sd();for(d=[e,a,f];0<(c=Ci(ca));){for(;2<d.length&&c<=d[d.length-2].prec;)f=d.pop(),a=d.pop().value,e=d.pop(),b.pop(),e=xi(a,e,f),d.push(e);a=Wa();a.prec=c;d.push(a);b.push(ca);e=Sd();d.push(e)}c=d.length-1;e=d[c];for(b.pop();1<c;)b.pop(),e=xi(d[c-1].value,d[c-2],e),c-=2;d=e}na("?")&&\n(Wa(),b=vc(),Ka(":"),c=vc(),e=new pb("ConditionalExpression"),e.test=d,e.consequent=b,e.alternate=c,d=e);return d}function tf(){var b=vc();if(na(","))throw Error("Disabled.");return b}function zl(b){R=b;A=0;Ja=R.length;ca=null;b=A;ca=rf();A=b;b=tf();if(2!==ca.type)throw Error("Unexpect token after expression.");return b}function uf(b){var e=[];if("Identifier"===b.type)return[b.name];if("Literal"===b.type)return[b.value];"MemberExpression"===b.type&&(e.push.apply(e,$jscomp.arrayFromIterable(uf(b.object))),\ne.push.apply(e,$jscomp.arrayFromIterable(uf(b.property))));return e}function Di(b){return"MemberExpression"===b.object.type?Di(b.object):"datum"===b.object.name}function Ei(b){b=zl(b);var e=new Set;b.visit(function(a){"MemberExpression"===a.type&&Di(a)&&e.add(uf(a).slice(1).join("."))});return e}function hi(b,e,a,c){c=void 0===c?"datum":c;var d=q.isString(e)?e:e.param,f=oa(d),g=q.stringValue(f+"_store");try{var h=b.getSelectionComponent(f,d)}catch(k){return"!!"+f}h.project.timeUnit&&(b=null!==a&&\nvoid 0!==a?a:b.component.data.raw,a=h.project.timeUnit.clone(),b.parent?a.insertAsParentOf(b):b.parent=a);c="vlSelectionTest("+g+", "+c+("global"===h.resolve?")":", "+q.stringValue(h.resolve)+")");g="length(data("+g+"))";return!1===e.empty?g+" && "+c:"!"+g+" || "+c}function Fi(b,e,a){var c=oa(e),d=a.encoding,f=a.field;try{var g=b.getSelectionComponent(c,e)}catch(h){return c}d||f?d&&!f&&(b=g.project.items.filter(function(h){return h.channel===d}),!b.length||1<b.length?(f=g.project.items[0].field,H((b.length?\n"Multiple ":"No ")+("matching "+q.stringValue(d)+" encoding found for selection "+q.stringValue(a.param)+\'. Using "field": \')+(q.stringValue(f)+"."))):f=b[0].field):(f=g.project.items[0].field,1<g.project.items.length&&H(\'A "field" or "encoding" must be specified when using a selection as a scale domain. Using "field": \'+(q.stringValue(f)+".")));return g.name+"["+q.stringValue(eb(f))+"]"}function Kd(b,e,a){return Sc(e,function(c){return q.isString(c)?c:(null===c||void 0===c?0:c.param)?hi(b,c,a):Wg(c)})}\nfunction Al(b,e){if(b)return q.isArray(b)&&!bc(b)?b.map(function(a){return $c(a,e)}).join(", "):b}function vf(b,e,a,c){var d,f,g,h,k;null!==(d=b.encode)&&void 0!==d?d:b.encode={};null!==(g=(f=b.encode)[e])&&void 0!==g?g:f[e]={};null!==(k=(h=b.encode[e]).update)&&void 0!==k?k:h.update={};b.encode[e].update[a]=c}function ld(b,e,a,c){c=void 0===c?{header:!1}:c;var d=b.combine(),f=Object.assign({},d),g=d.disable,h=d.orient,k=d.scale,l=d.labelExpr,m=d.title;d=d.zindex;f=(delete f.disable,delete f.orient,\ndelete f.scale,delete f.labelExpr,delete f.title,delete f.zindex,f);if(!g){for(var n in f){var p=Bl[n];g=f[n];if(p&&p!==e&&"both"!==p)delete f[n];else if(ad(g)){p=g;g=Object.assign({},p);p=p.condition;g=(delete g.condition,g);p=q.array(p);var r=Gi[n];if(r){var v=r;r=v.vgProp;v=v.part;g=[].concat($jscomp.arrayFromIterable(p.map(function(w){var E=Object.assign({},w);w=w.test;E=(delete E.test,E);return Object.assign({},{test:Kd(null,w)},E)})),[g]);vf(f,v,r,g);delete f[n]}else null===r&&(g={signal:p.map(function(w){var E=\nObject.assign({},w);w=w.test;E=(delete E.test,E);return Kd(null,w)+" ? "+(T(E)?E.signal:q.stringValue(E.value))+" : "}).join("")+(T(g)?g.signal:q.stringValue(g.value))},f[n]=g)}else T(g)&&(p=Gi[n])&&(vf(f,p.part,p.vgProp,g),delete f[n]);B(["labelAlign","labelBaseline"],n)&&null===f[n]&&delete f[n]}if("grid"===e){if(f.grid)return f.encode&&(a=f.encode.grid,f.encode=Object.assign({},a?{grid:a}:{}),ha(f.encode)&&delete f.encode),Object.assign({},{scale:k,orient:h},f,{domain:!1,labels:!1,aria:!1,maxExtent:0,\nminExtent:0,ticks:!1,zindex:sa(d,0)})}else if(c.header||!b.mainExtracted){if(void 0!==l){var t,y;e=l;null!==(t=f.encode)&&void 0!==t&&null!==(y=t.labels)&&void 0!==y&&y.update&&T(f.encode.labels.update.text)&&(e=nc(l,"datum.label",f.encode.labels.update.text.signal));vf(f,"labels","text",{signal:e})}null===f.labelAlign&&delete f.labelAlign;if(f.encode){l=$jscomp.makeIterator(Hi);for(e=l.next();!e.done;e=l.next())e=e.value,b.hasAxisPart(e)||delete f.encode[e];ha(f.encode)&&delete f.encode}b=Al(m,a);\nreturn Object.assign({},{scale:k,orient:h,grid:!1},b?{title:b}:{},f,!1===a.aria?{aria:!1}:{},{zindex:sa(d,0)})}}}function Ii(b){for(var e=b.component.axes,a=[],c=$jscomp.makeIterator(Db),d=c.next();!d.done;d=c.next())if(d=d.value,e[d])for(var f=$jscomp.makeIterator(e[d]),g=f.next();!g.done;g=f.next())if(g=g.value,!g.get("disable")&&!g.get("gridScale")){g="x"===d?"height":"width";var h=b.getSizeSignalRef(g).signal;g!==h&&a.push({name:g,update:h})}return a}function Cl(b,e){var a=void 0===b.x?[]:b.x;\nb=void 0===b.y?[]:b.y;return[].concat($jscomp.arrayFromIterable(a.map(function(c){return ld(c,"grid",e)})),$jscomp.arrayFromIterable(b.map(function(c){return ld(c,"grid",e)})),$jscomp.arrayFromIterable(a.map(function(c){return ld(c,"main",e)})),$jscomp.arrayFromIterable(b.map(function(c){return ld(c,"main",e)}))).filter(function(c){return c})}function Ji(b,e,a,c){return Object.assign.apply(null,[{}].concat($jscomp.arrayFromIterable(b.map(function(d){if("axisOrient"===d){d="x"===a?"bottom":"left";\nvar f=e["x"===a?"axisBottom":"axisLeft"]||{},g=e["x"===a?"axisTop":"axisRight"]||{},h=new Set([].concat($jscomp.arrayFromIterable(G(f)),$jscomp.arrayFromIterable(G(g)))),k={};h=$jscomp.makeIterator(h.values());for(var l=h.next();!l.done;l=h.next())l=l.value,k[l]={signal:c.signal+\' === "\'+d+\'" ? \'+Lb(f[l])+" : "+Lb(g[l])};return k}return e[d]}))))}function Dl(b,e,a,c){var d="band"===e?["axisDiscrete","axisBand"]:"point"===e?["axisDiscrete","axisPoint"]:e in El?["axisQuantitative"]:"time"===e||"utc"===\ne?["axisTemporal"]:[],f="x"===b?"axisX":"axisY";e=T(a)?"axisOrient":"axis"+yc(a);d=[].concat($jscomp.arrayFromIterable(d),$jscomp.arrayFromIterable(d.map(function(g){return f+g.substr(4)})));e=["axis",e,f];return{vlOnlyAxisConfig:Ji(d,c,b,a),vgAxisConfig:Ji(e,c,b,a),axisConfigStyle:Fl([].concat($jscomp.arrayFromIterable(e),$jscomp.arrayFromIterable(d)),c)}}function Fl(b,e){var a=[{}];b=$jscomp.makeIterator(b);for(var c=b.next();!c.done;c=b.next()){var d;if(c=null===(d=e[c.value])||void 0===d?void 0:\nd.style){c=q.array(c);c=$jscomp.makeIterator(c);for(var f=c.next();!f.done;f=c.next())a.push(e.style[f.value])}}return Object.assign.apply(null,a)}function wf(b,e,a,c){c=void 0===c?{}:c;e=xg(b,a,e);if(void 0!==e)return{configFrom:"style",configValue:e};e=$jscomp.makeIterator(["vlOnlyAxisConfig","vgAxisConfig","axisConfigStyle"]);for(a=e.next();!a.done;a=e.next()){a=a.value;var d;if(void 0!==(null===(d=c[a])||void 0===d?void 0:d[b]))return{configFrom:a,configValue:c[a][b]}}return{}}function Gl(b,e,\na,c,d){var f=null===e||void 0===e?void 0:e.labelAngle;if(void 0!==f)return T(f)?f:Tc(f);e=wf("labelAngle",c,null===e||void 0===e?void 0:e.style,d).configValue;if(void 0!==e)return Tc(e);if("x"===a&&B(["nominal","ordinal"],b.type)&&(!K(b)||!b.timeUnit))return 270}function xf(b){return"((("+b.signal+" % 360) + 360) % 360)"}function Ki(b,e,a,c){if(void 0!==b)return"x"===a?T(b)?(c=xf(b),e=T(e)?"("+e.signal+\' === "top")\':"top"===e,{signal:"(45 < "+c+" && "+c+" < 135) || (225 < "+c+" && "+c+\' < 315) ? "middle" :(\'+\n(c+" <= 45 || 315 <= "+c+") === "+e+\' ? "bottom" : "top"\')}):45<b&&135>b||225<b&&315>b?"middle":T(e)?{signal:e.signal+" "+(45>=b||315<=b?"===":"!==")+\' "top" ? "bottom" : "top"\'}:(45>=b||315<=b)===("top"===e)?"bottom":"top":T(b)?(b=xf(b),e=T(e)?"("+e.signal+\' === "left")\':"left"===e,{signal:b+" <= 45 || 315 <= "+b+" || (135 <= "+b+" && "+b+" <= 225) ? "+(c?\'"middle"\':"null")+" : (45 <= "+b+" && "+b+" <= 135) === "+e+\' ? "top" : "bottom"\'}):45>=b||315<=b||135<=b&&225>=b?c?"middle":null:T(e)?{signal:e.signal+\n" "+(45<=b&&135>=b?"===":"!==")+\' "left" ? "top" : "bottom"\'}:(45<=b&&135>=b)===("left"===e)?"top":"bottom"}function Li(b,e,a){if(void 0!==b){var c=(a="x"===a)?0:90,d=a?"bottom":"left";return T(b)?(b=xf(b),e=T(e)?"("+e.signal+\' === "\'+d+\'")\':e===d,{signal:"("+(c?"("+b+" + 90)":b)+" % 180 === 0) ? "+(a?null:\'"center"\')+" :("+(c+" < "+b+" && "+b+" < "+(180+c)+") === "+e+\' ? "left" : "right"\')}):0===(b+c)%180?a?null:"center":T(e)?{signal:e.signal+" "+(c<b&&b<180+c?"===":"!==")+\' "\'+d+\'" ? "left" : "right"\'}:\n(c<b&&b<180+c)===(e===d)?"left":"right"}}function Mi(b,e){var a="x"===e?"x2":"y2";e=b.fieldDef(e);b=b.fieldDef(a);a=e?e.title:void 0;b=b?b.title:void 0;if(a&&b)return Ag(a,b);if(a)return a;if(b)return b;if(void 0!==a)return a;if(void 0!==b)return b}function Mc(b,e,a){return J(b,Object.assign({},{prefix:e,suffix:"sort_index"},null!==a&&void 0!==a?a:{}))}function Td(b,e){return B(["top","bottom"],e)?"column":B(["left","right"],e)?"row":"row"===b?"row":"column"}function Nc(b,e,a,c){return sa((e||{})[b],\n("row"===c?a.headerRow:"column"===c?a.headerColumn:a.headerFacet)[b],a.header[b])}function Ud(b,e,a,c){var d={};b=$jscomp.makeIterator(b);for(var f=b.next();!f.done;f=b.next()){f=f.value;var g=Nc(f,e||{},a,c);void 0!==g&&(d[f]=g)}return d}function Ni(b,e,a){switch(void 0===a?"middle":a){case "start":return{align:"left"};case "end":return{align:"right"}}return(b=Li(e,"row"===b?"left":"top","row"===b?"y":"x"))?{align:b}:{}}function Oi(b,e){return(b=Ki(b,"row"===e?"left":"top","row"===e?"y":"x",!0))?\n{baseline:b}:{}}function yf(b,e,a){var c=Ud("format formatType labelAngle labelAnchor labelOrient labelExpr".split(" "),b.header,a,e),d=c.labelAngle,f=c.labelAnchor,g=c.labelOrient,h=c.labelExpr;c=Ne({fieldOrDatumDef:b,format:c.format,formatType:c.formatType,expr:"parent",config:a}).signal;g=Td(e,g);return Object.assign({},{text:{signal:h?nc(nc(h,"datum.label",c),"datum.value",J(b,{expr:"parent"})):c}},"row"===e?{orient:"left"}:{},{style:"guide-label",frame:"group"},Oi(d,g),Ni(g,d,f),Pi(a,b,e,Hl,\nQi))}function Pi(b,e,a,c,d){var f={};c=$jscomp.makeIterator(c);for(var g=c.next();!g.done;g=c.next())if(g=g.value,d[g]){var h=Nc(g,null===e||void 0===e?void 0:e.header,b,a);void 0!==h&&(f[d[g]]=h)}return f}function zf(b){return[].concat($jscomp.arrayFromIterable(Vd(b,"width")),$jscomp.arrayFromIterable(Vd(b,"height")),$jscomp.arrayFromIterable(Vd(b,"childWidth")),$jscomp.arrayFromIterable(Vd(b,"childHeight")))}function Vd(b,e){var a="width"===e?"x":"y",c=b.component.layoutSize.get(e);if(!c||"merged"===\nc)return[];e=b.getSizeSignalRef(e).signal;if("step"===c){if(c=b.getScaleComponent(a)){var d=c.get("type"),f=c.get("range");if(d in Ha&&cc(f))return d=b.scaleName(a),ob(b.parent)&&"independent"===b.parent.component.resolve.scale[a]?[{name:d+"_step",value:f.step}]:[{name:d+"_step",value:f.step},{name:e,update:Ri(d,c,"domain(\'"+d+"\').length")}]}throw Error("layout size is step although width/height is not step.");}return"container"==c?(a=(c=e.endsWith("width"))?"containerSize()[0]":"containerSize()[1]",\nb=af(b.config.view,c?"width":"height"),b="isFinite("+a+") ? "+a+" : "+b,[{name:e,init:b,on:[{update:b,events:"window:resize"}]}]):[{name:e,value:c}]}function Ri(b,e,a){var c=e.get("type"),d=e.get("padding"),f=sa(e.get("paddingOuter"),d);e=e.get("paddingInner");return"bandspace("+a+", "+Lb("band"===c?void 0!==e?e:d:1)+", "+Lb(f)+") * "+b+"_step"}function Si(b){return"childWidth"===b?"width":"childHeight"===b?"height":b}function Ti(b,e){return G(b).reduce(function(a,c){return Object.assign({},a,Lc(e,\nb[c],c,function(d){return pa(d.value)}))},{})}function Ui(b,e){if(Kc(e)||ob(e))return"shared";if(Af(e))return b in Fa?"independent":"shared";throw Error("invalid model type for resolve");}function Bf(b,e){var a=e in Fa?"axis":"legend";return"independent"===b.scale[e]?("shared"===b[a][e]&&H(\'Setting the scale to be independent for "\'+e+\'" means we also have to set the guide (axis or legend) to be independent.\'),"independent"):b[a][e]||"shared"}function Vi(b){return Wi(b,function(e,a){return Math.max(e,\na.value)})}function Cf(b){return Wi(b,function(e,a){return sa(e,a.value)})}function Wi(b,e){var a=b&&b.condition;if(a&&(q.isArray(a)||nb(a)))return q.array(b.condition).reduce(e,b.value);if(nb(b))return b.value}function Xi(b,e,a){b=e.get("selections");if(null!==b&&void 0!==b&&b.length){var c=q.stringValue(a.field);return b.map(function(d){return"(!length(data("+q.stringValue(oa(d)+"_store")+")) || ("+d+"["+c+"] && indexof("+d+"["+c+"], datum.value) >= 0))"}).join(" || ")}}function Yi(b){if(ta(b)){var e=\nb.encoding;for(var a={},c=$jscomp.makeIterator(["color"].concat($jscomp.arrayFromIterable(Zi))),d=c.next();!d.done;d=c.next()){d=d.value;var f=za(e[d]);if(f&&b.getScaleComponent(d)&&("shape"!==d||!K(f)||"geojson"!==f.type)){var g=f=void 0,h=void 0,k=void 0,l=void 0,m=void 0;var n=void 0;var p=b,r=p.legend(d),v=p.markDef,t=p.encoding,y=p.config,w=y.legend,E=new $i({},Il(p,d)),Q=null===(k=p.fieldDef(d))||void 0===k?void 0:k.field;k=$jscomp.makeIterator(Pa(null!==(O=p.component.selection)&&void 0!==\nO?O:{}));for(var M=k.next();!M.done;M=k.next()){M=M.value;var O,N,W=null!==(N=M.project.hasField[Q])&&void 0!==N?N:M.project.hasChannel[d];if(W&&aj.defined(M)){var U,ba=null!==(U=E.get("selections"))&&void 0!==U?U:[];ba.push(M.name);E.set("selections",ba,!1);W.hasLegend=!0}}Q=void 0!==r?!r:w.disable;E.set("disable",Q,void 0!==r);if(!Q){r=r||{};k=p.getScaleComponent(d).get("type");Q=za(t[d]);W=K(Q)?null===(n=Oa(Q.timeUnit))||void 0===n?void 0:n.unit:void 0;M=r.orient||y.legend.orient||"right";n=r.type;\nb:{ba=k;if(Ac(d)){if(B(["quarter","month","day"],W)){W="symbol";break b}if(ba in mb){W="gradient";break b}}W="symbol"}n=sa(n,W);W=w;ba=n;var va=M;if(null!==(h=null!==(g=r.direction)&&void 0!==g?g:W[ba?"gradientDirection":"symbolDirection"])&&void 0!==h)g=h;else b:{switch(va){case "top":case "bottom":g="horizontal";break b;case "left":case "right":case "none":case void 0:break;default:g="gradient"===ba?"horizontal":void 0;break b}g=void 0}v={legend:r,channel:d,model:p,markDef:v,encoding:t,fieldOrDatumDef:Q,\nlegendConfig:w,config:y,scaleType:k,orient:M,legendType:n,direction:g};t=$jscomp.makeIterator(bj);for(w=t.next();!w.done;w=t.next())if(w=w.value,!("gradient"===n&&w.startsWith("symbol")||"symbol"===n&&w.startsWith("gradient"))&&(g=w in cj?cj[w](v):r[w],void 0!==g)){b:{h=p.fieldDef(d);switch(w){case "disable":h=void 0!==r;break b;case "values":h=!(null===r||void 0===r||!r.values);break b;case "title":if("title"===w&&g===(null===h||void 0===h?void 0:h.title)){h=!0;break b}}h=g===(r||{})[w]}(h||void 0===\ny.legend[w])&&E.set(w,g,h)}y=null!==(m=null===(l=r)||void 0===l?void 0:l.encoding)&&void 0!==m?m:{};l=E.get("selections");m={};v={fieldOrDatumDef:Q,model:p,channel:d,legendCmpt:E,legendType:n};t=$jscomp.makeIterator("labels legend title symbols gradient entries".split(" "));for(w=t.next();!w.done;w=t.next()){w=w.value;var Qa;g=Ti(null!==(Qa=y[w])&&void 0!==Qa?Qa:{},p);g=w in dj?dj[w](g,v):g;void 0===g||ha(g)||(m[w]=Object.assign({},null!==l&&void 0!==l&&l.length&&K(Q)?{name:oa(Q.field)+"_legend_"+\nw}:{},null!==l&&void 0!==l&&l.length?{interactive:!!l}:{},{update:g}))}ha(m)||E.set("encode",m,!(null===(f=r)||void 0===f||!f.encoding))}f=E;a[d]=f}}e=a}else{a=b.component;e=a.legends;a=a.resolve;c=$jscomp.makeIterator(b.children);for(O=c.next();!O.done;O=c.next())for(O=O.value,Yi(O),N=$jscomp.makeIterator(G(O.component.legends)),U=N.next();!U.done;U=N.next())U=U.value,a.legend[U]=Bf(b.component.resolve,U),"shared"===a.legend[U]&&(e[U]=ej(e[U],O.component.legends[U]),e[U]||(a.legend[U]="independent",\ndelete e[U]));c=$jscomp.makeIterator(G(e));for(U=c.next();!U.done;U=c.next())for(N=U.value,U=$jscomp.makeIterator(b.children),O=U.next();!O.done;O=U.next())O=O.value,O.component.legends[N]&&"shared"===a.legend[N]&&delete O.component.legends[N]}return b.component.legends=e}function Il(b,e){var a=b.scaleName(e);if("trail"===b.mark){if("color"===e)return{stroke:a};if("size"===e)return{strokeWidth:a}}if("color"===e)return b.markDef.filled?{fill:a}:{stroke:a};b={};return b[e]=a,b}function ej(b,e){if(!b)return e.clone();\nvar a=b.getWithExplicit("orient"),c=e.getWithExplicit("orient");if(!a.explicit||!c.explicit||a.value===c.value){var d=!1;a={};c=$jscomp.makeIterator(bj);for(var f=c.next();!f.done;a={$jscomp$loop$prop$prop$456:a.$jscomp$loop$prop$prop$456},f=c.next())a.$jscomp$loop$prop$prop$456=f.value,f=gc(b.getWithExplicit(a.$jscomp$loop$prop$prop$456),e.getWithExplicit(a.$jscomp$loop$prop$prop$456),a.$jscomp$loop$prop$prop$456,"legend",function(m){return function(n,p){switch(m.$jscomp$loop$prop$prop$456){case "symbolType":return n=\n"circle"===p.value?p:n,n;case "title":return Bg(n,p);case "type":return d=!0,ab("symbol")}return Id(n,p,m.$jscomp$loop$prop$prop$456,"legend")}}(a)),b.setWithExplicit(a.$jscomp$loop$prop$prop$456,f);if(d){var g,h,k,l;null!==(g=b.implicit)&&void 0!==g&&null!==(h=g.encode)&&void 0!==h&&h.gradient&&nd(b.implicit,["encode","gradient"]);null!==(k=b.explicit)&&void 0!==k&&null!==(l=k.encode)&&void 0!==l&&l.gradient&&nd(b.explicit,["encode","gradient"])}return b}}function fj(b){for(var e=b.component.legends,\na={},c=$jscomp.makeIterator(G(e)),d=c.next();!d.done;d=c.next()){d=d.value;var f=b.getScaleComponent(d);f=ia(f.get("domains"));if(a[f])for(var g=$jscomp.makeIterator(a[f]),h=g.next();!h.done;h=g.next())ej(h.value,e[d])||a[f].push(e[d]);else a[f]=[e[d].clone()]}return Pa(a).flat().map(function(k){var l=b.config,m;k=k.combine();var n=Object.assign({},k),p=k.disable;k=k.labelExpr;n=(delete n.disable,delete n.labelExpr,delete n.selections,n);if(p)var r=void 0;else{!1===l.aria&&void 0==n.aria&&(n.aria=\n!1);if(null!==(m=n.encode)&&void 0!==m&&m.symbols)for(l=n.encode.symbols.update,!l.fill||"transparent"===l.fill.value||l.stroke||n.stroke||(l.stroke={value:"transparent"}),m=$jscomp.makeIterator(Zi),p=m.next();!p.done;p=m.next())p=p.value,n[p]&&delete l[p];n.title||delete n.title;if(void 0!==k){var v,t;l=k;null!==(v=n.encode)&&void 0!==v&&null!==(t=v.labels)&&void 0!==t&&t.update&&T(n.encode.labels.update.text)&&(l=nc(k,"datum.label",n.encode.labels.update.text.signal));v={signal:l};var y,w,E,Q;null!==\n(r=n.encode)&&void 0!==r?r:n.encode={};null!==(w=(y=n.encode).labels)&&void 0!==w?w:y.labels={};null!==(Q=(E=n.encode.labels).update)&&void 0!==Q?Q:E.update={};n.encode.labels.update.text=v}r=n}return r}).filter(function(k){return void 0!==k})}function Jl(b){return b.children.reduce(function(e,a){return e.concat(a.assembleProjections())},gj(b))}function gj(b){var e=b.component.projection;if(!e||e.merged)return[];var a=e.combine(),c=a.name;if(e.data){var d={signal:"["+e.size.map(function(f){return f.signal}).join(", ")+\n"]"};e=e.data.reduce(function(f,g){g=T(g)?g.signal:"data(\'"+b.lookupDataSource(g)+"\')";f.includes(g)||f.push(g);return f},[]);if(0>=e.length)throw Error("Projection\'s fit didn\'t find any data sources");return[Object.assign({},{name:c,size:d,fit:{signal:1<e.length?"["+e.join(", ")+"]":e[0]}},a)]}return[Object.assign({},{name:c},{translate:{signal:"[width / 2, height / 2]"}},a)]}function hj(b){if(b.hasProjection){var e,a=Va(b.specifiedProjection),c=!(a&&(null!=a.scale||null!=a.translate)),d=c?[b.getSizeSignalRef("width"),\nb.getSizeSignalRef("height")]:void 0;if(c){c=[];for(var f=b.encoding,g=$jscomp.makeIterator([["longitude","latitude"],["longitude2","latitude2"]]),h=g.next();!h.done;h=g.next())h=h.value,(za(f[h[0]])||za(f[h[1]]))&&c.push({signal:b.getName("geojson_"+c.length)});b.channelHasField("shape")&&"geojson"===b.typedFieldDef("shape").type&&c.push({signal:b.getName("geojson_"+c.length)});0===c.length&&c.push(b.requestDataName(la.Main))}else c=void 0;b=new Wd(b.projectionName(!0),Object.assign({},null!==(e=\nVa(b.config.projection))&&void 0!==e?e:{},null!==a&&void 0!==a?a:{}),d,c);b.get("type")||b.set("type","equalEarth",!1);return b}}function Kl(b,e){var a=Z(Ll,function(c){return!q.hasOwnProperty(b.explicit,c)&&!q.hasOwnProperty(e.explicit,c)||q.hasOwnProperty(b.explicit,c)&&q.hasOwnProperty(e.explicit,c)&&wb(b.get(c),e.get(c))?!0:!1});if(wb(b.size,e.size)){if(a)return b;if(wb(b.explicit,{}))return e;if(wb(e.explicit,{}))return b}return null}function ij(b){if(0!==b.children.length){for(var e,a=$jscomp.makeIterator(b.children),\nc=a.next();!c.done;c=a.next()){var d=c.value;d.component.projection=ta(d)?hj(d):ij(d)}a=Z(b.children,function(g){if(g=g.component.projection){if(e)return(g=Kl(e,g))&&(e=g),!!g;e=g}return!0});if(e&&a){a=b.projectionName(!0);d=new Wd(a,e.specifiedProjection,e.size,Y(e.data));b=$jscomp.makeIterator(b.children);for(c=b.next();!c.done;c=b.next()){c=c.value;var f=c.component.projection;f&&(f.isFit&&d.data.push.apply(d.data,$jscomp.arrayFromIterable(c.component.projection.data)),c.renameProjection(f.get("name"),\na),f.merged=!0)}return d}}}function Df(b,e,a){var c;a=null!==(c=qd(a,void 0))&&void 0!==c?c:{};e=ue(a)+"_"+e;return b.getName(e+"_bins")}function jj(b,e,a){var c="as"in b?q.isString(b.as)?[b.as,b.as+"_end"]:[b.as[0],b.as[1]]:[J(b,{forAs:!0}),J(b,{binSuffix:"end",forAs:!0})];e=Object.assign({},qd(e,void 0));var d=b.field;d=ue(e)+"_"+d;var f=a.getName(d+"_bins");var g=a.getName(d+"_extent");if(rd(e.extent)){var h=e.extent;h=Fi(a,h.param,h);delete e.extent}b=Object.assign({},{bin:e,field:b.field,as:[c]},\nf?{signal:f}:{},g?{extentSignal:g}:{},h?{span:h}:{});return{key:d,binComponent:b}}function kj(b){return"\'"===b[0]&&"\'"===b[b.length-1]||\'"\'===b[0]&&\'"\'===b[b.length-1]?b.slice(1,-1):b}function Ml(b,e){b=pe(b);if("number"===e)return"toNumber("+b+")";if("boolean"===e)return"toBoolean("+b+")";if("string"===e)return"toString("+b+")";if("date"===e)return"toDate("+b+")";if("flatten"===e)return b;if(e.startsWith("date:"))return e=kj(e.slice(5,e.length)),"timeParse("+b+",\'"+e+"\')";if(e.startsWith("utc:"))return e=\nkj(e.slice(4,e.length)),"utcParse("+b+",\'"+e+"\')";H(\'Unrecognized parse "\'+e+\'".\');return null}function Nl(b){var e={};z(b.filter,function(a){if(Vg(a)){var c=null;if(Ce(a))c=Za(a.equal);else if(Ee(a))c=Za(a.lte);else if(De(a))c=Za(a.lt);else if(Fe(a))c=Za(a.gt);else if(Ge(a))c=Za(a.gte);else if(He(a))c=a.range[0];else if(Ie(a)){var d;c=(null!==(d=a.oneOf)&&void 0!==d?d:a["in"])[0]}c&&(qc(c)?e[a.field]="date":q.isNumber(c)?e[a.field]="number":q.isString(c)&&(e[a.field]="string"));a.timeUnit&&(e[a.field]=\n"date")}});return e}function Ol(b){function e(f){if(Dc(f))a[f.field]="date";else{var g;if(g="quantitative"===f.type)g=f.aggregate,g=q.isString(g)&&B(["min","max"],g);g?a[f.field]="number":1<zc(f.field)?f.field in a||(a[f.field]="flatten"):Ec(f)&&zb(f.sort)&&1<zc(f.sort.field)&&(f.sort.field in a||(a[f.sort.field]="flatten"))}}var a={};(ta(b)||ob(b))&&b.forEachFieldDef(function(f,g){gb(f)?e(f):(g=oc(g),g=b.fieldDef(g),e(Object.assign({},f,{type:g.type})))});if(ta(b)){var c=b.markDef,d=b.encoding;dc(b.mark)&&\n!b.encoding.order&&(c=d["horizontal"===c.orient?"y":"x"],!K(c)||"quantitative"!==c.type||c.field in a||(a[c.field]="number"))}return a}function Ef(b){return b instanceof Ra||b instanceof Eb||b instanceof Fb}function Pl(b){return b.stack.stackBy.reduce(function(e,a){var c=J(a.fieldDef);c&&e.push(c);return e},[])}function Ql(b){return q.isArray(b)&&b.every(function(e){return q.isString(e)})&&1<b.length}function Rl(b){function e(a){if(!(a instanceof La)){var c=a.clone();if(c instanceof qa){var d="scale_"+\nc.getSource();c.setSource(d);b.model.component.data.outputNodes[d]=c}else(c instanceof ua||c instanceof Aa||c instanceof bb||c instanceof Xa)&&c.addDimensions(b.fields);a=$jscomp.makeIterator(a.children.flatMap(e));for(d=a.next();!d.done;d=a.next())d.value.parent=c;return[c]}return a.children.flatMap(e)}return e}function Ff(b){if(b instanceof La)if(1!==b.numChildren()||b.children[0]instanceof qa){var e=b.model.component.data.main;lj(e);var a=Rl(b);b=b.children.map(a).flat();b=$jscomp.makeIterator(b);\nfor(a=b.next();!a.done;a=b.next())a.value.parent=e}else e=b.children[0],(e instanceof ua||e instanceof Aa||e instanceof bb||e instanceof Xa)&&e.addDimensions(b.fields),e.swapWithParent(),Ff(b);else b.children.map(Ff)}function lj(b){if(b instanceof qa&&b.type===la.Main&&1===b.numChildren()){var e=b.children[0];e instanceof La||(e.swapWithParent(),lj(b))}}function Gf(b){b=$jscomp.makeIterator(b);for(var e=b.next();!e.done;e=b.next()){e=e.value;for(var a=$jscomp.makeIterator(e.children),c=a.next();!c.done;c=\na.next())if(c.value.parent!==e)return!1;if(!Gf(e.children))return!1}return!0}function qb(b,e){var a=!1;e=$jscomp.makeIterator(e);for(var c=e.next();!c.done;c=e.next())a=b.optimize(c.value)||a;return a}function mj(b,e,a){var c=b.sources,d=!1;d=qb(new Hf,c)||d;d=qb(new If(e),c)||d;c=c.filter(function(f){return 0<f.numChildren()});d=qb(new Jf,c)||d;c=c.filter(function(f){return 0<f.numChildren()});a||(d=qb(new Kf,c)||d,d=qb(new Lf(e),c)||d,d=qb(new Xd,c)||d,d=qb(new Mf,c)||d,d=qb(new Nf,c)||d,d=qb(new Of,\nc)||d,d=qb(new Yd,c)||d,d=qb(new Pf,c)||d);b.sources=c;return d}function nj(b){for(var e=b.component.scales,a=$jscomp.makeIterator(G(e)),c=a.next();!c.done;c=a.next()){c=c.value;var d=b,f=d.getScaleComponent(c).get("type"),g=d.encoding;var h=d.scaleDomain(c);var k=d.typedFieldDef(c),l=d.config.scale;"unaggregated"===h?(k=oj(k,f),l=k.reason,k.valid||(H(l),h=void 0)):void 0===h&&l.useUnaggregatedDomain&&oj(k,f).valid&&(h="unaggregated");h!==d.scaleDomain(c)&&(d.specifiedScales[c]=Object.assign({},d.specifiedScales[c],\n{domain:h}));d="x"===c&&za(g.x2)?za(g.x)?gc(jc(f,h,d,"x"),jc(f,h,d,"x2"),"domain","scale",Qf):jc(f,h,d,"x2"):"y"===c&&za(g.y2)?za(g.y)?gc(jc(f,h,d,"y"),jc(f,h,d,"y2"),"domain","scale",Qf):jc(f,h,d,"y2"):jc(f,h,d,c);e[c].setWithExplicit("domains",d);h=void 0;f=b.component.scales[c];k=b.specifiedScales[c].domain;g=null===(h=b.fieldDef(c))||void 0===h?void 0:h.bin;h=Xg(k)&&k;g=q.isObject(g)&&rd(g.extent)&&g.extent;(h||g)&&f.set("selectionExtent",null!==h&&void 0!==h?h:g,!0);if(b.component.data.isFaceted){for(f=\nb;!ob(f)&&f.parent;)f=f.parent;if("shared"===f.component.resolve.scale[c])for(c=$jscomp.makeIterator(d.value),d=c.next();!d.done;d=c.next())d=d.value,Kb(d)&&(d.data="scale_"+d.data.replace("scale_",""))}}}function pj(b){for(var e=$jscomp.makeIterator(b.children),a=e.next();!a.done;a=e.next()){var c=a.value;ta(c)?nj(c):pj(c)}e=b.component.scales;c=$jscomp.makeIterator(G(e));for(var d=c.next();!d.done;d=c.next()){d=d.value;var f=void 0,g=null,h=$jscomp.makeIterator(b.children);for(a=h.next();!a.done;a=\nh.next())if(a=a.value.component.scales[d])f=void 0===f?a.getWithExplicit("domains"):gc(f,a.getWithExplicit("domains"),"domains","scale",Qf),a=a.get("selectionExtent"),g&&a&&g.param!==a.param&&H("The same selection must be used to override scale domains in a layered view."),g=a;e[d].setWithExplicit("domains",f);g&&e[d].set("selectionExtent",g,!0)}}function Sl(b,e,a){return b.map(function(c){return{signal:"{data: "+vd(c,{timeUnit:a,type:e})+"}"}})}function Rf(b,e,a){var c;a=null===(c=Oa(a))||void 0===\nc?void 0:c.unit;return"temporal"===e||a?Sl(b,e,a):[b]}function jc(b,e,a,c){var d=za(a.encoding[c]),f=d.type,g=d.timeUnit;if(e&&e.unionWith)return c=jc(b,void 0,a,c),d=Rf(e.unionWith,f,g),Ob([].concat($jscomp.arrayFromIterable(c.value),$jscomp.arrayFromIterable(d)));if(T(e))return Ob([e]);if(e&&"unaggregated"!==e&&!Xg(e))return Ob(Rf(e,f,g));var h=a.stack;if(h&&c===h.fieldChannel){if("normalize"===h.offset)return ab([[0,1]]);d=a.requestDataName(la.Main);return ab([{data:d,field:a.vgField(c,{suffix:"start"})},\n{data:d,field:a.vgField(c,{suffix:"end"})}])}h=Mb[c]&&K(d)?Tl(a,c,b):void 0;if(ec(d))return c=Rf([d.datum],f,g),ab(c);if("unaggregated"===e)return c=a.requestDataName(la.Main),d=d.field,ab([{data:c,field:J({field:d,aggregate:"min"})},{data:c,field:J({field:d,aggregate:"max"})}]);if(ka(d.bin)){if(b in Ha)return"bin-ordinal"===b?ab([]):ab([{data:Rc(h)?a.requestDataName(la.Main):a.requestDataName(la.Raw),field:a.vgField(c,Xc(d,c)?{binSuffix:"range"}:{}),sort:!0!==h&&q.isObject(h)?h:{field:a.vgField(c,\n{}),op:"min"}}]);e=d.bin;if(ka(e)){var k=Df(a,d.field,e);return ab([new Ya(function(){var l=a.getSignalName(k);return"["+l+".start, "+l+".stop]"})])}return ab([{data:a.requestDataName(la.Main),field:a.vgField(c,{})}])}return d.timeUnit&&B(["time","utc"],b)&&kh(d,ta(a)?a.encoding[Ib(c)]:void 0,a.markDef,a.config)?(d=a.requestDataName(la.Main),ab([{data:d,field:a.vgField(c)},{data:d,field:a.vgField(c,{suffix:"end"})}])):h?ab([{data:Rc(h)?a.requestDataName(la.Main):a.requestDataName(la.Raw),field:a.vgField(c),\nsort:h}]):ab([{data:a.requestDataName(la.Main),field:a.vgField(c)}])}function Sf(b,e){var a=b.op,c=b.field;b=b.order;return Object.assign({},{op:null!==a&&void 0!==a?a:e?"sum":"min"},c?{field:eb(c)}:{},b?{order:b}:{})}function Tl(b,e,a){if(a in Ha){a=b.fieldDef(e);var c=a.sort;if(hh(c))return{op:"min",field:Mc(a,e),order:"ascending"};var d=(a=b.stack)?[].concat($jscomp.arrayFromIterable(a.groupbyField?[a.groupbyField]:[]),$jscomp.arrayFromIterable(a.stackBy.map(function(g){return g.fieldDef.field}))):\nvoid 0;if(zb(c))return a=a&&!d.includes(c.field),Sf(c,a);if(c&&c.encoding){e=c.order;b=b.fieldDef(c.encoding);c=b.aggregate;var f=b.field;a=a&&!d.includes(f);if(Jb(c)||$b(c))return Sf({field:J(b),order:e},a);if(te(c)||!c)return Sf({op:c,field:f,order:e},a)}else{if("descending"===c)return{op:"min",field:b.vgField(e),order:"descending"};if(B(["ascending",void 0],c))return!0}}}function oj(b,e){var a=b.aggregate,c=b.type;return a?q.isString(a)&&!Ul[a]?{valid:!1,reason:\'Unaggregated domain not applicable for "\'+\na+\'" since it produces values outside the origin domain of the source data.\'}:"quantitative"===c&&"log"===e?{valid:!1,reason:"Unaggregated domain is currently unsupported for log scale ("+ia(b)+")."}:{valid:!0}:{valid:!1,reason:"Using unaggregated domain with raw field has no effect ("+ia(b)+")."}}function Qf(b,e,a,c){if(b.explicit&&e.explicit){var d=e.value;a="Conflicting "+c.toString()+\' property "\'+a.toString()+\'" (\'+ia(b.value)+" and "+ia(d)+"). Using the union of the two domains.";H(a)}return{explicit:b.explicit,\nvalue:[].concat($jscomp.arrayFromIterable(b.value),$jscomp.arrayFromIterable(e.value))}}function Vl(b){var e=Ca(b.map(function(d){return Kb(d)?(d=Object.assign({},d),delete d.sort,d):d}),I),a=Ca(b.map(function(d){if(Kb(d))return d=d.sort,void 0===d||Rc(d)||("op"in d&&"count"===d.op&&delete d.field,"ascending"===d.order&&delete d.order),d}).filter(function(d){return void 0!==d}),I);if(0!==e.length){if(1===e.length){e=b[0];if(Kb(e)&&0<a.length){var c=a[0];1<a.length?(H("Domains that should be unioned has conflicting sort properties. Sort will be set to true."),\nc=!0):q.isObject(c)&&"field"in c&&e.field===c.field&&(c=c.order?{order:c.order}:!0);return Object.assign({},e,{sort:c})}return e}a=Ca(a.map(function(d){if(Rc(d)||!("op"in d)||q.isString(d.op)&&d.op in Wl)return d;H("Dropping sort property "+ia(d)+\' as unioned domains only support boolean or op "count", "min", and "max".\');return!0}),I);1===a.length?c=a[0]:1<a.length&&(H("Domains that should be unioned has conflicting sort properties. Sort will be set to true."),c=!0);a=Ca(b.map(function(d){return Kb(d)?\nd.data:null}),function(d){return d});return 1===a.length&&null!==a[0]?Object.assign({},{data:a[0],fields:e.map(function(d){return d.field})},c?{sort:c}:{}):Object.assign({},{fields:e},c?{sort:c}:{})}}function Tf(b){if(Kb(b)&&q.isString(b.field))return b.field;var e=q.isArray(b)?!1:"fields"in b&&!("data"in b);if(e){b=$jscomp.makeIterator(b.fields);for(e=b.next();!e.done;e=b.next())if(e=e.value,Kb(e)&&q.isString(e.field))if(!a)var a=e.field;else if(a!==e.field)return H("Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect."),\na;H("Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.");return a}a=q.isArray(b)?!1:"fields"in b&&"data"in b;if(a)return H("Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect."),\na=b.fields[0],q.isString(a)?a:void 0}function Zd(b,e){e=b.component.scales[e].get("domains").map(function(a){Kb(a)&&(a.data=b.lookupDataSource(a.data));return a});return Vl(e)}function qj(b){return Kc(b)||Af(b)?b.children.reduce(function(e,a){return e.concat(qj(a))},rj(b)):rj(b)}function rj(b){return G(b.component.scales).reduce(function(e,a){var c=b.component.scales[a];if(c.merged)return e;var d=c.combine(),f=Object.assign({},d),g=d.name,h=d.type,k=d.selectionExtent,l=d.reverse;f=(delete f.name,\ndelete f.type,delete f.selectionExtent,delete f.domains,delete f.range,delete f.reverse,f);d=d.range;a in Fa?cc(d)&&(d={step:{signal:g+"_step"}}):q.isObject(d)&&Kb(d)&&(d=Object.assign({},d,{data:b.lookupDataSource(d.data)}));a=Zd(b,a);k?(k=Fi(b,k.param,k),c={signal:c.get("type")in $a&&q.isArray(a)&&a[0]>a[1]?"isValid("+k+") && reverse("+k+")":k}):c=null;e.push(Object.assign({},{name:g,type:h},a?{domain:a}:{},c?{domainRaw:c}:{},{range:d},void 0!==l?{reverse:l}:{},f));return e},[])}function sj(b){return"x"===\nb?"width":"y"===b?"height":void 0}function tj(b,e){var a=b.fieldDef(e);if(null!==a&&void 0!==a&&a.bin){var c=a.bin;a=a.field;var d=sj(e),f=b.getName(d);if(q.isObject(c)&&c.binned&&void 0!==c.step)return new Ya(function(){var h=b.scaleName(e);h=\'(domain("\'+h+\'")[1] - domain("\'+h+\'")[0]) / \'+c.step;return b.getSignalName(f)+" / ("+h+")"});if(ka(c)){var g=Df(b,a,c);return new Ya(function(){var h=b.getSignalName(g);h="("+h+".stop - "+h+".start) / "+h+".step";return b.getSignalName(f)+" / ("+h+")"})}}}\nfunction Xl(b,e){for(var a=e.specifiedScales[b],c=e.size,d=e.getScaleComponent(b).get("type"),f=$jscomp.makeIterator(Yl),g=f.next();!g.done;g=f.next())if(g=g.value,void 0!==a[g]){var h=Ke(d,g),k=Yg(b,g);if(h)if(k)H(k);else switch(g){case "range":d=a.range;if(q.isArray(d)){if(b in Fa)return Ob(d.map(function(l){if("width"===l||"height"===l){l=e.getName(l);var m=e.getSignalName.bind(e);return Ya.fromName(m,l)}return l}))}else if(q.isObject(d))return Ob({data:e.requestDataName(la.Main),field:d.field,\nsort:{op:"min",field:e.vgField(b)}});return Ob(d);case "scheme":return Ob(Zl(a[g]))}else H(Ng(d,g,b))}if("x"===b||"y"===b)if(f="x"===b?"width":"height",c=c[f],Cb(c)){if(d in Ha)return Ob({step:c.step});H(Og(f))}c=a.rangeMin;a=a.rangeMax;b=$l(b,e);return(void 0!==c||void 0!==a)&&Ke(d,"rangeMin")&&q.isArray(b)&&2===b.length?Ob([null!==c&&void 0!==c?c:b[0],null!==a&&void 0!==a?a:b[1]]):ab(b)}function Zl(b){return!q.isString(b)&&b.name?Object.assign({},{scheme:b.name},D(b,["name"])):{scheme:b}}function $l(b,\ne){var a=e.size,c=e.config,d=e.mark,f=e.encoding,g=e.getSignalName.bind(e),h=za(f[b]).type;f=e.getScaleComponent(b).get("type");var k=e.specifiedScales[b],l=k.domain;k=k.domainMid;switch(b){case "x":case "y":if(B(["point","band"],f))if("x"===b&&!a.width){if(c=dd(c.view,"width"),Cb(c))return c}else if("y"===b&&!a.height&&(c=dd(c.view,"height"),Cb(c)))return c;c=sj(b);c=e.getName(c);return"y"===b&&f in $a?[Ya.fromName(g,c),0]:[0,Ya.fromName(g,c)];case "size":return g=e.component.scales[b].get("zero"),\ng=uj(d,g,c),a=am(d,a,e,c),f in Wc?bm(g,a,cm(f,c,l,b)):[g,a];case "theta":return[0,2*Math.PI];case "angle":return[0,360];case "radius":return[0,new Ya(function(){var m=e.getSignalName("width"),n=e.getSignalName("height");return"min("+m+","+n+")/2"})];case "strokeWidth":return[c.scale.minStrokeWidth,c.scale.maxStrokeWidth];case "strokeDash":return[[1,0],[4,2],[2,1],[1,1],[1,2,4,2]];case "shape":return"symbol";case "color":case "fill":case "stroke":return"ordinal"===f?"nominal"===h?"category":"ordinal":\nvoid 0!==k?"diverging":"rect"===d||"geoshape"===d?"heatmap":"ramp";case "opacity":case "fillOpacity":case "strokeOpacity":return[c.scale.minOpacity,c.scale.maxOpacity]}throw Error("Scale range undefined for channel "+b);}function cm(b,e,a,c){switch(b){case "quantile":return e.scale.quantileCount;case "quantize":return e.scale.quantizeCount;case "threshold":if(void 0!==a&&q.isArray(a))return a.length+1;H("Domain for "+c+" is required for threshold scale.");return 3}}function bm(b,e,a){var c=function(){var d=\nLb(e),f=Lb(b),g="("+d+" - "+f+") / ("+a+" - 1)";return"sequence("+f+", "+d+" + "+g+", "+g+")"};return T(e)?new Ya(c):{signal:c()}}function uj(b,e,a){if(e)return T(e)?{signal:e.signal+" ? 0 : "+uj(b,!1,a)}:0;switch(b){case "bar":case "tick":return a.scale.minBandSize;case "line":case "trail":case "rule":return a.scale.minStrokeWidth;case "text":return a.scale.minFontSize;case "point":case "square":case "circle":return a.scale.minSize}throw Error(td("size",b));}function am(b,e,a,c){a={x:tj(a,"x"),y:tj(a,\n"y")};switch(b){case "bar":case "tick":if(void 0!==c.scale.maxBandSize)return c.scale.maxBandSize;var d=vj(e,a,c.view);return q.isNumber(d)?d-1:new Ya(function(){return d.signal+" - 1"});case "line":case "trail":case "rule":return c.scale.maxStrokeWidth;case "text":return c.scale.maxFontSize;case "point":case "square":case "circle":if(c.scale.maxSize)return c.scale.maxSize;var f=vj(e,a,c.view);return q.isNumber(f)?Math.pow(.95*f,2):new Ya(function(){return"pow(0.95 * "+f.signal+", 2)"})}throw Error(td("size",\nb));}function vj(b,e,a){var c=Cb(b.width)?b.width.step:Hd(a,"width"),d=Cb(b.height)?b.height.step:Hd(a,"height");return e.x||e.y?new Ya(function(){return"min("+[e.x?e.x.signal:c,e.y?e.y.signal:d].join(", ")+")"}):Math.min(c,d)}function wj(b,e){if(ta(b))for(var a=b.component.scales,c=b.config,d=b.encoding,f=b.markDef,g=b.specifiedScales,h=$jscomp.makeIterator(G(a)),k=h.next();!k.done;k=h.next()){var l=k.value,m=g[l];k=a[l];var n=b.getScaleComponent(l),p=za(d[l]),r=m[e],v=n.get("type"),t=n.get("padding");\nn=n.get("paddingInner");var y=Ke(v,e),w=Yg(l,e);void 0!==r&&(y?w&&H(w):H(Ng(v,e,l)));if(y&&void 0===w)if(void 0!==r)switch(l=p.timeUnit,p=p.type,e){case "domainMax":case "domainMin":qc(m[e])||"temporal"===p||l?k.set(e,{signal:vd(m[e],{type:p,timeUnit:l})},!0):k.set(e,m[e],!0);break;default:k.copyKeyFromObject(e,m)}else m=e in xj?xj[e]({model:b,channel:l,fieldOrDatumDef:p,scaleType:v,scalePadding:t,scalePaddingInner:n,domain:m.domain,markDef:f,config:c}):c.scale[e],void 0!==m&&k.set(e,m,!1)}else yj(b,\ne)}function zj(b){if(ta(b))for(var e=b.component.scales,a=$jscomp.makeIterator(Od),c=a.next();!c.done;c=a.next()){var d=c.value;if(c=e[d])d=Xl(d,b),c.setWithExplicit("range",d)}else yj(b,"range")}function yj(b,e){for(var a=b.component.scales,c=$jscomp.makeIterator(b.children),d=c.next();!d.done;d=c.next()){var f=d.value;"range"===e?zj(f):wj(f,e)}c=$jscomp.makeIterator(G(a));for(f=c.next();!f.done;f=c.next()){f=f.value;var g=void 0,h=$jscomp.makeIterator(b.children);for(d=h.next();!d.done;d=h.next())if(d=\nd.value.component.scales[f])d=d.getWithExplicit(e),g=gc(g,d,e,"scale",ai(function(k,l){switch(e){case "range":if(k.step&&l.step)return k.step-l.step}return 0}));a[f].setWithExplicit(e,g)}}function dm(b,e){var a=e.bin;if(ka(a)){var c=Df(b,e.field,a);return new Ya(function(){return b.getSignalName(c)})}if(Na(a)&&q.isObject(a)&&void 0!==a.step)return{step:a.step}}function em(b,e,a){switch(e.type){case "nominal":case "ordinal":var c;if(Ac(b)||"discrete"===se(b))return"shape"===b&&"ordinal"===e.type&&\nH(ye(b,"ordinal")),"ordinal";if(b in Fa){if(B(["rect","bar","image","rule"],a.type))return"band"}else if("arc"===a.type&&b in Uf)return"band";b=a[fb(b)];return Cc(b)||Qe(e)&&null!==(c=e.axis)&&void 0!==c&&c.tickBand?"band":"point";case "temporal":if(!Ac(b)){if("discrete"===se(b))return H(ye(b,"temporal")),"ordinal";if(K(e)&&e.timeUnit&&Oa(e.timeUnit).utc)return"utc"}return"time";case "quantitative":if(Ac(b)){if(K(e)&&ka(e.bin))return"bin-ordinal"}else if("discrete"===se(b))return H(ye(b,"quantitative")),\n"ordinal";return"linear";case "geojson":return}throw Error(\'Invalid field type "\'+e.type+\'".\');}function Aj(b){if(ta(b))b.component.scales=fm(b);else{for(var e=b.component,a=b.component.scales={},c={},d=b.component.resolve,f=$jscomp.makeIterator(b.children),g=f.next();!g.done;g=f.next()){g=g.value;Aj(g);for(var h=$jscomp.makeIterator(G(g.component.scales)),k=h.next();!k.done;k=h.next()){k=k.value;var l,m;null!==(m=(l=d.scale)[k])&&void 0!==m?m:l[k]=Ui(k,b);if("shared"===d.scale[k]){var n=c[k],p=g.component.scales[k].getWithExplicit("type");\nif(n){var r=Se[n.value],v=Se[p.value];r===v||"ordinal-position"===r&&"time"===v||"ordinal-position"===v&&"time"===r?c[k]=gc(n,p,"type","scale",gm):(d.scale[k]="independent",delete c[k])}else c[k]=p}}}d=$jscomp.makeIterator(G(c));for(k=d.next();!k.done;k=d.next())for(f=k.value,l=b.scaleName(f,!0),a[f]=new $d(l,c[f]),m=$jscomp.makeIterator(b.children),g=m.next();!g.done;g=m.next())if(g=g.value,h=g.component.scales[f])g.renameScale(h.get("name"),l),h.merged=!0;e.scales=a}}function fm(b){var e=b.encoding,\na=b.mark,c=b.markDef;return Od.reduce(function(d,f){var g=za(e[f]);if(g&&a===Bj&&"shape"===f&&"geojson"===g.type)return d;var h=g&&g.scale;if(g&&null!==h&&!1!==h){var k;null!==(k=h)&&void 0!==k?k:h={};var l=h;var m=em(f,g,c);l=l.type;if(Mb[f]){if(void 0!==l)if(vk(f,l)){var n;if(n=K(g))g=g.type,n=!(B(["ordinal","nominal"],g)?void 0===l||l in Ha:"temporal"===g?B([ya.TIME,ya.UTC,void 0],l):"quantitative"===g?B([ya.LOG,ya.POW,ya.SQRT,ya.SYMLOG,ya.QUANTILE,ya.QUANTIZE,ya.THRESHOLD,ya.LINEAR,void 0],l):\n1);n?H(\'FieldDef does not work with "\'+l+\'" scale. We are using "\'+m+\'" scale instead.\'):m=l}else H(\'Channel "\'+f+\'" does not work with "\'+l+\'" scale. We are using "\'+m+\'" scale instead.\')}else m=null;d[f]=new $d(b.scaleName(""+f,!0),{value:m,explicit:h.type===m})}return d},{})}function ta(b){return"unit"===(null===b||void 0===b?void 0:b.type)}function ob(b){return"facet"===(null===b||void 0===b?void 0:b.type)}function Af(b){return"concat"===(null===b||void 0===b?void 0:b.type)}function Kc(b){return"layer"===\n(null===b||void 0===b?void 0:b.type)}function Cj(b){function e(c,d){c instanceof Ra&&!(c.isGenerator||"url"in c.data)&&(b.push(d),d={name:null,source:d.name,transform:[]});if(c instanceof ma)if(c.parent instanceof Ra&&!d.source){var f;d.format=Object.assign({},null!==(f=d.format)&&void 0!==f?f:{},{parse:c.assembleFormatParse()});d.transform.push.apply(d.transform,$jscomp.arrayFromIterable(c.assembleTransforms(!0)))}else d.transform.push.apply(d.transform,$jscomp.arrayFromIterable(c.assembleTransforms()));\nif(c instanceof La)d.name||(d.name="data_"+a++),!d.source||0<d.transform.length?(b.push(d),c.data=d.name):c.data=d.source,b.push.apply(b,$jscomp.arrayFromIterable(c.assemble()));else switch((c instanceof Eb||c instanceof Fb||c instanceof rb||c instanceof sb||c instanceof jb||c instanceof tb||c instanceof ua||c instanceof ub||c instanceof bb||c instanceof Xa||c instanceof Qb||c instanceof Rb||c instanceof Sb||c instanceof Tb||c instanceof Ub||c instanceof Vb||c instanceof cb||c instanceof Wb||c instanceof\nGb)&&d.transform.push(c.assemble()),(c instanceof Ea||c instanceof Ba||c instanceof Sa||c instanceof Aa||c instanceof kb)&&d.transform.push.apply(d.transform,$jscomp.arrayFromIterable(c.assemble())),c instanceof qa&&(d.source&&0===d.transform.length?c.setSource(d.source):c.parent instanceof qa?c.setSource(d.name):(d.name||(d.name="data_"+a++),c.setSource(d.name),1===c.numChildren()&&(b.push(d),d={name:null,source:d.name,transform:[]}))),c.numChildren()){case 0:c instanceof qa&&(!d.source||0<d.transform.length)&&\nb.push(d);break;case 1:e(c.children[0],d);break;default:d.name||(d.name="data_"+a++);var g=d.name;!d.source||0<d.transform.length?b.push(d):g=d.source;c=$jscomp.makeIterator(c.children);for(d=c.next();!d.done;d=c.next())e(d.value,{name:null,source:g,transform:[]})}}var a=0;return e}function hm(b){for(var e=[],a=Cj(e),c=$jscomp.makeIterator(b.children),d=c.next();!d.done;d=c.next())a(d.value,{source:b.name,name:null,transform:[]});return e}function im(b,e){for(var a=[],c=Cj(a),d=0,f=$jscomp.makeIterator(b.sources),\ng=f.next();!g.done;g=f.next()){g=g.value;g.hasName()||(g.dataName="source_"+d++);var h=g.assemble();c(g,h)}c=$jscomp.makeIterator(a);for(d=c.next();!d.done;d=c.next())d=d.value,0===d.transform.length&&delete d.transform;c=0;d=$jscomp.makeIterator(a.entries());for(f=d.next();!f.done;f=d.next()){g=$jscomp.makeIterator(f.value);f=g.next().value;g=g.next().value;var k;0!==(null!==(k=g.transform)&&void 0!==k?k:[]).length||g.source||a.splice(c++,0,a.splice(f,1)[0])}c=$jscomp.makeIterator(a);for(d=c.next();!d.done;d=\nc.next())for(d=$jscomp.makeIterator(null!==(l=d.value.transform)&&void 0!==l?l:[]),f=d.next();!f.done;f=d.next()){f=f.value;var l;"lookup"===f.type&&(f.from=b.outputNodes[f.from].getSource())}b=$jscomp.makeIterator(a);for(d=b.next();!d.done;d=b.next())c=d.value,c.name in e&&(c.values=e[c.name]);return a}function Dj(b,e,a){e="row"===e?"height":"width";return{labels:a,sizeSignal:b.child.component.layoutSize.get(e)?b.child.getSizeSignalRef(e):void 0,axes:[]}}function Ej(b,e){var a=b.child;if(a.component.axes[e]){var c=\nb.component,d=c.layoutHeaders;c=c.resolve;c.axis[e]=Bf(c,e);if("shared"===c.axis[e])for(c="x"===e?"column":"row",d=d[c],e=$jscomp.makeIterator(a.component.axes[e]),a=e.next();!a.done;a=e.next()){a=a.value;var f;var g=a.get("orient");g="top"===g||"left"===g||T(g)?"header":"footer";null!==(f=d[g])&&void 0!==f?f:d[g]=[Dj(b,c,!1)];var h=ld(a,"main",b.config,{header:!0});h&&d[g][0].axes.push(h);a.mainExtracted=!0}}}function Vf(b){b=$jscomp.makeIterator(b.children);for(var e=b.next();!e.done;e=b.next())e.value.parseLayoutSize()}\nfunction ae(b,e){for(var a=Si(e),c=pd(a),d=b.component.resolve,f=b.component.layoutSize,g,h=$jscomp.makeIterator(b.children),k=h.next();!k.done;k=h.next()){var l;k=k.value.component.layoutSize.getWithExplicit(a);var m=null!==(l=d.scale[c])&&void 0!==l?l:Ui(c,b);if("independent"===m&&"step"===k.value){g=void 0;break}if(g){if("independent"===m&&g.value!==k.value){g=void 0;break}g=gc(g,k,a,"")}else g=k}if(g){c=$jscomp.makeIterator(b.children);for(k=c.next();!k.done;k=c.next())d=k.value,b.renameSignal(d.getName(a),\nb.getName(e)),d.component.layoutSize.set(a,"merged",!1);f.setWithExplicit(e,g)}else f.setWithExplicit(e,{explicit:!1,value:void 0})}function jm(b,e){var a=b.config,c=b.getScaleComponent("width"===e?"x":"y");if(c)return b=c.get("type"),c=c.get("range"),b in Ha?(e=dd(a.view,e),cc(c)||Cb(e)?"step":e):af(a.view,e);if(b.hasProjection||"arc"===b.mark)return af(a.view,e);e=dd(a.view,e);return Cb(e)?e.step:e}function Wf(b,e,a){return J(e,Object.assign({},{suffix:"by_"+J(b)},null!==a&&void 0!==a?a:{}))}function Fj(b,\ne){e=$jscomp.makeIterator(e);for(var a=e.next();!a.done;a=e.next()){a=a.value;var c,d,f,g,h=a.data;if(!b.name||!a.hasName()||b.name===a.dataName){var k=null===(c=b.format)||void 0===c?void 0:c.mesh,l=null===(d=h.format)||void 0===d?void 0:d.feature;if(!k||!l){var m=null===(f=b.format)||void 0===f?void 0:f.feature;if(!m&&!l||m===l)if(l=null===(g=h.format)||void 0===g?void 0:g.mesh,!k&&!l||k===l)if("values"in b&&"values"in h){if(wb(b.values,h.values))return a}else if("url"in b&&"url"in h){if(b.url===\nh.url)return a}else if(bi(b)&&b.name===a.dataName)return a}}}return null}function km(b,e){if(b.data||!b.parent){if(null===b.data)return b=new Ra({values:[]}),e.push(b),b;var a=Fj(b.data,e);if(a)return uc(b.data)||(a.data.format=xa({},b.data.format,a.data.format)),!a.hasName()&&b.data.name&&(a.dataName=b.data.name),a;b=new Ra(b.data);e.push(b);return b}return b.parent.component.data.facetRoot?b.parent.component.data.facetRoot:b.parent.component.data.main}function be(b){var e,a,c,d=km(b,b.component.data.sources),\nf=b.component.data,g=f.outputNodes;f=f.outputNodeRefCounts;var h=b.parent?b.parent.component.data.ancestorParse.clone():new Xf,k=b.data;uc(k)?("sequence"in k?d=new Fb(d,k.sequence):"graticule"in k&&(d=new Eb(d,k.graticule)),h.parseNothing=!0):null===(null===k||void 0===k?void 0:null===(e=k.format)||void 0===e?void 0:e.parse)&&(h.parseNothing=!0);d=null!==(a=ma.makeExplicit(d,b,h))&&void 0!==a?a:d;d=new cb(d);k=b.parent&&Kc(b.parent);if((ta(b)||ob(b))&&k){var l;d=null!==(l=Ea.makeFromEncoding(d,b))&&\nvoid 0!==l?l:d}if(0<b.transforms.length)for(var m=0,n=$jscomp.makeIterator(b.transforms),p=n.next();!p.done;p=n.next()){var r=p.value,v=p=void 0;if("calculate"in r)v=d=new jb(d,r),p="derived";else if("filter"in r){var t;v=Nl(r);v=d=null!==(t=ma.makeWithAncestors(d,{},v,h))&&void 0!==t?t:d;d=new sb(d,b,r.filter)}else if("bin"in r)v=d=Ea.makeFromTransform(d,r,b),p="number";else if("timeUnit"in r)p="date",void 0===h.getWithExplicit(r.field).value&&(v={},d=new ma(d,(v[r.field]=p,v)),h.set(r.field,p,!1)),\nv=d=Ba.makeFromTransform(d,r);else if("aggregate"in r)v=d=ua.makeFromTransform(d,r),p="number",nf(b)&&(d=new cb(d));else if("lookup"in r)v=d=ub.make(d,b,r,m++),p="derived";else if("window"in r)v=d=new bb(d,r),p="number";else if("joinaggregate"in r)v=d=new Xa(d,r),p="number";else if("stack"in r)v=d=Aa.makeFromTransform(d,r),p="derived";else if("fold"in r)v=d=new Qb(d,r),p="derived";else if("flatten"in r)v=d=new Rb(d,r),p="derived";else if("pivot"in r)v=d=new Gb(d,r),p="derived";else if("sample"in r)d=\nnew Wb(d,r);else if("impute"in r)v=d=Sa.makeFromTransform(d,r),p="derived";else if("density"in r)v=d=new Sb(d,r),p="derived";else if("quantile"in r)v=d=new Ub(d,r),p="derived";else if("regression"in r)v=d=new Vb(d,r),p="derived";else if("loess"in r)v=d=new Tb(d,r),p="derived";else{H("Ignoring an invalid transform: "+ia(r)+".");continue}if(v&&void 0!==p)for(r=$jscomp.makeIterator(null!==(y=v.producedFields())&&void 0!==y?y:[]),v=r.next();!v.done;v=r.next()){var y;h.set(v.value,p,!1)}}t={};if(ta(b)&&\nb.component.selection)for(y=$jscomp.makeIterator(G(b.component.selection)),m=y.next();!m.done;m=y.next())for(m=$jscomp.makeIterator(b.component.selection[m.value].project.items),n=m.next();!n.done;n=m.next())n=n.value,!n.channel&&1<zc(n.field)&&(t[n.field]="flatten");y=Ol(b);d=null!==(c=ma.makeWithAncestors(d,{},Object.assign({},t,y),h))&&void 0!==c?c:d;ta(b)&&(d=kb.parseAll(d,b),d=tb.parseAll(d,b));if(ta(b)||ob(b)){var w;if(!k){var E;d=null!==(E=Ea.makeFromEncoding(d,b))&&void 0!==E?E:d}d=null!==\n(w=Ba.makeFromEncoding(d,b))&&void 0!==w?w:d;d=jb.parseAllForSortIndex(d,b)}t=b.getDataName(la.Raw);k=new qa(d,t,la.Raw,f);d=g[t]=k;if(ta(b)){var Q,M;if(t=ua.makeFromEncoding(d,b))d=t,nf(b)&&(d=new cb(d));d=null!==(Q=Sa.makeFromEncoding(d,b))&&void 0!==Q?Q:d;d=null!==(M=Aa.makeFromEncoding(d,b))&&void 0!==M?M:d}if(ta(b)){var O;d=null!==(O=rb.make(d,b))&&void 0!==O?O:d}y=b.getDataName(la.Main);t=new qa(d,y,la.Main,f);d=g[y]=t;if(ta(b))for(y=$jscomp.makeIterator(ac(null!==(N=b.component.selection)&&\nvoid 0!==N?N:{})),N=y.next();!N.done;N=y.next()){m=$jscomp.makeIterator(N.value);N=m.next().value;m=m.next().value;var N;n=b.getName("lookup_"+N);b.component.data.outputNodes[n]=m.materialized=new qa(new sb(t,b,{param:N}),n,la.Lookup,b.component.data.outputNodeRefCounts)}y=null;if(ob(b)){var W;N=b.getName("facet");y=d;m=b.facet;n=m.row;p=m.column;if(n&&p){m=null;n=$jscomp.makeIterator([n,p]);for(p=n.next();!p.done;p=n.next())p=p.value,zb(p.sort)&&(m=p.sort,y=m=new Xa(y,{joinaggregate:[{op:void 0===\nm.op?"min":m.op,field:m.field,as:Wf(p,p.sort,{forAs:!0})}],groupby:[J(p)]}));y=m}else y=null;d=null!==(W=y)&&void 0!==W?W:d;y=new La(d,b,N,t.getSource());g[N]=y}return Object.assign({},b.component.data,{outputNodes:g,outputNodeRefCounts:f,raw:k,main:t,facetRoot:y,ancestorParse:h})}function lm(b){return Db.reduce(function(e,a){b.component.scales[a]&&(e[a]=[mm(a,b)]);return e},{})}function nm(b,e){if(b){if(b.length!==e.length)return;for(var a=b.length,c=0;c<a;c++){var d=b[c],f=e[c];if(!!d!==!!f)return;\nif(d&&f){var g=d.getWithExplicit("orient"),h=f.getWithExplicit("orient");if(g.explicit&&h.explicit&&g.value!==h.value)return;b[c]=om(d,f)}}}else return e.map(function(k){return k.clone()});return b}function om(b,e){for(var a={},c=$jscomp.makeIterator(Gj),d=c.next();!d.done;a={$jscomp$loop$prop$prop$458:a.$jscomp$loop$prop$prop$458},d=c.next())a.$jscomp$loop$prop$prop$458=d.value,d=gc(b.getWithExplicit(a.$jscomp$loop$prop$prop$458),e.getWithExplicit(a.$jscomp$loop$prop$prop$458),a.$jscomp$loop$prop$prop$458,\n"axis",function(f){return function(g,h){switch(f.$jscomp$loop$prop$prop$458){case "title":return Bg(g,h);case "gridScale":return{explicit:g.explicit,value:sa(g.value,h.value)}}return Id(g,h,f.$jscomp$loop$prop$prop$458,"axis")}}(a)),b.setWithExplicit(a.$jscomp$loop$prop$prop$458,d);return b}function pm(b,e,a,c,d){if("disable"===e)return void 0!==a;a=a||{};switch(e){case "titleAngle":case "labelAngle":return b===(T(a.labelAngle)?a.labelAngle:Tc(a.labelAngle));case "values":return!!a.values;case "encode":return!!a.encoding||\n!!a.labelAngle;case "title":if(b===Mi(c,d))return!0}return b===a[e]}function mm(b,e){var a,c,d,f,g,h=e.axis(b),k=new Oc,l=za(e.encoding[b]),m=e.mark,n=e.config,p=(null===(a=h)||void 0===a?void 0:a.orient)||(null===(c=n["x"===b?"axisX":"axisY"])||void 0===c?void 0:c.orient)||(null===(d=n.axis)||void 0===d?void 0:d.orient)||("x"===b?"bottom":"left"),r=e.getScaleComponent(b).get("type"),v=Dl(b,r,p,e.config),t=void 0!==h?!h:wf("disable",n.style,null===(f=h)||void 0===f?void 0:f.style,v).configValue;k.set("disable",\nt,void 0!==h);if(t)return k;h=h||{};t=Gl(l,h,b,n.style,v);l={fieldOrDatumDef:l,axis:h,channel:b,model:e,scaleType:r,orient:p,labelAngle:t,mark:m,config:n};m=$jscomp.makeIterator(Gj);for(p=m.next();!p.done;p=m.next()){p=p.value;r=p in Hj?Hj[p](l):Ij[p]?h[p]:void 0;t=void 0!==r;var y=pm(r,p,h,e,b);if(t&&y)k.set(p,r,y);else{var w=Ij[p]&&"values"!==p?wf(p,n.style,h.style,v):{},E=void 0===w.configValue?void 0:w.configValue;w=void 0===w.configFrom?void 0:w.configFrom;var Q=void 0!==E;t&&!Q?k.set(p,r,y):\n("vgAxisConfig"!==w||qm.has(p)&&Q||ad(E)||T(E))&&k.set(p,E,!1)}}var M=null!==(g=h.encoding)&&void 0!==g?g:{};n=Hi.reduce(function(O,N){var W;if(!k.hasAxisPart(N))return O;var U=Ti(null!==(W=M[N])&&void 0!==W?W:{},e);if("labels"===N){var ba,va=e.encoding,Qa=e.config;va=null!==(ba=za(va[b]))&&void 0!==ba?ba:za(va[Ib(b)]);var vb=e.axis(b)||{};ba=vb.format;vb=vb.formatType;U=sc(vb)?Object.assign({},{text:Oe({fieldOrDatumDef:va,field:"datum.value",format:ba,formatType:vb,config:Qa})},U):U}void 0===U||\nha(U)||(O[N]={update:U});return O},{});ha(n)||k.set("encode",n,!!h.encoding||void 0!==h.labelAngle);return k}function rm(b){var e=b.encoding;b=b.size;for(var a=$jscomp.makeIterator(Db),c=a.next();!c.done;c=a.next()){c=c.value;var d=fb(c);Cb(b[d])&&Ab(e[c])&&(delete b[d],H(Og(d)))}return b}function sm(b,e,a){b=Va(b);var c=ea("orient",b,a);b.orient=tm(b.type,e,c);void 0!==c&&c!==b.orient&&H(\'Specified orient "\'+b.orient+\'" overridden with "\'+c+\'".\');if("bar"===b.type&&b.orient&&(c=ea("cornerRadiusEnd",\nb,a),void 0!==c)){for(var d=$jscomp.makeIterator("horizontal"===b.orient&&e.x2||"vertical"===b.orient&&e.y2?["cornerRadius"]:um[b.orient]),f=d.next();!f.done;f=d.next())b[f.value]=c;void 0!==b.cornerRadiusEnd&&delete b.cornerRadiusEnd}void 0===ea("opacity",b,a)&&(c=B([ce,Yf,Zf,$f],b.type)&&!Ue(e)?.7:void 0,b.opacity=c);void 0===ea("cursor",b,a)&&(e=e.href||b.href||ea("href",b,a)?"pointer":b.cursor,b.cursor=e);return b}function vm(b,e,a){if(a.graticule)return!1;e=pc("filled",b,e);b=b.type;return sa(e,\nb!==ce&&b!==de&&b!==ee)}function tm(b,e,a){switch(b){case ce:case Zf:case $f:case Jj:case wm:case xm:return}var c=e.x,d=e.y,f=e.x2;e=e.y2;switch(b){case fe:if(K(c)&&(Na(c.bin)||K(d)&&d.aggregate&&!c.aggregate))break;if(K(d)&&(Na(d.bin)||K(c)&&c.aggregate&&!d.aggregate))return"horizontal";if(e||f){if(a)return a;if(!f&&(K(c)&&"quantitative"===c.type&&!ka(c.bin)||Pe(c)))return"horizontal";if(!e&&(K(d)&&"quantitative"===d.type&&!ka(d.bin)||Pe(d)))break}case ee:if(!(!f||K(c)&&Na(c.bin)||!e||K(d)&&Na(d.bin)))return;\ncase ge:if(e){if(K(d)&&Na(d.bin))return"horizontal";break}else if(f)if(K(c)&&Na(c.bin))break;else return"horizontal";else if(b===ee)if(c&&!d)break;else if(d&&!c)return"horizontal";case de:case Yf:f=Ab(c);e=Ab(d);if(a)return a;if(f&&!e)return"tick"!==b?"horizontal":"vertical";if(!f&&e)return"tick"!==b?"vertical":"horizontal";if(f&&e){a="temporal"===c.type;f="temporal"===d.type;if(a&&!f)return"tick"!==b?"vertical":"horizontal";if(!a&&f)return"tick"!==b?"horizontal":"vertical";if(!c.aggregate&&d.aggregate)return"tick"!==\nb?"vertical":"horizontal";if(c.aggregate&&!d.aggregate)return"tick"!==b?"horizontal":"vertical"}else return}return"vertical"}function ag(b,e){var a=Object,c=a.assign,d=hb(b,{align:"ignore",baseline:"ignore",color:"include",size:"include",orient:"ignore",theta:"ignore"}),f=Ia("x",b,{defaultPos:"mid"}),g=Ia("y",b,{defaultPos:"mid"}),h=Da("size",b),k=Da("angle",b);b=e?{shape:{value:e}}:Da("shape",b);return c.call(a,{},d,f,g,h,k,b)}function ym(b){if(B([de,ge,zm],b.mark)){var e=rh(b.mark,b.encoding);if(0<\ne.length)return Am(b,e)}else if(b.mark===fe&&(e=bg.some(function(a){return ea(a,b.markDef,b.config)}),b.stack&&!b.fieldDef("size")&&e))return Bm(b);return cg(b)}function Am(b,e){return[{name:b.getName("pathgroup"),type:"group",from:{facet:{name:"faceted_path_"+b.requestDataName(la.Main),data:b.requestDataName(la.Main),groupby:e}},encode:{update:{width:{field:{group:"width"}},height:{field:{group:"height"}}}},marks:cg(b,{fromPrefix:"faceted_path_"})}]}function Bm(b){var e=$jscomp.makeIterator(cg(b,\n{fromPrefix:"stack_group_"})).next().value,a=b.scaleName(b.stack.fieldChannel),c=function(l){l=void 0===l?{}:l;return b.vgField(b.stack.fieldChannel,l)},d=function(l,m){m=[c({prefix:"min",suffix:"start",expr:m}),c({prefix:"max",suffix:"start",expr:m}),c({prefix:"min",suffix:"end",expr:m}),c({prefix:"max",suffix:"end",expr:m})];return l+"("+m.map(function(n){return"scale(\'"+a+"\',"+n+")"}).join(",")+")"};if("x"===b.stack.fieldChannel){d=Object.assign({},V(e.encode.update,["y","yc","y2","height"].concat($jscomp.arrayFromIterable(bg))),\n{x:{signal:d("min","datum")},x2:{signal:d("max","datum")},clip:{value:!0}});var f={x:{field:{group:"x"},mult:-1},height:{field:{group:"height"}}};e.encode.update=Object.assign({},D(e.encode.update,["y","yc","y2"]),{height:{field:{group:"height"}}})}else d=Object.assign({},V(e.encode.update,["x","xc","x2","width"]),{y:{signal:d("min","datum")},y2:{signal:d("max","datum")},clip:{value:!0}}),f={y:{field:{group:"y"},mult:-1},width:{field:{group:"width"}}},e.encode.update=Object.assign({},D(e.encode.update,\n["x","xc","x2"]),{width:{field:{group:"width"}}});for(var g=$jscomp.makeIterator(bg),h=g.next();!h.done;h=g.next()){h=h.value;var k=pc(h,b.markDef,b.config);e.encode.update[h]?(d[h]=e.encode.update[h],delete e.encode.update[h]):k&&(d[h]=pa(k));k&&(e.encode.update[h]={value:0})}g=[];b.stack.groupbyChannel&&(h=b.fieldDef(b.stack.groupbyChannel),(k=J(h))&&g.push(k),(null!==h&&void 0!==h&&h.bin||null!==h&&void 0!==h&&h.timeUnit)&&g.push(J(h,{binSuffix:"end"})));d="stroke strokeWidth strokeJoin strokeCap strokeDash strokeDashOffset strokeMiterLimit strokeOpacity".split(" ").reduce(function(l,\nm){if(e.encode.update[m]){var n={};return Object.assign({},l,(n[m]=e.encode.update[m],n))}n=pc(m,b.markDef,b.config);if(void 0!==n){var p={};return Object.assign({},l,(p[m]=pa(n),p))}return l},d);d.stroke&&(d.strokeForeground={value:!0},d.strokeOffset={value:0});return[{type:"group",from:{facet:{data:b.requestDataName(la.Main),name:"stack_group_"+b.requestDataName(la.Main),groupby:g,aggregate:{fields:[c({suffix:"start"}),c({suffix:"start"}),c({suffix:"end"}),c({suffix:"end"})],ops:["min","max","min",\n"max"]}}},encode:{update:d},marks:[{type:"group",encode:{update:f},marks:[e]}]}]}function Cm(b){var e=b.encoding,a=b.stack,c=b.mark,d=b.markDef,f=b.config,g=e.order;if(!(!q.isArray(g)&&nb(g)&&F(g.value)||!g&&F(ea("order",d,f)))){if((q.isArray(g)||K(g))&&!a)return yg(g,{expr:"datum"});if(dc(c)&&(a="horizontal"===d.orient?"y":"x",c=e[a],K(c))){e=c.sort;if(q.isArray(e))return{field:J(c,{prefix:a,suffix:"sort_index",expr:"datum"})};if(zb(e))return{field:J({aggregate:Ue(b.encoding)?e.op:void 0,field:e.field},\n{expr:"datum"})};if(e&&e.encoding)return b=b.fieldDef(e.encoding),{field:J(b,{expr:"datum"}),order:e.order};if(null!==e)return{field:J(c,{binSuffix:b.stack&&b.stack.impute?"mid":void 0,expr:"datum"})}}}}function cg(b,e){e=void 0===e?{fromPrefix:""}:e;var a=b.mark,c=b.markDef,d=b.encoding,f=b.config,g=c.clip;var h=b.getScaleComponent("x");var k=b.getScaleComponent("y");h=h&&h.get("selectionExtent")||k&&k.get("selectionExtent")?!0:void 0;k=b.component.projection;g=sa(g,h,k&&!k.isFit?!0:void 0);h=wg(c);\nd=d.key;k=Cm(b);var l;if(b.component.selection){for(var m=l=G(b.component.selection).length,n=b.parent;n&&0===m;)m=G(n.component.selection).length,n=n.parent;l=m?{interactive:0<l||!!b.encoding.tooltip}:null}else l=null;c=ea("aria",c,f);f=he[a].postEncodingTransform?he[a].postEncodingTransform(b):null;return[Object.assign({},{name:b.getName("marks"),type:he[a].vgMark},g?{clip:!0}:{},h?{style:h}:{},d?{key:d.field}:{},k?{sort:k}:{},l?l:{},!1===c?{aria:c}:{},{from:{data:e.fromPrefix+b.requestDataName(la.Main)},\nencode:{update:he[a].encodeEntry(b)}},f?{transform:f}:{})]}function dg(b,e,a,c,d){if("facet"in b)return new fa(b,e,a,d);if("layer"in b)return new Ma(b,e,a,c,d);if(Nb(b))return new ja(b,e,a,c,d);if("vconcat"in b||"hconcat"in b||"concat"in b)return new Ta(b,e,a,d);throw Error(ve(b));}function Dm(b,e,a,c){a=void 0===a?{}:a;var d=b.config?Lk(b.config):void 0;a=[].concat(b.assembleSelectionData([]),im(b.component.data,a));var f=b.assembleProjections(),g=b.assembleTitle(),h=b.assembleGroupStyle(),k=b.assembleGroupEncodeEntry(!0),\nl=b.assembleLayoutSignals();l=l.filter(function(p){return"width"!==p.name&&"height"!==p.name||void 0===p.value?!0:(e[p.name]=+p.value,!1)});var m=Object.assign({},e),n=e.params;m=(delete m.params,m);return Object.assign({},{$schema:"https://vega.github.io/schema/vega/v5.json"},b.description?{description:b.description}:{},m,g?{title:g}:{},h?{style:h}:{},k?{encode:{update:k}}:{},{data:a},0<f.length?{projections:f}:{},b.assembleGroup([].concat($jscomp.arrayFromIterable(l),$jscomp.arrayFromIterable(b.assembleSelectionTopLevelSignals([])),\n$jscomp.arrayFromIterable(Bh(n)))),d?{config:d}:{},c?{usermeta:c}:{})}Array.prototype.flat||Object.defineProperty(Array.prototype,"flat",{configurable:!0,value:function a(e){var c=isNaN(e)?1:Number(e);return c?Array.prototype.reduce.call(this,function(d,f){return Array.isArray(f)?d.push.apply(d,a.call(f,c-1)):d.push(f),d},[]):Array.prototype.slice.call(this)},writable:!0});Array.prototype.flatMap||Object.defineProperty(Array.prototype,"flatMap",{configurable:!0,value:function(e){return Array.prototype.map.apply(this,\narguments).flat()},writable:!0});var me=function(e,a){a||(a={});"function"===typeof a&&(a={cmp:a});var c="boolean"===typeof a.cycles?a.cycles:!1,d=a.cmp&&function(g){return function(h){return function(k,l){return g({key:k,value:h[k]},{key:l,value:h[l]})}}}(a.cmp),f=[];return function k(h){h&&h.toJSON&&"function"===typeof h.toJSON&&(h=h.toJSON());if(void 0!==h){if("number"==typeof h)return isFinite(h)?""+h:"null";if("object"!==typeof h)return JSON.stringify(h);var l;if(Array.isArray(h)){var m="[";\nfor(l=0;l<h.length;l++)l&&(m+=","),m+=k(h[l])||"null";return m+"]"}if(null===h)return"null";if(-1!==f.indexOf(h)){if(c)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON");}var n=f.push(h)-1,p=Object.keys(h).sort(d&&d(h));m="";for(l=0;l<p.length;l++){var r=p[l],v=k(h[r]);v&&(m&&(m+=","),m+=JSON.stringify(r)+":"+v)}f.splice(n,1);return"{"+m+"}"}}(e)},wb=function d(a,c){if(a===c)return!0;if(a&&c&&"object"==typeof a&&"object"==typeof c){if(a.constructor!==c.constructor)return!1;\nvar f;if(Array.isArray(a)){var g=a.length;if(g!=c.length)return!1;for(f=g;0!==f--;)if(!d(a[f],c[f]))return!1;return!0}if(a.constructor===RegExp)return a.source===c.source&&a.flags===c.flags;if(a.valueOf!==Object.prototype.valueOf)return a.valueOf()===c.valueOf();if(a.toString!==Object.prototype.toString)return a.toString()===c.toString();var h=Object.keys(a);g=h.length;if(g!==Object.keys(c).length)return!1;for(f=g;0!==f--;)if(!Object.prototype.hasOwnProperty.call(c,h[f]))return!1;for(f=g;0!==f--;)if(g=\nh[f],!d(a[g],c[g]))return!1;return!0}return a!==a&&c!==c},Y=function(a){var c={exports:{}};return a(c,c.exports),c.exports}(function(a){var c=function(){function d(n,p){return null!=p&&n instanceof p}function f(n,p,r,v,t){function y(M,O){if(null===M)return null;if(0===O||"object"!=typeof M)return M;if(d(M,k))var N=new k;else if(d(M,l))N=new l;else if(d(M,m))N=new m(function(Qa,vb){M.then(function(eg){Qa(y(eg,O-1))},function(eg){vb(y(eg,O-1))})});else if(f.__isArray(M))N=[];else if(f.__isRegExp(M))N=\nnew RegExp(M.source,h(M)),M.lastIndex&&(N.lastIndex=M.lastIndex);else if(f.__isDate(M))N=new Date(M.getTime());else{if(Q&&Buffer.isBuffer(M))return N=Buffer.allocUnsafe?Buffer.allocUnsafe(M.length):new Buffer(M.length),M.copy(N),N;if(d(M,Error))N=Object.create(M);else if("undefined"==typeof v){var W=Object.getPrototypeOf(M);N=Object.create(W)}else N=Object.create(v),W=v}if(p){var U=w.indexOf(M);if(-1!=U)return E[U];w.push(M);E.push(N)}d(M,k)&&M.forEach(function(Qa,vb){vb=y(vb,O-1);Qa=y(Qa,O-1);N.set(vb,\nQa)});d(M,l)&&M.forEach(function(Qa){Qa=y(Qa,O-1);N.add(Qa)});for(var ba in M){var va;W&&(va=Object.getOwnPropertyDescriptor(W,ba));va&&null==va.set||(N[ba]=y(M[ba],O-1))}if(Object.getOwnPropertySymbols)for(U=Object.getOwnPropertySymbols(M),ba=0;ba<U.length;ba++)if(va=U[ba],W=Object.getOwnPropertyDescriptor(M,va),!W||W.enumerable||t)N[va]=y(M[va],O-1),W.enumerable||Object.defineProperty(N,va,{enumerable:!1});if(t)for(U=Object.getOwnPropertyNames(M),ba=0;ba<U.length;ba++)va=U[ba],W=Object.getOwnPropertyDescriptor(M,\nva),W&&W.enumerable||(N[va]=y(M[va],O-1),Object.defineProperty(N,va,{enumerable:!1}));return N}"object"===typeof p&&(r=p.depth,v=p.prototype,t=p.includeNonEnumerable,p=p.circular);var w=[],E=[],Q="undefined"!=typeof Buffer;"undefined"==typeof p&&(p=!0);"undefined"==typeof r&&(r=Infinity);return y(n,r)}function g(n){return Object.prototype.toString.call(n)}function h(n){var p="";n.global&&(p+="g");n.ignoreCase&&(p+="i");n.multiline&&(p+="m");return p}try{var k=Map}catch(n){k=function(){}}try{var l=\nSet}catch(n){l=function(){}}try{var m=Promise}catch(n){m=function(){}}f.clonePrototype=function(n){if(null===n)return null;var p=function(){};p.prototype=n;return new p};f.__objToStr=g;f.__isDate=function(n){return"object"===typeof n&&"[object Date]"===g(n)};f.__isArray=function(n){return"object"===typeof n&&"[object Array]"===g(n)};f.__isRegExp=function(n){return"object"===typeof n&&"[object RegExp]"===g(n)};f.__getRegExpFlags=h;return f}();a.exports&&(a.exports=c)});Set.prototype.toJSON=function(){return"Set("+\n[].concat($jscomp.arrayFromIterable(this)).map(function(a){return me(a)}).join(",")+")"};var ia=me,G=Object.keys,Pa=Object.values,ac=Object.entries,ng=42,re={theta:1,theta2:1,radius:1,radius2:1},fg={longitude:1,longitude2:1,latitude:1,latitude2:1},Em=G(fg),Kj=Object.assign({},{x:1,y:1,x2:1,y2:1},re,fg,{color:1,fill:1,stroke:1,opacity:1,fillOpacity:1,strokeOpacity:1,strokeWidth:1,strokeDash:1,size:1,angle:1,shape:1,order:1,text:1,detail:1,key:1,tooltip:1,href:1,url:1,description:1}),Lj={row:1,column:1,\nfacet:1},ib=G(Lj),Ed=Object.assign({},Kj,Lj),Ak=G(Ed),ie=Object.assign({},Ed),Fm=(delete ie.order,delete ie.detail,delete ie.tooltip,ie),je=Object.assign({},Fm),Gm=(delete je.row,delete je.column,delete je.facet,je),Hm="x2 y2 latitude2 longitude2 theta2 radius2".split(" "),db=Object.assign({},Kj),We=(delete db.x,delete db.y,delete db.x2,delete db.y2,delete db.latitude,delete db.longitude,delete db.latitude2,delete db.longitude2,delete db.theta,delete db.theta2,delete db.radius,delete db.radius2,db),\nSk=G(We),Fa={x:1,y:1},Db=G(Fa),Uf={theta:1,radius:1},Im=G(Uf),Xb=Object.assign({},We),Mj=(delete Xb.text,delete Xb.tooltip,delete Xb.href,delete Xb.url,delete Xb.description,delete Xb.detail,delete Xb.key,delete Xb.order,Xb),Jm=G(Mj),Mb=Object.assign({},Fa,Uf,Mj),Od=G(Mb),rg={arc:"always",area:"always",bar:"always",circle:"always",geoshape:"always",image:"always",line:"always",rule:"always",point:"always",rect:"always",square:"always",trail:"always",text:"always",tick:"always"},Nj=Object.assign({},\nrg),fk=(delete Nj.geoshape,Nj),gk={argmax:1,argmin:1,average:1,count:1,distinct:1,product:1,max:1,mean:1,median:1,min:1,missing:1,q1:1,q3:1,ci0:1,ci1:1,stderr:1,stdev:1,stdevp:1,sum:1,valid:1,values:1,variance:1,variancep:1},Wl={count:1,min:1,max:1},$g=["count","valid","missing","distinct"],Vk=["count","sum","distinct","valid","missing"],Ul=q.toSet("mean average median q1 q3 min max".split(" ")),pl=G({aria:1,description:1,ariaRole:1,ariaRoleDescription:1,blend:1,opacity:1,fill:1,fillOpacity:1,stroke:1,\nstrokeCap:1,strokeWidth:1,strokeOpacity:1,strokeDash:1,strokeDashOffset:1,strokeJoin:1,strokeOffset:1,strokeMiterLimit:1,startAngle:1,endAngle:1,padAngle:1,innerRadius:1,outerRadius:1,size:1,shape:1,interpolate:1,tension:1,orient:1,align:1,baseline:1,text:1,dir:1,dx:1,dy:1,ellipsis:1,limit:1,radius:1,theta:1,angle:1,font:1,fontSize:1,fontWeight:1,fontStyle:1,lineBreak:1,lineHeight:1,cursor:1,href:1,tooltip:1,cornerRadius:1,cornerRadiusTopLeft:1,cornerRadiusTopRight:1,cornerRadiusBottomLeft:1,cornerRadiusBottomRight:1,\naspect:1,width:1,height:1,url:1,smooth:1}),nl={arc:1,area:1,group:1,image:1,line:1,path:1,rect:1,rule:1,shape:1,symbol:1,text:1,trail:1},bg=["cornerRadius","cornerRadiusTopLeft","cornerRadiusTopRight","cornerRadiusBottomLeft","cornerRadiusBottomRight"],Oj=q.logger(q.Warn),Bc=Oj,Rg="january february march april may june july august september october november december".split(" "),mk=Rg.map(function(a){return a.substr(0,3)}),Sg="sunday monday tuesday wednesday thursday friday saturday".split(" "),ok=\nSg.map(function(a){return a.substr(0,3)}),oh={year:1,quarter:1,month:1,week:1,day:1,dayofyear:1,date:1,hours:1,minutes:1,seconds:1,milliseconds:1},ze=G(oh),qk={"year-month":"%b %Y ","year-month-date":"%b %d, %Y "},ya={LINEAR:"linear",LOG:"log",POW:"pow",SQRT:"sqrt",SYMLOG:"symlog",IDENTITY:"identity",SEQUENTIAL:"sequential",TIME:"time",UTC:"utc",QUANTILE:"quantile",QUANTIZE:"quantize",THRESHOLD:"threshold",BIN_ORDINAL:"bin-ordinal",ORDINAL:"ordinal",POINT:"point",BAND:"band"},Se={linear:"numeric",\nlog:"numeric",pow:"numeric",sqrt:"numeric",symlog:"numeric",identity:"numeric",sequential:"numeric",time:"time",utc:"time",ordinal:"ordinal","bin-ordinal":"bin-ordinal",point:"ordinal-position",band:"ordinal-position",quantile:"discretizing",quantize:"discretizing",threshold:"discretizing"},Pj={linear:0,log:1,pow:1,sqrt:1,symlog:1,identity:1,sequential:1,time:0,utc:0,point:10,band:11,ordinal:0,"bin-ordinal":0,quantile:0,quantize:0,threshold:0},Qj="linear log pow sqrt symlog time utc".split(" "),mb=\nq.toSet(Qj),El=q.toSet(["linear","log","pow","sqrt","symlog"]),Wc=q.toSet(["quantile","quantize","threshold"]),Km=Qj.concat(["quantile","quantize","threshold","sequential","identity"]),$a=q.toSet(Km),Ha=q.toSet(["ordinal","bin-ordinal","point","band"]),wc=Object.assign({},{type:1,domain:1,domainMax:1,domainMin:1,domainMid:1,align:1,range:1,rangeMax:1,rangeMin:1,scheme:1,bins:1,reverse:1,round:1,clamp:1,nice:1,base:1,exponent:1,constant:1,interpolate:1,zero:1,padding:1,paddingInner:1,paddingOuter:1}),\nLm=(delete wc.type,delete wc.domain,delete wc.range,delete wc.rangeMax,delete wc.rangeMin,delete wc.scheme,wc),Mm=G(Lm),Ua={arc:"arc",area:"area",bar:"bar",image:"image",line:"line",point:"point",rect:"rect",rule:"rule",text:"text",tick:"tick",trail:"trail",circle:"circle",square:"square",geoshape:"geoshape"},Rj=Ua.arc,ge=Ua.area,fe=Ua.bar,xm=Ua.image,de=Ua.line,ce=Ua.point,wm=Ua.rect,ee=Ua.rule,Jj=Ua.text,Yf=Ua.tick,zm=Ua.trail,Zf=Ua.circle,$f=Ua.square,Bj=Ua.geoshape,Sj=G(Ua);q.toSet(Sj);var Nm=\n[].concat($jscomp.arrayFromIterable("stroke strokeWidth strokeDash strokeDashOffset strokeOpacity strokeJoin strokeMiterLimit".split(" ")),$jscomp.arrayFromIterable(["fill","fillOpacity"])),Lh=G({color:1,filled:1,invalid:1,order:1,radius2:1,theta2:1,timeUnitBandSize:1,timeUnitBandPosition:1}),Ih=G({mark:1,arc:1,area:1,bar:1,circle:1,image:1,line:1,point:1,rect:1,rule:1,square:1,text:1,tick:1,trail:1,geoshape:1}),um={horizontal:["cornerRadiusTopRight","cornerRadiusBottomRight"],vertical:["cornerRadiusTopLeft",\n"cornerRadiusTopRight"]},nh={x:1,y:1,color:1,fill:1,stroke:1,strokeWidth:1,size:1,shape:1,fillOpacity:1,strokeOpacity:1,opacity:1,text:1},Tj=function(a,c){switch(c.fieldTitle){case "plain":return a.field;case "functional":c=a.aggregate;var d=a.bin,f=a.timeUnit;a=a.field;$b(c)?c=a+" for argmax("+c.argmax+")":Jb(c)?c=a+" for argmin("+c.argmin+")":(f=Oa(f),c=(c=c||(null===f||void 0===f?void 0:f.unit)||(null===f||void 0===f?void 0:f.maxbins)&&"timeunit"||ka(d)&&"bin")?c.toUpperCase()+"("+a+")":a);return c;\ndefault:return xk(a,c)}},$c=Tj,Gc={compatible:!0},Gi={labelAlign:{part:"labels",vgProp:"align"},labelBaseline:{part:"labels",vgProp:"baseline"},labelColor:{part:"labels",vgProp:"fill"},labelFont:{part:"labels",vgProp:"font"},labelFontSize:{part:"labels",vgProp:"fontSize"},labelFontStyle:{part:"labels",vgProp:"fontStyle"},labelFontWeight:{part:"labels",vgProp:"fontWeight"},labelOpacity:{part:"labels",vgProp:"opacity"},labelOffset:null,labelPadding:null,gridColor:{part:"grid",vgProp:"stroke"},gridDash:{part:"grid",\nvgProp:"strokeDash"},gridDashOffset:{part:"grid",vgProp:"strokeDashOffset"},gridOpacity:{part:"grid",vgProp:"opacity"},gridWidth:{part:"grid",vgProp:"strokeWidth"},tickColor:{part:"ticks",vgProp:"stroke"},tickDash:{part:"ticks",vgProp:"strokeDash"},tickDashOffset:{part:"ticks",vgProp:"strokeDashOffset"},tickOpacity:{part:"ticks",vgProp:"opacity"},tickSize:null,tickWidth:{part:"ticks",vgProp:"strokeWidth"}},Hi=["domain","grid","labels","ticks","title"],Bl={grid:"grid",gridCap:"grid",gridColor:"grid",\ngridDash:"grid",gridDashOffset:"grid",gridOpacity:"grid",gridScale:"grid",gridWidth:"grid",orient:"main",bandPosition:"both",aria:"main",description:"main",domain:"main",domainCap:"main",domainColor:"main",domainDash:"main",domainDashOffset:"main",domainOpacity:"main",domainWidth:"main",format:"main",formatType:"main",labelAlign:"main",labelAngle:"main",labelBaseline:"main",labelBound:"main",labelColor:"main",labelFlush:"main",labelFlushOffset:"main",labelFont:"main",labelFontSize:"main",labelFontStyle:"main",\nlabelFontWeight:"main",labelLimit:"main",labelLineHeight:"main",labelOffset:"main",labelOpacity:"main",labelOverlap:"main",labelPadding:"main",labels:"main",labelSeparation:"main",maxExtent:"main",minExtent:"main",offset:"both",position:"main",tickCap:"main",tickColor:"main",tickDash:"main",tickDashOffset:"main",tickMinStep:"both",tickOffset:"both",tickOpacity:"main",tickRound:"both",ticks:"main",tickSize:"main",tickWidth:"both",title:"main",titleAlign:"main",titleAnchor:"main",titleAngle:"main",\ntitleBaseline:"main",titleColor:"main",titleFont:"main",titleFontSize:"main",titleFontStyle:"main",titleFontWeight:"main",titleLimit:"main",titleLineHeight:"main",titleOpacity:"main",titlePadding:"main",titleX:"main",titleY:"main",encode:"both",scale:"both",tickBand:"both",tickCount:"both",tickExtra:"both",translate:"both",values:"both",zindex:"both"},Uj={orient:1,aria:1,bandPosition:1,description:1,domain:1,domainCap:1,domainColor:1,domainDash:1,domainDashOffset:1,domainOpacity:1,domainWidth:1,format:1,\nformatType:1,grid:1,gridCap:1,gridColor:1,gridDash:1,gridDashOffset:1,gridOpacity:1,gridWidth:1,labelAlign:1,labelAngle:1,labelBaseline:1,labelBound:1,labelColor:1,labelFlush:1,labelFlushOffset:1,labelFont:1,labelFontSize:1,labelFontStyle:1,labelFontWeight:1,labelLimit:1,labelLineHeight:1,labelOffset:1,labelOpacity:1,labelOverlap:1,labelPadding:1,labels:1,labelSeparation:1,maxExtent:1,minExtent:1,offset:1,position:1,tickBand:1,tickCap:1,tickColor:1,tickCount:1,tickDash:1,tickDashOffset:1,tickExtra:1,\ntickMinStep:1,tickOffset:1,tickOpacity:1,tickRound:1,ticks:1,tickSize:1,tickWidth:1,title:1,titleAlign:1,titleAnchor:1,titleAngle:1,titleBaseline:1,titleColor:1,titleFont:1,titleFontSize:1,titleFontStyle:1,titleFontWeight:1,titleLimit:1,titleLineHeight:1,titleOpacity:1,titlePadding:1,titleX:1,titleY:1,translate:1,values:1,zindex:1},Ij=Object.assign({},Uj,{style:1,labelExpr:1,encoding:1}),Jh=G({axis:1,axisBand:1,axisBottom:1,axisDiscrete:1,axisLeft:1,axisPoint:1,axisQuantitative:1,axisRight:1,axisTemporal:1,\naxisTop:1,axisX:1,axisXBand:1,axisXDiscrete:1,axisXPoint:1,axisXQuantitative:1,axisXTemporal:1,axisY:1,axisYBand:1,axisYDiscrete:1,axisYPoint:1,axisYQuantitative:1,axisYTemporal:1}),cd=function(a,c){this.name=a;this.run=c};cd.prototype.hasMatchingType=function(a){return Nb(a)?(a=a.mark,(yb(a)?a.type:a)===this.name):!1};var Om=new cd("boxplot",vh),Pm=new cd("errorbar",xh),Qm=new cd("errorband",zh),Ah={};Ye("boxplot",vh,["box","median","outliers","rule","ticks"]);Ye("errorbar",xh,["ticks","rule"]);\nYe("errorband",zh,["band","borders"]);var Nk=["gradientHorizontalMaxLength","gradientHorizontalMinLength","gradientVerticalMaxLength","gradientVerticalMinLength","unselectedOpacity"],Vj={titleAlign:"align",titleAnchor:"anchor",titleAngle:"angle",titleBaseline:"baseline",titleColor:"color",titleFont:"font",titleFontSize:"fontSize",titleFontStyle:"fontStyle",titleFontWeight:"fontWeight",titleLimit:"limit",titleLineHeight:"lineHeight",titleOrient:"orient",titlePadding:"offset"},Qi={labelAlign:"align",\nlabelAnchor:"anchor",labelAngle:"angle",labelBaseline:"baseline",labelColor:"color",labelFont:"font",labelFontSize:"fontSize",labelFontStyle:"fontStyle",labelFontWeight:"fontWeight",labelLimit:"limit",labelLineHeight:"lineHeight",labelOrient:"orient",labelPadding:"offset"},Rm=G(Vj),Hl=G(Qi),Kh=G({header:1,headerRow:1,headerColumn:1,headerFacet:1}),Zi="size shape fill stroke strokeDash strokeWidth opacity".split(" "),Gk=["background","padding"],Ik=G({align:1,bounds:1,center:1,columns:1,spacing:1}),\nJk={background:"white",padding:5,timeFormat:"%b %d, %Y",countTitle:"Count of Records",view:{continuousWidth:200,continuousHeight:200,step:20},mark:{color:"#4c78a8",invalid:"filter",timeUnitBandSize:1},arc:{},area:{},bar:{binSpacing:1,continuousBandSize:5,timeUnitBandPosition:.5},circle:{},geoshape:{},image:{},line:{},point:{},rect:{binSpacing:0,continuousBandSize:5,timeUnitBandPosition:.5},rule:{color:"black"},square:{},text:{color:"black"},tick:{thickness:1},trail:{},boxplot:{size:14,extent:1.5,\nbox:{},median:{color:"white"},outliers:{},rule:{},ticks:null},errorbar:{center:"mean",rule:!0,ticks:!1},errorband:{band:{opacity:.3},borders:!1},scale:{pointPadding:.5,barBandPaddingInner:.1,rectBandPaddingInner:0,minBandSize:2,minFontSize:8,maxFontSize:40,minOpacity:.3,maxOpacity:.8,minSize:9,minStrokeWidth:1,maxStrokeWidth:4,quantileCount:4,quantizeCount:4},projection:{},legend:{gradientHorizontalMaxLength:200,gradientHorizontalMinLength:100,gradientVerticalMaxLength:200,gradientVerticalMinLength:64,\nunselectedOpacity:.35},header:{titlePadding:10,labelPadding:10},headerColumn:{},headerRow:{},headerFacet:{},selection:{point:{on:"click",fields:["_vgsid_"],toggle:"event.shiftKey",resolve:"global",clear:"dblclick"},interval:{on:"[mousedown, window:mouseup] > window:mousemove!",encodings:["x","y"],translate:"[mousedown, window:mouseup] > window:mousemove!",zoom:"wheel!",mark:{fill:"#333",fillOpacity:.125,stroke:"white"},resolve:"global",clear:"dblclick"}},style:{},title:{},facet:{spacing:20},concat:{spacing:20}},\nYb="#4c78a8 #f58518 #e45756 #72b7b2 #54a24b #eeca3b #b279a2 #ff9da6 #9d755d #bab0ac".split(" "),Hh={text:11,guideLabel:10,guideTitle:11,groupTitle:13,groupSubtitle:12},Gh={blue:Yb[0],orange:Yb[1],red:Yb[2],teal:Yb[3],green:Yb[4],yellow:Yb[5],purple:Yb[6],pink:Yb[7],brown:Yb[8],gray0:"#000",gray1:"#111",gray2:"#222",gray3:"#333",gray4:"#444",gray5:"#555",gray6:"#666",gray7:"#777",gray8:"#888",gray9:"#999",gray10:"#aaa",gray11:"#bbb",gray12:"#ccc",gray13:"#ddd",gray14:"#eee",gray15:"#fff"},Kk=[].concat($jscomp.arrayFromIterable(Ih),\n$jscomp.arrayFromIterable(Jh),$jscomp.arrayFromIterable(Kh),"background padding legend lineBreak scale style title view".split(" ")),Ok=["view"].concat($jscomp.arrayFromIterable(Sj)),Mk="color fontSize background padding facet concat numberFormat timeFormat countTitle header axisQuantitative axisTemporal axisDiscrete axisPoint axisXBand axisXPoint axisXDiscrete axisXQuantitative axisXTemporal axisYBand axisYPoint axisYDiscrete axisYQuantitative axisYTemporal scale selection overlay".split(" "),Pk=\nObject.assign({},{view:["continuousWidth","continuousHeight","discreteWidth","discreteHeight","step"]},{area:["line","point"],bar:["binSpacing","continuousBandSize","discreteBandSize"],rect:["binSpacing","continuousBandSize","discreteBandSize"],line:["point"],tick:["bandSize","thickness"]}),wa=function(){};wa.prototype.map=function(a,c){return"facet"in a?this.mapFacet(a,c):"repeat"in a?this.mapRepeat(a,c):"hconcat"in a?this.mapHConcat(a,c):"vconcat"in a?this.mapVConcat(a,c):"concat"in a?this.mapConcat(a,\nc):this.mapLayerOrUnit(a,c)};wa.prototype.mapLayerOrUnit=function(a,c){if("layer"in a)return this.mapLayer(a,c);if(Nb(a))return this.mapUnit(a,c);throw Error(ve(a));};wa.prototype.mapLayer=function(a,c){var d=this;return Object.assign({},a,{layer:a.layer.map(function(f){return d.mapLayerOrUnit(f,c)})})};wa.prototype.mapHConcat=function(a,c){var d=this;return Object.assign({},a,{hconcat:a.hconcat.map(function(f){return d.map(f,c)})})};wa.prototype.mapVConcat=function(a,c){var d=this;return Object.assign({},\na,{vconcat:a.vconcat.map(function(f){return d.map(f,c)})})};wa.prototype.mapConcat=function(a,c){var d=this,f=Object.assign({},a);a=a.concat;f=(delete f.concat,f);return Object.assign({},f,{concat:a.map(function(g){return d.map(g,c)})})};wa.prototype.mapFacet=function(a,c){return Object.assign({},a,{spec:this.map(a.spec,c)})};wa.prototype.mapRepeat=function(a,c){return Object.assign({},a,{spec:this.map(a.spec,c)})};var Uk={zero:1,center:1,normalize:1},Rk=new Set([Rj,fe,ge,ee,ce,Zf,$f,de,Jj,Yf]),Tk=\nnew Set([fe,ge,Rj]),gg=function(){S(this,"name","path-overlay")};gg.prototype.hasMatchingType=function(a,c){if(Nb(a)){var d=a.mark;a=a.encoding;d=yb(d)?d:{type:d};switch(d.type){case "line":case "rule":case "trail":return!!bf(d,c[d.type],a);case "area":return!!bf(d,c[d.type],a)||!!Oh(d,c[d.type])}}return!1};gg.prototype.run=function(a,c,d){var f=c.config,g=Object.assign({},a),h=a.params,k=a.projection,l=a.mark;a=a.encoding;g=(delete g.params,delete g.projection,delete g.mark,delete g.encoding,g);\na=Fd(a,f);l=yb(l)?l:{type:l};var m=bf(l,f[l.type],a),n="area"===l.type&&Oh(l,f[l.type]),p=Object,r=p.assign;var v=Object.assign({},"area"===l.type&&void 0===l.opacity&&void 0===l.fillOpacity?{opacity:.7}:{},l);v=Object.assign({},v);v=(delete v.point,delete v.line,v);v=1<G(v).length?v:v.type;h=[r.call(p,{},h?{params:h}:{},{mark:v,encoding:D(a,["shape"])})];r=Nh(l,a);p=a;r&&(p=r.fieldChannel,r=r.offset,v={},p=Object.assign({},a,(v[p]=Object.assign({},a[p],r?{stack:r}:{}),v)));n&&h.push(Object.assign({},\nk?{projection:k}:{},{mark:Object.assign({},{type:"line"},V(l,["clip","interpolate","tension","tooltip"]),n),encoding:p}));m&&h.push(Object.assign({},k?{projection:k}:{},{mark:Object.assign({},{type:"point",opacity:1,filled:!0},V(l,["clip","tooltip"]),m),encoding:p}));k=Object.assign({},g,{layer:h});g=Object;a=g.assign;l=$jscomp.makeIterator(["line","area","rule","trail"]);for(m=l.next();!m.done;m=l.next())m=m.value,f[m]&&(n={},f=Object.assign({},f,(n[m]=D(f[m],["point","line"]),n)));return d(k,a.call(g,\n{},c,{config:f}))};var hg=function(){S(this,"name","RuleForRangedLine")};hg.prototype.hasMatchingType=function(a){if(Nb(a)){var c=a.encoding;a=a.mark;if("line"===a||yb(a)&&"line"===a.type){a=$jscomp.makeIterator(Hm);for(var d=a.next();!d.done;d=a.next()){d=d.value;var f=oc(d);f=c[f];if(c[d]&&(K(f)&&!Na(f.bin)||ec(f)))return!0}}}return!1};hg.prototype.run=function(a,c,d){var f=a.encoding,g=a.mark,h=!!f.x2;H("Line mark is for continuous lines and thus cannot be used with "+(h&&f.y2?"x2 and y2":h?"x2":\n"y2")+". We will use the rule mark (line segments) instead.");console.log(g);return d(Object.assign({},a,{mark:q.isObject(g)?Object.assign({},g,{type:"rule"}):"rule"}),c)};var lb=function(a){for(var c=[],d=0;d<arguments.length;++d)c[d-0]=arguments[d];c=wa.apply(this,[].concat($jscomp.arrayFromIterable(c)))||this;S(c,"nonFacetUnitNormalizers",[Om,Pm,Qm,new gg,new hg]);return c};$jscomp.inherits(lb,wa);lb.prototype.map=function(a,c){if(Nb(a)){var d=tc(a.encoding,"row"),f=tc(a.encoding,"column"),g=tc(a.encoding,\n"facet");if(d||f||g)return this.mapFacetedUnit(a,c)}return wa.prototype.map.call(this,a,c)};lb.prototype.mapUnit=function(a,c){var d=c.parentEncoding,f=c.parentProjection,g=cf(a.encoding,c.repeater);a=Object.assign({},a,g?{encoding:g}:{});if(d||f)return this.mapUnitWithParentEncodingOrProjection(a,c);d=this.mapLayerOrUnit.bind(this);f=$jscomp.makeIterator(this.nonFacetUnitNormalizers);for(g=f.next();!g.done;g=f.next())if(g=g.value,g.hasMatchingType(a,c.config))return g.run(a,c,d);return a};lb.prototype.mapRepeat=\nfunction(a,c){return!q.isArray(a.repeat)&&a.repeat.layer?this.mapLayerRepeat(a,c):this.mapNonLayerRepeat(a,c)};lb.prototype.mapLayerRepeat=function(a,c){var d=this,f=Object.assign({},a),g=a.repeat,h=a.spec;f=(delete f.repeat,delete f.spec,f);var k=g.row,l=g.column;g=g.layer;var m=void 0===c.repeater?{}:c.repeater,n=void 0===c.repeaterPrefix?"":c.repeaterPrefix;return k||l?this.mapRepeat(Object.assign({},a,{repeat:Object.assign({},k?{row:k}:{},l?{column:l}:{}),spec:{repeat:{layer:g},spec:h}}),c):Object.assign({},\nf,{layer:g.map(function(p){var r=Object.assign({},m,{layer:p});p=(h.name||"")+n+"child__layer_"+oa(p);r=d.mapLayerOrUnit(h,Object.assign({},c,{repeater:r,repeaterPrefix:p}));r.name=p;return r})})};lb.prototype.mapNonLayerRepeat=function(a,c){var d,f=a,g=Object.assign({},f),h=f.repeat,k=f.spec;f=f.data;g=(delete g.repeat,delete g.spec,delete g.data,g);!q.isArray(h)&&a.columns&&(a=D(a,["columns"]),H(Jg("repeat")));var l=[],m=void 0===c.repeater?{}:c.repeater,n=void 0===c.repeaterPrefix?"":c.repeaterPrefix,\np=!q.isArray(h)&&h.row||[m?m.row:null],r=!q.isArray(h)&&h.column||[m?m.column:null],v=q.isArray(h)&&h||[m?m.repeat:null];v=$jscomp.makeIterator(v);for(var t=v.next();!t.done;t=v.next()){t=t.value;for(var y=$jscomp.makeIterator(p),w=y.next();!w.done;w=y.next()){w=w.value;for(var E=$jscomp.makeIterator(r),Q=E.next();!Q.done;Q=E.next()){var M=Q.value;Q={repeat:t,row:w,column:M,layer:m.layer};M=(k.name||"")+n+"child__"+(q.isArray(h)?""+oa(t):(h.row?"row_"+oa(w):"")+(h.column?"column_"+oa(M):""));Q=this.map(k,\nObject.assign({},c,{repeater:Q,repeaterPrefix:M}));Q.name=M;l.push(D(Q,["data"]))}}}a=q.isArray(h)?a.columns:h.column?h.column.length:1;return Object.assign({},{data:null!==(d=k.data)&&void 0!==d?d:f,align:"all"},g,{columns:a,concat:l})};lb.prototype.mapFacet=function(a,c){Zc(a.facet)&&a.columns&&(a=D(a,["columns"]),H(Jg("facet")));return wa.prototype.mapFacet.call(this,a,c)};lb.prototype.mapUnitWithParentEncodingOrProjection=function(a,c){var d=a.encoding,f=c.parentEncoding,g=c.config,h=Uh({parentProjection:c.parentProjection,\nprojection:a.projection});c=Th({parentEncoding:f,encoding:cf(d,c.repeater)});return this.mapUnit(Object.assign({},a,h?{projection:h}:{},c?{encoding:c}:{}),{config:g})};lb.prototype.mapFacetedUnit=function(a,c){var d=a.encoding,f=Object.assign({},d),g=d.row,h=d.column,k=d.facet,l=(delete f.row,delete f.column,delete f.facet,f),m=Object.assign({},a);f=a.mark;d=a.width;var n=a.projection,p=a.height,r=a.view;a=a.params;m=(delete m.mark,delete m.width,delete m.projection,delete m.height,delete m.view,\ndelete m.params,delete m.encoding,m);h=this.getFacetMappingAndLayout({row:g,column:h,facet:k},c);g=h.facetMapping;h=h.layout;l=cf(l,c.repeater);return this.mapFacet(Object.assign({},m,h,{facet:g,spec:Object.assign({},d?{width:d}:{},p?{height:p}:{},r?{view:r}:{},n?{projection:n}:{},{mark:f,encoding:l},a?{params:a}:{})}),c)};lb.prototype.getFacetMappingAndLayout=function(a,c){var d=a.row,f=a.column,g=a.facet;if(d||f){g&&(c=[].concat($jscomp.arrayFromIterable(d?["row"]:[]),$jscomp.arrayFromIterable(f?\n["column"]:[])),c="Facet encoding dropped as "+c.join(" and ")+" "+(1<c.length?"are":"is")+" also specified.",H(c));c={};d={};f=$jscomp.makeIterator(["row","column"]);for(g=f.next();!g.done;g=f.next()){g=g.value;var h=a[g];if(h){var k=Object.assign({},h);k=(delete k.align,delete k.center,delete k.spacing,delete k.columns,k);c[g]=k;k=$jscomp.makeIterator(["align","center","spacing"]);for(var l=k.next();!l.done;l=k.next())if(l=l.value,void 0!==h[l]){var m;null!==(m=d[l])&&void 0!==m?m:d[l]={};d[l][g]=\nh[l]}}}return{facetMapping:c,layout:d}}h=Object.assign({},g);a=g.align;d=g.center;f=g.spacing;g=g.columns;h=(delete h.align,delete h.center,delete h.spacing,delete h.columns,h);c=(c=c.repeater)?Zc(h)?Ph(h,c):Qh(h,c):h;return{facetMapping:c,layout:Object.assign({},a?{align:a}:{},d?{center:d}:{},f?{spacing:f}:{},g?{columns:g}:{})}};lb.prototype.mapLayer=function(a,c){var d=Object.assign({},c),f=c.parentEncoding;c=c.parentProjection;d=(delete d.parentEncoding,delete d.parentProjection,d);var g=Object.assign({},\na),h=a.encoding;a=a.projection;g=(delete g.encoding,delete g.projection,g);f=Object.assign({},d,{parentEncoding:Th({parentEncoding:f,encoding:h,layer:!0}),parentProjection:Uh({parentProjection:c,projection:a})});return wa.prototype.mapLayer.call(this,g,f)};var md=function(){return wa.apply(this,arguments)||this};$jscomp.inherits(md,wa);md.prototype.map=function(a,c){var d,f;null!==(d=c.emptySelections)&&void 0!==d?d:c.emptySelections={};null!==(f=c.selectionPredicates)&&void 0!==f?f:c.selectionPredicates=\n{};a=Vh(a,c);return wa.prototype.map.call(this,a,c)};md.prototype.mapLayerOrUnit=function(a,c){a=Vh(a,c);if(a.encoding){for(var d={},f=$jscomp.makeIterator(ac(a.encoding)),g=f.next();!g.done;g=f.next()){var h=$jscomp.makeIterator(g.value);g=h.next().value;h=h.next().value;d[g]=Xh(h,c)}a=Object.assign({},a,{encoding:d})}return wa.prototype.mapLayerOrUnit.call(this,a,c)};md.prototype.mapUnit=function(a,c){var d=Object.assign({},a),f=a.selection;d=(delete d.selection,d);return f?Object.assign({},d,{params:ac(f).map(function(g){var h=\n$jscomp.makeIterator(g);g=h.next().value;var k=h.next().value,l=Object.assign({},k);h=k.init;var m=k.bind;k=k.empty;l=(delete l.init,delete l.bind,delete l.empty,l);"single"===l.type?(l.type="point",l.toggle=!1):"multi"===l.type&&(l.type="point");c.emptySelections[g]="none"!==k;for(var n=$jscomp.makeIterator(Pa(null!==(r=c.selectionPredicates[g])&&void 0!==r?r:{})),p=n.next();!p.done;p=n.next()){var r;p.value.empty="none"!==k}return{name:g,value:h,select:l,bind:m}})}):a};var Pc=function(){return wa.apply(this,\narguments)||this};$jscomp.inherits(Pc,wa);Pc.prototype.map=function(a,c){var d,f=null!==(d=c.selections)&&void 0!==d?d:[];if(a.params&&!Nb(a)){for(var g=[],h=$jscomp.makeIterator(a.params),k=h.next();!k.done;k=h.next())k=k.value,k.select?f.push(k):g.push(k);a.params=g}c.selections=f;return wa.prototype.map.call(this,a,Yh(a,c))};Pc.prototype.mapUnit=function(a,c){var d,f=c.selections;if(!f||!f.length)return a;var g=(null!==(d=c.path)&&void 0!==d?d:[]).concat(a.name);c=[];f=$jscomp.makeIterator(f);\nfor(var h=f.next();!h.done;h=f.next())if(h=h.value,h.views&&h.views.length)for(var k=$jscomp.makeIterator(h.views),l=k.next();!l.done;l=k.next())l=l.value,(x.isString(l)&&(l===a.name||0<=g.indexOf(l))||x.isArray(l)&&l.map(function(m){return g.indexOf(m)}).every(function(m,n,p){return-1!==m&&(0===n||m>p[n-1])}))&&c.push(h);else c.push(h);c.length&&(a.params=c);return a};for(var ke={},Wj=$jscomp.makeIterator(["mapFacet","mapRepeat","mapHConcat","mapVConcat","mapLayer"]),ig=Wj.next();!ig.done;ke={$jscomp$loop$prop$proto$440:ke.$jscomp$loop$prop$proto$440},\nig=Wj.next()){var Xj=ig.value;ke.$jscomp$loop$prop$proto$440=Pc.prototype[Xj];Pc.prototype[Xj]=function(a){return function(c,d){return a.$jscomp$loop$prop$proto$440.call(this,c,Yh(c,d))}}(ke)}var Yk=new lb,Zk=new md,Xk=new Pc,ra=function(a,c){a=void 0===a?{}:a;c=void 0===c?{}:c;this.explicit=a;this.implicit=c};ra.prototype.clone=function(){return new ra(Y(this.explicit),Y(this.implicit))};ra.prototype.combine=function(){return Object.assign({},this.explicit,this.implicit)};ra.prototype.get=function(a){return sa(this.explicit[a],\nthis.implicit[a])};ra.prototype.getWithExplicit=function(a){return void 0!==this.explicit[a]?{explicit:!0,value:this.explicit[a]}:void 0!==this.implicit[a]?{explicit:!1,value:this.implicit[a]}:{explicit:!1,value:void 0}};ra.prototype.setWithExplicit=function(a,c){var d=c.value;c=c.explicit;void 0!==d&&this.set(a,d,c)};ra.prototype.set=function(a,c,d){delete this[d?"implicit":"explicit"][a];this[d?"explicit":"implicit"][a]=c;return this};ra.prototype.copyKeyFromSplit=function(a,c){var d=c.explicit;\nc=c.implicit;void 0!==d[a]?this.set(a,d[a],!0):void 0!==c[a]&&this.set(a,c[a],!1)};ra.prototype.copyKeyFromObject=function(a,c){void 0!==c[a]&&this.set(a,c[a],!0)};ra.prototype.copyAll=function(a){for(var c=$jscomp.makeIterator(G(a.combine())),d=c.next();!d.done;d=c.next()){d=d.value;var f=a.getWithExplicit(d);this.setWithExplicit(d,f)}};var Xf=function(a,c,d){a=void 0===a?{}:a;c=void 0===c?{}:c;d=void 0===d?!1:d;var f=ra.call(this,a,c)||this;f.explicit=a;f.implicit=c;f.parseNothing=d;return f};$jscomp.inherits(Xf,\nra);Xf.prototype.clone=function(){var a=ra.prototype.clone.call(this);a.parseNothing=this.parseNothing;return a};var la;(function(a){a[a.Raw=0]="Raw";a[a.Main=1]="Main";a[a.Row=2]="Row";a[a.Column=3]="Column";a[a.Lookup=4]="Lookup"})(la||(la={}));var bl=/[[\\]{}]/,$k={"*":1,arc:1,area:1,group:1,image:1,line:1,path:1,rect:1,rule:1,shape:1,symbol:1,text:1,trail:1},ci,di,P=function(a,c){this.debugName=c;S(this,"_children",[]);S(this,"_parent",null);S(this,"_hash",void 0);a&&(this.parent=a)};P.prototype.clone=\nfunction(){throw Error("Cannot clone node");};P.prototype.numChildren=function(){return this._children.length};P.prototype.addChild=function(a,c){this._children.includes(a)?H("Attempt to add the same child twice."):void 0!==c?this._children.splice(c,0,a):this._children.push(a)};P.prototype.removeChild=function(a){a=this._children.indexOf(a);this._children.splice(a,1);return a};P.prototype.remove=function(){for(var a=this._parent.removeChild(this),c=$jscomp.makeIterator(this._children),d=c.next();!d.done;d=\nc.next())d=d.value,d._parent=this._parent,this._parent.addChild(d,a++)};P.prototype.insertAsParentOf=function(a){var c=a.parent;c.removeChild(this);this.parent=c;a.parent=this};P.prototype.swapWithParent=function(){for(var a=this._parent,c=a.parent,d=$jscomp.makeIterator(this._children),f=d.next();!f.done;f=d.next())f.value.parent=a;this._children=[];a.removeChild(this);a.parent.removeChild(a);this.parent=c;a.parent=this};$jscomp.global.Object.defineProperties(P.prototype,{parent:{configurable:!0,\nenumerable:!0,get:function(){return this._parent},set:function(a){(this._parent=a)&&a.addChild(this)}},children:{configurable:!0,enumerable:!0,get:function(){return this._children}}});var qa=function(a,c,d,f){a=P.call(this,a,c)||this;a.type=d;a.refCounts=f;S(a,"_source",void 0);S(a,"_name",void 0);a._source=a._name=c;!a.refCounts||a._name in a.refCounts||(a.refCounts[a._name]=0);return a};$jscomp.inherits(qa,P);qa.prototype.clone=function(){var a=new this.constructor;a.debugName="clone_"+this.debugName;\na._source=this._source;a._name="clone_"+this._name;a.type=this.type;a.refCounts=this.refCounts;a.refCounts[a._name]=0;return a};qa.prototype.dependentFields=function(){return new Set};qa.prototype.producedFields=function(){return new Set};qa.prototype.hash=function(){void 0===this._hash&&(this._hash="Output "+mg());return this._hash};qa.prototype.getSource=function(){this.refCounts[this._name]++;return this._source};qa.prototype.isRequired=function(){return!!this.refCounts[this._name]};qa.prototype.setSource=\nfunction(a){this._source=a};var Ba=function(a,c){a=P.call(this,a)||this;a.formula=c;return a};$jscomp.inherits(Ba,P);Ba.prototype.clone=function(){return new Ba(null,Y(this.formula))};Ba.makeFromEncoding=function(a,c){c=c.reduceFieldDef(function(d,f){var g=f.field,h=f.timeUnit;h&&(f=J(f,{forAs:!0}),d[I({as:f,field:g,timeUnit:h})]={as:f,field:g,timeUnit:h});return d},{});return ha(c)?null:new Ba(a,c)};Ba.makeFromTransform=function(a,c){var d=Object.assign({},c);c=Object.assign({},d);d=d.timeUnit;c=\n(delete c.timeUnit,c);d=Oa(d);c=Object.assign({},c,{timeUnit:d});d={};return new Ba(a,(d[I(c)]=c,d))};Ba.prototype.merge=function(a){this.formula=Object.assign({},this.formula);for(var c in a.formula)this.formula[c]||(this.formula[c]=a.formula[c]);c=$jscomp.makeIterator(a.children);for(var d=c.next();!d.done;d=c.next())d=d.value,a.removeChild(d),d.parent=this;a.remove()};Ba.prototype.removeFormulas=function(a){for(var c={},d=$jscomp.makeIterator(ac(this.formula)),f=d.next();!f.done;f=d.next()){var g=\n$jscomp.makeIterator(f.value);f=g.next().value;g=g.next().value;a.has(g.as)||(c[f]=g)}this.formula=c};Ba.prototype.producedFields=function(){return new Set(Pa(this.formula).map(function(a){return a.as}))};Ba.prototype.dependentFields=function(){return new Set(Pa(this.formula).map(function(a){return a.field}))};Ba.prototype.hash=function(){return"TimeUnit "+I(this.formula)};Ba.prototype.assemble=function(){for(var a=[],c=$jscomp.makeIterator(Pa(this.formula)),d=c.next();!d.done;d=c.next()){var f=d.value;\nd=f.field;var g=f.as,h=Oa(f.timeUnit),k=Object.assign({},h);f=h.unit;h=h.utc;k=(delete k.unit,delete k.utc,k);a.push(Object.assign({},{field:eb(d),type:"timeunit"},f?{units:Be(f)}:{},h?{timezone:"utc"}:{},k,{as:[g,g+"_end"]}))}return a};var Sm=function(a){for(var c=[],d=0;d<arguments.length;++d)c[d-0]=arguments[d];S(this,"hasChannel",void 0);S(this,"hasField",void 0);S(this,"timeUnit",void 0);S(this,"items",void 0);this.items=c;this.hasChannel={};this.hasField={}},hc={defined:function(a){return"interval"===\na.type&&"global"===a.resolve&&a.bind&&"scales"===a.bind},parse:function(a,c){for(var d=c.scales=[],f=$jscomp.makeIterator(c.project.items),g=f.next();!g.done;g=f.next()){g=g.value;var h=g.channel;if(Mb[h]){var k=(h=a.getScaleComponent(h))?h.get("type"):void 0;h&&k in $a?(h.set("selectionExtent",{param:c.name,field:g.field},!0),d.push(g)):H("Scale bindings are currently only supported for scales with unbinned, continuous domains.")}}},topLevelSignals:function(a,c,d){var f=c.scales.filter(function(l){return 0===\nd.filter(function(m){return m.name===l.signals.data}).length});if(!a.parent||jf(a)||0===f.length)return d;a=d.filter(function(l){return l.name===c.name})[0];var g=a.update;if(0<=g.indexOf("vlSelectionResolve"))a.update="{"+f.map(function(l){return q.stringValue(eb(l.field))+": "+l.signals.data}).join(", ")+"}";else{for(var h=$jscomp.makeIterator(f),k=h.next();!k.done;k=h.next())k=k.value,k=q.stringValue(eb(k.field))+": "+k.signals.data,g.includes(k)||(g=g.substring(0,g.length-1)+", "+k+"}");a.update=\ng}return d.concat(f.map(function(l){return{name:l.signals.data}}))},signals:function(a,c,d){if(a.parent&&!jf(a)){a={};c=$jscomp.makeIterator(c.scales);for(var f=c.next();!f.done;a={$jscomp$loop$prop$proj$447:a.$jscomp$loop$prop$proj$447},f=c.next())a.$jscomp$loop$prop$proj$447=f.value,f=d.filter(function(g){return function(h){return h.name===g.$jscomp$loop$prop$proj$447.signals.data}}(a))[0],f.push="outer",delete f.value,delete f.update}return d}},jl={left:"x",center:"xc",right:"x2"},kl={top:"y",\nmiddle:"yc",bottom:"y2"},ql=new Set(["aria","width","height"]),Yj={defined:function(a){return"point"===a.type&&a.nearest},parse:function(a,c){if(c.events){c=$jscomp.makeIterator(c.events);for(var d=c.next();!d.done;d=c.next())d.value.markname=a.getName("voronoi")}},marks:function(a,c,d){var f=c.project.hasChannel;c=f.x;f=f.y;var g=a.mark;if(dc(g))return H(\'The "nearest" transform is not supported for \'+g+" marks."),d;c={name:a.getName("voronoi"),type:"path",interactive:!0,from:{data:a.getName("marks")},\nencode:{update:Object.assign({},{fill:{value:"transparent"},strokeWidth:{value:.35},stroke:{value:"transparent"},isVoronoi:{value:!0}},ii(a,{reactiveGeom:!0}))},transform:[{type:"voronoi",x:{expr:c||!f?"datum.datum.x || 0":"0"},y:{expr:f||!c?"datum.datum.y || 0":"0"},size:[a.getSizeSignalRef("width"),a.getSizeSignalRef("height")]}]};var h=0,k=!1;d.forEach(function(l,m){var n;l=null!==(n=l.name)&&void 0!==n?n:"";l===a.component.mark[0].name?h=m:0<=l.indexOf("voronoi")&&(k=!0)});k||d.splice(h+1,0,c);\nreturn d}},Zj={defined:function(a){return"point"===a.type&&"global"===a.resolve&&a.bind&&"scales"!==a.bind&&!Ze(a.bind)},parse:function(a,c,d){return ti(c,d)},topLevelSignals:function(a,c,d){var f=c.name;a=c.project;var g=c.bind,h=c.init&&c.init[0],k=Yj.defined(c)?"(item().isVoronoi ? datum.datum : datum)":"datum";a.items.forEach(function(l,m){var n=oa(f+"_"+l.field);if(!d.filter(function(v){return v.name===n}).length){var p,r;d.unshift(Object.assign({},{name:n},h?{init:Ic(h[m])}:{value:null},{on:c.events?\n[{events:c.events,update:"datum && item().mark.marktype !== \'group\' ? "+k+"["+q.stringValue(l.field)+"] : null"}]:[],bind:null!==(p=null!==(r=g[l.field])&&void 0!==r?r:g[l.channel])&&void 0!==p?p:g}))}});return d},signals:function(a,c,d){var f=c.name,g=c.project;a=d.filter(function(k){return k.name===f+"_tuple"})[0];c=f+"_tuple_fields";g=g.items.map(function(k){return oa(f+"_"+k.field)});var h=g.map(function(k){return k+" !== null"}).join(" && ");g.length&&(a.update=h+" ? {fields: "+c+", values: ["+\ng.join(", ")+"]} : null");delete a.value;delete a.on;return d}},ak={defined:function(a){return"point"===a.type&&!!a.toggle},signals:function(a,c,d){return d.concat({name:c.name+"_toggle",value:!1,on:[{events:c.events,update:c.toggle}]})},modifyExpr:function(a,c){var d=c.name+"_tuple",f=c.name+"_toggle";return f+" ? null : "+d+", "+("global"===c.resolve?f+" ? null : true, ":f+" ? null : {unit: "+Jc(a)+"}, ")+(f+" ? "+d+" : null")}},aj={defined:function(a){var c="global"===a.resolve&&a.bind&&Ze(a.bind);\na=1===a.project.items.length&&"_vgsid_"!==a.project.items[0].field;c&&!a&&H("Legend bindings are only supported for selections over an individual field or encoding channel.");return c&&a},parse:function(a,c,d){a=Y(d);a.select=q.isString(a.select)?{type:a.select,toggle:c.toggle}:Object.assign({},a.select,{toggle:c.toggle});ti(c,a);if(x.isObject(d.select)&&(d.select.on||d.select.clear))for(d=$jscomp.makeIterator(c.events),a=d.next();!a.done;a=d.next()){a=a.value;var f;a.filter=q.array(null!==(f=a.filter)&&\nvoid 0!==f?f:[]);a.filter.includes(\'event.item && indexof(event.item.mark.role, "legend") < 0\')||a.filter.push(\'event.item && indexof(event.item.mark.role, "legend") < 0\')}d=$e(c.bind)?c.bind.legend:"click";d=q.isString(d)?Hc(d,"view"):q.array(d);c.bind={legend:{merge:d}}},topLevelSignals:function(a,c,d){a=c.name;for(var f=$e(c.bind)&&c.bind.legend,g=function(m){return function(n){n=Y(n);n.markname=m;return n}},h={},k=$jscomp.makeIterator(c.project.items),l=k.next();!l.done;h={$jscomp$loop$prop$sgName$454:h.$jscomp$loop$prop$sgName$454},\nl=k.next())l=l.value,l.hasLegend&&(l=oa(l.field)+"_legend",h.$jscomp$loop$prop$sgName$454=a+"_"+l,0===d.filter(function(m){return function(n){return n.name===m.$jscomp$loop$prop$sgName$454}}(h)).length&&(l=f.merge.map(g(l+"_symbols")).concat(f.merge.map(g(l+"_labels"))).concat(f.merge.map(g(l+"_entries"))),d.unshift(Object.assign({},{name:h.$jscomp$loop$prop$sgName$454},c.init?{}:{value:null},{on:[{events:l,update:"datum.value || item().items[0].items[0].datum.value",force:!0},{events:f.merge,update:"!event.item || !datum ? null : "+\nh.$jscomp$loop$prop$sgName$454,force:!0}]}))));return d},signals:function(a,c,d){var f=c.name,g=c.project;a=d.find(function(k){return k.name===f+"_tuple"});var h=f+"_tuple_fields";g=g.items.filter(function(k){return k.hasLegend}).map(function(k){return oa(f+"_"+oa(k.field)+"_legend")});h=g.map(function(k){return k+" !== null"}).join(" && ")+" ? {fields: "+h+", values: ["+g.join(", ")+"]} : null";c.events&&0<g.length?a.on.push({events:g.map(function(k){return{signal:k}}),update:h}):0<g.length&&(a.update=\nh,delete a.value,delete a.on);a=d.find(function(k){return k.name===f+"_toggle"});h=$e(c.bind)&&c.bind.legend;a&&(c.events?a.on.push(Object.assign({},a.on[0],{events:h})):a.on[0].events=h);return d}},Jd=[{defined:function(a){return"point"===a.type},signals:function(a,c,d){var f=c.name,g=f+"_tuple_fields",h=c.project.items.map(function(k){var l=a.fieldDef(k.channel);return l&&l.bin?"[(item().isVoronoi ? datum.datum : datum)["+q.stringValue(a.vgField(k.channel,{}))+"], (item().isVoronoi ? datum.datum : datum)["+\n(q.stringValue(a.vgField(k.channel,{binSuffix:"end"}))+"]]"):"(item().isVoronoi ? datum.datum : datum)["+q.stringValue(k.field)+"]"}).join(", ");g="unit: "+Jc(a)+", fields: "+g+", values";c=c.events;return d.concat([{name:f+"_tuple",on:c?[{events:c,update:"datum && item().mark.marktype !== \'group\' ? {"+g+": ["+h+"]} : null",force:!0}]:[]}])}},{defined:function(a){return"interval"===a.type},signals:function(a,c,d){var f=c.name,g=f+"_tuple_fields",h=hc.defined(c),k=c.init?c.init[0]:null,l=[],m=[];if(c.translate&&\n!h){var n="!event.item || event.item.mark.name !== "+q.stringValue(f+"_brush");gi(c,function(p,r){var v,t;r=q.array(null!==(t=(v=r.between[0]).filter)&&void 0!==t?t:v.filter=[]);r.includes(n)||r.push(n);return p})}c.project.items.forEach(function(p,r){var v=p.channel;if("x"!==v&&"y"!==v)H("Interval selections only support x and y encoding channels.");else{r=gl(a,c,p,k?k[r]:null);var t=p.signals.data;p=p.signals.visual;var y=q.stringValue(a.scaleName(v)),w=a.getScaleComponent(v).get("type")in $a?"+":\n"";d.push.apply(d,$jscomp.arrayFromIterable(r));l.push(t);m.push({scaleName:a.scaleName(v),expr:"(!isArray("+t+") || ("+(w+"invert("+y+", "+p+")[0] === "+w+t+"[0] && ")+(w+"invert("+y+", "+p+")[1] === "+w+t+"[1]))")})}});h||d.push({name:f+"_scale_trigger",value:{},on:[{events:m.map(function(p){return{scale:p.scaleName}}),update:m.map(function(p){return p.expr}).join(" && ")+" ? "+(f+"_scale_trigger : {}")}]});g="unit: "+Jc(a)+", fields: "+g+", values";return d.concat(Object.assign({},{name:f+"_tuple"},\nk?{init:"{"+g+": "+Ic(k)+"}"}:{},{on:[{events:[{signal:l.join(" || ")}],update:l.join(" && ")+" ? {"+g+": ["+l+"]} : null"}]}))},marks:function(a,c,d){var f=c.name,g=c.project.hasChannel,h=g.x,k=g.y,l=h&&h.signals.visual,m=k&&k.signals.visual,n="data("+q.stringValue(c.name+"_store")+")";if(hc.defined(c))return d;g={x:void 0!==h?{signal:l+"[0]"}:{value:0},y:void 0!==k?{signal:m+"[0]"}:{value:0},x2:void 0!==h?{signal:l+"[1]"}:{field:{group:"width"}},y2:void 0!==k?{signal:m+"[1]"}:{field:{group:"height"}}};\nif("global"===c.resolve)for(var p=$jscomp.makeIterator(G(g)),r=p.next();!r.done;r=p.next())r=r.value,g[r]=[Object.assign({},{test:n+".length && "+n+"[0].unit === "+Jc(a)},g[r]),{value:0}];p=c.mark;n=Object.assign({},p);a=p.fill;c=p.fillOpacity;p=p.cursor;var v=(delete n.fill,delete n.fillOpacity,delete n.cursor,n);n=G(v).reduce(function(t,y){t[y]=[{test:[void 0!==h&&l+"[0] !== "+l+"[1]",void 0!==k&&m+"[0] !== "+m+"[1]"].filter(function(w){return w}).join(" && "),value:v[y]},{value:null}];return t},\n{});return[{name:f+"_brush_bg",type:"rect",clip:!0,encode:{enter:{fill:{value:a},fillOpacity:{value:c}},update:g}}].concat($jscomp.arrayFromIterable(d),[{name:f+"_brush",type:"rect",clip:!0,encode:{enter:Object.assign({},p?{cursor:{value:p}}:{},{fill:{value:"transparent"}}),update:Object.assign({},g,n)}}])}},{defined:function(){return!0},parse:function(a,c,d){var f,g=c.name,h=null!==(f=c.project)&&void 0!==f?f:c.project=new Sm,k={},l={},m=new Set,n=function(O,N){var W="visual"===N?O.channel:O.field;\nO=oa(g+"_"+W);for(var U=1;m.has(O);U++)O=oa(g+"_"+W+"_"+U);m.add(O);W={};return W[N]=O,W},p=c.type,r=a.config.selection[p],v=void 0!==d.value?q.array(d.value):null,t=q.isObject(d.select)?d.select:{};d=t.fields;t=t.encodings;if(!d&&!t&&v)for(var y=$jscomp.makeIterator(v),w=y.next();!w.done;w=y.next())if(w=w.value,q.isObject(w)){w=$jscomp.makeIterator(G(w));for(var E=w.next();!E.done;E=w.next())E=E.value,Gm[E]?(t||(t=[])).push(E):"interval"===p?(H(\'Interval selections should be initialized using "x" and/or "y" keys.\'),\nt=r.encodings):(d||(d=[])).push(E)}d||t||(t=r.encodings,d=r.fields);r=$jscomp.makeIterator(null!==(Q=t)&&void 0!==Q?Q:[]);for(t=r.next();!t.done;t=r.next()){t=t.value;var Q;(w=a.fieldDef(t))?(y=w.field,w.aggregate?H(\'Cannot project a selection on encoding channel "\'+t+\'" as it uses an aggregate function ("\'+w.aggregate+\'").\'):y?(w.timeUnit&&(y=a.vgField(t),E={timeUnit:w.timeUnit,as:y,field:w.field},l[I(E)]=E),k[y]||(E="E","interval"===p?a.getScaleComponent(t).get("type")in $a&&(E="R"):w.bin&&(E="R-RE"),\nw={field:y,channel:t,type:E},w.signals=Object.assign({},n(w,"data"),n(w,"visual")),h.items.push(k[y]=w),h.hasField[y]=h.hasChannel[t]=k[y])):H(Hg(t))):H(Hg(t))}a=$jscomp.makeIterator(null!==(M=d)&&void 0!==M?M:[]);for(k=a.next();!k.done;k=a.next()){k=k.value;var M;h.hasField[k]||(p={type:"E",field:k},p.signals=Object.assign({},n(p,"data")),h.items.push(p),h.hasField[k]=p)}v&&(c.init=v.map(function(O){return h.items.map(function(N){return q.isObject(O)?void 0!==O[N.channel]?O[N.channel]:O[N.field]:\nO})}));ha(l)||(h.timeUnit=new Ba(null,l))},signals:function(a,c,d){var f=c.name+"_tuple_fields";return 0<d.filter(function(g){return g.name===f}).length?d:d.concat({name:f,value:c.project.items.map(function(g){g=Object.assign({},g);g=(delete g.signals,delete g.hasLegend,g);g.field=eb(g.field);return g})})}},ak,Zj,hc,aj,{defined:function(a){return void 0!==a.clear&&!1!==a.clear},parse:function(a,c){c.clear&&(c.clear=q.isString(c.clear)?Hc(c.clear,"view"):c.clear)},topLevelSignals:function(a,c,d){if(Zj.defined(c)){a=\n{};for(var f=$jscomp.makeIterator(c.project.items),g=f.next();!g.done;a={$jscomp$loop$prop$proj$449:a.$jscomp$loop$prop$proj$449},g=f.next())a.$jscomp$loop$prop$proj$449=g.value,g=d.findIndex(function(h){return function(k){return k.name===oa(c.name+"_"+h.$jscomp$loop$prop$proj$449.field)}}(a)),-1!==g&&d[g].on.push({events:c.clear,update:"null"})}return d},signals:function(a,c,d){function f(k,l){-1!==k&&d[k].on&&d[k].on.push({events:c.clear,update:l})}if("interval"===c.type){a={};for(var g=$jscomp.makeIterator(c.project.items),\nh=g.next();!h.done;a={$jscomp$loop$prop$proj$452:a.$jscomp$loop$prop$proj$452},h=g.next())a.$jscomp$loop$prop$proj$452=h.value,h=d.findIndex(function(k){return function(l){return l.name===k.$jscomp$loop$prop$proj$452.signals.visual}}(a)),f(h,"[0, 0]"),-1===h&&(h=d.findIndex(function(k){return function(l){return l.name===k.$jscomp$loop$prop$proj$452.signals.data}}(a)),f(h,"null"))}else a=d.findIndex(function(k){return k.name===c.name+"_tuple"}),f(a,"null"),ak.defined(c)&&(a=d.findIndex(function(k){return k.name===\nc.name+"_toggle"}),f(a,"false"));return d}},{defined:function(a){return"interval"===a.type&&a.translate},signals:function(a,c,d){var f=c.name,g=hc.defined(c),h=f+"_translate_anchor",k=c.project.hasChannel,l=k.x;k=k.y;var m=Hc(c.translate,"scope");g||(m=m.map(function(n){return n.between[0].markname=f+"_brush",n}));d.push({name:h,value:{},on:[{events:m.map(function(n){return n.between[0]}),update:"{x: x(unit), y: y(unit)"+(void 0!==l?", extent_x: "+(g?hf(a,"x"):"slice("+l.signals.visual+")"):"")+(void 0!==\nk?", extent_y: "+(g?hf(a,"y"):"slice("+k.signals.visual+")"):"")+"}"}]},{name:f+"_translate_delta",value:{},on:[{events:m,update:"{x: "+h+".x - x(unit), y: "+h+".y - y(unit)}"}]});void 0!==l&&ri(a,c,l,"width",d);void 0!==k&&ri(a,c,k,"height",d);return d}},{defined:function(a){return"interval"===a.type&&a.zoom},signals:function(a,c,d){var f=c.name,g=hc.defined(c),h=f+"_zoom_delta",k=c.project.hasChannel,l=k.x;k=k.y;var m=q.stringValue(a.scaleName("x")),n=q.stringValue(a.scaleName("y")),p=Hc(c.zoom,\n"scope");g||(p=p.map(function(r){return r.markname=f+"_brush",r}));d.push({name:f+"_zoom_anchor",on:[{events:p,update:g?"{"+[m?"x: invert("+m+", x(unit))":"",n?"y: invert("+n+", y(unit))":""].filter(function(r){return!!r}).join(", ")+"}":"{x: x(unit), y: y(unit)}"}]},{name:h,on:[{events:p,force:!0,update:"pow(1.001, event.deltaY * pow(16, event.deltaMode))"}]});void 0!==l&&si(a,c,l,"width",d);void 0!==k&&si(a,c,k,"height",d);return d}},Yj];pb.prototype.visit=function(a){var c;if(a(this))return 1;\nvar d=sl(this);var f=0;for(c=d.length;f<c;++f)if(d[f].visit(a))return 1};var R,A,Ja,ca,tl=/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\nul=/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\nwl={"if":1,"in":1,"do":1,"var":1,"for":1,"new":1,"try":1,let:1,"this":1,"else":1,"case":1,"void":1,"with":1,"enum":1,"while":1,"break":1,"catch":1,"throw":1,"const":1,yield:1,"class":1,"super":1,"return":1,"typeof":1,"delete":1,"switch":1,"export":1,"import":1,"public":1,"static":1,"default":1,"finally":1,"extends":1,"package":1,"private":1,"function":1,"continue":1,"debugger":1,"interface":1,"protected":1,"instanceof":1,"implements":1},yl={"if":1},sb=function(a,c,d){a=P.call(this,a)||this;a.model=\nc;a.filter=d;S(a,"expr",void 0);S(a,"_dependentFields",void 0);a.expr=Kd(a.model,a.filter,a);a._dependentFields=Ei(a.expr);return a};$jscomp.inherits(sb,P);sb.prototype.clone=function(){return new sb(null,this.model,Y(this.filter))};sb.prototype.dependentFields=function(){return this._dependentFields};sb.prototype.producedFields=function(){return new Set};sb.prototype.assemble=function(){return{type:"filter",expr:this.expr}};sb.prototype.hash=function(){return"Filter "+this.expr};var Hj={scale:function(a){return a.model.scaleName(a.channel)},\nformat:function(a){var c=a.fieldOrDatumDef,d=a.axis;return eh(c,c.type,d.format,d.formatType,a.config,!0)},formatType:function(a){return fh(a.axis.formatType,a.fieldOrDatumDef,a.scaleType)},grid:function(a){var c=a.fieldOrDatumDef,d=a.scaleType,f;return null!==(f=a.axis.grid)&&void 0!==f?f:!(d in Ha)&&K(c)&&!ka(null===c||void 0===c?void 0:c.bin)&&!Na(null===c||void 0===c?void 0:c.bin)},gridScale:function(a){var c=a.model;a="x"===a.channel?"y":"x";c=c.getScaleComponent(a)?c.scaleName(a):void 0;return c},\nlabelAlign:function(a){var c=a.labelAngle,d=a.orient,f=a.channel;return a.axis.labelAlign||Li(c,d,f)},labelAngle:function(a){return a.labelAngle},labelBaseline:function(a){var c=a.labelAngle,d=a.orient,f=a.channel;return a.axis.labelBaseline||Ki(c,d,f)},labelFlush:function(a){var c=a.fieldOrDatumDef,d=a.channel,f;a=null!==(f=a.axis.labelFlush)&&void 0!==f?f:"x"===d&&B(["quantitative","temporal"],c.type)?!0:void 0;return a},labelOverlap:function(a){var c=a.fieldOrDatumDef,d=a.scaleType,f;if(null!==\n(f=a.axis.labelOverlap)&&void 0!==f)d=f;else{a=c.type;var g=K(c)&&!!c.timeUnit;c=K(c)?c.sort:void 0;d=g&&!q.isObject(c)||"nominal"!==a&&"ordinal"!==a?"log"===d||"symlog"===d?"greedy":!0:void 0}return d},orient:function(a){return a.orient},tickCount:function(a){var c=a.channel,d=a.model,f=a.axis,g=a.fieldOrDatumDef;a=a.scaleType;var h;d=(c="x"===c?"width":"y"===c?"height":void 0)?d.getSizeSignalRef(c):void 0;if(null!==(h=f.tickCount)&&void 0!==h)f=h;else a:if(f.values||a in Ha||"log"===a)f=void 0;\nelse{if(K(g)){var k;if(ka(g.bin)){f={signal:"ceil("+d.signal+"/10)"};break a}if(g.timeUnit&&B(["month","hours","day","quarter"],null===(k=Oa(g.timeUnit))||void 0===k?void 0:k.unit)){f=void 0;break a}}f={signal:"ceil("+d.signal+"/40)"}}return f},title:function(a){var c=a.axis,d=a.model;a=a.channel;if(void 0!==c.title)return c.title;c=Mi(d,a);if(void 0!==c)return c;c=d.typedFieldDef(a);d=d.fieldDef("x"===a?"x2":"y2");return zg(c?[ih(c)]:[],K(d)?[ih(d)]:[])},values:function(a){var c=a.fieldOrDatumDef;\na=a.axis.values;c=q.isArray(a)?ph(c,a):T(a)?a:void 0;return c},zindex:function(a){var c=a.fieldOrDatumDef,d=a.mark,f;a=null!==(f=a.axis.zindex)&&void 0!==f?f:"rect"===d&&Bd(c)?1:0;return a}},jb=function(a,c){a=P.call(this,a)||this;a.transform=c;S(a,"_dependentFields",void 0);a._dependentFields=Ei(a.transform.calculate);return a};$jscomp.inherits(jb,P);jb.prototype.clone=function(){return new jb(null,Y(this.transform))};jb.parseAllForSortIndex=function(a,c){c.forEachFieldDef(function(d,f){if(Ec(d)&&\nhh(d.sort)){var g=d.field,h=d.timeUnit,k=d.sort;k=k.map(function(l,m){return Wg({field:g,timeUnit:h,equal:l})+" ? "+m+" : "}).join("")+k.length;a=new jb(a,{calculate:k,as:Mc(d,f,{forAs:!0})})}});return a};jb.prototype.producedFields=function(){return new Set([this.transform.as])};jb.prototype.dependentFields=function(){return this._dependentFields};jb.prototype.assemble=function(){return{type:"formula",expr:this.transform.calculate,as:this.transform.as}};jb.prototype.hash=function(){return"Calculate "+\nI(this.transform)};var jg=["row","column"],kg=["header","footer"],Tm={column:{start:0,end:1},row:{start:1,end:0}},Um=Object.assign({},{aria:1,clipHeight:1,columnPadding:1,columns:1,cornerRadius:1,description:1,direction:1,fillColor:1,format:1,formatType:1,gradientLength:1,gradientOpacity:1,gradientStrokeColor:1,gradientStrokeWidth:1,gradientThickness:1,gridAlign:1,labelAlign:1,labelBaseline:1,labelColor:1,labelFont:1,labelFontSize:1,labelFontStyle:1,labelFontWeight:1,labelLimit:1,labelOffset:1,labelOpacity:1,\nlabelOverlap:1,labelPadding:1,labelSeparation:1,legendX:1,legendY:1,offset:1,orient:1,padding:1,rowPadding:1,strokeColor:1,symbolDash:1,symbolDashOffset:1,symbolFillColor:1,symbolLimit:1,symbolOffset:1,symbolOpacity:1,symbolSize:1,symbolStrokeColor:1,symbolStrokeWidth:1,symbolType:1,tickCount:1,tickMinStep:1,title:1,titleAlign:1,titleAnchor:1,titleBaseline:1,titleColor:1,titleFont:1,titleFontSize:1,titleFontStyle:1,titleFontWeight:1,titleLimit:1,titleLineHeight:1,titleOpacity:1,titleOrient:1,titlePadding:1,\ntype:1,values:1,zindex:1},{disable:1,labelExpr:1,selections:1,opacity:1,shape:1,stroke:1,fill:1,size:1,strokeWidth:1,strokeDash:1,encode:1}),bj=G(Um),$i=function(){return ra.apply(this,arguments)||this};$jscomp.inherits($i,ra);var dj={symbols:function(a,c){var d=c.fieldOrDatumDef,f=c.model,g=c.channel,h=c.legendCmpt,k,l,m,n;if("symbol"===c.legendType){var p=f.markDef,r=f.encoding;c=f.config;var v=f.mark;v=p.filled&&"trail"!==v;for(var t=Object,y=t.assign,w={},E=$jscomp.makeIterator(Nm),Q=E.next();!Q.done;Q=\nE.next()){Q=Q.value;var M=pc(Q,f.markDef,f.config);void 0!==M&&(w[Q]=pa(M))}t=y.call(t,{},w,li(f,{filled:v}));y=null!==(k=h.get("symbolOpacity"))&&void 0!==k?k:c.legend.symbolOpacity;E=null!==(l=h.get("symbolFillColor"))&&void 0!==l?l:c.legend.symbolFillColor;w=null!==(m=h.get("symbolStrokeColor"))&&void 0!==m?m:c.legend.symbolStrokeColor;y=void 0===y?null!==(n=Vi(r.opacity))&&void 0!==n?n:p.opacity:void 0;if(t.fill)if("fill"===g||v&&"color"===g)delete t.fill;else if(t.fill.field)if(E)delete t.fill;\nelse{var O;t.fill=pa(null!==(O=c.legend.symbolBaseFillColor)&&void 0!==O?O:"black");t.fillOpacity=pa(null!==y&&void 0!==y?y:1)}else if(q.isArray(t.fill)){var N,W,U;if(E=null!==(N=null!==(W=Cf(null!==(U=r.fill)&&void 0!==U?U:r.color))&&void 0!==W?W:p.fill)&&void 0!==N?N:v&&p.color)t.fill=pa(E)}t.stroke&&("stroke"===g||!v&&"color"===g?delete t.stroke:t.stroke.field||w?delete t.stroke:q.isArray(t.stroke)&&(p=sa(Cf(r.stroke||r.color),p.stroke,v?p.color:void 0))&&(t.stroke={value:p}));"opacity"!==g&&((d=\nK(d)&&Xi(f,h,d))?t.opacity=[Object.assign({},{test:d},pa(null!==y&&void 0!==y?y:1)),pa(c.legend.unselectedOpacity)]:y&&(t.opacity=pa(y)));t=Object.assign({},t,a);return ha(t)?void 0:t}},gradient:function(a,c){var d;if("gradient"===c.legendType){var f=c.model,g=f.config,h=f.markDef,k=f.encoding;f={};if(c=void 0===(null!==(d=c.legendCmpt.get("gradientOpacity"))&&void 0!==d?d:g.legend.gradientOpacity)?Vi(k.opacity)||h.opacity:void 0)f.opacity=pa(c);f=Object.assign({},f,a);return ha(f)?void 0:f}},labels:function(a,\nc){var d=c.fieldOrDatumDef,f=c.model,g=c.legendCmpt,h=f.legend(c.channel)||{};c=f.config;f=(f=K(d)?Xi(f,g,d):void 0)?[{test:f,value:1},{value:c.legend.unselectedOpacity}]:void 0;g=h.format;h=h.formatType;d=sc(h)?Oe({fieldOrDatumDef:d,field:"datum.value",format:g,formatType:h,config:c}):void 0;a=Object.assign({},f?{opacity:f}:{},d?{text:d}:{},a);return ha(a)?void 0:a},entries:function(a,c){c=c.legendCmpt.get("selections");return null!==c&&void 0!==c&&c.length?Object.assign({},a,{fill:{value:"transparent"}}):\na}},cj={direction:function(a){return a.direction},format:function(a){var c=a.fieldOrDatumDef,d=a.legend;return eh(c,c.type,d.format,d.formatType,a.config,!1)},formatType:function(a){return fh(a.legend.formatType,a.fieldOrDatumDef,a.scaleType)},gradientLength:function(a){var c,d,f=a.legendConfig;if(null!==(c=null!==(d=a.legend.gradientLength)&&void 0!==d?d:f.gradientLength)&&void 0!==c)a=c;else{f=a.model;var g=a.direction,h=a.orient,k=a.legendConfig,l=k.gradientHorizontalMaxLength,m=k.gradientHorizontalMinLength,\nn=k.gradientVerticalMaxLength;k=k.gradientVerticalMinLength;a=a.scaleType in mb?"horizontal"===g?"top"===h||"bottom"===h?{signal:"clamp("+f.getSizeSignalRef("width").signal+", "+m+", "+l+")"}:m:{signal:"clamp("+f.getSizeSignalRef("height").signal+", "+k+", "+n+")"}:void 0}return a},labelOverlap:function(a){var c=a.legendConfig,d=a.scaleType,f,g;a=null!==(f=null!==(g=a.legend.labelOverlap)&&void 0!==g?g:c.labelOverlap)&&void 0!==f?f:B(["quantile","threshold","log","symlog"],d)?"greedy":void 0;return a},\nsymbolType:function(a){var c=a.markDef,d=a.channel,f=a.encoding,g;if(null!==(g=a.legend.symbolType)&&void 0!==g)var h=g;else a:{a=c.type;c=c.shape;if("shape"!==d&&(d=null!==(h=Cf(f.shape))&&void 0!==h?h:c)){h=d;break a}switch(a){case "bar":case "rect":case "image":case "square":h="square";break a;case "line":case "trail":case "rule":h="stroke";break a;case "arc":case "point":case "circle":case "tick":case "geoshape":case "area":case "text":h="circle";break a}h=void 0}return h},title:function(a){return Fc(a.fieldOrDatumDef,\na.config,{allowDisabling:!0})},type:function(a){var c=a.legendType,d=a.scaleType;if(Ac(a.channel)&&d in mb){if("gradient"===c)return}else if("symbol"===c)return;return c},values:function(a){var c=a.fieldOrDatumDef;a=a.legend.values;c=q.isArray(a)?ph(c,a):T(a)?a:void 0;return c}},Ll="type clipAngle clipExtent center rotate precision reflectX reflectY coefficient distance fraction lobes parallel radius ratio spacing tilt".split(" "),Wd=function(a,c,d,f){a=ra.call(this,Object.assign({},c),{name:a})||\nthis;a.specifiedProjection=c;a.size=d;a.data=f;S(a,"merged",!1);return a};$jscomp.inherits(Wd,ra);$jscomp.global.Object.defineProperties(Wd.prototype,{isFit:{configurable:!0,enumerable:!0,get:function(){return!!this.data}}});var Ea=function(a,c){a=P.call(this,a)||this;a.bins=c;return a};$jscomp.inherits(Ea,P);Ea.prototype.clone=function(){return new Ea(null,Y(this.bins))};Ea.makeFromEncoding=function(a,c){var d=c.reduceFieldDef(function(f,g,h){if(gb(g)&&ka(g.bin)){var k=jj(g,g.bin,c),l=k.key;k=k.binComponent;\nvar m=Object,n=m.assign,p=f[l];var r=c.config;if(Xc(g,h)){var v,t;h=ta(c)?null!==(v=null!==(t=c.axis(h))&&void 0!==t?t:c.legend(h))&&void 0!==v?v:{}:{};v=J(g,{expr:"datum"});t=J(g,{expr:"datum",binSuffix:"end"});g={formulaAs:J(g,{binSuffix:"range",forAs:!0}),formula:xd(v,t,h.format,h.formatType,r)}}else g={};f[l]=n.call(m,{},k,p,g)}return f},{});return ha(d)?null:new Ea(a,d)};Ea.makeFromTransform=function(a,c,d){c=jj(c,c.bin,d);d={};return new Ea(a,(d[c.key]=c.binComponent,d))};Ea.prototype.merge=\nfunction(a,c){for(var d=$jscomp.makeIterator(G(a.bins)),f=d.next();!f.done;f=d.next())f=f.value,f in this.bins?(c(a.bins[f].signal,this.bins[f].signal),this.bins[f].as=Ca([].concat($jscomp.arrayFromIterable(this.bins[f].as),$jscomp.arrayFromIterable(a.bins[f].as)),I)):this.bins[f]=a.bins[f];c=$jscomp.makeIterator(a.children);for(d=c.next();!d.done;d=c.next())d=d.value,a.removeChild(d),d.parent=this;a.remove()};Ea.prototype.producedFields=function(){return new Set(Pa(this.bins).map(function(a){return a.as}).flat(2))};\nEa.prototype.dependentFields=function(){return new Set(Pa(this.bins).map(function(a){return a.field}))};Ea.prototype.hash=function(){return"Bin "+I(this.bins)};Ea.prototype.assemble=function(){return Pa(this.bins).flatMap(function(a){var c=[],d=$jscomp.makeIterator(a.as),f=d.next().value;d=$jscomp.arrayFromIterator(d);var g=a.bin,h=Object.assign({},g);g=g.extent;h=(delete h.extent,h);h=Object.assign({},{type:"bin",field:eb(a.field),as:f,signal:a.signal},rd(g)?{extent:null}:{extent:g},a.span?{span:{signal:"span("+\na.span+")"}}:{},h);!g&&a.extentSignal&&(c.push({type:"extent",field:eb(a.field),signal:a.extentSignal}),h.extent={signal:a.extentSignal});c.push(h);d=$jscomp.makeIterator(d);for(g=d.next();!g.done;g=d.next())for(g=g.value,h=0;2>h;h++)c.push({type:"formula",expr:J({field:f[h]},{expr:"datum"}),as:g[h]});a.formula&&c.push({type:"formula",expr:a.formula,as:a.formulaAs});return c})};var ua=function(a,c,d){a=P.call(this,a)||this;a.dimensions=c;a.measures=d;return a};$jscomp.inherits(ua,P);ua.prototype.clone=\nfunction(){return new ua(null,new Set(this.dimensions),Y(this.measures))};ua.makeFromEncoding=function(a,c){var d=!1;c.forEachFieldDef(function(h){h.aggregate&&(d=!0)});var f={},g=new Set;if(!d)return null;c.forEachFieldDef(function(h,k){var l=h.aggregate,m=h.field;if(l)if("count"===l){var n;null!==(n=f["*"])&&void 0!==n?n:f["*"]={};f["*"].count=new Set([J(h,{forAs:!0})])}else{if(Jb(l)||$b(l)){var p;h=Jb(l)?"argmin":"argmax";l=l[h];null!==(p=f[l])&&void 0!==p?p:f[l]={};f[l][h]=new Set([J({op:h,field:l},\n{forAs:!0})])}else{var r;null!==(r=f[m])&&void 0!==r?r:f[m]={};f[m][l]=new Set([J(h,{forAs:!0})])}if(Mb[k]&&"unaggregated"===c.scaleDomain(k)){var v;null!==(v=f[m])&&void 0!==v?v:f[m]={};f[m].min=new Set([J({field:m,aggregate:"min"},{forAs:!0})]);f[m].max=new Set([J({field:m,aggregate:"max"},{forAs:!0})])}}else m=ta(c)?c.encoding[Ib(k)]:void 0,gb(h)&&ta(c)&&kh(h,m,c.markDef,c.config)?(g.add(J(h,{})),g.add(J(h,{suffix:"end"})),h.bin&&Xc(h,k)&&g.add(J(h,{binSuffix:"range"}))):k in fg?(k=ck(k),g.add(c.getName(k))):\ng.add(J(h))});return 0===g.size+G(f).length?null:new ua(a,g,f)};ua.makeFromTransform=function(a,c){for(var d=new Set,f={},g=$jscomp.makeIterator(c.aggregate),h=g.next();!h.done;h=g.next()){var k=h=h.value,l=k.op,m=k.field;k=k.as;if(l)if("count"===l){var n;null!==(n=f["*"])&&void 0!==n?n:f["*"]={};f["*"].count=new Set([k?k:J(h,{forAs:!0})])}else{var p;null!==(p=f[m])&&void 0!==p?p:f[m]={};f[m][l]=new Set([k?k:J(h,{forAs:!0})])}}c=$jscomp.makeIterator(null!==(r=c.groupby)&&void 0!==r?r:[]);for(h=c.next();!h.done;h=\nc.next()){var r;d.add(h.value)}return 0===d.size+G(f).length?null:new ua(a,d,f)};ua.prototype.merge=function(a){if(xc(this.dimensions,a.dimensions)){var c=this.measures;a=a.measures;for(var d=$jscomp.makeIterator(G(a)),f=d.next();!f.done;f=d.next()){f=f.value;for(var g=a[f],h=$jscomp.makeIterator(G(g)),k=h.next();!k.done;k=h.next())if(k=k.value,f in c){var l;c[f][k]=new Set([].concat($jscomp.arrayFromIterable(null!==(l=c[f][k])&&void 0!==l?l:[]),$jscomp.arrayFromIterable(g[k])))}else{var m={};c[f]=\n(m[k]=g[k],m)}}return!0}kk("different dimensions, cannot merge");return!1};ua.prototype.addDimensions=function(a){a.forEach(this.dimensions.add,this.dimensions)};ua.prototype.dependentFields=function(){return new Set([].concat($jscomp.arrayFromIterable(this.dimensions),$jscomp.arrayFromIterable(G(this.measures))))};ua.prototype.producedFields=function(){for(var a=new Set,c=$jscomp.makeIterator(G(this.measures)),d=c.next();!d.done;d=c.next()){d=d.value;for(var f=$jscomp.makeIterator(G(this.measures[d])),\ng=f.next();!g.done;g=f.next()){g=g.value;var h=this.measures[d][g];0===h.size?a.add(g+"_"+d):h.forEach(a.add,a)}}return a};ua.prototype.hash=function(){return"Aggregate "+I({dimensions:this.dimensions,measures:this.measures})};ua.prototype.assemble=function(){for(var a=[],c=[],d=[],f=$jscomp.makeIterator(G(this.measures)),g=f.next();!g.done;g=f.next()){g=g.value;for(var h=$jscomp.makeIterator(G(this.measures[g])),k=h.next();!k.done;k=h.next()){k=k.value;for(var l=$jscomp.makeIterator(this.measures[g][k]),\nm=l.next();!m.done;m=l.next())d.push(m.value),a.push(k),c.push("*"===g?null:eb(g))}}return{type:"aggregate",groupby:[].concat($jscomp.arrayFromIterable(this.dimensions)).map(eb),ops:a,fields:c,as:d}};$jscomp.global.Object.defineProperties(ua.prototype,{groupBy:{configurable:!0,enumerable:!0,get:function(){return this.dimensions}}});var La=function(a,c,d,f){a=P.call(this,a)||this;a.model=c;a.name=d;a.data=f;S(a,"column",void 0);S(a,"row",void 0);S(a,"facet",void 0);S(a,"childModel",void 0);d=$jscomp.makeIterator(ib);\nfor(f=d.next();!f.done;f=d.next()){f=f.value;var g=c.facet[f];if(g){var h=g,k=h.bin;h=h.sort;a[f]=Object.assign({},{name:c.getName(f+"_domain"),fields:[J(g)].concat($jscomp.arrayFromIterable(ka(k)?[J(g,{binSuffix:"end"})]:[]))},zb(h)?{sortField:h}:q.isArray(h)?{sortIndexField:Mc(g,f)}:{})}}a.childModel=c.child;return a};$jscomp.inherits(La,P);La.prototype.hash=function(){for(var a="Facet",c=$jscomp.makeIterator(ib),d=c.next();!d.done;d=c.next())d=d.value,this[d]&&(a+=" "+d.charAt(0)+":"+I(this[d]));\nreturn a};La.prototype.dependentFields=function(){for(var a=new Set(this.fields),c=$jscomp.makeIterator(ib),d=c.next();!d.done;d=c.next())d=d.value,this[d]&&(this[d].sortField&&a.add(this[d].sortField.field),this[d].sortIndexField&&a.add(this[d].sortIndexField));return a};La.prototype.producedFields=function(){return new Set};La.prototype.getSource=function(){return this.name};La.prototype.getChildIndependentFieldsWithStep=function(){for(var a={},c=$jscomp.makeIterator(Db),d=c.next();!d.done;d=c.next()){d=\nd.value;var f=this.childModel.component.scales[d];if(f&&!f.merged){var g=f.get("type");f=f.get("range");g in Ha&&cc(f)&&(g=Zd(this.childModel,d),(g=Tf(g))?a[d]=g:H(we(d)))}}return a};La.prototype.assembleRowColumnHeaderData=function(a,c,d){var f={row:"y",column:"x",facet:void 0}[a],g=[],h=[],k=[];f&&d&&d[f]&&(c?(g.push("distinct_"+d[f]),h.push("max")):(g.push(d[f]),h.push("distinct")),k.push("distinct_"+d[f]));f=this[a];d=f.sortField;f=f.sortIndexField;d?(f=void 0===d.op?"min":d.op,g.push(d.field),\nh.push(f),k.push(J(d,{forAs:!0}))):f&&(g.push(f),h.push("max"),k.push(f));return{name:this[a].name,source:null!==c&&void 0!==c?c:this.data,transform:[Object.assign({},{type:"aggregate",groupby:this[a].fields},g.length?{fields:g,ops:h,as:k}:{})]}};La.prototype.assembleFacetHeaderData=function(a){for(var c=this.model.layout.columns,d=this.model.component.layoutHeaders,f=[],g={},h=$jscomp.makeIterator(jg),k=h.next();!k.done;k=h.next()){k=k.value;for(var l=$jscomp.makeIterator(kg),m=l.next();!m.done;m=\nl.next()){m=m.value;var n;m=null!==(n=d[k]&&d[k][m])&&void 0!==n?n:[];m=$jscomp.makeIterator(m);for(var p=m.next();!p.done;p=m.next()){var r;if(0<(null===(r=p.value.axes)||void 0===r?void 0:r.length)){g[k]=!0;break}}}g[k]&&(l=\'length(data("\'+this.facet.name+\'"))\',f.push({name:this.facet.name+"_"+k,transform:[{type:"sequence",start:0,stop:"row"===k?c?{signal:"ceil("+l+" / "+c+")"}:1:c?{signal:"min("+l+", "+c+")"}:{signal:l}}]}))}c=g.column;(g.row||c)&&f.unshift(this.assembleRowColumnHeaderData("facet",\nnull,a));return f};La.prototype.assemble=function(){var a=[],c=null,d=this.getChildIndependentFieldsWithStep(),f=this.row,g=this.facet;if(this.column&&f&&(d.x||d.y)){var h,k;c="cross_"+this.column.name+"_"+this.row.name;f=[].concat(null!==(h=d.x)&&void 0!==h?h:[],null!==(k=d.y)&&void 0!==k?k:[]);var l=f.map(function(){return"distinct"});a.push({name:c,source:this.data,transform:[{type:"aggregate",groupby:this.fields,fields:f,ops:l}]})}f=$jscomp.makeIterator(["column","row"]);for(l=f.next();!l.done;l=\nf.next())l=l.value,this[l]&&a.push(this.assembleRowColumnHeaderData(l,c,d));g&&(c=this.assembleFacetHeaderData(d))&&a.push.apply(a,$jscomp.arrayFromIterable(c));return a};$jscomp.global.Object.defineProperties(La.prototype,{fields:{configurable:!0,enumerable:!0,get:function(){for(var a=[],c=$jscomp.makeIterator(ib),d=c.next();!d.done;d=c.next()){d=d.value;var f;null!==(f=this[d])&&void 0!==f&&f.fields&&a.push.apply(a,$jscomp.arrayFromIterable(this[d].fields))}return a}}});var ma=function(a,c){a=P.call(this,\na)||this;S(a,"_parse",void 0);a._parse=c;return a};$jscomp.inherits(ma,P);ma.prototype.clone=function(){return new ma(null,Y(this._parse))};ma.prototype.hash=function(){return"Parse "+I(this._parse)};ma.makeExplicit=function(a,c,d){var f={};c=c.data;!uc(c)&&c&&c.format&&c.format.parse&&(f=c.format.parse);return this.makeWithAncestors(a,f,{},d)};ma.makeWithAncestors=function(a,c,d,f){for(var g=$jscomp.makeIterator(G(d)),h=g.next();!h.done;h=g.next()){h=h.value;var k=f.getWithExplicit(h);void 0!==k.value&&\n(k.explicit||k.value===d[h]||"derived"===k.value||"flatten"===d[h]?delete d[h]:H(Kg(h,d[h],k.value)))}g=$jscomp.makeIterator(G(c));for(h=g.next();!h.done;h=g.next())h=h.value,k=f.get(h),void 0!==k&&(k===c[h]?delete c[h]:H(Kg(h,c[h],k)));c=new ra(c,d);f.copyAll(c);d={};g=$jscomp.makeIterator(G(c.combine()));for(h=g.next();!h.done;h=g.next())h=h.value,k=c.get(h),null!==k&&(d[h]=k);return 0===G(d).length||f.parseNothing?null:new ma(a,d)};ma.prototype.merge=function(a){this._parse=Object.assign({},this._parse,\na.parse);a.remove()};ma.prototype.assembleFormatParse=function(){for(var a={},c=$jscomp.makeIterator(G(this._parse)),d=c.next();!d.done;d=c.next()){d=d.value;var f=this._parse[d];1===zc(d)&&(a[d]=f)}return a};ma.prototype.producedFields=function(){return new Set(G(this._parse))};ma.prototype.dependentFields=function(){return new Set(G(this._parse))};ma.prototype.assembleTransforms=function(a){var c=this;a=void 0===a?!1:a;return G(this._parse).filter(function(d){return a?1<zc(d):!0}).map(function(d){var f=\nMl(d,c._parse[d]);return f?{type:"formula",expr:f,as:qe(d)}:null}).filter(function(d){return null!==d})};$jscomp.global.Object.defineProperties(ma.prototype,{parse:{configurable:!0,enumerable:!0,get:function(){return this._parse}}});var cb=function(a){return P.call(this,a)||this};$jscomp.inherits(cb,P);cb.prototype.clone=function(){return new cb(null)};cb.prototype.dependentFields=function(){return new Set};cb.prototype.producedFields=function(){return new Set(["_vgsid_"])};cb.prototype.hash=function(){return"Identifier"};\ncb.prototype.assemble=function(){return{type:"identifier",as:"_vgsid_"}};var Eb=function(a,c){a=P.call(this,a)||this;a.params=c;return a};$jscomp.inherits(Eb,P);Eb.prototype.clone=function(){return new Eb(null,this.params)};Eb.prototype.dependentFields=function(){return new Set};Eb.prototype.producedFields=function(){};Eb.prototype.hash=function(){return"Graticule "+I(this.params)};Eb.prototype.assemble=function(){return Object.assign({},{type:"graticule"},!0===this.params?{}:this.params)};var Fb=\nfunction(a,c){a=P.call(this,a)||this;a.params=c;return a};$jscomp.inherits(Fb,P);Fb.prototype.clone=function(){return new Fb(null,this.params)};Fb.prototype.dependentFields=function(){return new Set};Fb.prototype.producedFields=function(){var a;return new Set([null!==(a=this.params.as)&&void 0!==a?a:"data"])};Fb.prototype.hash=function(){return"Hash "+I(this.params)};Fb.prototype.assemble=function(){return Object.assign({},{type:"sequence"},this.params)};var Ra=function(a){var c;var d=P.call(this,\nnull)||this;S(d,"_data",void 0);S(d,"_name",void 0);S(d,"_generator",void 0);null!==(c=a)&&void 0!==c?c:a={name:"source"};var f;uc(a)||(f=a.format?Object.assign({},D(a.format,["parse"])):{});if("values"in a)d._data={values:a.values};else if("url"in a){if(d._data={url:a.url},!f.type){var g=/(?:\\.([^.]+))?$/.exec(a.url)[1];B(["json","csv","tsv","dsv","topojson"],g)||(g="json");f.type=g}}else if("sphere"in a)d._data={values:[{type:"Sphere"}]};else if(bi(a)||uc(a))d._data={};d._generator=uc(a);a.name&&\n(d._name=a.name);f&&!ha(f)&&(d._data.format=f);return d};$jscomp.inherits(Ra,P);Ra.prototype.dependentFields=function(){return new Set};Ra.prototype.producedFields=function(){};Ra.prototype.hasName=function(){return!!this._name};Ra.prototype.remove=function(){throw Error("Source nodes are roots and cannot be removed.");};Ra.prototype.hash=function(){throw Error("Cannot hash sources");};Ra.prototype.assemble=function(){return Object.assign({},{name:this._name},this._data,{transform:[]})};$jscomp.global.Object.defineProperties(Ra.prototype,\n{data:{configurable:!0,enumerable:!0,get:function(){return this._data}},isGenerator:{configurable:!0,enumerable:!0,get:function(){return this._generator}},dataName:{configurable:!0,enumerable:!0,get:function(){return this._name},set:function(a){this._name=a}},parent:{configurable:!0,enumerable:!0,set:function(a){throw Error("Source nodes have to be roots.");}}});var le=new WeakMap,kc=function(){le.set(this,{writable:!0,value:void 0});Dg(this,le,!1)};kc.prototype.setModified=function(){Dg(this,le,\n!0)};$jscomp.global.Object.defineProperties(kc.prototype,{modifiedFlag:{configurable:!0,enumerable:!0,get:function(){return hk(this,le)}}});var Ga=function(){return kc.apply(this,arguments)||this};$jscomp.inherits(Ga,kc);Ga.prototype.getNodeDepths=function(a,c,d){d.set(a,c);a=$jscomp.makeIterator(a.children);for(var f=a.next();!f.done;f=a.next())this.getNodeDepths(f.value,c+1,d);return d};Ga.prototype.optimize=function(a){a=this.getNodeDepths(a,0,new Map);a=[].concat($jscomp.arrayFromIterable(a.entries())).sort(function(d,\nf){return f[1]-d[1]});a=$jscomp.makeIterator(a);for(var c=a.next();!c.done;c=a.next())this.run(c.value[0]);return this.modifiedFlag};var lc=function(){return kc.apply(this,arguments)||this};$jscomp.inherits(lc,kc);lc.prototype.optimize=function(a){this.run(a);a=$jscomp.makeIterator(a.children);for(var c=a.next();!c.done;c=a.next())this.optimize(c.value);return this.modifiedFlag};var Yd=function(){return lc.apply(this,arguments)||this};$jscomp.inherits(Yd,lc);Yd.prototype.mergeNodes=function(a,c){var d=\nc.shift();c=$jscomp.makeIterator(c);for(var f=c.next();!f.done;f=c.next())f=f.value,a.removeChild(f),f.parent=d,f.remove()};Yd.prototype.run=function(a){for(var c=a.children.map(function(g){return g.hash()}),d={},f=0;f<c.length;f++)void 0===d[c[f]]?d[c[f]]=[a.children[f]]:d[c[f]].push(a.children[f]);c=$jscomp.makeIterator(G(d));for(f=c.next();!f.done;f=c.next())f=f.value,1<d[f].length&&(this.setModified(),this.mergeNodes(a,d[f]))};var If=function(a){var c=lc.call(this)||this;S(c,"requiresSelectionId",\nvoid 0);c.requiresSelectionId=a&&nf(a);return c};$jscomp.inherits(If,lc);If.prototype.run=function(a){!(a instanceof cb)||this.requiresSelectionId&&(Ef(a.parent)||a.parent instanceof ua||a.parent instanceof ma)||(this.setModified(),a.remove())};var Xd=function(){return kc.apply(this,arguments)||this};$jscomp.inherits(Xd,kc);Xd.prototype.optimize=function(a){this.run(a,new Set);return this.modifiedFlag};Xd.prototype.run=function(a,c){var d=new Set;a instanceof Ba&&(d=a.producedFields(),mc(d,c)&&(this.setModified(),\na.removeFormulas(c),0===a.producedFields.length&&a.remove()));a=$jscomp.makeIterator(a.children);for(var f=a.next();!f.done;f=a.next())this.run(f.value,new Set([].concat($jscomp.arrayFromIterable(c),$jscomp.arrayFromIterable(d))))};var Hf=function(){return lc.call(this)||this};$jscomp.inherits(Hf,lc);Hf.prototype.run=function(a){a instanceof qa&&!a.isRequired()&&(this.setModified(),a.remove())};var Kf=function(){return Ga.apply(this,arguments)||this};$jscomp.inherits(Kf,Ga);Kf.prototype.run=function(a){if(!(Ef(a)||\n1<a.numChildren()))for(var c=$jscomp.makeIterator(a.children),d=c.next();!d.done;d=c.next())d=d.value,d instanceof ma&&(a instanceof ma?(this.setModified(),a.merge(d)):oe(a.producedFields(),d.dependentFields())||(this.setModified(),d.swapWithParent()))};var Mf=function(){return Ga.apply(this,arguments)||this};$jscomp.inherits(Mf,Ga);Mf.prototype.run=function(a){var c=[].concat($jscomp.arrayFromIterable(a.children)),d=a.children.filter(function(m){return m instanceof ma});if(1<a.numChildren()&&1<=\nd.length){var f={},g=new Set;d=$jscomp.makeIterator(d);for(var h=d.next();!h.done;h=d.next()){h=h.value.parse;for(var k=$jscomp.makeIterator(G(h)),l=k.next();!l.done;l=k.next())l=l.value,l in f?f[l]!==h[l]&&g.add(l):f[l]=h[l]}g=$jscomp.makeIterator(g);for(d=g.next();!d.done;d=g.next())delete f[d.value];if(!ha(f))for(this.setModified(),g=new ma(a,f),c=$jscomp.makeIterator(c),d=c.next();!d.done;d=c.next()){d=d.value;if(d instanceof ma)for(h=$jscomp.makeIterator(G(f)),k=h.next();!k.done;k=h.next())delete d.parse[k.value];\na.removeChild(d);d.parent=g;d instanceof ma&&0===G(d.parse).length&&d.remove()}}};var Jf=function(){return Ga.apply(this,arguments)||this};$jscomp.inherits(Jf,Ga);Jf.prototype.run=function(a){a instanceof qa||0<a.numChildren()||a instanceof La||a instanceof Ra||(this.setModified(),a.remove())};var Of=function(){return Ga.apply(this,arguments)||this};$jscomp.inherits(Of,Ga);Of.prototype.run=function(a){var c=a.children.filter(function(f){return f instanceof Ba});a=c.pop();c=$jscomp.makeIterator(c);\nfor(var d=c.next();!d.done;d=c.next())d=d.value,this.setModified(),a.merge(d)};var Nf=function(){return Ga.apply(this,arguments)||this};$jscomp.inherits(Nf,Ga);Nf.prototype.run=function(a){var c=a.children.filter(function(k){return k instanceof ua}),d={};c=$jscomp.makeIterator(c);for(var f=c.next();!f.done;f=c.next()){var g=f.value;f=I(g.groupBy);f in d||(d[f]=[]);d[f].push(g)}c=$jscomp.makeIterator(G(d));for(g=c.next();!g.done;g=c.next())if(f=d[g.value],1<f.length){g=f.pop();var h=$jscomp.makeIterator(f);\nfor(f=h.next();!f.done;f=h.next())f=f.value,g.merge(f)&&(a.removeChild(f),f.parent=g,f.remove(),this.setModified())}};var Lf=function(a){var c=Ga.call(this)||this;c.model=a;return c};$jscomp.inherits(Lf,Ga);Lf.prototype.run=function(a){for(var c=!(Ef(a)||a instanceof sb||a instanceof ma||a instanceof cb),d=[],f=[],g=$jscomp.makeIterator(a.children),h=g.next();!h.done;h=g.next())h=h.value,h instanceof Ea&&(c&&!oe(a.producedFields(),h.dependentFields())?d.push(h):f.push(h));if(0<d.length){c=d.pop();\ng=$jscomp.makeIterator(d);for(d=g.next();!d.done;d=g.next())c.merge(d.value,this.model.renameSignal.bind(this.model));this.setModified();a instanceof Ea?a.merge(c,this.model.renameSignal.bind(this.model)):c.swapWithParent()}if(1<f.length){a=f.pop();f=$jscomp.makeIterator(f);for(d=f.next();!d.done;d=f.next())a.merge(d.value,this.model.renameSignal.bind(this.model));this.setModified()}};var Pf=function(){return Ga.apply(this,arguments)||this};$jscomp.inherits(Pf,Ga);Pf.prototype.run=function(a){var c=\n[].concat($jscomp.arrayFromIterable(a.children));if(L(c,function(l){return l instanceof qa})&&!(1>=a.numChildren())){var d=[];c=$jscomp.makeIterator(c);for(var f=c.next();!f.done;f=c.next())if(f=f.value,f instanceof qa){for(var g=f;1===g.numChildren();){var h=$jscomp.makeIterator(g.children).next().value;if(h instanceof qa)g=h;else break}d.push.apply(d,$jscomp.arrayFromIterable(g.children));if(k)a.removeChild(f),f.parent=k.parent,k.parent.removeChild(k),k.parent=g,this.setModified();else var k=g}else d.push(f);\nif(d.length)for(this.setModified(),a=$jscomp.makeIterator(d),f=a.next();!f.done;f=a.next())d=f.value,d.parent.removeChild(d),d.parent=k}};var Xa=function(a,c){a=P.call(this,a)||this;a.transform=c;return a};$jscomp.inherits(Xa,P);Xa.prototype.clone=function(){return new Xa(null,Y(this.transform))};Xa.prototype.addDimensions=function(a){this.transform.groupby=Ca(this.transform.groupby.concat(a),function(c){return c})};Xa.prototype.dependentFields=function(){var a=new Set;this.transform.groupby&&this.transform.groupby.forEach(a.add,\na);this.transform.joinaggregate.map(function(c){return c.field}).filter(function(c){return void 0!==c}).forEach(a.add,a);return a};Xa.prototype.producedFields=function(){return new Set(this.transform.joinaggregate.map(this.getDefaultName))};Xa.prototype.getDefaultName=function(a){var c;return null!==(c=a.as)&&void 0!==c?c:J(a)};Xa.prototype.hash=function(){return"JoinAggregateTransform "+I(this.transform)};Xa.prototype.assemble=function(){for(var a=[],c=[],d=[],f=$jscomp.makeIterator(this.transform.joinaggregate),\ng=f.next();!g.done;g=f.next())g=g.value,c.push(g.op),d.push(this.getDefaultName(g)),a.push(void 0===g.field?null:g.field);f=this.transform.groupby;return Object.assign({},{type:"joinaggregate",as:d,ops:c,fields:a},void 0!==f?{groupby:f}:{})};var Aa=function(a,c){a=P.call(this,a)||this;S(a,"_stack",void 0);a._stack=c;return a};$jscomp.inherits(Aa,P);Aa.prototype.clone=function(){return new Aa(null,Y(this._stack))};Aa.makeFromTransform=function(a,c){var d=c.stack,f=c.groupby,g=c.as,h=void 0===c.offset?\n"zero":c.offset,k=[],l=[];if(void 0!==c.sort)for(var m=$jscomp.makeIterator(c.sort),n=m.next();!n.done;n=m.next())n=n.value,k.push(n.field),l.push(sa(n.order,"ascending"));k={field:k,order:l};c=Ql(g)?g:q.isString(g)?[g,g+"_end"]:[c.stack+"_start",c.stack+"_end"];return new Aa(a,{stackField:d,groupby:f,offset:h,sort:k,facetby:[],as:c})};Aa.makeFromEncoding=function(a,c){var d=c.stack,f=c.encoding;if(!d)return null;var g=d.groupbyChannel,h=d.fieldChannel,k=d.offset;d=d.impute;var l;g&&(l=Bb(f[g]));\nf=Pl(c);g=c.encoding.order;g=q.isArray(g)||K(g)?yg(g):f.reduce(function(m,n){m.field.push(n);m.order.push("y"===h?"descending":"ascending");return m},{field:[],order:[]});return new Aa(a,{dimensionFieldDef:l,stackField:c.vgField(h),facetby:[],stackby:f,sort:g,offset:k,impute:d,as:[c.vgField(h,{suffix:"start",forAs:!0}),c.vgField(h,{suffix:"end",forAs:!0})]})};Aa.prototype.addDimensions=function(a){this._stack.facetby.push.apply(this._stack.facetby,$jscomp.arrayFromIterable(a))};Aa.prototype.dependentFields=\nfunction(){var a=new Set;a.add(this._stack.stackField);this.getGroupbyFields().forEach(a.add,a);this._stack.facetby.forEach(a.add,a);this._stack.sort.field.forEach(a.add,a);return a};Aa.prototype.producedFields=function(){return new Set(this._stack.as)};Aa.prototype.hash=function(){return"Stack "+I(this._stack)};Aa.prototype.getGroupbyFields=function(){var a=this._stack,c=a.dimensionFieldDef,d=a.impute;a=a.groupby;return c?c.bin?d?[J(c,{binSuffix:"mid"})]:[J(c,{}),J(c,{binSuffix:"end"})]:[J(c)]:null!==\na&&void 0!==a?a:[]};Aa.prototype.assemble=function(){var a=[],c=this._stack,d=c.facetby,f=c.dimensionFieldDef,g=c.stackField,h=c.stackby,k=c.sort,l=c.offset,m=c.as;c.impute&&f&&(c=void 0===f.bandPosition?.5:f.bandPosition,f.bin&&a.push({type:"formula",expr:c+"*"+J(f,{expr:"datum"})+("+"+(1-c)+"*")+J(f,{expr:"datum",binSuffix:"end"}),as:J(f,{binSuffix:"mid",forAs:!0})}),a.push({type:"impute",field:g,groupby:[].concat($jscomp.arrayFromIterable(h),$jscomp.arrayFromIterable(d)),key:J(f,{binSuffix:"mid"}),\nmethod:"value",value:0}));a.push({type:"stack",groupby:[].concat($jscomp.arrayFromIterable(this.getGroupbyFields()),$jscomp.arrayFromIterable(d)),field:g,sort:k,as:m,offset:l});return a};$jscomp.global.Object.defineProperties(Aa.prototype,{stack:{configurable:!0,enumerable:!0,get:function(){return this._stack}}});var bb=function(a,c){a=P.call(this,a)||this;a.transform=c;return a};$jscomp.inherits(bb,P);bb.prototype.clone=function(){return new bb(null,Y(this.transform))};bb.prototype.addDimensions=\nfunction(a){this.transform.groupby=Ca(this.transform.groupby.concat(a),function(c){return c})};bb.prototype.dependentFields=function(){var a,c,d=new Set;(null!==(a=this.transform.groupby)&&void 0!==a?a:[]).forEach(d.add,d);(null!==(c=this.transform.sort)&&void 0!==c?c:[]).forEach(function(f){return d.add(f.field)});this.transform.window.map(function(f){return f.field}).filter(function(f){return void 0!==f}).forEach(d.add,d);return d};bb.prototype.producedFields=function(){return new Set(this.transform.window.map(this.getDefaultName))};\nbb.prototype.getDefaultName=function(a){var c;return null!==(c=a.as)&&void 0!==c?c:J(a)};bb.prototype.hash=function(){return"WindowTransform "+I(this.transform)};bb.prototype.assemble=function(){for(var a=[],c=[],d=[],f=[],g=$jscomp.makeIterator(this.transform.window),h=g.next();!h.done;h=g.next())h=h.value,c.push(h.op),d.push(this.getDefaultName(h)),f.push(void 0===h.param?null:h.param),a.push(void 0===h.field?null:h.field);g=this.transform.frame;h=this.transform.groupby;if(g&&null===g[0]&&null===\ng[1]&&c.every(function(r){return te(r)}))return Object.assign({},{type:"joinaggregate",as:d,ops:c,fields:a},void 0!==h?{groupby:h}:{});var k=[],l=[];if(void 0!==this.transform.sort)for(var m=$jscomp.makeIterator(this.transform.sort),n=m.next();!n.done;n=m.next()){n=n.value;var p;k.push(n.field);l.push(null!==(p=n.order)&&void 0!==p?p:"ascending")}m=this.transform.ignorePeers;return Object.assign({},{type:"window",params:f,as:d,ops:c,fields:a,sort:{field:k,order:l}},void 0!==m?{ignorePeers:m}:{},void 0!==\nh?{groupby:h}:{},void 0!==g?{frame:g}:{})};var Ya=function(a){S(this,"signal",void 0);Object.defineProperty(this,"signal",{enumerable:!0,get:a})};Ya.fromName=function(a,c){return new Ya(function(){return a(c)})};var $d=function(a,c){a=ra.call(this,{},{name:a})||this;S(a,"merged",!1);a.setWithExplicit("type",c);return a};$jscomp.inherits($d,ra);$d.prototype.domainDefinitelyIncludesZero=function(){return!1!==this.get("zero")?!0:L(this.get("domains"),function(a){return q.isArray(a)&&2===a.length&&0>=\na[0]&&0<=a[1]})};var Yl=["range","scheme"],xj={bins:function(a){var c=a.model;a=a.fieldOrDatumDef;return K(a)?dm(c,a):void 0},interpolate:function(a){var c=a.fieldOrDatumDef.type;a=B(["color","fill","stroke"],a.channel)&&"nominal"!==c?"hcl":void 0;return a},nice:function(a){var c=a.scaleType,d=a.channel,f=a.domain,g;a=null!==(g=Bb(a.fieldOrDatumDef))&&void 0!==g&&g.bin||q.isArray(f)||B([ya.TIME,ya.UTC],c)?void 0:d in Fa?!0:void 0;return a},padding:function(a){var c=a.config;a:{var d=a.channel;var f=\na.scaleType,g=c.scale,h=a.fieldOrDatumDef;a=a.markDef;c=c.bar;if(d in Fa){if(f in mb){if(void 0!==g.continuousPadding){d=g.continuousPadding;break a}var k=a.orient;if("bar"===a.type&&(!K(h)||!h.bin&&!h.timeUnit)&&("vertical"===k&&"x"===d||"horizontal"===k&&"y"===d)){d=c.continuousBandSize;break a}}if(f===ya.POINT){d=g.pointPadding;break a}}d=void 0}return d},paddingInner:function(a){var c=a.channel,d=a.markDef,f=a.config;void 0!==a.scalePadding?d=void 0:c in Fa?(a=f.scale,c=a.barBandPaddingInner,\nf=a.rectBandPaddingInner,d=sa(a.bandPaddingInner,"bar"===d.type?c:f)):d=void 0;return d},paddingOuter:function(a){var c=a.channel,d=a.scaleType,f=a.config;var g=a.scalePaddingInner;a=void 0!==a.scalePadding?void 0:c in Fa&&d===ya.BAND?sa(f.scale.bandPaddingOuter,T(g)?{signal:g.signal+"/2"}:g/2):void 0;return a},reverse:function(a){var c=a.fieldOrDatumDef,d=a.scaleType,f=a.channel;a=a.config;c=K(c)?c.sort:void 0;a=a.scale;d="x"===f&&void 0!==a.xReverse?d in $a&&"descending"===c?T(a.xReverse)?{signal:"!"+\na.xReverse.signal}:!a.xReverse:a.xReverse:d in $a&&"descending"===c?!0:void 0;return d},zero:function(a){a:{var c=a.channel;var d=a.fieldOrDatumDef,f=a.domain,g=a.markDef;a=a.scaleType;if(f&&"unaggregated"!==f&&a in $a){if(q.isArray(f)&&(c=f[f.length-1],0>=f[0]&&0<=c)){c=!0;break a}c=!1}else"size"!==c||"quantitative"!==d.type||a in Wc?K(d)&&d.bin||!B([].concat($jscomp.arrayFromIterable(Db),$jscomp.arrayFromIterable(Im)),c)?c=!1:(f=g.orient,c=B(["bar","area","line","trail"],g.type)&&("horizontal"===\nf&&"y"===c||"vertical"===f&&"x"===c)?!1:!0):c=!0}return c}},gm=ai(function(a,c){return Pj[a]-Pj[c]}),Qc=function(){S(this,"nameMap",void 0);this.nameMap={}};Qc.prototype.rename=function(a,c){this.nameMap[a]=c};Qc.prototype.has=function(a){return void 0!==this.nameMap[a]};Qc.prototype.get=function(a){for(;this.nameMap[a]&&a!==this.nameMap[a];)a=this.nameMap[a];return a};var aa=function(a,c,d,f,g,h,k){var l=this,m,n;this.type=c;this.parent=d;this.config=g;S(this,"name",void 0);S(this,"size",void 0);\nS(this,"title",void 0);S(this,"description",void 0);S(this,"data",void 0);S(this,"transforms",void 0);S(this,"layout",void 0);S(this,"scaleNameMap",void 0);S(this,"projectionNameMap",void 0);S(this,"signalNameMap",void 0);S(this,"component",void 0);S(this,"view",void 0);S(this,"children",[]);S(this,"correctDataNames",function(p){p.from&&p.from.data&&(p.from.data=l.lookupDataSource(p.from.data));p.from&&p.from.facet&&p.from.facet.data&&(p.from.facet.data=l.lookupDataSource(p.from.facet.data));return p});\nthis.parent=d;this.config=g;this.view=Va(k);this.name=null!==(m=a.name)&&void 0!==m?m:f;this.title=bc(a.title)?{text:a.title}:a.title?Va(a.title):void 0;this.scaleNameMap=d?d.scaleNameMap:new Qc;this.projectionNameMap=d?d.projectionNameMap:new Qc;this.signalNameMap=d?d.signalNameMap:new Qc;this.data=a.data;this.description=a.description;this.transforms=Wk(null!==(n=a.transform)&&void 0!==n?n:[]);this.layout="layer"===c||"unit"===c?{}:Hk(a,c,g);this.component={data:{sources:d?d.component.data.sources:\n[],outputNodes:d?d.component.data.outputNodes:{},outputNodeRefCounts:d?d.component.data.outputNodeRefCounts:{},isFaceted:"facet"in a||d&&d.component.data.isFaceted&&void 0===a.data},layoutSize:new ra,layoutHeaders:{row:{},column:{},facet:{}},mark:null,resolve:Object.assign({},{scale:{},axis:{},legend:{}},h?Y(h):{}),selection:null,scales:null,projection:null,axes:{},legends:{}}};aa.prototype.parse=function(){this.parseScale();this.parseLayoutSize();this.renameTopLevelLayoutSizeSignal();this.parseSelections();\nthis.parseProjection();this.parseData();this.parseAxesAndHeaders();this.parseLegends();this.parseMarkGroup()};aa.prototype.parseScale=function(){var a={}.ignoreRange;Aj(this);ta(this)?nj(this):pj(this);for(var c=$jscomp.makeIterator(Mm),d=c.next();!d.done;d=c.next())wj(this,d.value);a||zj(this)};aa.prototype.parseProjection=function(){this.component.projection=ta(this)?hj(this):ij(this)};aa.prototype.renameTopLevelLayoutSizeSignal=function(){"width"!==this.getName("width")&&this.renameSignal(this.getName("width"),\n"width");"height"!==this.getName("height")&&this.renameSignal(this.getName("height"),"height")};aa.prototype.parseLegends=function(){Yi(this)};aa.prototype.assembleGroupStyle=function(){if("unit"===this.type||"layer"===this.type){var a,c;return null!==(a=null===(c=this.view)||void 0===c?void 0:c.style)&&void 0!==a?a:"cell"}};aa.prototype.assembleEncodeFromView=function(a){a=Object.assign({},a);a=(delete a.style,a);for(var c={},d=$jscomp.makeIterator(G(a)),f=d.next();!f.done;f=d.next()){f=f.value;\nvar g=a[f];void 0!==g&&(c[f]=pa(g))}return c};aa.prototype.assembleGroupEncodeEntry=function(a){var c={};this.view&&(c=this.assembleEncodeFromView(this.view));if(!a&&(this.description&&(c.description=pa(this.description)),"unit"===this.type||"layer"===this.type)){var d;return Object.assign({},{width:this.getSizeSignalRef("width"),height:this.getSizeSignalRef("height")},null!==(d=c)&&void 0!==d?d:{})}return ha(c)?void 0:c};aa.prototype.assembleLayout=function(){if(this.layout){var a=this.layout,c=\nObject.assign({},a);a=a.spacing;c=(delete c.spacing,c);for(var d=this.config,f=this.component.layoutHeaders,g={},h=$jscomp.makeIterator(ib),k=h.next();!k.done;k=h.next()){k=k.value;var l=f[k];if(null!==l&&void 0!==l&&l.facetFieldDef){var m=Ud(["titleAnchor","titleOrient"],l.facetFieldDef.header,d,k);l=m.titleAnchor;k=Td(k,m.titleOrient);l=Tm[k][l];void 0!==l&&(g[k]=l)}}d=ha(g)?void 0:g;return Object.assign({},{padding:a},this.assembleDefaultLayout(),c,d?{titleBand:d}:{})}};aa.prototype.assembleDefaultLayout=\nfunction(){return{}};aa.prototype.assembleHeaderMarks=function(){for(var a=this.component.layoutHeaders,c=[],d=$jscomp.makeIterator(ib),f=d.next();!f.done;f=d.next()){var g=f.value;if(a[g].title){f=c;var h=f.push,k=this.component.layoutHeaders[g].title,l=this.config?this.config:void 0,m=this.component.layoutHeaders[g].facetFieldDef?this.component.layoutHeaders[g].facetFieldDef:void 0,n=Ud(["titleAnchor","titleAngle","titleOrient"],m.header,l,g),p=n.titleAnchor,r=n.titleAngle;n=Td(g,n.titleOrient);\nr=Tc(r);g={name:g+"-title",type:"group",role:n+"-title",title:Object.assign({},{text:k},"row"===g?{orient:"left"}:{},{style:"guide-title"},Oi(r,n),Ni(n,r,p),Pi(l,m,g,Rm,Vj))};h.call(f,g)}}a=$jscomp.makeIterator(jg);for(f=a.next();!f.done;f=a.next()){d=f.value;f=c.concat;h=this.component.layoutHeaders[d];g=[];k=$jscomp.makeIterator(kg);for(l=k.next();!l.done;l=k.next())if(l=l.value,h[l])for(m=$jscomp.makeIterator(h[l]),r=m.next();!r.done;r=m.next()){a:{p=void 0;var v=l,t=h;if(r=r.value){n=null;var y=\nt.facetFieldDef;var w=this.config?this.config:void 0;if(y&&r.labels){var E=Ud(["labelOrient"],y.header,w,d).labelOrient;if("row"===d&&!B(["top","bottom"],E)||"column"===d&&!B(["left","right"],E))n=yf(y,d,w)}w=ob(this)&&!Zc(this.facet);E=r.axes;var Q=0<(null===E||void 0===E?void 0:E.length);if(n||Q){var M="row"===d?"height":"width",O={},N=Object,W=N.assign;v={name:this.getName(d+"_"+v),type:"group",role:d+"-"+v};if(t.facetFieldDef){t={data:this.getName(d+"_domain")};var U=d,ba=y.sort;y=zb(ba)?{field:J(ba,\n{expr:"datum"}),order:null!==(p=ba.order)&&void 0!==p?p:"ascending"}:q.isArray(ba)?{field:Mc(y,U,{expr:"datum"}),order:"ascending"}:{field:J(y,{expr:"datum"}),order:null!==ba&&void 0!==ba?ba:"ascending"};p={from:t,sort:y}}else p={};p=W.call(N,{},v,p,Q&&w?{from:{data:this.getName("facet_domain_"+d)}}:{},n?{title:n}:{},r.sizeSignal?{encode:{update:(O[M]=r.sizeSignal,O)}}:{},Q?{axes:E}:{});break a}}p=null}null!=p&&g.push(p)}c=f.call(c,g)}return c};aa.prototype.assembleAxes=function(){return Cl(this.component.axes,\nthis.config)};aa.prototype.assembleLegends=function(){return fj(this)};aa.prototype.assembleProjections=function(){var a=Kc(this)||Af(this)?Jl(this):gj(this);return a};aa.prototype.assembleTitle=function(){var a,c=null!==(a=this.title)&&void 0!==a?a:{},d=Object.assign({},c);c=c.encoding;d=(delete d.encoding,d);d=Object.assign({},tg(this.config.title).nonMark,d,c?{encode:{update:c}}:{});if(d.text){if(B(["unit","layer"],this.type)){if(B(["middle",void 0],d.anchor)){var f;null!==(f=d.frame)&&void 0!==\nf?f:d.frame="group"}}else{var g;null!==(g=d.anchor)&&void 0!==g?g:d.anchor="start"}return ha(d)?void 0:d}};aa.prototype.assembleGroup=function(a){a=void 0===a?[]:a;var c={};a=a.concat(this.assembleSignals());0<a.length&&(c.signals=a);if(a=this.assembleLayout())c.layout=a;c.marks=[].concat(this.assembleHeaderMarks(),this.assembleMarks());a=!this.parent||ob(this.parent)?qj(this):[];0<a.length&&(c.scales=a);a=this.assembleAxes();0<a.length&&(c.axes=a);a=this.assembleLegends();0<a.length&&(c.legends=\na);return c};aa.prototype.getName=function(a){return oa((this.name?this.name+"_":"")+a)};aa.prototype.getDataName=function(a){return this.getName(la[a].toLowerCase())};aa.prototype.requestDataName=function(a){a=this.getDataName(a);var c=this.component.data.outputNodeRefCounts;c[a]=(c[a]||0)+1;return a};aa.prototype.getSizeSignalRef=function(a){if(ob(this.parent)){var c=Si(a),d=pd(c);if((c=this.component.scales[d])&&!c.merged){var f=c.get("type"),g=c.get("range");if(f in Ha&&cc(g)){a=c.get("name");\nf=Zd(this,d);if(f=Tf(f))return d=J({aggregate:"distinct",field:f},{expr:"datum"}),{signal:Ri(a,c,d)};H(we(d));return null}}}return{signal:this.signalNameMap.get(this.getName(a))}};aa.prototype.lookupDataSource=function(a){var c=this.component.data.outputNodes[a];return c?c.getSource():a};aa.prototype.getSignalName=function(a){return this.signalNameMap.get(a)};aa.prototype.renameSignal=function(a,c){this.signalNameMap.rename(a,c)};aa.prototype.renameScale=function(a,c){this.scaleNameMap.rename(a,c)};\naa.prototype.renameProjection=function(a,c){this.projectionNameMap.rename(a,c)};aa.prototype.scaleName=function(a,c){if(c)return this.getName(a);if(Ed[a]&&Mb[a]&&this.component.scales[a]||this.scaleNameMap.has(this.getName(a)))return this.scaleNameMap.get(this.getName(a))};aa.prototype.projectionName=function(a){if(a)return this.getName("projection");if(this.component.projection&&!this.component.projection.merged||this.projectionNameMap.has(this.getName("projection")))return this.projectionNameMap.get(this.getName("projection"))};\naa.prototype.getScaleComponent=function(a){if(!this.component.scales)throw Error("getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().");var c=this.component.scales[a];return c&&!c.merged?c:this.parent?this.parent.getScaleComponent(a):void 0};aa.prototype.getSelectionComponent=function(a,c){var d=this.component.selection[a];!d&&this.parent&&(d=this.parent.getSelectionComponent(a,c));if(!d)throw Error(\'Cannot find a selection named "\'+\nc+\'".\');return d};aa.prototype.hasAxisOrientSignalRef=function(){var a,c;return(null===(a=this.component.axes.x)||void 0===a?void 0:a.some(function(d){return d.hasOrientSignalRef()}))||(null===(c=this.component.axes.y)||void 0===c?void 0:c.some(function(d){return d.hasOrientSignalRef()}))};$jscomp.global.Object.defineProperties(aa.prototype,{width:{configurable:!0,enumerable:!0,get:function(){return this.getSizeSignalRef("width")}},height:{configurable:!0,enumerable:!0,get:function(){return this.getSizeSignalRef("height")}}});\nvar Hb=function(){return aa.apply(this,arguments)||this};$jscomp.inherits(Hb,aa);Hb.prototype.vgField=function(a,c){c=void 0===c?{}:c;if(a=this.fieldDef(a))return J(a,c)};Hb.prototype.reduceFieldDef=function(a,c){return Ek(this.getMapping(),function(d,f,g){return(f=Bb(f))?a(d,f,g):d},c)};Hb.prototype.forEachFieldDef=function(a,c){Ve(this.getMapping(),function(d,f){(d=Bb(d))&&a(d,f)},c)};var Sb=function(a,c){var d,f,g;a=P.call(this,a)||this;a.transform=c;a.transform=Y(c);c=null!==(d=a.transform.as)&&\nvoid 0!==d?d:[void 0,void 0];a.transform.as=[null!==(f=c[0])&&void 0!==f?f:"value",null!==(g=c[1])&&void 0!==g?g:"density"];return a};$jscomp.inherits(Sb,P);Sb.prototype.clone=function(){return new Sb(null,Y(this.transform))};Sb.prototype.dependentFields=function(){var a;return new Set([this.transform.density].concat($jscomp.arrayFromIterable(null!==(a=this.transform.groupby)&&void 0!==a?a:[])))};Sb.prototype.producedFields=function(){return new Set(this.transform.as)};Sb.prototype.hash=function(){return"DensityTransform "+\nI(this.transform)};Sb.prototype.assemble=function(){var a=this.transform,c=Object.assign({},a);a=a.density;c=(delete c.density,c);return Object.assign({},{type:"kde",field:a},c)};var rb=function(a,c){a=P.call(this,a)||this;a.filter=c;return a};$jscomp.inherits(rb,P);rb.prototype.clone=function(){return new rb(null,Object.assign({},this.filter))};rb.make=function(a,c){var d=c.mark;if("filter"!==ea("invalid",c.markDef,c.config))return null;var f=c.reduceFieldDef(function(g,h,k){(k=!!Mb[k]&&c.getScaleComponent(k))&&\nk.get("type")in $a&&"count"!==h.aggregate&&!dc(d)&&(g[h.field]=h);return g},{});return G(f).length?new rb(a,f):null};rb.prototype.dependentFields=function(){return new Set(G(this.filter))};rb.prototype.producedFields=function(){return new Set};rb.prototype.hash=function(){return"FilterInvalid "+I(this.filter)};rb.prototype.assemble=function(){var a=this,c=G(this.filter).reduce(function(d,f){f=a.filter[f];var g=J(f,{expr:"datum"});null!==f&&("temporal"===f.type?d.push("(isDate("+g+") || (isValid("+\ng+") && isFinite(+"+g+")))"):"quantitative"===f.type&&(d.push("isValid("+g+")"),d.push("isFinite(+"+g+")")));return d},[]);return 0<c.length?{type:"filter",expr:c.join(" && ")}:null};var Rb=function(a,c){a=P.call(this,a)||this;a.transform=c;a.transform=Y(c);c=a.transform;var d=void 0===c.as?[]:c.as;a.transform.as=c.flatten.map(function(f,g){var h;return null!==(h=d[g])&&void 0!==h?h:f});return a};$jscomp.inherits(Rb,P);Rb.prototype.clone=function(){return new Rb(this.parent,Y(this.transform))};Rb.prototype.dependentFields=\nfunction(){return new Set(this.transform.flatten)};Rb.prototype.producedFields=function(){return new Set(this.transform.as)};Rb.prototype.hash=function(){return"FlattenTransform "+I(this.transform)};Rb.prototype.assemble=function(){var a=this.transform;return{type:"flatten",fields:a.flatten,as:a.as}};var Qb=function(a,c){var d,f,g;a=P.call(this,a)||this;a.transform=c;a.transform=Y(c);c=null!==(d=a.transform.as)&&void 0!==d?d:[void 0,void 0];a.transform.as=[null!==(f=c[0])&&void 0!==f?f:"key",null!==\n(g=c[1])&&void 0!==g?g:"value"];return a};$jscomp.inherits(Qb,P);Qb.prototype.clone=function(){return new Qb(null,Y(this.transform))};Qb.prototype.dependentFields=function(){return new Set(this.transform.fold)};Qb.prototype.producedFields=function(){return new Set(this.transform.as)};Qb.prototype.hash=function(){return"FoldTransform "+I(this.transform)};Qb.prototype.assemble=function(){var a=this.transform;return{type:"fold",fields:a.fold,as:a.as}};var kb=function(a,c,d,f){a=P.call(this,a)||this;\na.fields=c;a.geojson=d;a.signal=f;return a};$jscomp.inherits(kb,P);kb.prototype.clone=function(){return new kb(null,Y(this.fields),this.geojson,this.signal)};kb.parseAll=function(a,c){if(c.component.projection&&!c.component.projection.isFit)return a;for(var d=0,f=$jscomp.makeIterator([["longitude","latitude"],["longitude2","latitude2"]]),g=f.next();!g.done;g=f.next())if(g=g.value.map(function(h){h=za(c.encoding[h]);return K(h)?h.field:ec(h)?{expr:""+h.datum}:nb(h)?{expr:""+h.value}:void 0}),g[0]||\ng[1])a=new kb(a,g,null,c.getName("geojson_"+d++));c.channelHasField("shape")&&(f=c.typedFieldDef("shape"),"geojson"===f.type&&(a=new kb(a,null,f.field,c.getName("geojson_"+d++))));return a};kb.prototype.dependentFields=function(){var a,c=(null!==(a=this.fields)&&void 0!==a?a:[]).filter(q.isString);return new Set([].concat($jscomp.arrayFromIterable(this.geojson?[this.geojson]:[]),$jscomp.arrayFromIterable(c)))};kb.prototype.producedFields=function(){return new Set};kb.prototype.hash=function(){return"GeoJSON "+\nthis.geojson+" "+this.signal+" "+I(this.fields)};kb.prototype.assemble=function(){return[].concat($jscomp.arrayFromIterable(this.geojson?[{type:"filter",expr:\'isValid(datum["\'+this.geojson+\'"])\'}]:[]),[Object.assign({},{type:"geojson"},this.fields?{fields:this.fields}:{},this.geojson?{geojson:this.geojson}:{},{signal:this.signal})])};var tb=function(a,c,d,f){a=P.call(this,a)||this;a.projection=c;a.fields=d;a.as=f;return a};$jscomp.inherits(tb,P);tb.prototype.clone=function(){return new tb(null,this.projection,\nY(this.fields),Y(this.as))};tb.parseAll=function(a,c){if(!c.projectionName())return a;for(var d=$jscomp.makeIterator([["longitude","latitude"],["longitude2","latitude2"]]),f=d.next();!f.done;f=d.next()){var g=f.value;f=g.map(function(h){h=za(c.encoding[h]);return K(h)?h.field:ec(h)?{expr:""+h.datum}:nb(h)?{expr:""+h.value}:void 0});g="longitude2"===g[0]?"2":"";if(f[0]||f[1])a=new tb(a,c.projectionName(),f,[c.getName("x"+g),c.getName("y"+g)])}return a};tb.prototype.dependentFields=function(){return new Set(this.fields.filter(q.isString))};\ntb.prototype.producedFields=function(){return new Set(this.as)};tb.prototype.hash=function(){return"Geopoint "+this.projection+" "+I(this.fields)+" "+I(this.as)};tb.prototype.assemble=function(){return{type:"geopoint",projection:this.projection,fields:this.fields,as:this.as}};var Sa=function(a,c){a=P.call(this,a)||this;a.transform=c;return a};$jscomp.inherits(Sa,P);Sa.prototype.clone=function(){return new Sa(null,Y(this.transform))};Sa.prototype.dependentFields=function(){var a;return new Set([this.transform.impute,\nthis.transform.key].concat($jscomp.arrayFromIterable(null!==(a=this.transform.groupby)&&void 0!==a?a:[])))};Sa.prototype.producedFields=function(){return new Set([this.transform.impute])};Sa.prototype.processSequence=function(a){var c=a.step;return{signal:"sequence("+[void 0===a.start?0:a.start,a.stop].concat($jscomp.arrayFromIterable(c?[c]:[])).join(",")+")"}};Sa.makeFromTransform=function(a,c){return new Sa(a,c)};Sa.makeFromEncoding=function(a,c){var d=c.encoding,f=d.x,g=d.y;if(K(f)&&K(g)){var h=\nf.impute?f:g.impute?g:void 0;if(void 0===h)return;f=f.impute?g:g.impute?f:void 0;var k=h.impute;g=k.method;var l=k.value,m=k.frame;k=k.keyvals;c=rh(c.mark,d);return new Sa(a,Object.assign({},{impute:h.field,key:f.field},g?{method:g}:{},void 0!==l?{value:l}:{},m?{frame:m}:{},void 0!==k?{keyvals:k}:{},c.length?{groupby:c}:{}))}return null};Sa.prototype.hash=function(){return"Impute "+I(this.transform)};Sa.prototype.assemble=function(){var a=this.transform,c=a.impute,d=a.keyvals,f=a.method,g=a.groupby,\nh=a.value,k=void 0===a.frame?[null,null]:a.frame;a=Object.assign({},{type:"impute",field:c,key:a.key},d?{keyvals:void 0!==(null===d||void 0===d?void 0:d.stop)?this.processSequence(d):d}:{},{method:"value"},g?{groupby:g}:{},{value:f&&"value"!==f?null:h});return f&&"value"!==f?(f=Object.assign({},{type:"window",as:["imputed_"+c+"_value"],ops:[f],fields:[c],frame:k,ignorePeers:!1},g?{groupby:g}:{}),[a,f,{type:"formula",expr:"datum."+c+" === null ? datum.imputed_"+c+"_value : datum."+c,as:c}]):[a]};var Tb=\nfunction(a,c){var d,f,g;a=P.call(this,a)||this;a.transform=c;a.transform=Y(c);var h=null!==(d=a.transform.as)&&void 0!==d?d:[void 0,void 0];a.transform.as=[null!==(f=h[0])&&void 0!==f?f:c.on,null!==(g=h[1])&&void 0!==g?g:c.loess];return a};$jscomp.inherits(Tb,P);Tb.prototype.clone=function(){return new Tb(null,Y(this.transform))};Tb.prototype.dependentFields=function(){var a;return new Set([this.transform.loess,this.transform.on].concat($jscomp.arrayFromIterable(null!==(a=this.transform.groupby)&&\nvoid 0!==a?a:[])))};Tb.prototype.producedFields=function(){return new Set(this.transform.as)};Tb.prototype.hash=function(){return"LoessTransform "+I(this.transform)};Tb.prototype.assemble=function(){var a=this.transform,c=Object.assign({},a),d=a.loess;a=a.on;c=(delete c.loess,delete c.on,c);return Object.assign({},{type:"loess",x:a,y:d},c)};var ub=function(a,c,d){a=P.call(this,a)||this;a.transform=c;a.secondary=d;return a};$jscomp.inherits(ub,P);ub.prototype.clone=function(){return new ub(null,Y(this.transform),\nthis.secondary)};ub.make=function(a,c,d,f){var g=c.component.data.sources,h=d.from,k=null;if("data"in h)k=Fj(h.data,g),k||(k=new Ra(h.data),g.push(k)),f=c.getName("lookup_"+f),k=new qa(k,f,la.Lookup,c.component.data.outputNodeRefCounts),c.component.data.outputNodes[f]=k;else if("param"in h){f=h.param;d=Object.assign({},{as:f},d);try{var l=c.getSelectionComponent(oa(f),f)}catch(m){throw Error(\'Lookups can only be performed on selection parameters. "\'+f+\'" is a variable parameter.\');}k=l.materialized;\nif(!k)throw Error(\'Cannot define and lookup the "\'+f+\'" selection in the same view. Try moving the lookup into a second, layered view?\');}return new ub(a,d,k.getSource())};ub.prototype.dependentFields=function(){return new Set([this.transform.lookup])};ub.prototype.producedFields=function(){return new Set(this.transform.as?q.array(this.transform.as):this.transform.from.fields)};ub.prototype.hash=function(){return"Lookup "+I({transform:this.transform,secondary:this.secondary})};ub.prototype.assemble=\nfunction(){if(this.transform.from.fields)var a=Object.assign({},{values:this.transform.from.fields},this.transform.as?{as:q.array(this.transform.as)}:{});else a=this.transform.as,q.isString(a)||(H(\'If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the data from the secondary source.\'),a="_lookup"),a={as:[a]};return Object.assign({},{type:"lookup",from:this.secondary,key:this.transform.from.key,fields:[this.transform.lookup]},a,this.transform.default?\n{default:this.transform.default}:{})};var Ub=function(a,c){var d,f,g;a=P.call(this,a)||this;a.transform=c;a.transform=Y(c);c=null!==(d=a.transform.as)&&void 0!==d?d:[void 0,void 0];a.transform.as=[null!==(f=c[0])&&void 0!==f?f:"prob",null!==(g=c[1])&&void 0!==g?g:"value"];return a};$jscomp.inherits(Ub,P);Ub.prototype.clone=function(){return new Ub(null,Y(this.transform))};Ub.prototype.dependentFields=function(){var a;return new Set([this.transform.quantile].concat($jscomp.arrayFromIterable(null!==\n(a=this.transform.groupby)&&void 0!==a?a:[])))};Ub.prototype.producedFields=function(){return new Set(this.transform.as)};Ub.prototype.hash=function(){return"QuantileTransform "+I(this.transform)};Ub.prototype.assemble=function(){var a=this.transform,c=Object.assign({},a);a=a.quantile;c=(delete c.quantile,c);return Object.assign({},{type:"quantile",field:a},c)};var Vb=function(a,c){var d,f,g;a=P.call(this,a)||this;a.transform=c;a.transform=Y(c);var h=null!==(d=a.transform.as)&&void 0!==d?d:[void 0,\nvoid 0];a.transform.as=[null!==(f=h[0])&&void 0!==f?f:c.on,null!==(g=h[1])&&void 0!==g?g:c.regression];return a};$jscomp.inherits(Vb,P);Vb.prototype.clone=function(){return new Vb(null,Y(this.transform))};Vb.prototype.dependentFields=function(){var a;return new Set([this.transform.regression,this.transform.on].concat($jscomp.arrayFromIterable(null!==(a=this.transform.groupby)&&void 0!==a?a:[])))};Vb.prototype.producedFields=function(){return new Set(this.transform.as)};Vb.prototype.hash=function(){return"RegressionTransform "+\nI(this.transform)};Vb.prototype.assemble=function(){var a=this.transform,c=Object.assign({},a),d=a.regression;a=a.on;c=(delete c.regression,delete c.on,c);return Object.assign({},{type:"regression",x:a,y:d},c)};var Gb=function(a,c){a=P.call(this,a)||this;a.transform=c;return a};$jscomp.inherits(Gb,P);Gb.prototype.clone=function(){return new Gb(null,Y(this.transform))};Gb.prototype.addDimensions=function(a){var c;this.transform.groupby=Ca((null!==(c=this.transform.groupby)&&void 0!==c?c:[]).concat(a),\nfunction(d){return d})};Gb.prototype.producedFields=function(){};Gb.prototype.dependentFields=function(){var a;return new Set([this.transform.pivot,this.transform.value].concat($jscomp.arrayFromIterable(null!==(a=this.transform.groupby)&&void 0!==a?a:[])))};Gb.prototype.hash=function(){return"PivotTransform "+I(this.transform)};Gb.prototype.assemble=function(){var a=this.transform,c=a.groupby,d=a.limit,f=a.op;return Object.assign({},{type:"pivot",field:a.pivot,value:a.value},void 0!==d?{limit:d}:\n{},void 0!==f?{op:f}:{},void 0!==c?{groupby:c}:{})};var Wb=function(a,c){a=P.call(this,a)||this;a.transform=c;return a};$jscomp.inherits(Wb,P);Wb.prototype.clone=function(){return new Wb(null,Y(this.transform))};Wb.prototype.dependentFields=function(){return new Set};Wb.prototype.producedFields=function(){return new Set};Wb.prototype.hash=function(){return"SampleTransform "+I(this.transform)};Wb.prototype.assemble=function(){return{type:"sample",size:this.transform.sample}};var fa=function(a,c,d,\nf){c=Hb.call(this,a,"facet",c,d,f,a.resolve)||this;S(c,"facet",void 0);S(c,"child",void 0);S(c,"children",void 0);c.child=dg(a.spec,c,c.getName("child"),void 0,f);c.children=[c.child];c.facet=c.initFacet(a.facet);return c};$jscomp.inherits(fa,Hb);fa.prototype.initFacet=function(a){if(!Zc(a))return{facet:this.initFacetFieldDef(a,"facet")};var c=G(a),d={};c=$jscomp.makeIterator(c);for(var f=c.next();!f.done;f=c.next()){f=f.value;if(!["row","column"].includes(f)){H(td(f,"facet"));break}var g=a[f];if(void 0===\ng.field){H(xe(g,f));break}d[f]=this.initFacetFieldDef(g,f)}return d};fa.prototype.initFacetFieldDef=function(a,c){a=Te(a,c);a.header?a.header=Va(a.header):null===a.header&&(a.header=null);return a};fa.prototype.channelHasField=function(a){return!!this.facet[a]};fa.prototype.fieldDef=function(a){return this.facet[a]};fa.prototype.parseData=function(){this.component.data=be(this);this.child.parseData()};fa.prototype.parseLayoutSize=function(){Vf(this)};fa.prototype.parseSelections=function(){this.child.parseSelections();\nthis.component.selection=this.child.component.selection};fa.prototype.parseMarkGroup=function(){this.child.parseMarkGroup()};fa.prototype.parseAxesAndHeaders=function(){this.child.parseAxesAndHeaders();for(var a=$jscomp.makeIterator(ib),c=a.next();!c.done;c=a.next()){var d=void 0;c=c.value;var f=this.facet,g=this.config,h=this.child,k=this.component;if(this.channelHasField(c)){f=f[c];var l=Nc("title",null,g,c);l=Fc(f,g,{allowDisabling:!0,includeDefault:void 0===l||!!l});h.component.layoutHeaders[c].title&&\n(l=q.isArray(l)?l.join(", "):l,l+=" / "+h.component.layoutHeaders[c].title,h.component.layoutHeaders[c].title=null);h=Nc("labelOrient",f.header,g,c);g=null!==f.header?sa(null===(d=f.header)||void 0===d?void 0:d.labels,g.header.labels,!0):!1;d=B(["bottom","right"],h)?"footer":"header";h={};k.layoutHeaders[c]=(h.title=null!==f.header?l:null,h.facetFieldDef=f,h[d]="facet"===c?[]:[Dj(this,c,g)],h)}}Ej(this,"x");Ej(this,"y")};fa.prototype.assembleSelectionTopLevelSignals=function(a){return this.child.assembleSelectionTopLevelSignals(a)};\nfa.prototype.assembleSignals=function(){this.child.assembleSignals();return[]};fa.prototype.assembleSelectionData=function(a){return this.child.assembleSelectionData(a)};fa.prototype.getHeaderLayoutMixins=function(){for(var a={},c=$jscomp.makeIterator(ib),d=c.next();!d.done;d=c.next()){d=d.value;for(var f=$jscomp.makeIterator(kg),g=f.next();!g.done;g=f.next()){var h=g.value;g=this.component.layoutHeaders[d];var k=g[h],l=g.facetFieldDef;if(l&&(l=Nc("titleOrient",l.header,this.config,d),["right","bottom"].includes(l))){var m;\nl=Td(d,l);null!==(m=a.titleAnchor)&&void 0!==m?m:a.titleAnchor={};a.titleAnchor[l]="end"}if(null!==k&&void 0!==k&&k[0]){k="row"===d?"height":"width";h="header"===h?"headerBand":"footerBand";if("facet"!==d&&!this.child.component.layoutSize.get(k)){var n;null!==(n=a[h])&&void 0!==n?n:a[h]={};a[h][d]=.5}if(g.title){var p;null!==(p=a.offset)&&void 0!==p?p:a.offset={};a.offset["row"===d?"rowTitle":"columnTitle"]=10}}}}return a};fa.prototype.assembleDefaultLayout=function(){var a=this.facet,c=a.column;\na=a.row;var d=c?this.columnDistinctSignal():a?1:void 0,f="all";a||"independent"!==this.component.resolve.scale.x?c||"independent"!==this.component.resolve.scale.y||(f="none"):f="none";return Object.assign({},this.getHeaderLayoutMixins(),d?{columns:d}:{},{bounds:"full",align:f})};fa.prototype.assembleLayoutSignals=function(){return this.child.assembleLayoutSignals()};fa.prototype.columnDistinctSignal=function(){if(!(this.parent&&this.parent instanceof fa))return{signal:"length(data(\'"+this.getName("column_domain")+\n"\'))"}};fa.prototype.assembleGroup=function(a){return this.parent&&this.parent instanceof fa?Object.assign({},this.channelHasField("column")?{encode:{update:{columns:{field:J(this.facet.column,{prefix:"distinct"})}}}}:{},Hb.prototype.assembleGroup.call(this,a)):Hb.prototype.assembleGroup.call(this,a)};fa.prototype.getCardinalityAggregateForChild=function(){var a=[],c=[],d=[];if(this.child instanceof fa){if(this.child.channelHasField("column")){var f=J(this.child.facet.column);a.push(f);c.push("distinct");\nd.push("distinct_"+f)}}else{f=$jscomp.makeIterator(Db);for(var g=f.next();!g.done;g=f.next()){g=g.value;var h=this.child.component.scales[g];if(h&&!h.merged){var k=h.get("type");h=h.get("range");k in Ha&&cc(h)&&(k=Zd(this.child,g),(k=Tf(k))?(a.push(k),c.push("distinct"),d.push("distinct_"+k)):H(we(g)))}}}return{fields:a,ops:c,as:d}};fa.prototype.assembleFacet=function(){var a=this.component.data.facetRoot,c=a.name;a=a.data;var d=this.facet,f=d.row,g=d.column,h=this.getCardinalityAggregateForChild();\nd=h.fields;var k=h.ops;h=h.as;for(var l=[],m=$jscomp.makeIterator(ib),n=m.next();!n.done;n=m.next()){var p=n.value;if(n=this.facet[p]){l.push(J(n));var r=n,v=r.sort;ka(r.bin)&&l.push(J(n,{binSuffix:"end"}));zb(v)?(r=v,p=r.field,r=void 0===r.op?"min":r.op,n=Wf(n,v),f&&g?(d.push(n),k.push("max")):(d.push(p),k.push(r)),h.push(n)):q.isArray(v)&&(n=Mc(n,p),d.push(n),k.push("max"),h.push(n))}}f=!!f&&!!g;return Object.assign({},{name:c,data:a,groupby:l},f||0<d.length?{aggregate:Object.assign({},f?{cross:f}:\n{},d.length?{fields:d,ops:k,as:h}:{})}:{})};fa.prototype.facetSortFields=function(a){var c=this.facet[a];return c?zb(c.sort)?[Wf(c,c.sort,{expr:"datum"})]:q.isArray(c.sort)?[Mc(c,a,{expr:"datum"})]:[J(c,{expr:"datum"})]:[]};fa.prototype.facetSortOrder=function(a){return(a=this.facet[a])?(a=a.sort,[(zb(a)?a.order:!q.isArray(a)&&a)||"ascending"]):[]};fa.prototype.assembleLabelTitle=function(){var a=this.facet,c=this.config;if(a.facet)return yf(a.facet,"facet",c);for(var d={row:["top","bottom"],column:["left",\n"right"]},f=$jscomp.makeIterator(jg),g=f.next();!g.done;g=f.next())if(g=g.value,a[g]){var h,k=Nc("labelOrient",null===(h=a[g])||void 0===h?void 0:h.header,c,g);if(d[g].includes(k))return yf(a[g],g,c)}};fa.prototype.assembleMarks=function(){var a=this,c=this.child,d=hm(this.component.data.facetRoot),f=c.assembleGroupEncodeEntry(!1),g=this.assembleLabelTitle()||c.assembleTitle(),h=c.assembleGroupStyle();return[Object.assign({},{name:this.getName("cell"),type:"group"},g?{title:g}:{},h?{style:h}:{},{from:{facet:this.assembleFacet()},\nsort:{field:ib.map(function(k){return a.facetSortFields(k)}).flat(),order:ib.map(function(k){return a.facetSortOrder(k)}).flat()}},0<d.length?{data:d}:{},f?{encode:{update:f}}:{},c.assembleGroup(cl(this,[])))]};fa.prototype.getMapping=function(){return this.facet};var Ta=function(a,c,d,f){var g,h,k,l;var m=aa.call(this,a,"concat",c,d,f,a.resolve)||this;S(m,"children",void 0);"shared"!==(null===(g=a.resolve)||void 0===g?void 0:null===(h=g.axis)||void 0===h?void 0:h.x)&&"shared"!==(null===(k=a.resolve)||\nvoid 0===k?void 0:null===(l=k.axis)||void 0===l?void 0:l.y)||H("Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).");m.children=m.getChildren(a).map(function(n,p){return dg(n,m,m.getName("concat_"+p),void 0,f)});return m};$jscomp.inherits(Ta,aa);Ta.prototype.parseData=function(){this.component.data=be(this);for(var a=$jscomp.makeIterator(this.children),c=a.next();!c.done;c=a.next())c.value.parseData()};Ta.prototype.parseSelections=function(){this.component.selection=\n{};for(var a=$jscomp.makeIterator(this.children),c=a.next();!c.done;c=a.next()){c=c.value;c.parseSelections();for(var d=$jscomp.makeIterator(G(c.component.selection)),f=d.next();!f.done;f=d.next())f=f.value,this.component.selection[f]=c.component.selection[f]}};Ta.prototype.parseMarkGroup=function(){for(var a=$jscomp.makeIterator(this.children),c=a.next();!c.done;c=a.next())c.value.parseMarkGroup()};Ta.prototype.parseAxesAndHeaders=function(){for(var a=$jscomp.makeIterator(this.children),c=a.next();!c.done;c=\na.next())c.value.parseAxesAndHeaders()};Ta.prototype.getChildren=function(a){return"vconcat"in a?a.vconcat:"hconcat"in a?a.hconcat:a.concat};Ta.prototype.parseLayoutSize=function(){Vf(this);var a=void 0===this.layout.columns?"height":"childHeight";ae(this,1===this.layout.columns?"width":"childWidth");ae(this,a)};Ta.prototype.parseAxisGroup=function(){return null};Ta.prototype.assembleSelectionTopLevelSignals=function(a){return this.children.reduce(function(c,d){return d.assembleSelectionTopLevelSignals(c)},\na)};Ta.prototype.assembleSignals=function(){this.children.forEach(function(a){return a.assembleSignals()});return[]};Ta.prototype.assembleLayoutSignals=function(){for(var a=zf(this),c=$jscomp.makeIterator(this.children),d=c.next();!d.done;d=c.next())a.push.apply(a,$jscomp.arrayFromIterable(d.value.assembleLayoutSignals()));return a};Ta.prototype.assembleSelectionData=function(a){return this.children.reduce(function(c,d){return d.assembleSelectionData(c)},a)};Ta.prototype.assembleMarks=function(){return this.children.map(function(a){var c=\na.assembleTitle(),d=a.assembleGroupStyle(),f=a.assembleGroupEncodeEntry(!1);return Object.assign({},{type:"group",name:a.getName("group")},c?{title:c}:{},d?{style:d}:{},f?{encode:{update:f}}:{},a.assembleGroup())})};Ta.prototype.assembleDefaultLayout=function(){var a=this.layout.columns;return Object.assign({},null!=a?{columns:a}:{},{bounds:"full",align:"each"})};var Vm=Object.assign({},{disable:1,gridScale:1,scale:1},Uj,{labelExpr:1,encode:1}),Gj=G(Vm),Oc=function(a,c,d){a=void 0===a?{}:a;c=void 0===\nc?{}:c;d=void 0===d?!1:d;var f=ra.call(this)||this;f.explicit=a;f.implicit=c;f.mainExtracted=d;return f};$jscomp.inherits(Oc,ra);Oc.prototype.clone=function(){return new Oc(Y(this.explicit),Y(this.implicit),this.mainExtracted)};Oc.prototype.hasAxisPart=function(a){if("axis"===a)return!0;if("grid"===a||"title"===a)return!!this.get(a);a=this.get(a);return!(!1===a||null===a)};Oc.prototype.hasOrientSignalRef=function(){return T(this.explicit.orient)};var Wm={bottom:"top",top:"bottom",left:"right",right:"left"},\nqm=new Set("grid translate format formatType orient labelExpr tickCount position tickMinStep".split(" ")),he={arc:{vgMark:"arc",encodeEntry:function(a){return Object.assign({},hb(a,{align:"ignore",baseline:"ignore",color:"include",size:"ignore",orient:"ignore",theta:"ignore"}),Ia("x",a,{defaultPos:"mid"}),Ia("y",a,{defaultPos:"mid"}),ic(a,"radius","arc"),ic(a,"theta","arc"))}},area:{vgMark:"area",encodeEntry:function(a){return Object.assign({},hb(a,{align:"ignore",baseline:"ignore",color:"include",\norient:"include",size:"ignore",theta:"ignore"}),Md("x",a,{defaultPos:"zeroOrMin",defaultPos2:"zeroOrMin",range:"horizontal"===a.markDef.orient}),Md("y",a,{defaultPos:"zeroOrMin",defaultPos2:"zeroOrMin",range:"vertical"===a.markDef.orient}),mf(a))}},bar:{vgMark:"rect",encodeEntry:function(a){return Object.assign({},hb(a,{align:"ignore",baseline:"ignore",color:"include",orient:"ignore",size:"ignore",theta:"ignore"}),ic(a,"x","bar"),ic(a,"y","bar"))}},circle:{vgMark:"symbol",encodeEntry:function(a){return ag(a,\n"circle")}},geoshape:{vgMark:"shape",encodeEntry:function(a){return Object.assign({},hb(a,{align:"ignore",baseline:"ignore",color:"include",size:"ignore",orient:"ignore",theta:"ignore"}))},postEncodingTransform:function(a){var c=a.encoding.shape;return[Object.assign({},{type:"geoshape",projection:a.projectionName()},c&&K(c)&&"geojson"===c.type?{field:J(c,{expr:"datum"})}:{})]}},image:{vgMark:"image",encodeEntry:function(a){return Object.assign({},hb(a,{align:"ignore",baseline:"ignore",color:"ignore",\norient:"ignore",size:"ignore",theta:"ignore"}),ic(a,"x","image"),ic(a,"y","image"),kf(a,"url"))}},line:{vgMark:"line",encodeEntry:function(a){return Object.assign({},hb(a,{align:"ignore",baseline:"ignore",color:"include",size:"ignore",orient:"ignore",theta:"ignore"}),Ia("x",a,{defaultPos:"mid"}),Ia("y",a,{defaultPos:"mid"}),Da("size",a,{vgChannel:"strokeWidth"}),mf(a))}},point:{vgMark:"symbol",encodeEntry:function(a){return ag(a)}},rect:{vgMark:"rect",encodeEntry:function(a){return Object.assign({},\nhb(a,{align:"ignore",baseline:"ignore",color:"include",orient:"ignore",size:"ignore",theta:"ignore"}),ic(a,"x","rect"),ic(a,"y","rect"))}},rule:{vgMark:"rule",encodeEntry:function(a){var c=a.markDef.orient;return a.encoding.x||a.encoding.y||a.encoding.latitude||a.encoding.longitude?Object.assign({},hb(a,{align:"ignore",baseline:"ignore",color:"include",orient:"ignore",size:"ignore",theta:"ignore"}),Md("x",a,{defaultPos:"horizontal"===c?"zeroOrMax":"mid",defaultPos2:"zeroOrMin",range:"vertical"!==\nc}),Md("y",a,{defaultPos:"vertical"===c?"zeroOrMax":"mid",defaultPos2:"zeroOrMin",range:"horizontal"!==c}),Da("size",a,{vgChannel:"strokeWidth"})):{}}},square:{vgMark:"symbol",encodeEntry:function(a){return ag(a,"square")}},text:{vgMark:"text",encodeEntry:function(a){var c=a.config,d=Object,f=d.assign,g=hb(a,{align:"include",baseline:"include",color:"include",size:"ignore",orient:"ignore",theta:"include"}),h=Ia("x",a,{defaultPos:"mid"}),k=Ia("y",a,{defaultPos:"mid"}),l=kf(a),m=Da("size",a,{vgChannel:"fontSize"}),\nn=Da("angle",a);var p=void 0===ea("align",a.markDef,c)?"center":void 0;p=qi("align",p);c=void 0===ea("baseline",a.markDef,c)?"middle":void 0;return f.call(d,{},g,h,k,l,m,n,p,qi("baseline",c),Ia("radius",a,{defaultPos:null}),Ia("theta",a,{defaultPos:null}))}},tick:{vgMark:"rect",encodeEntry:function(a){var c=a.config,d=a.markDef,f=d.orient,g="horizontal"===f?"width":"height";f="horizontal"===f?"height":"width";var h={},k=Object,l=k.assign,m=hb(a,{align:"ignore",baseline:"ignore",color:"include",orient:"ignore",\nsize:"ignore",theta:"ignore"}),n=Ia("x",a,{defaultPos:"mid",vgChannel:"xc"}),p=Ia("y",a,{defaultPos:"mid",vgChannel:"yc"}),r;var v=a.config,t=a.markDef,y=t.orient,w="horizontal"===y?"width":"height";y=a.getScaleComponent("horizontal"===y?"x":"y");t=null!==(r=ea("size",t,v,{vgChannel:w}))&&void 0!==r?r:v.tick.bandSize;r=void 0!==t?t:(r=y?y.get("range"):void 0)&&cc(r)&&q.isNumber(r.step)?3*r.step/4:3*Hd(v.view,w)/4;return l.call(k,{},m,n,p,Da("size",a,{defaultValue:r,vgChannel:g}),(h[f]=pa(ea("thickness",\nd,c)),h))}},trail:{vgMark:"trail",encodeEntry:function(a){return Object.assign({},hb(a,{align:"ignore",baseline:"ignore",color:"include",size:"include",orient:"ignore",theta:"ignore"}),Ia("x",a,{defaultPos:"mid"}),Ia("y",a,{defaultPos:"mid"}),Da("size",a),mf(a))}}},ja=function(a,c,d,f,g){f=void 0===f?{}:f;var h;c=Hb.call(this,a,"unit",c,d,g,void 0,Dh(a)?a.view:void 0)||this;S(c,"markDef",void 0);S(c,"encoding",void 0);S(c,"specifiedScales",{});S(c,"stack",void 0);S(c,"specifiedAxes",{});S(c,"specifiedLegends",\n{});S(c,"specifiedProjection",{});S(c,"selection",[]);S(c,"children",[]);d=yb(a.mark)?Object.assign({},a.mark):{type:a.mark};var k=d.type;void 0===d.filled&&(d.filled=vm(d,g,{graticule:a.data&&"graticule"in a.data}));var l=c.encoding=Ck(a.encoding||{},k,d.filled,g);c.markDef=sm(d,l,g);c.size=rm({encoding:l,size:Dh(a)?Object.assign({},f,a.width?{width:a.width}:{},a.height?{height:a.height}:{}):f});c.stack=Nh(k,l);c.specifiedScales=c.initScales(k,l);c.specifiedAxes=c.initAxes(l);c.specifiedLegends=\nc.initLegends(l);c.specifiedProjection=a.projection;c.selection=(null!==(h=a.params)&&void 0!==h?h:[]).filter(function(m){return!!m.select});return c};$jscomp.inherits(ja,Hb);ja.prototype.scaleDomain=function(a){return(a=this.specifiedScales[a])?a.domain:void 0};ja.prototype.axis=function(a){return this.specifiedAxes[a]};ja.prototype.legend=function(a){return this.specifiedLegends[a]};ja.prototype.initScales=function(a,c){var d=this;return Od.reduce(function(f,g){var h=za(c[g]);if(h){var k;f[g]=d.initScale(null!==\n(k=h.scale)&&void 0!==k?k:{})}return f},{})};ja.prototype.initScale=function(a){var c=a.domain,d=a.range;a=Va(a);q.isArray(c)&&(a.domain=c.map(Za));q.isArray(d)&&(a.range=d.map(Za));return a};ja.prototype.initAxes=function(a){var c=this;return Db.reduce(function(d,f){var g=a[f];if(X(g)||"x"===f&&X(a.x2)||"y"===f&&X(a.y2))g=X(g)?g.axis:void 0,d[f]=g?c.initAxis(Object.assign({},g)):g;return d},{})};ja.prototype.initAxis=function(a){var c=G(a),d={};c=$jscomp.makeIterator(c);for(var f=c.next();!f.done;f=\nc.next()){f=f.value;var g=a[f];d[f]=ad(g)?ug(g):Za(g)}return d};ja.prototype.initLegends=function(a){return Jm.reduce(function(c,d){var f=za(a[d]),g;if(g=f)a:{switch(d){case "color":case "fill":case "stroke":case "size":case "shape":case "opacity":case "strokeWidth":case "strokeDash":g=!0;break a;case "fillOpacity":case "strokeOpacity":case "angle":g=!1;break a}g=void 0}g&&(f=f.legend,c[d]=f?Va(f):f);return c},{})};ja.prototype.parseData=function(){this.component.data=be(this)};ja.prototype.parseLayoutSize=\nfunction(){for(var a=this.size,c=this.component,d=$jscomp.makeIterator(Db),f=d.next();!f.done;f=d.next())if(f=fb(f.value),a[f]){var g=a[f];c.layoutSize.set(f,Cb(g)?"step":g,!0)}else g=jm(this,f),c.layoutSize.set(f,g,!1)};ja.prototype.parseSelections=function(){var a=this.component;var c=this.selection,d={},f=this.config.selection;if(c&&c.length){c=$jscomp.makeIterator(c);for(var g=c.next();!g.done;g=c.next()){g=g.value;var h=oa(g.name),k=g.select,l=q.isString(k)?k:k.type;k=q.isObject(k)?Y(k):{type:l};\nvar m=Object.assign({},f[l]);m=(delete m.fields,delete m.encodings,m);for(var n in m)if("mark"===n&&(k[n]=Object.assign({},m[n],k[n])),void 0===k[n]||!0===k[n]){var p;k[n]=null!==(p=m[n])&&void 0!==p?p:k[n]}h=d[h]=Object.assign({},k,{name:h,type:l,init:g.value,bind:g.bind,events:q.isString(k.on)?Hc(k.on,"scope"):q.array(Y(k.on))});l=$jscomp.makeIterator(Jd);for(k=l.next();!k.done;k=l.next())k=k.value,k.defined(h)&&k.parse&&k.parse(this,h,g)}}a.selection=d};ja.prototype.parseMarkGroup=function(){this.component.mark=\nym(this)};ja.prototype.parseAxesAndHeaders=function(){this.component.axes=lm(this)};ja.prototype.assembleSelectionTopLevelSignals=function(a){return dl(this,a)};ja.prototype.assembleSignals=function(){var a=[],c=a.concat,d=$jscomp.arrayFromIterable(Ii(this)),f=$jscomp,g=f.arrayFromIterable;var h=[];var k=$jscomp.makeIterator(Pa(null!==(l=this.component.selection)&&void 0!==l?l:{}));for(l=k.next();!l.done;l=k.next()){l=l.value;for(var l,m=l.name,n=""+m+"_tuple, "+("global"===l.resolve?"true":"{unit: "+\nJc(this)+"}"),p=$jscomp.makeIterator(Jd),r=p.next();!r.done;r=p.next())r=r.value,r.defined(l)&&(r.signals&&(h=r.signals(this,l,h)),r.modifyExpr&&(n=r.modifyExpr(this,l,n)));h.push({name:m+"_modify",on:[{events:{signal:l.name+"_tuple"},update:"modify("+q.stringValue(l.name+"_store")+", "+n+")"}]})}h=gf(h);return c.call(a,d,g.call(f,h))};ja.prototype.assembleSelectionData=function(a){return el(this,a)};ja.prototype.assembleLayout=function(){return null};ja.prototype.assembleLayoutSignals=function(){return zf(this)};\nja.prototype.assembleMarks=function(){var a,c=null!==(a=this.component.mark)&&void 0!==a?a:[];this.parent&&Kc(this.parent)||(c=fi(this,c));return c.map(this.correctDataNames)};ja.prototype.getMapping=function(){return this.encoding};ja.prototype.channelHasField=function(a){return tc(this.encoding,a)};ja.prototype.fieldDef=function(a){return Bb(this.encoding[a])};ja.prototype.typedFieldDef=function(a){a=this.fieldDef(a);return gb(a)?a:null};$jscomp.global.Object.defineProperties(ja.prototype,{hasProjection:{configurable:!0,\nenumerable:!0,get:function(){var a=this.encoding,c=this.mark===Bj,d=a&&Em.some(function(f){return X(a[f])});return c||d}},mark:{configurable:!0,enumerable:!0,get:function(){return this.markDef.type}}});var Ma=function(a,c,d,f,g){var h=aa.call(this,a,"layer",c,d,g,a.resolve,a.view)||this;S(h,"children",void 0);var k=Object.assign({},f,a.width?{width:a.width}:{},a.height?{height:a.height}:{});h.children=a.layer.map(function(l,m){if("layer"in l)return new Ma(l,h,h.getName("layer_"+m),k,g);if(Nb(l))return new ja(l,\nh,h.getName("layer_"+m),k,g);throw Error(ve(l));});return h};$jscomp.inherits(Ma,aa);Ma.prototype.parseData=function(){this.component.data=be(this);for(var a=$jscomp.makeIterator(this.children),c=a.next();!c.done;c=a.next())c.value.parseData()};Ma.prototype.parseLayoutSize=function(){Vf(this);ae(this,"width");ae(this,"height")};Ma.prototype.parseSelections=function(){this.component.selection={};for(var a=$jscomp.makeIterator(this.children),c=a.next();!c.done;c=a.next()){c=c.value;c.parseSelections();\nfor(var d=$jscomp.makeIterator(G(c.component.selection)),f=d.next();!f.done;f=d.next())f=f.value,this.component.selection[f]=c.component.selection[f]}};Ma.prototype.parseMarkGroup=function(){for(var a=$jscomp.makeIterator(this.children),c=a.next();!c.done;c=a.next())c.value.parseMarkGroup()};Ma.prototype.parseAxesAndHeaders=function(){var a=this.component,c=a.axes;a=a.resolve;for(var d={top:0,bottom:0,right:0,left:0},f=$jscomp.makeIterator(this.children),g=f.next();!g.done;g=f.next()){var h=g.value;\nh.parseAxesAndHeaders();var k=$jscomp.makeIterator(G(h.component.axes));for(g=k.next();!g.done;g=k.next())g=g.value,a.axis[g]=Bf(this.component.resolve,g),"shared"===a.axis[g]&&(c[g]=nm(c[g],h.component.axes[g]),c[g]||(a.axis[g]="independent",delete c[g]))}f=$jscomp.makeIterator(Db);for(g=f.next();!g.done;g=f.next()){h=g.value;k=$jscomp.makeIterator(this.children);for(g=k.next();!g.done;g=k.next())if(g=g.value,g.component.axes[h]){if("independent"===a.axis[h]){var l;c[h]=(null!==(l=c[h])&&void 0!==\nl?l:[]).concat(g.component.axes[h]);for(var m=$jscomp.makeIterator(g.component.axes[h]),n=m.next();!n.done;n=m.next()){n=n.value;var p=n.getWithExplicit("orient"),r=p.value;p=p.explicit;T(r)||(0<d[r]&&!p&&(p=Wm[r],d[r]>d[p]&&n.set("orient",p,!1)),d[r]++)}}delete g.component.axes[h]}if("independent"===a.axis[h]&&c[h]&&1<c[h].length)for(h=$jscomp.makeIterator(c[h]),k=h.next();!k.done;k=h.next())k=k.value,k.get("grid")&&!k.explicit.grid&&(k.implicit.grid=!1)}};Ma.prototype.assembleSelectionTopLevelSignals=\nfunction(a){return this.children.reduce(function(c,d){return d.assembleSelectionTopLevelSignals(c)},a)};Ma.prototype.assembleSignals=function(){return this.children.reduce(function(a,c){return a.concat(c.assembleSignals())},Ii(this))};Ma.prototype.assembleLayoutSignals=function(){return this.children.reduce(function(a,c){return a.concat(c.assembleLayoutSignals())},zf(this))};Ma.prototype.assembleSelectionData=function(a){return this.children.reduce(function(c,d){return d.assembleSelectionData(c)},\na)};Ma.prototype.assembleTitle=function(){var a=aa.prototype.assembleTitle.call(this);if(a)return a;var c=$jscomp.makeIterator(this.children);for(a=c.next();!a.done;a=c.next())if(a=a.value.assembleTitle())return a};Ma.prototype.assembleLayout=function(){return null};Ma.prototype.assembleMarks=function(){return fl(this,this.children.flatMap(function(a){return a.assembleMarks()}))};Ma.prototype.assembleLegends=function(){return this.children.reduce(function(a,c){return a.concat(c.assembleLegends())},\nfj(this))};u.accessPathDepth=zc;u.accessPathWithDatum=pe;u.compile=function(a,c){c=void 0===c?{}:c;c.logger&&(Bc=c.logger);c.fieldTitle&&($c=c.fieldTitle);try{var d=Fh(q.mergeConfig(c.config,a.config)),f=Zh(a,d),g=dg(f,null,"",void 0,d);g.parse();var h=g.component.data;Gf(h.sources);for(var k=0,l=0,m=0;5>m&&mj(h,g,!0);m++)k++;h.sources.map(Ff);for(m=0;5>m&&mj(h,g,!1);m++)l++;Gf(h.sources);5===Math.max(k,l)&&H("Maximum optimization runs(5) reached.");var n=f.autosize,p=g.component.layoutSize.get("width"),\nr=g.component.layoutSize.get("height");void 0===n?(n={type:"pad"},g.hasAxisOrientSignalRef()&&(n.resize=!0)):q.isString(n)&&(n={type:n});var v;if(v=p&&r){var t=n.type;v="fit"===t||"fit-x"===t||"fit-y"===t}if(v)if("step"===p&&"step"===r)H(Gg()),n.type="pad";else if("step"===p||"step"===r){k="step"===p?"width":"height";H(Gg(pd(k)));h=n;var y=(k="width"===k?"height":"width","fit-"+pd(k));h.type=y}var w=Object.assign({},1===G(n).length&&n.type?"pad"===n.type?{}:{autosize:n.type}:{autosize:n},Ch(d,!1),\nCh(a,!0));return{spec:Dm(g,w,a.datasets,a.usermeta),normalized:f}}finally{c.logger&&(Bc=Oj),c.fieldTitle&&($c=Tj)}};u.contains=B;u.deepEqual=wb;u.deleteNestedProperty=nd;u.duplicate=Y;u.entries=ac;u.every=Z;u.fieldIntersection=oe;u.flatAccessWithDatum=lg;u.getFirstDefined=sa;u.hasIntersection=mc;u.hash=I;u.internalField=og;u.isBoolean=Rc;u.isEmpty=ha;u.isEqual=function(a,c){var d=G(a),f=G(c);if(d.length!==f.length)return!1;d=$jscomp.makeIterator(d);for(f=d.next();!f.done;f=d.next())if(f=f.value,a[f]!==\nc[f])return!1;return!0};u.isInternalField=pg;u.isNullOrFalse=F;u.isNumeric=od;u.keys=G;u.logicalExpr=Sc;u.mergeDeep=xa;u.normalize=Zh;u.normalizeAngle=Tc;u.omit=D;u.pick=V;u.prefixGenerator=ne;u.removePathFromField=qe;u.replaceAll=nc;u.replacePathInField=eb;u.resetIdCounter=function(){ng=42};u.setEqual=xc;u.some=L;u.stringify=ia;u.titleCase=yc;u.unique=Ca;u.uniqueId=mg;u.vals=Pa;u.varName=oa;u.version="5.1.0";Object.defineProperty(u,"__esModule",{value:!0})});\n'];
gvjs_CM.raw=[""];gvjs_AM(gvjs_xM(gvjs_CM));var gvjs_DM=['/*\n\nCopyright (c) 2015, University of Washington Interactive Data Lab\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n  may be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************\n  Copyright (c) Microsoft Corporation.\n\n  Permission to use, copy, modify, and/or distribute this software for any\n  purpose with or without fee is hereby granted.\n\n  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n  PERFORMANCE OF THIS SOFTWARE.\n**************************************************************************** https://github.com/Starcounter-Jack/JSON-Patch\n (c) 2017 Joachim Wester\n MIT license\n*/\nvar $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.arrayIteratorImpl=function(g){var l=0;return function(){return l<g.length?{done:!1,value:g[l++]}:{done:!0}}};$jscomp.arrayIterator=function(g){return{next:$jscomp.arrayIteratorImpl(g)}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;$jscomp.ISOLATE_POLYFILLS=!1;$jscomp.FORCE_POLYFILL_PROMISE=!1;$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION=!1;\n$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(g,l,r){if(g==Array.prototype||g==Object.prototype)return g;g[l]=r.value;return g};$jscomp.getGlobal=function(g){g=["object"==typeof globalThis&&globalThis,g,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var l=0;l<g.length;++l){var r=g[l];if(r&&r.Math==Math)return r}throw Error("Cannot find global object");};$jscomp.global=$jscomp.getGlobal(this);\n$jscomp.IS_SYMBOL_NATIVE="function"===typeof Symbol&&"symbol"===typeof Symbol("x");$jscomp.TRUST_ES6_POLYFILLS=!$jscomp.ISOLATE_POLYFILLS||$jscomp.IS_SYMBOL_NATIVE;$jscomp.polyfills={};$jscomp.propertyToPolyfillSymbol={};$jscomp.POLYFILL_PREFIX="$jscp$";var $jscomp$lookupPolyfilledValue=function(g,l){var r=$jscomp.propertyToPolyfillSymbol[l];if(null==r)return g[l];r=g[r];return void 0!==r?r:g[l]};\n$jscomp.polyfill=function(g,l,r,t){l&&($jscomp.ISOLATE_POLYFILLS?$jscomp.polyfillIsolated(g,l,r,t):$jscomp.polyfillUnisolated(g,l,r,t))};$jscomp.polyfillUnisolated=function(g,l,r,t){r=$jscomp.global;g=g.split(".");for(t=0;t<g.length-1;t++){var v=g[t];if(!(v in r))return;r=r[v]}g=g[g.length-1];t=r[g];l=l(t);l!=t&&null!=l&&$jscomp.defineProperty(r,g,{configurable:!0,writable:!0,value:l})};\n$jscomp.polyfillIsolated=function(g,l,r,t){var v=g.split(".");g=1===v.length;t=v[0];t=!g&&t in $jscomp.polyfills?$jscomp.polyfills:$jscomp.global;for(var B=0;B<v.length-1;B++){var m=v[B];if(!(m in t))return;t=t[m]}v=v[v.length-1];r=$jscomp.IS_SYMBOL_NATIVE&&"es6"===r?t[v]:null;l=l(r);null!=l&&(g?$jscomp.defineProperty($jscomp.polyfills,v,{configurable:!0,writable:!0,value:l}):l!==r&&(void 0===$jscomp.propertyToPolyfillSymbol[v]&&(r=1E9*Math.random()>>>0,$jscomp.propertyToPolyfillSymbol[v]=$jscomp.IS_SYMBOL_NATIVE?\n$jscomp.global.Symbol(v):$jscomp.POLYFILL_PREFIX+r+"$"+v),$jscomp.defineProperty(t,$jscomp.propertyToPolyfillSymbol[v],{configurable:!0,writable:!0,value:l})))};$jscomp.initSymbol=function(){};\n$jscomp.polyfill("Symbol",function(g){if(g)return g;var l=function(B,m){this.$jscomp$symbol$id_=B;$jscomp.defineProperty(this,"description",{configurable:!0,writable:!0,value:m})};l.prototype.toString=function(){return this.$jscomp$symbol$id_};var r="jscomp_symbol_"+(1E9*Math.random()>>>0)+"_",t=0,v=function(B){if(this instanceof v)throw new TypeError("Symbol is not a constructor");return new l(r+(B||"")+"_"+t++,B)};return v},"es6","es3");\n$jscomp.polyfill("Symbol.iterator",function(g){if(g)return g;g=Symbol("Symbol.iterator");for(var l="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),r=0;r<l.length;r++){var t=$jscomp.global[l[r]];"function"===typeof t&&"function"!=typeof t.prototype[g]&&$jscomp.defineProperty(t.prototype,g,{configurable:!0,writable:!0,value:function(){return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this))}})}return g},"es6",\n"es3");$jscomp.iteratorPrototype=function(g){g={next:g};g[Symbol.iterator]=function(){return this};return g};$jscomp.createTemplateTagFirstArg=function(g){return g.raw=g};$jscomp.createTemplateTagFirstArgWithRaw=function(g,l){g.raw=l;return g};$jscomp.makeIterator=function(g){var l="undefined"!=typeof Symbol&&Symbol.iterator&&g[Symbol.iterator];return l?l.call(g):$jscomp.arrayIterator(g)};$jscomp.arrayFromIterator=function(g){for(var l,r=[];!(l=g.next()).done;)r.push(l.value);return r};\n$jscomp.arrayFromIterable=function(g){return g instanceof Array?g:$jscomp.arrayFromIterator($jscomp.makeIterator(g))};$jscomp.underscoreProtoCanBeSet=function(){var g={a:!0},l={};try{return l.__proto__=g,l.a}catch(r){}return!1};$jscomp.setPrototypeOf=$jscomp.TRUST_ES6_POLYFILLS&&"function"==typeof Object.setPrototypeOf?Object.setPrototypeOf:$jscomp.underscoreProtoCanBeSet()?function(g,l){g.__proto__=l;if(g.__proto__!==l)throw new TypeError(g+" is not extensible");return g}:null;\n$jscomp.generator={};$jscomp.generator.ensureIteratorResultIsObject_=function(g){if(!(g instanceof Object))throw new TypeError("Iterator result "+g+" is not an object");};$jscomp.generator.Context=function(){this.isRunning_=!1;this.yieldAllIterator_=null;this.yieldResult=void 0;this.nextAddress=1;this.finallyAddress_=this.catchAddress_=0;this.finallyContexts_=this.abruptCompletion_=null};\n$jscomp.generator.Context.prototype.start_=function(){if(this.isRunning_)throw new TypeError("Generator is already running");this.isRunning_=!0};$jscomp.generator.Context.prototype.stop_=function(){this.isRunning_=!1};$jscomp.generator.Context.prototype.jumpToErrorHandler_=function(){this.nextAddress=this.catchAddress_||this.finallyAddress_};$jscomp.generator.Context.prototype.next_=function(g){this.yieldResult=g};\n$jscomp.generator.Context.prototype.throw_=function(g){this.abruptCompletion_={exception:g,isException:!0};this.jumpToErrorHandler_()};$jscomp.generator.Context.prototype.return=function(g){this.abruptCompletion_={return:g};this.nextAddress=this.finallyAddress_};$jscomp.generator.Context.prototype.jumpThroughFinallyBlocks=function(g){this.abruptCompletion_={jumpTo:g};this.nextAddress=this.finallyAddress_};$jscomp.generator.Context.prototype.yield=function(g,l){this.nextAddress=l;return{value:g}};\n$jscomp.generator.Context.prototype.yieldAll=function(g,l){g=$jscomp.makeIterator(g);var r=g.next();$jscomp.generator.ensureIteratorResultIsObject_(r);if(r.done)this.yieldResult=r.value,this.nextAddress=l;else return this.yieldAllIterator_=g,this.yield(r.value,l)};$jscomp.generator.Context.prototype.jumpTo=function(g){this.nextAddress=g};$jscomp.generator.Context.prototype.jumpToEnd=function(){this.nextAddress=0};\n$jscomp.generator.Context.prototype.setCatchFinallyBlocks=function(g,l){this.catchAddress_=g;void 0!=l&&(this.finallyAddress_=l)};$jscomp.generator.Context.prototype.setFinallyBlock=function(g){this.catchAddress_=0;this.finallyAddress_=g||0};$jscomp.generator.Context.prototype.leaveTryBlock=function(g,l){this.nextAddress=g;this.catchAddress_=l||0};\n$jscomp.generator.Context.prototype.enterCatchBlock=function(g){this.catchAddress_=g||0;g=this.abruptCompletion_.exception;this.abruptCompletion_=null;return g};$jscomp.generator.Context.prototype.enterFinallyBlock=function(g,l,r){r?this.finallyContexts_[r]=this.abruptCompletion_:this.finallyContexts_=[this.abruptCompletion_];this.catchAddress_=g||0;this.finallyAddress_=l||0};\n$jscomp.generator.Context.prototype.leaveFinallyBlock=function(g,l){l=this.finallyContexts_.splice(l||0)[0];if(l=this.abruptCompletion_=this.abruptCompletion_||l){if(l.isException)return this.jumpToErrorHandler_();void 0!=l.jumpTo&&this.finallyAddress_<l.jumpTo?(this.nextAddress=l.jumpTo,this.abruptCompletion_=null):this.nextAddress=this.finallyAddress_}else this.nextAddress=g};$jscomp.generator.Context.prototype.forIn=function(g){return new $jscomp.generator.Context.PropertyIterator(g)};\n$jscomp.generator.Context.PropertyIterator=function(g){this.object_=g;this.properties_=[];for(var l in g)this.properties_.push(l);this.properties_.reverse()};$jscomp.generator.Context.PropertyIterator.prototype.getNext=function(){for(;0<this.properties_.length;){var g=this.properties_.pop();if(g in this.object_)return g}return null};$jscomp.generator.Engine_=function(g){this.context_=new $jscomp.generator.Context;this.program_=g};\n$jscomp.generator.Engine_.prototype.next_=function(g){this.context_.start_();if(this.context_.yieldAllIterator_)return this.yieldAllStep_(this.context_.yieldAllIterator_.next,g,this.context_.next_);this.context_.next_(g);return this.nextStep_()};\n$jscomp.generator.Engine_.prototype.return_=function(g){this.context_.start_();var l=this.context_.yieldAllIterator_;if(l)return this.yieldAllStep_("return"in l?l["return"]:function(r){return{value:r,done:!0}},g,this.context_.return);this.context_.return(g);return this.nextStep_()};\n$jscomp.generator.Engine_.prototype.throw_=function(g){this.context_.start_();if(this.context_.yieldAllIterator_)return this.yieldAllStep_(this.context_.yieldAllIterator_["throw"],g,this.context_.next_);this.context_.throw_(g);return this.nextStep_()};\n$jscomp.generator.Engine_.prototype.yieldAllStep_=function(g,l,r){try{var t=g.call(this.context_.yieldAllIterator_,l);$jscomp.generator.ensureIteratorResultIsObject_(t);if(!t.done)return this.context_.stop_(),t;var v=t.value}catch(B){return this.context_.yieldAllIterator_=null,this.context_.throw_(B),this.nextStep_()}this.context_.yieldAllIterator_=null;r.call(this.context_,v);return this.nextStep_()};\n$jscomp.generator.Engine_.prototype.nextStep_=function(){for(;this.context_.nextAddress;)try{var g=this.program_(this.context_);if(g)return this.context_.stop_(),{value:g.value,done:!1}}catch(l){this.context_.yieldResult=void 0,this.context_.throw_(l)}this.context_.stop_();if(this.context_.abruptCompletion_){g=this.context_.abruptCompletion_;this.context_.abruptCompletion_=null;if(g.isException)throw g.exception;return{value:g.return,done:!0}}return{value:void 0,done:!0}};\n$jscomp.generator.Generator_=function(g){this.next=function(l){return g.next_(l)};this.throw=function(l){return g.throw_(l)};this.return=function(l){return g.return_(l)};this[Symbol.iterator]=function(){return this}};$jscomp.generator.createGenerator=function(g,l){l=new $jscomp.generator.Generator_(new $jscomp.generator.Engine_(l));$jscomp.setPrototypeOf&&g.prototype&&$jscomp.setPrototypeOf(l,g.prototype);return l};\n$jscomp.iteratorFromArray=function(g,l){g instanceof String&&(g+="");var r=0,t=!1,v={next:function(){if(!t&&r<g.length){var B=r++;return{value:l(B,g[B]),done:!1}}t=!0;return{done:!0,value:void 0}}};v[Symbol.iterator]=function(){return v};return v};$jscomp.polyfill("Array.prototype.keys",function(g){return g?g:function(){return $jscomp.iteratorFromArray(this,function(l){return l})}},"es6","es3");$jscomp.owns=function(g,l){return Object.prototype.hasOwnProperty.call(g,l)};\n$jscomp.assign=$jscomp.TRUST_ES6_POLYFILLS&&"function"==typeof Object.assign?Object.assign:function(g,l){for(var r=1;r<arguments.length;r++){var t=arguments[r];if(t)for(var v in t)$jscomp.owns(t,v)&&(g[v]=t[v])}return g};$jscomp.polyfill("Object.assign",function(g){return g||$jscomp.assign},"es6","es3");\n$jscomp.polyfill("Promise",function(g){function l(){this.batch_=null}function r(m){return m instanceof v?m:new v(function(y,n){y(m)})}if(g&&(!($jscomp.FORCE_POLYFILL_PROMISE||$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION&&"undefined"===typeof $jscomp.global.PromiseRejectionEvent)||!$jscomp.global.Promise||-1===$jscomp.global.Promise.toString().indexOf("[native code]")))return g;l.prototype.asyncExecute=function(m){if(null==this.batch_){this.batch_=[];var y=this;this.asyncExecuteFunction(function(){y.executeBatch_()})}this.batch_.push(m)};\nvar t=$jscomp.global.setTimeout;l.prototype.asyncExecuteFunction=function(m){t(m,0)};l.prototype.executeBatch_=function(){for(;this.batch_&&this.batch_.length;){var m=this.batch_;this.batch_=[];for(var y=0;y<m.length;++y){var n=m[y];m[y]=null;try{n()}catch(u){this.asyncThrow_(u)}}}this.batch_=null};l.prototype.asyncThrow_=function(m){this.asyncExecuteFunction(function(){throw m;})};var v=function(m){this.state_=0;this.result_=void 0;this.onSettledCallbacks_=[];this.isRejectionHandled_=!1;var y=this.createResolveAndReject_();\ntry{m(y.resolve,y.reject)}catch(n){y.reject(n)}};v.prototype.createResolveAndReject_=function(){function m(u){return function(w){n||(n=!0,u.call(y,w))}}var y=this,n=!1;return{resolve:m(this.resolveTo_),reject:m(this.reject_)}};v.prototype.resolveTo_=function(m){if(m===this)this.reject_(new TypeError("A Promise cannot resolve to itself"));else if(m instanceof v)this.settleSameAsPromise_(m);else{a:switch(typeof m){case "object":var y=null!=m;break a;case "function":y=!0;break a;default:y=!1}y?this.resolveToNonPromiseObj_(m):\nthis.fulfill_(m)}};v.prototype.resolveToNonPromiseObj_=function(m){var y=void 0;try{y=m.then}catch(n){this.reject_(n);return}"function"==typeof y?this.settleSameAsThenable_(y,m):this.fulfill_(m)};v.prototype.reject_=function(m){this.settle_(2,m)};v.prototype.fulfill_=function(m){this.settle_(1,m)};v.prototype.settle_=function(m,y){if(0!=this.state_)throw Error("Cannot settle("+m+", "+y+"): Promise already settled in state"+this.state_);this.state_=m;this.result_=y;2===this.state_&&this.scheduleUnhandledRejectionCheck_();\nthis.executeOnSettledCallbacks_()};v.prototype.scheduleUnhandledRejectionCheck_=function(){var m=this;t(function(){if(m.notifyUnhandledRejection_()){var y=$jscomp.global.console;"undefined"!==typeof y&&y.error(m.result_)}},1)};v.prototype.notifyUnhandledRejection_=function(){if(this.isRejectionHandled_)return!1;var m=$jscomp.global.CustomEvent,y=$jscomp.global.Event,n=$jscomp.global.dispatchEvent;if("undefined"===typeof n)return!0;"function"===typeof m?m=new m("unhandledrejection",{cancelable:!0}):\n"function"===typeof y?m=new y("unhandledrejection",{cancelable:!0}):(m=$jscomp.global.document.createEvent("CustomEvent"),m.initCustomEvent("unhandledrejection",!1,!0,m));m.promise=this;m.reason=this.result_;return n(m)};v.prototype.executeOnSettledCallbacks_=function(){if(null!=this.onSettledCallbacks_){for(var m=0;m<this.onSettledCallbacks_.length;++m)B.asyncExecute(this.onSettledCallbacks_[m]);this.onSettledCallbacks_=null}};var B=new l;v.prototype.settleSameAsPromise_=function(m){var y=this.createResolveAndReject_();\nm.callWhenSettled_(y.resolve,y.reject)};v.prototype.settleSameAsThenable_=function(m,y){var n=this.createResolveAndReject_();try{m.call(y,n.resolve,n.reject)}catch(u){n.reject(u)}};v.prototype.then=function(m,y){function n(F,Q){return"function"==typeof F?function(ha){try{u(F(ha))}catch(ia){w(ia)}}:Q}var u,w,A=new v(function(F,Q){u=F;w=Q});this.callWhenSettled_(n(m,u),n(y,w));return A};v.prototype.catch=function(m){return this.then(void 0,m)};v.prototype.callWhenSettled_=function(m,y){function n(){switch(u.state_){case 1:m(u.result_);\nbreak;case 2:y(u.result_);break;default:throw Error("Unexpected state: "+u.state_);}}var u=this;null==this.onSettledCallbacks_?B.asyncExecute(n):this.onSettledCallbacks_.push(n);this.isRejectionHandled_=!0};v.resolve=r;v.reject=function(m){return new v(function(y,n){n(m)})};v.race=function(m){return new v(function(y,n){for(var u=$jscomp.makeIterator(m),w=u.next();!w.done;w=u.next())r(w.value).callWhenSettled_(y,n)})};v.all=function(m){var y=$jscomp.makeIterator(m),n=y.next();return n.done?r([]):new v(function(u,\nw){function A(ha){return function(ia){F[ha]=ia;Q--;0==Q&&u(F)}}var F=[],Q=0;do F.push(void 0),Q++,r(n.value).callWhenSettled_(A(F.length-1),w),n=y.next();while(!n.done)})};return v},"es6","es3");$jscomp.polyfill("Object.setPrototypeOf",function(g){return g||$jscomp.setPrototypeOf},"es6","es5");$jscomp.checkEs6ConformanceViaProxy=function(){try{var g={},l=Object.create(new $jscomp.global.Proxy(g,{get:function(r,t,v){return r==g&&"q"==t&&v==l}}));return!0===l.q}catch(r){return!1}};\n$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS=!1;$jscomp.ES6_CONFORMANCE=$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS&&$jscomp.checkEs6ConformanceViaProxy();\n$jscomp.polyfill("WeakMap",function(g){function l(){if(!g||!Object.seal)return!1;try{var u=Object.seal({}),w=Object.seal({}),A=new g([[u,2],[w,3]]);if(2!=A.get(u)||3!=A.get(w))return!1;A.delete(u);A.set(w,4);return!A.has(u)&&4==A.get(w)}catch(F){return!1}}function r(){}function t(u){var w=typeof u;return"object"===w&&null!==u||"function"===w}function v(u){if(!$jscomp.owns(u,m)){var w=new r;$jscomp.defineProperty(u,m,{value:w})}}function B(u){if(!$jscomp.ISOLATE_POLYFILLS){var w=Object[u];w&&(Object[u]=\nfunction(A){if(A instanceof r)return A;Object.isExtensible(A)&&v(A);return w(A)})}}if($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(g&&$jscomp.ES6_CONFORMANCE)return g}else if(l())return g;var m="$jscomp_hidden_"+Math.random();B("freeze");B("preventExtensions");B("seal");var y=0,n=function(u){this.id_=(y+=Math.random()+1).toString();if(u){u=$jscomp.makeIterator(u);for(var w;!(w=u.next()).done;)w=w.value,this.set(w[0],w[1])}};n.prototype.set=function(u,w){if(!t(u))throw Error("Invalid WeakMap key");\nv(u);if(!$jscomp.owns(u,m))throw Error("WeakMap key fail: "+u);u[m][this.id_]=w;return this};n.prototype.get=function(u){return t(u)&&$jscomp.owns(u,m)?u[m][this.id_]:void 0};n.prototype.has=function(u){return t(u)&&$jscomp.owns(u,m)&&$jscomp.owns(u[m],this.id_)};n.prototype.delete=function(u){return t(u)&&$jscomp.owns(u,m)&&$jscomp.owns(u[m],this.id_)?delete u[m][this.id_]:!1};return n},"es6","es3");$jscomp.MapEntry=function(){};\n$jscomp.polyfill("Map",function(g){function l(){if($jscomp.ASSUME_NO_NATIVE_MAP||!g||"function"!=typeof g||!g.prototype.entries||"function"!=typeof Object.seal)return!1;try{var n=Object.seal({x:4}),u=new g($jscomp.makeIterator([[n,"s"]]));if("s"!=u.get(n)||1!=u.size||u.get({x:4})||u.set({x:4},"t")!=u||2!=u.size)return!1;var w=u.entries(),A=w.next();if(A.done||A.value[0]!=n||"s"!=A.value[1])return!1;A=w.next();return A.done||4!=A.value[0].x||"t"!=A.value[1]||!w.next().done?!1:!0}catch(F){return!1}}\nif($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(g&&$jscomp.ES6_CONFORMANCE)return g}else if(l())return g;var r=new WeakMap,t=function(n){this.data_={};this.head_=m();this.size=0;if(n){n=$jscomp.makeIterator(n);for(var u;!(u=n.next()).done;)u=u.value,this.set(u[0],u[1])}};t.prototype.set=function(n,u){n=0===n?0:n;var w=v(this,n);w.list||(w.list=this.data_[w.id]=[]);w.entry?w.entry.value=u:(w.entry={next:this.head_,previous:this.head_.previous,head:this.head_,key:n,value:u},w.list.push(w.entry),\nthis.head_.previous.next=w.entry,this.head_.previous=w.entry,this.size++);return this};t.prototype.delete=function(n){n=v(this,n);return n.entry&&n.list?(n.list.splice(n.index,1),n.list.length||delete this.data_[n.id],n.entry.previous.next=n.entry.next,n.entry.next.previous=n.entry.previous,n.entry.head=null,this.size--,!0):!1};t.prototype.clear=function(){this.data_={};this.head_=this.head_.previous=m();this.size=0};t.prototype.has=function(n){return!!v(this,n).entry};t.prototype.get=function(n){return(n=\nv(this,n).entry)&&n.value};t.prototype.entries=function(){return B(this,function(n){return[n.key,n.value]})};t.prototype.keys=function(){return B(this,function(n){return n.key})};t.prototype.values=function(){return B(this,function(n){return n.value})};t.prototype.forEach=function(n,u){for(var w=this.entries(),A;!(A=w.next()).done;)A=A.value,n.call(u,A[1],A[0],this)};t.prototype[Symbol.iterator]=t.prototype.entries;var v=function(n,u){var w=u&&typeof u;"object"==w||"function"==w?r.has(u)?w=r.get(u):\n(w=""+ ++y,r.set(u,w)):w="p_"+u;var A=n.data_[w];if(A&&$jscomp.owns(n.data_,w))for(n=0;n<A.length;n++){var F=A[n];if(u!==u&&F.key!==F.key||u===F.key)return{id:w,list:A,index:n,entry:F}}return{id:w,list:A,index:-1,entry:void 0}},B=function(n,u){var w=n.head_;return $jscomp.iteratorPrototype(function(){if(w){for(;w.head!=n.head_;)w=w.previous;for(;w.next!=w.head;)return w=w.next,{done:!1,value:u(w)};w=null}return{done:!0,value:void 0}})},m=function(){var n={};return n.previous=n.next=n.head=n},y=0;\nreturn t},"es6","es3");$jscomp.polyfill("Number.MAX_SAFE_INTEGER",function(){return 9007199254740991},"es6","es3");$jscomp.polyfill("Array.prototype.values",function(g){return g?g:function(){return $jscomp.iteratorFromArray(this,function(l,r){return r})}},"es8","es3");\n$jscomp.polyfill("Set",function(g){function l(){if($jscomp.ASSUME_NO_NATIVE_SET||!g||"function"!=typeof g||!g.prototype.entries||"function"!=typeof Object.seal)return!1;try{var t=Object.seal({x:4}),v=new g($jscomp.makeIterator([t]));if(!v.has(t)||1!=v.size||v.add(t)!=v||1!=v.size||v.add({x:4})!=v||2!=v.size)return!1;var B=v.entries(),m=B.next();if(m.done||m.value[0]!=t||m.value[1]!=t)return!1;m=B.next();return m.done||m.value[0]==t||4!=m.value[0].x||m.value[1]!=m.value[0]?!1:B.next().done}catch(y){return!1}}\nif($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS){if(g&&$jscomp.ES6_CONFORMANCE)return g}else if(l())return g;var r=function(t){this.map_=new Map;if(t){t=$jscomp.makeIterator(t);for(var v;!(v=t.next()).done;)this.add(v.value)}this.size=this.map_.size};r.prototype.add=function(t){t=0===t?0:t;this.map_.set(t,t);this.size=this.map_.size;return this};r.prototype.delete=function(t){t=this.map_.delete(t);this.size=this.map_.size;return t};r.prototype.clear=function(){this.map_.clear();this.size=0};r.prototype.has=\nfunction(t){return this.map_.has(t)};r.prototype.entries=function(){return this.map_.entries()};r.prototype.values=function(){return this.map_.values()};r.prototype.keys=r.prototype.values;r.prototype[Symbol.iterator]=r.prototype.values;r.prototype.forEach=function(t,v){var B=this;this.map_.forEach(function(m){return t.call(v,m,m,B)})};return r},"es6","es3");\n$jscomp.checkStringArgs=function(g,l,r){if(null==g)throw new TypeError("The \'this\' value for String.prototype."+r+" must not be null or undefined");if(l instanceof RegExp)throw new TypeError("First argument to String.prototype."+r+" must not be a regular expression");return g+""};\n$jscomp.polyfill("String.prototype.startsWith",function(g){return g?g:function(l,r){var t=$jscomp.checkStringArgs(this,l,"startsWith");l+="";var v=t.length,B=l.length;r=Math.max(0,Math.min(r|0,t.length));for(var m=0;m<B&&r<v;)if(t[r++]!=l[m++])return!1;return m>=B}},"es6","es3");\n(function(g,l){"object"===typeof exports&&"undefined"!==typeof module?module.exports="function"===typeof require&&l(require("vega"),require("vega-lite")):"function"===typeof define&&define.amd?define(["vega","vega-lite"],l):(g="undefined"!==typeof globalThis?globalThis:g||self,g.vegaEmbed=l(g.vega,g.vegaLite))})(this,function(g,l){function r(a){if(a&&a.__esModule)return a;var b=Object.create(null);a&&Object.keys(a).forEach(function(c){if("default"!==c){var d=Object.getOwnPropertyDescriptor(a,c);Object.defineProperty(b,\nc,d.get?d:{enumerable:!0,get:function(){return a[c]}})}});b["default"]=a;return Object.freeze(b)}function t(a,b,c,d){function e(f){return f instanceof c?f:new c(function(h){h(f)})}return new (c||(c=Promise))(function(f,h){function k(z){try{p(d.next(z))}catch(x){h(x)}}function q(z){try{p(d["throw"](z))}catch(x){h(x)}}function p(z){z.done?f(z.value):e(z.value).then(k,q)}p((d=d.apply(a,b||[])).next())})}function v(a,b){function c(p){return function(z){return d([p,z])}}function d(p){if(f)throw new TypeError("Generator is already executing.");\nfor(;e;)try{if(f=1,h&&(k=p[0]&2?h["return"]:p[0]?h["throw"]||((k=h["return"])&&k.call(h),0):h.next)&&!(k=k.call(h,p[1])).done)return k;if(h=0,k)p=[p[0]&2,k.value];switch(p[0]){case 0:case 1:k=p;break;case 4:return e.label++,{value:p[1],done:!1};case 5:e.label++;h=p[1];p=[0];continue;case 7:p=e.ops.pop();e.trys.pop();continue;default:if(!(k=e.trys,k=0<k.length&&k[k.length-1])&&(6===p[0]||2===p[0])){e=0;continue}if(3===p[0]&&(!k||p[1]>k[0]&&p[1]<k[3]))e.label=p[1];else if(6===p[0]&&e.label<k[1])e.label=\nk[1],k=p;else if(k&&e.label<k[2])e.label=k[2],e.ops.push(p);else{k[2]&&e.ops.pop();e.trys.pop();continue}}p=b.call(a,e)}catch(z){p=[6,z],h=0}finally{f=k=0}if(p[0]&5)throw p[1];return{value:p[0]?p[1]:void 0,done:!0}}var e={label:0,sent:function(){if(k[0]&1)throw k[1];return k[1]},trys:[],ops:[]},f,h,k,q;return q={next:c(0),"throw":c(1),"return":c(2)},"function"===typeof Symbol&&(q[Symbol.iterator]=function(){return this}),q}function B(a){if(Array.isArray(a)){var b=Array(a.length);for(a=0;a<b.length;a++)b[a]=\n""+a;return b}if(Object.keys)return Object.keys(a);b=[];for(var c in a)eb.call(a,c)&&b.push(c);return b}function m(a){switch(typeof a){case "object":return JSON.parse(JSON.stringify(a));case "undefined":return null;default:return a}}function y(a){for(var b=0,c=a.length,d;b<c;)if(d=a.charCodeAt(b),48<=d&&57>=d)b++;else return!1;return!0}function n(a){return-1===a.indexOf("/")&&-1===a.indexOf("~")?a:a.replace(/~/g,"~0").replace(/\\//g,"~1")}function u(a){return a.replace(/~1/g,"/").replace(/~0/g,"~")}\nfunction w(a){if(void 0===a)return!0;if(a)if(Array.isArray(a))for(var b=0,c=a.length;b<c;b++){if(w(a[b]))return!0}else if("object"===typeof a){c=B(a);var d=c.length;for(b=0;b<d;b++)if(w(a[c[b]]))return!0}return!1}function A(a,b){a=[a];for(var c in b){var d="object"===typeof b[c]?JSON.stringify(b[c],null,2):b[c];"undefined"!==typeof d&&a.push(c+": "+d)}return a.join("\\n")}function F(a,b){if(""==b)return a;b={op:"_get",path:b};Q(a,b);return b.value}function Q(a,b,c,d,e,f){void 0===c&&(c=!1);void 0===\nd&&(d=!0);void 0===e&&(e=!0);void 0===f&&(f=0);c&&("function"==typeof c?c(b,0,a,b.path):ia(b,0));if(""===b.path){e={newDocument:a};if("add"===b.op)return e.newDocument=b.value,e;if("replace"===b.op)return e.newDocument=b.value,e.removed=a,e;if("move"===b.op||"copy"===b.op)return e.newDocument=F(a,b.from),"move"===b.op&&(e.removed=a),e;if("test"===b.op){e.test=Ba(a,b.value);if(!1===e.test)throw new G("Test operation failed","TEST_OPERATION_FAILED",f,b,a);e.newDocument=a;return e}if("remove"===b.op)return e.removed=\na,e.newDocument=null,e;if("_get"===b.op)return b.value=a,e;if(c)throw new G("Operation `op` property is not one of operations defined in RFC-6902","OPERATION_OP_INVALID",f,b,a);return e}d||(a=m(a));d=(b.path||"").split("/");var h=a,k=1,q=d.length,p=void 0,z;for(z="function"==typeof c?c:ia;;){var x=d[k];if(e&&"__proto__"==x)throw new TypeError("JSON-Patch: modifying `__proto__` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README");\nc&&void 0===p&&(void 0===h[x]?p=d.slice(0,k).join("/"):k==q-1&&(p=b.path),void 0!==p&&z(b,0,a,p));k++;if(Array.isArray(h)){if("-"===x)x=h.length;else{if(c&&!y(x))throw new G("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index","OPERATION_PATH_ILLEGAL_ARRAY_INDEX",f,b,a);y(x)&&(x=~~x)}if(k>=q){if(c&&"add"===b.op&&x>h.length)throw new G("The specified index MUST NOT be greater than the number of elements in the array","OPERATION_VALUE_OUT_OF_BOUNDS",\nf,b,a);e=ic[b.op].call(b,h,x,a);if(!1===e.test)throw new G("Test operation failed","TEST_OPERATION_FAILED",f,b,a);return e}}else if(x&&-1!=x.indexOf("~")&&(x=u(x)),k>=q){e=ua[b.op].call(b,h,x,a);if(!1===e.test)throw new G("Test operation failed","TEST_OPERATION_FAILED",f,b,a);return e}h=h[x]}}function ha(a,b,c,d,e){void 0===d&&(d=!0);void 0===e&&(e=!0);if(c&&!Array.isArray(b))throw new G("Patch sequence must be an array","SEQUENCE_NOT_AN_ARRAY");d||(a=m(a));d=Array(b.length);for(var f=0,h=b.length;f<\nh;f++)d[f]=Q(a,b[f],c,!0,e,f),a=d[f].newDocument;d.newDocument=a;return d}function ia(a,b,c,d){if("object"!==typeof a||null===a||Array.isArray(a))throw new G("Operation is not an object","OPERATION_NOT_AN_OBJECT",b,a,c);if(ua[a.op]){if("string"!==typeof a.path)throw new G("Operation `path` property is not a string","OPERATION_PATH_INVALID",b,a,c);if(0!==a.path.indexOf("/")&&0<a.path.length)throw new G(\'Operation `path` property must start with "/"\',"OPERATION_PATH_INVALID",b,a,c);if("move"!==a.op&&\n"copy"!==a.op||"string"===typeof a.from)if("add"!==a.op&&"replace"!==a.op&&"test"!==a.op||void 0!==a.value){if(("add"===a.op||"replace"===a.op||"test"===a.op)&&w(a.value))throw new G("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)","OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED",b,a,c);if(c)if("add"==a.op){var e=a.path.split("/").length;d=d.split("/").length;if(e!==d+1&&e!==d)throw new G("Cannot perform an `add` operation at the desired path","OPERATION_PATH_CANNOT_ADD",\nb,a,c);}else if("replace"===a.op||"remove"===a.op||"_get"===a.op){if(a.path!==d)throw new G("Cannot perform the operation at a path that does not exist","OPERATION_PATH_UNRESOLVABLE",b,a,c);}else if(("move"===a.op||"copy"===a.op)&&(e=Ab([{op:"_get",path:a.from,value:void 0}],c))&&"OPERATION_PATH_UNRESOLVABLE"===e.name)throw new G("Cannot perform the operation from a path that does not exist","OPERATION_FROM_UNRESOLVABLE",b,a,c);}else throw new G("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)",\n"OPERATION_VALUE_REQUIRED",b,a,c);else throw new G("Operation `from` property is not present (applicable in `move` and `copy` operations)","OPERATION_FROM_REQUIRED",b,a,c);}else throw new G("Operation `op` property is not one of operations defined in RFC-6902","OPERATION_OP_INVALID",b,a,c);}function Ab(a,b,c){try{if(!Array.isArray(a))throw new G("Patch sequence must be an array","SEQUENCE_NOT_AN_ARRAY");if(b)ha(m(b),m(a),c||!0);else{c=c||ia;for(var d=0;d<a.length;d++)c(a[d],d,b,void 0)}}catch(e){if(e instanceof\nG)return e;throw e;}}function Ba(a,b){if(a===b)return!0;if(a&&b&&"object"==typeof a&&"object"==typeof b){var c=Array.isArray(a),d=Array.isArray(b);if(c&&d){var e=a.length;if(e!=b.length)return!1;for(c=e;0!==c--;)if(!Ba(a[c],b[c]))return!1;return!0}if(c!=d)return!1;d=Object.keys(a);e=d.length;if(e!==Object.keys(b).length)return!1;for(c=e;0!==c--;)if(!b.hasOwnProperty(d[c]))return!1;for(c=e;0!==c--;)if(e=d[c],!Ba(a[e],b[e]))return!1;return!0}return a!==a&&b!==b}function fb(a,b){void 0===b&&(b=!1);var c=\ngb.get(a.object);hb(c.value,a.object,a.patches,"",b);a.patches.length&&ha(c.value,a.patches);b=a.patches;0<b.length&&(a.patches=[],a.callback&&a.callback(b));return b}function hb(a,b,c,d,e){if(b!==a){"function"===typeof b.toJSON&&(b=b.toJSON());for(var f=B(b),h=B(a),k=!1,q=h.length-1;0<=q;q--){var p=h[q],z=a[p];if(!eb.call(b,p)||void 0===b[p]&&void 0!==z&&!1===Array.isArray(b))Array.isArray(a)===Array.isArray(b)?(e&&c.push({op:"test",path:d+"/"+n(p),value:m(z)}),c.push({op:"remove",path:d+"/"+n(p)}),\nk=!0):(e&&c.push({op:"test",path:d,value:a}),c.push({op:"replace",path:d,value:b}));else{var x=b[p];"object"==typeof z&&null!=z&&"object"==typeof x&&null!=x?hb(z,x,c,d+"/"+n(p),e):z!==x&&(e&&c.push({op:"test",path:d+"/"+n(p),value:m(z)}),c.push({op:"replace",path:d+"/"+n(p),value:m(x)}))}}if(k||f.length!=h.length)for(q=0;q<f.length;q++)p=f[q],eb.call(a,p)||void 0===b[p]||c.push({op:"add",path:d+"/"+n(p),value:m(b[p])})}}function D(a){var b=this;b instanceof D||(b=new D);b.tail=null;b.head=null;b.length=\n0;if(a&&"function"===typeof a.forEach)a.forEach(function(e){b.push(e)});else if(0<arguments.length)for(var c=0,d=arguments.length;c<d;c++)b.push(arguments[c]);return b}function na(a,b,c,d){if(!(this instanceof na))return new na(a,b,c,d);this.list=d;this.value=a;b?(b.next=this,this.prev=b):this.prev=null;c?(c.prev=this,this.next=c):this.next=null}function Bb(a){var b=$jscomp.makeIterator(/\\/schema\\/([\\w-]+)\\/([\\w\\.\\-]+)\\.json$/g.exec(a).slice(1,3));a=b.next().value;b=b.next().value;return{library:a,\nversion:b}}function va(a,b,c){a.fields=b||[];a.fname=c;return a}function jc(a){return 1===a.length?kc(a[0]):lc(a)}function mc(a){function b(){c.push(h+a.substring(k,q));h="";k=q+1}var c=[],d=a.length,e=null,f=0,h="",k,q;a+="";for(k=q=0;q<d;++q){var p=a[q];if("\\\\"===p)h+=a.substring(k,q),h+=a.substring(++q,++q),k=q;else if(p===e)b(),e=null,f=-1;else if(!e)if(k===f&&\'"\'===p)k=q+1,e=p;else if(k===f&&"\'"===p)k=q+1,e=p;else if("."===p&&!f)q>k?b():k=q+1;else if("["===p)q>k&&b(),f=k=q+1;else if("]"===p){if(!f)throw Error("Access path missing open bracket: "+\na);0<f&&b();f=0;k=q+1}}if(f)throw Error("Access path missing closing bracket: "+a);if(e)throw Error("Access path missing closing quote: "+a);q>k&&(q++,b());return c}function nc(a,b){var c={},d;for(d in a)Object.prototype.hasOwnProperty.call(a,d)&&0>b.indexOf(d)&&(c[d]=a[d]);if(null!=a&&"function"===typeof Object.getOwnPropertySymbols){var e=0;for(d=Object.getOwnPropertySymbols(a);e<d.length;e++)0>b.indexOf(d[e])&&Object.prototype.propertyIsEnumerable.call(a,d[e])&&(c[d[e]]=a[d[e]])}return c}function oc(a,\nb,c){if(pc(a))return"["+a.map(function(k){return b("string"===typeof k?k:JSON.stringify(k,Cb(c)))}).join(", ")+"]";if(a===Object(a)){var d="",e=a.title,f=a.image;a=nc(a,["title","image"]);e&&(d+="<h2>"+b(e)+"</h2>");f&&(d+=\'<img src="\'+b(f)+\'">\');e=Object.keys(a);if(0<e.length){d+="<table>";e=$jscomp.makeIterator(e);for(f=e.next();!f.done;f=e.next()){f=f.value;var h=a[f];void 0!==h&&(h===Object(h)&&(h=JSON.stringify(h,Cb(c))),d+=\'<tr><td class="key">\'+b(f)+\':</td><td class="value">\'+b(h)+"</td></tr>")}d+=\n"</table>"}return d||"{}"}return b(a)}function Cb(a){var b=[];return function(c,d){if("object"!==typeof d||null===d)return d;c=b.indexOf(this)+1;b.length=c;if(b.length>a)return"[Object]";if(0<=b.indexOf(d))return"[Circular]";b.push(d);return d}}function qc(a,b,c){function d(q){q.source===f&&(k=0,a.removeEventListener("message",d,!1))}function e(){0>=k||(f.postMessage(c,h),setTimeout(e,250),--k)}var f=a.open(b),h=(new URL(b)).origin,k=40;a.addEventListener("message",d,!1);setTimeout(e,250)}function Db(a){for(var b=\n[],c=1;c<arguments.length;c++)b[c-1]=arguments[c];for(var d=0;d<b.length;d++)for(var e=a,f=b[d],h=0,k=Object.keys(f);h<k.length;h++){var q=k[h];self.vega.writeConfig(e,q,f[q],!0)}return a}function Eb(a,b,c,d){b="<html><head>"+b+\'</head><body><pre><code class="json">\';c="</code></pre>"+c+"</body></html>";var e=window.open("");e.document.write(b+a+c);e.document.title=Ca[d]+" JSON Source"}function rc(a,b){var c;return a.$schema?(a=Bb(a.$schema),b&&b!==a.library&&console.warn("The given visualization spec is written in "+\nCa[a.library]+", but mode argument sets "+(null!==(c=Ca[b])&&void 0!==c?c:b)+"."),b=a.library,Fb.satisfies(Oa[b],"^"+a.version.slice(1))||console.warn("The input spec uses "+Ca[b]+" "+a.version+", but the current version of "+Ca[b]+" is v"+Oa[b]+"."),b):"mark"in a||"encoding"in a||"layer"in a||"hconcat"in a||"vconcat"in a||"facet"in a||"repeat"in a?"vega-lite":"marks"in a||"signals"in a||"scales"in a||"axes"in a?"vega":null!==b&&void 0!==b?b:"vega"}function Gb(a){return a&&"load"in a?a:self.vega.loader(a)}\nfunction Hb(a){var b;return null!==(b=a.usermeta&&a.usermeta.embedOptions)&&void 0!==b?b:{}}function Pa(a,b,c){var d,e,f;void 0===c&&(c={});return t(this,void 0,void 0,function(){var h,k,q,p,z,x,C,R;return v(this,function(I){switch(I.label){case 0:if(!self.vega.isString(b))return[3,2];k=Gb(c.loader);p=(q=JSON).parse;return[4,k.load(b)];case 1:return h=p.apply(q,[I.sent()]),[3,3];case 2:h=b,I.label=3;case 3:z=Hb(h).loader;if(!k||z)k=Gb(null!==(d=c.loader)&&void 0!==d?d:z);return[4,Ib(Hb(h),k)];case 4:return x=\nI.sent(),[4,Ib(c,k)];case 5:return C=I.sent(),R=X(X({},Db(C,x)),{config:self.vega.mergeConfig(null!==(e=C.config)&&void 0!==e?e:{},null!==(f=x.config)&&void 0!==f?f:{})}),[4,sc(a,h,R,k)];case 6:return[2,I.sent()]}})})}function Ib(a,b){var c;return t(this,void 0,void 0,function(){var d,e,f,h,k,q,p,z;return v(this,function(x){switch(x.label){case 0:if(!self.vega.isString(a.config))return[3,2];h=(f=JSON).parse;return[4,b.load(a.config)];case 1:return e=h.apply(f,[x.sent()]),[3,3];case 2:e=null!==(c=\na.config)&&void 0!==c?c:{},x.label=3;case 3:d=e;if(!self.vega.isString(a.patch))return[3,5];z=(p=JSON).parse;return[4,b.load(a.patch)];case 4:return q=z.apply(p,[x.sent()]),[3,6];case 5:q=a.patch,x.label=6;case 6:return k=q,[2,X(X(X({},a),k?{patch:k}:{}),d?{config:d}:{})]}})})}function tc(a){var b;a=a.getRootNode?a.getRootNode():document;return a instanceof ShadowRoot?{root:a,rootContainer:a}:{root:document,rootContainer:null!==(b=document.head)&&void 0!==b?b:document.body}}function sc(a,b,c,d){var e,\nf,h,k,q,p;void 0===c&&(c={});return t(this,void 0,void 0,function(){function z(){Qa&&document.removeEventListener("click",Qa);aa.finalize()}var x,C,R,I,Da,Ea,N,wa,Ra,Sa,Ta,ja,ca,ib,jb,Ua,Va,kb,Jb,aa,lb,xa,mb,Kb,Lb,Qa,nb,oa,ob,pa,Mb,Wa,pb,Nb,Fa,Ga,Ob,Ha;return v(this,function(Pb){switch(Pb.label){case 0:x=c.theme?self.vega.mergeConfig(uc[c.theme],null!==(e=c.config)&&void 0!==e?e:{}):c.config;C=self.vega.isBoolean(c.actions)?c.actions:Db({},vc,null!==(f=c.actions)&&void 0!==f?f:{});R=X(X({},wc),c.i18n);\nI=null!==(h=c.renderer)&&void 0!==h?h:"canvas";Da=null!==(k=c.logLevel)&&void 0!==k?k:self.vega.Warn;Ea=null!==(q=c.downloadFileName)&&void 0!==q?q:"visualization";N="string"===typeof a?document.querySelector(a):a;if(!N)throw Error(a+" does not exist");!1!==c.defaultStyle&&(wa=tc(N),Ra=wa.root,Sa=wa.rootContainer,Ra.getElementById("vega-embed-style")||(Ta=document.createElement("style"),Ta.id="vega-embed-style",Ta.innerText=void 0===c.defaultStyle||!0===c.defaultStyle?\'.vega-embed {\\n  position: relative;\\n  display: inline-block;\\n  box-sizing: border-box; }\\n  .vega-embed.has-actions {\\n    padding-right: 38px; }\\n  .vega-embed details:not([open]) > :not(summary) {\\n    display: none !important; }\\n  .vega-embed summary {\\n    list-style: none;\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    padding: 6px;\\n    z-index: 1000;\\n    background: white;\\n    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);\\n    color: #1b1e23;\\n    border: 1px solid #aaa;\\n    border-radius: 999px;\\n    opacity: 0.2;\\n    transition: opacity 0.4s ease-in;\\n    outline: none;\\n    cursor: pointer;\\n    line-height: 0px; }\\n    .vega-embed summary::-webkit-details-marker {\\n      display: none; }\\n    .vega-embed summary:active {\\n      box-shadow: #aaa 0px 0px 0px 1px inset; }\\n    .vega-embed summary svg {\\n      width: 14px;\\n      height: 14px; }\\n  .vega-embed details[open] summary {\\n    opacity: 0.7; }\\n  .vega-embed:hover summary,\\n  .vega-embed:focus summary {\\n    opacity: 1 !important;\\n    transition: opacity 0.2s ease; }\\n  .vega-embed .vega-actions {\\n    position: absolute;\\n    z-index: 1001;\\n    top: 35px;\\n    right: -9px;\\n    display: flex;\\n    flex-direction: column;\\n    padding-bottom: 8px;\\n    padding-top: 8px;\\n    border-radius: 4px;\\n    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.2);\\n    border: 1px solid #d9d9d9;\\n    background: white;\\n    animation-duration: 0.15s;\\n    animation-name: scale-in;\\n    animation-timing-function: cubic-bezier(0.2, 0, 0.13, 1.5);\\n    text-align: left; }\\n    .vega-embed .vega-actions a {\\n      padding: 8px 16px;\\n      font-family: sans-serif;\\n      font-size: 14px;\\n      font-weight: 600;\\n      white-space: nowrap;\\n      color: #434a56;\\n      text-decoration: none; }\\n      .vega-embed .vega-actions a:hover {\\n        background-color: #f7f7f9;\\n        color: black; }\\n    .vega-embed .vega-actions::before, .vega-embed .vega-actions::after {\\n      content: "";\\n      display: inline-block;\\n      position: absolute; }\\n    .vega-embed .vega-actions::before {\\n      left: auto;\\n      right: 14px;\\n      top: -16px;\\n      border: 8px solid #0000;\\n      border-bottom-color: #d9d9d9; }\\n    .vega-embed .vega-actions::after {\\n      left: auto;\\n      right: 15px;\\n      top: -14px;\\n      border: 7px solid #0000;\\n      border-bottom-color: #fff; }\\n  .vega-embed .chart-wrapper {\\n    width: 100%;\\n    height: 100%; }\\n\\n.vega-embed-wrapper {\\n  max-width: 100%;\\n  overflow: auto;\\n  padding-right: 14px; }\\n\\n@keyframes scale-in {\\n  from {\\n    opacity: 0;\\n    transform: scale(0.6); }\\n  to {\\n    opacity: 1;\\n    transform: scale(1); } }\\n\'.toString():\nc.defaultStyle,Sa.appendChild(Ta)));ja=rc(b,c.mode);ca=xc[ja](b,x);"vega-lite"===ja&&ca.$schema&&(ib=Bb(ca.$schema),Fb.satisfies(Oa.vega,"^"+ib.version.slice(1))||console.warn("The compiled spec uses Vega "+ib.version+", but current version is v"+Oa.vega+"."));N.classList.add("vega-embed");C&&N.classList.add("has-actions");N.innerHTML="";jb=N;C&&(Ua=document.createElement("div"),Ua.classList.add("chart-wrapper"),N.appendChild(Ua),jb=Ua);(Va=c.patch)&&(ca=Va instanceof Function?Va(ca):ha(ca,Va,!0,\n!1).newDocument);c.formatLocale&&self.vega.formatLocale(c.formatLocale);c.timeFormatLocale&&self.vega.timeFormatLocale(c.timeFormatLocale);kb=c.ast;Jb=self.vega.parse(ca,"vega-lite"===ja?{}:x,{ast:kb});aa=new (c.viewClass||self.vega.View)(Jb,X({loader:d,logLevel:Da,renderer:I},kb?{expr:self.vega.expressionInterpreter}:{}));!1!==c.tooltip&&(lb=void 0,lb="function"===typeof c.tooltip?c.tooltip:(new Qb(!0===c.tooltip?{}:c.tooltip)).call,aa.tooltip(lb));xa=c.hover;void 0===xa&&(xa="vega"===ja);xa&&(mb=\n"boolean"===typeof xa?{}:xa,Kb=mb.hoverSet,Lb=mb.updateSet,aa.hover(Kb,Lb));c&&(null!=c.width&&aa.width(c.width),null!=c.height&&aa.height(c.height),null!=c.padding&&aa.padding(c.padding));return[4,aa.initialize(jb,c.bind).runAsync()];case 1:Pb.sent();if(!1!==C){nb=N;!1!==c.defaultStyle&&(oa=document.createElement("details"),oa.title=R.CLICK_TO_VIEW_ACTIONS,N.append(oa),nb=oa,ob=document.createElement("summary"),ob.innerHTML=\'\\n<svg viewBox="0 0 16 16" fill="currentColor" stroke="none" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">\\n  <circle r="2" cy="8" cx="2"></circle>\\n  <circle r="2" cy="8" cx="8"></circle>\\n  <circle r="2" cy="8" cx="14"></circle>\\n</svg>\',\noa.append(ob),Qa=function(Y){oa.contains(Y.target)||oa.removeAttribute("open")},document.addEventListener("click",Qa));pa=document.createElement("div");nb.append(pa);pa.classList.add("vega-actions");if(!0===C||!1!==C["export"])for(Mb=function(Y){if(!0===C||!0===C["export"]||C["export"][Y]){var da=R[Y.toUpperCase()+"_ACTION"],T=document.createElement("a");T.text=da;T.href="#";T.target="_blank";T.download=Ea+"."+Y;T.addEventListener("mousedown",function(yc){return t(this,void 0,void 0,function(){var zc;\nreturn v(this,function(Rb){switch(Rb.label){case 0:return yc.preventDefault(),[4,aa.toImageURL(Y,c.scaleFactor)];case 1:return this.href=zc=Rb.sent(),[2]}})})});pa.append(T)}},Wa=0,pb=["svg","png"];Wa<pb.length;Wa++)Nb=pb[Wa],Mb(Nb);if(!0===C||!1!==C.source)Fa=document.createElement("a"),Fa.text=R.SOURCE_ACTION,Fa.href="#",Fa.addEventListener("click",function(Y){var da,T;Eb(qb(b),null!==(da=c.sourceHeader)&&void 0!==da?da:"",null!==(T=c.sourceFooter)&&void 0!==T?T:"",ja);Y.preventDefault()}),pa.append(Fa);\n"vega-lite"!==ja||!0!==C&&!1===C.compiled||(Ga=document.createElement("a"),Ga.text=R.COMPILED_ACTION,Ga.href="#",Ga.addEventListener("click",function(Y){var da,T;Eb(qb(ca),null!==(da=c.sourceHeader)&&void 0!==da?da:"",null!==(T=c.sourceFooter)&&void 0!==T?T:"","vega");Y.preventDefault()}),pa.append(Ga));if(!0===C||!1!==C.editor)Ob=null!==(p=c.editorUrl)&&void 0!==p?p:"https://vega.github.io/editor/",Ha=document.createElement("a"),Ha.text=R.EDITOR_ACTION,Ha.href="#",Ha.addEventListener("click",function(Y){qc(window,\nOb,{config:x,mode:ja,renderer:I,spec:qb(b)});Y.preventDefault()}),pa.append(Ha)}return[2,{view:aa,spec:b,vgSpec:ca,finalize:z}]}})})}function Sb(a,b){var c;void 0===b&&(b={});return t(this,void 0,void 0,function(){var d,e,f,h;return v(this,function(k){switch(k.label){case 0:return d=document.createElement("div"),d.classList.add("vega-embed-wrapper"),e=document.createElement("div"),d.appendChild(e),f=!0===b.actions||!1===b.actions?b.actions:X({"export":!0,source:!1,compiled:!0,editor:!0},null!==(c=\nb.actions)&&void 0!==c?c:{}),[4,Pa(e,a,X({actions:f},null!==b&&void 0!==b?b:{}))];case 1:return h=k.sent(),d.value=h.view,[2,d]}})})}var Ac=r(g),Bc=r(l),X=function(){X=Object.assign||function(a){for(var b,c=1,d=arguments.length;c<d;c++){b=arguments[c];for(var e in b)Object.prototype.hasOwnProperty.call(b,e)&&(a[e]=b[e])}return a};return X.apply(this,arguments)},Cc=function(){var a=function(b,c){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,e){d.__proto__=e}||function(d,e){for(var f in e)e.hasOwnProperty(f)&&\n(d[f]=e[f])};return a(b,c)};return function(b,c){function d(){this.constructor=b}a(b,c);b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),eb=Object.prototype.hasOwnProperty,Tb=function(a){function b(c,d,e,f,h){var k=this.constructor,q=a.call(this,A(c,{name:d,index:e,operation:f,tree:h}))||this;q.name=d;q.index=e;q.operation=f;q.tree=h;Object.setPrototypeOf(q,k.prototype);q.message=A(c,{name:d,index:e,operation:f,tree:h});return q}Cc(b,a);return b}(Error),G=Tb,ua={add:function(a,\nb,c){a[b]=this.value;return{newDocument:c}},remove:function(a,b,c){var d=a[b];delete a[b];return{newDocument:c,removed:d}},replace:function(a,b,c){var d=a[b];a[b]=this.value;return{newDocument:c,removed:d}},move:function(a,b,c){(a=F(c,this.path))&&(a=m(a));b=Q(c,{op:"remove",path:this.from}).removed;Q(c,{op:"add",path:this.path,value:b});return{newDocument:c,removed:a}},copy:function(a,b,c){a=F(c,this.from);Q(c,{op:"add",path:this.path,value:m(a)});return{newDocument:c}},test:function(a,b,c){return{newDocument:c,\ntest:Ba(a[b],this.value)}},_get:function(a,b,c){this.value=a[b];return{newDocument:c}}},ic={add:function(a,b,c){y(b)?a.splice(b,0,this.value):a[b]=this.value;return{newDocument:c,index:b}},remove:function(a,b,c){a=a.splice(b,1);return{newDocument:c,removed:a[0]}},replace:function(a,b,c){var d=a[b];a[b]=this.value;return{newDocument:c,removed:d}},move:ua.move,copy:ua.copy,test:ua.test,_get:ua._get},Dc=Object.freeze({__proto__:null,JsonPatchError:G,deepClone:m,getValueByPointer:F,applyOperation:Q,applyPatch:ha,\napplyReducer:function(a,b,c){var d=Q(a,b);if(!1===d.test)throw new G("Test operation failed","TEST_OPERATION_FAILED",c,b,a);return d.newDocument},validator:ia,validate:Ab,_areEquals:Ba}),gb=new WeakMap,Ec=function(){return function(a){this.observers=new Map;this.obj=a}}(),Fc=function(){return function(a,b){this.callback=a;this.observer=b}}(),Gc=Object.freeze({__proto__:null,unobserve:function(a,b){b.unobserve()},observe:function(a,b){var c=gb.get(a);if(c){var d=c.observers.get(b);var e=d&&d.observer}else c=\nnew Ec(a),gb.set(a,c);if(e)return e;e={};c.value=m(a);if(b){e.callback=b;e.next=null;var f=function(){fb(e)},h=function(){clearTimeout(e.next);e.next=setTimeout(f)};"undefined"!==typeof window&&(window.addEventListener("mouseup",h),window.addEventListener("keyup",h),window.addEventListener("mousedown",h),window.addEventListener("keydown",h),window.addEventListener("change",h))}e.patches=[];e.object=a;e.unobserve=function(){fb(e);clearTimeout(e.next);c.observers.delete(e.callback);"undefined"!==typeof window&&\n(window.removeEventListener("mouseup",h),window.removeEventListener("keyup",h),window.removeEventListener("mousedown",h),window.removeEventListener("keydown",h),window.removeEventListener("change",h))};c.observers.set(b,new Fc(b,e));return e},generate:fb,compare:function(a,b,c){void 0===c&&(c=!1);var d=[];hb(a,b,d,"",c);return d}});Object.assign({},Dc,Gc,{JsonPatchError:Tb,deepClone:m,escapePathComponent:n,unescapePathComponent:u});var Hc=/("(?:[^\\\\"]|\\\\.)*")|[:,]/g,qb=function(a,b){b=b||{};var c=\nJSON.stringify([1],void 0,void 0===b.indent?2:b.indent).slice(2,-3);var d=""===c?Infinity:void 0===b.maxLength?80:b.maxLength;var e=b.replacer;return function p(h,k,q){h&&"function"===typeof h.toJSON&&(h=h.toJSON());var z=JSON.stringify(h,e);if(void 0===z)return z;q=d-k.length-q;if(z.length<=q){var x=z.replace(Hc,function(Ra,Sa){return Sa||Ra+" "});if(x.length<=q)return x}null!=e&&(h=JSON.parse(z),e=void 0);if("object"===typeof h&&null!==h){var C=k+c;var R=[];var I=0;if(Array.isArray(h)){var Da="[";\nx="]";for(q=h.length;I<q;I++)R.push(p(h[I],C,I===q-1?0:1)||"null")}else{Da="{";x="}";var Ea=Object.keys(h);for(q=Ea.length;I<q;I++){var N=Ea[I];var wa=JSON.stringify(N)+": ";N=p(h[N],C,wa.length+(I===q-1?0:1));void 0!==N&&R.push(wa+N)}}if(0<R.length)return[Da,c+R.join(",\\n"+C),x].join("\\n"+k)}return z}(a,"",0)},Xa=Number.MAX_SAFE_INTEGER||9007199254740991,E="object"===typeof process&&process.env&&process.env.NODE_DEBUG&&/\\bsemver\\b/i.test(process.env.NODE_DEBUG)?function(a){for(var b=[],c=0;c<arguments.length;++c)b[c-\n0]=arguments[c];return console.error.apply(console,["SEMVER"].concat($jscomp.arrayFromIterable(b)))}:function(){},O=function(a){var b={exports:{}};return a(b,b.exports),b.exports}(function(a,b){b=a.exports={};var c=b.re=[],d=b.src=[],e=b.t={},f=0;a=function(h,k,q){var p=f++;E(p,k);e[h]=p;d[p]=k;c[p]=new RegExp(k,q?"g":void 0)};a("NUMERICIDENTIFIER","0|[1-9]\\\\d*");a("NUMERICIDENTIFIERLOOSE","[0-9]+");a("NONNUMERICIDENTIFIER","\\\\d*[a-zA-Z-][a-zA-Z0-9-]*");a("MAINVERSION","("+d[e.NUMERICIDENTIFIER]+\n")\\\\.("+(d[e.NUMERICIDENTIFIER]+")\\\\.(")+(d[e.NUMERICIDENTIFIER]+")"));a("MAINVERSIONLOOSE","("+d[e.NUMERICIDENTIFIERLOOSE]+")\\\\.("+(d[e.NUMERICIDENTIFIERLOOSE]+")\\\\.(")+(d[e.NUMERICIDENTIFIERLOOSE]+")"));a("PRERELEASEIDENTIFIER","(?:"+d[e.NUMERICIDENTIFIER]+"|"+d[e.NONNUMERICIDENTIFIER]+")");a("PRERELEASEIDENTIFIERLOOSE","(?:"+d[e.NUMERICIDENTIFIERLOOSE]+"|"+d[e.NONNUMERICIDENTIFIER]+")");a("PRERELEASE","(?:-("+d[e.PRERELEASEIDENTIFIER]+"(?:\\\\."+d[e.PRERELEASEIDENTIFIER]+")*))");a("PRERELEASELOOSE",\n"(?:-?("+d[e.PRERELEASEIDENTIFIERLOOSE]+"(?:\\\\."+d[e.PRERELEASEIDENTIFIERLOOSE]+")*))");a("BUILDIDENTIFIER","[0-9A-Za-z-]+");a("BUILD","(?:\\\\+("+d[e.BUILDIDENTIFIER]+"(?:\\\\."+d[e.BUILDIDENTIFIER]+")*))");a("FULLPLAIN","v?"+d[e.MAINVERSION]+d[e.PRERELEASE]+"?"+d[e.BUILD]+"?");a("FULL","^"+d[e.FULLPLAIN]+"$");a("LOOSEPLAIN","[v=\\\\s]*"+d[e.MAINVERSIONLOOSE]+d[e.PRERELEASELOOSE]+"?"+d[e.BUILD]+"?");a("LOOSE","^"+d[e.LOOSEPLAIN]+"$");a("GTLT","((?:<|>)?=?)");a("XRANGEIDENTIFIERLOOSE",d[e.NUMERICIDENTIFIERLOOSE]+\n"|x|X|\\\\*");a("XRANGEIDENTIFIER",d[e.NUMERICIDENTIFIER]+"|x|X|\\\\*");a("XRANGEPLAIN","[v=\\\\s]*("+d[e.XRANGEIDENTIFIER]+")(?:\\\\.("+(d[e.XRANGEIDENTIFIER]+")(?:\\\\.(")+(d[e.XRANGEIDENTIFIER]+")(?:")+(d[e.PRERELEASE]+")?"+d[e.BUILD]+"?)?)?"));a("XRANGEPLAINLOOSE","[v=\\\\s]*("+d[e.XRANGEIDENTIFIERLOOSE]+")(?:\\\\.("+(d[e.XRANGEIDENTIFIERLOOSE]+")(?:\\\\.(")+(d[e.XRANGEIDENTIFIERLOOSE]+")(?:")+(d[e.PRERELEASELOOSE]+")?"+d[e.BUILD]+"?)?)?"));a("XRANGE","^"+d[e.GTLT]+"\\\\s*"+d[e.XRANGEPLAIN]+"$");a("XRANGELOOSE",\n"^"+d[e.GTLT]+"\\\\s*"+d[e.XRANGEPLAINLOOSE]+"$");a("COERCE","(^|[^\\\\d])(\\\\d{1,16})(?:\\\\.(\\\\d{1,16}))?(?:\\\\.(\\\\d{1,16}))?(?:$|[^\\\\d])");a("COERCERTL",d[e.COERCE],!0);a("LONETILDE","(?:~>?)");a("TILDETRIM","(\\\\s*)"+d[e.LONETILDE]+"\\\\s+",!0);b.tildeTrimReplace="$1~";a("TILDE","^"+d[e.LONETILDE]+d[e.XRANGEPLAIN]+"$");a("TILDELOOSE","^"+d[e.LONETILDE]+d[e.XRANGEPLAINLOOSE]+"$");a("LONECARET","(?:\\\\^)");a("CARETTRIM","(\\\\s*)"+d[e.LONECARET]+"\\\\s+",!0);b.caretTrimReplace="$1^";a("CARET","^"+d[e.LONECARET]+\nd[e.XRANGEPLAIN]+"$");a("CARETLOOSE","^"+d[e.LONECARET]+d[e.XRANGEPLAINLOOSE]+"$");a("COMPARATORLOOSE","^"+d[e.GTLT]+"\\\\s*("+d[e.LOOSEPLAIN]+")$|^$");a("COMPARATOR","^"+d[e.GTLT]+"\\\\s*("+d[e.FULLPLAIN]+")$|^$");a("COMPARATORTRIM","(\\\\s*)"+d[e.GTLT]+"\\\\s*("+d[e.LOOSEPLAIN]+"|"+d[e.XRANGEPLAIN]+")",!0);b.comparatorTrimReplace="$1$2$3";a("HYPHENRANGE","^\\\\s*("+d[e.XRANGEPLAIN]+")\\\\s+-\\\\s+("+(d[e.XRANGEPLAIN]+")\\\\s*$"));a("HYPHENRANGELOOSE","^\\\\s*("+d[e.XRANGEPLAINLOOSE]+")\\\\s+-\\\\s+("+(d[e.XRANGEPLAINLOOSE]+\n")\\\\s*$"));a("STAR","(<|>)?=?\\\\s*\\\\*");a("GTE0","^\\\\s*>=\\\\s*0.0.0\\\\s*$");a("GTE0PRE","^\\\\s*>=\\\\s*0.0.0-0\\\\s*$")}),Ic=["includePrerelease","loose","rtl"],Ya=function(a){return a?"object"!==typeof a?{loose:!0}:Ic.filter(function(b){return a[b]}).reduce(function(b,c){b[c]=!0;return b},{}):{}},Ub=/^[0-9]+$/,qa=function(a,b){var c=Ub.test(a),d=Ub.test(b);c&&d&&(a=+a,b=+b);return a===b?0:c&&!d?-1:d&&!c?1:a<b?-1:1},Vb=O.re,Wb=O.t,K=function(a,b){b=Ya(b);if(a instanceof K){if(a.loose===!!b.loose&&a.includePrerelease===\n!!b.includePrerelease)return a;a=a.version}else if("string"!==typeof a)throw new TypeError("Invalid Version: "+a);if(256<a.length)throw new TypeError("version is longer than 256 characters");E("SemVer",a,b);this.options=b;this.loose=!!b.loose;this.includePrerelease=!!b.includePrerelease;b=a.trim().match(b.loose?Vb[Wb.LOOSE]:Vb[Wb.FULL]);if(!b)throw new TypeError("Invalid Version: "+a);this.raw=a;this.major=+b[1];this.minor=+b[2];this.patch=+b[3];if(this.major>Xa||0>this.major)throw new TypeError("Invalid major version");\nif(this.minor>Xa||0>this.minor)throw new TypeError("Invalid minor version");if(this.patch>Xa||0>this.patch)throw new TypeError("Invalid patch version");this.prerelease=b[4]?b[4].split(".").map(function(c){if(/^[0-9]+$/.test(c)){var d=+c;if(0<=d&&d<Xa)return d}return c}):[];this.build=b[5]?b[5].split("."):[];this.format()};K.prototype.format=function(){this.version=this.major+"."+this.minor+"."+this.patch;this.prerelease.length&&(this.version+="-"+this.prerelease.join("."));return this.version};K.prototype.toString=\nfunction(){return this.version};K.prototype.compare=function(a){E("SemVer.compare",this.version,this.options,a);if(!(a instanceof K)){if("string"===typeof a&&a===this.version)return 0;a=new K(a,this.options)}return a.version===this.version?0:this.compareMain(a)||this.comparePre(a)};K.prototype.compareMain=function(a){a instanceof K||(a=new K(a,this.options));return qa(this.major,a.major)||qa(this.minor,a.minor)||qa(this.patch,a.patch)};K.prototype.comparePre=function(a){a instanceof K||(a=new K(a,\nthis.options));if(this.prerelease.length&&!a.prerelease.length)return-1;if(!this.prerelease.length&&a.prerelease.length)return 1;if(!this.prerelease.length&&!a.prerelease.length)return 0;var b=0;do{var c=this.prerelease[b],d=a.prerelease[b];E("prerelease compare",b,c,d);if(void 0===c&&void 0===d)return 0;if(void 0===d)return 1;if(void 0===c)return-1;if(c!==d)return qa(c,d)}while(++b)};K.prototype.compareBuild=function(a){a instanceof K||(a=new K(a,this.options));var b=0;do{var c=this.build[b],d=a.build[b];\nE("prerelease compare",b,c,d);if(void 0===c&&void 0===d)return 0;if(void 0===d)return 1;if(void 0===c)return-1;if(c!==d)return qa(c,d)}while(++b)};K.prototype.inc=function(a,b){switch(a){case "premajor":this.minor=this.patch=this.prerelease.length=0;this.major++;this.inc("pre",b);break;case "preminor":this.patch=this.prerelease.length=0;this.minor++;this.inc("pre",b);break;case "prepatch":this.prerelease.length=0;this.inc("patch",b);this.inc("pre",b);break;case "prerelease":0===this.prerelease.length&&\nthis.inc("patch",b);this.inc("pre",b);break;case "major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++;this.patch=this.minor=0;this.prerelease=[];break;case "minor":0===this.patch&&0!==this.prerelease.length||this.minor++;this.patch=0;this.prerelease=[];break;case "patch":0===this.prerelease.length&&this.patch++;this.prerelease=[];break;case "pre":if(0===this.prerelease.length)this.prerelease=[0];else{for(a=this.prerelease.length;0<=--a;)"number"===typeof this.prerelease[a]&&\n(this.prerelease[a]++,a=-2);-1===a&&this.prerelease.push(0)}b&&(this.prerelease[0]===b?isNaN(this.prerelease[1])&&(this.prerelease=[b,0]):this.prerelease=[b,0]);break;default:throw Error("invalid increment argument: "+a);}this.format();this.raw=this.version;return this};var H=K,Xb=O.re,Yb=O.t,ra=function(a,b){b=Ya(b);if(a instanceof H)return a;if("string"!==typeof a||256<a.length||!(b.loose?Xb[Yb.LOOSE]:Xb[Yb.FULL]).test(a))return null;try{return new H(a,b)}catch(c){return null}},V=function(a,b,c){return(new H(a,\nc)).compare(new H(b,c))},rb=function(a,b,c){return 0===V(a,b,c)},sb=function(a,b,c){a=new H(a,c);b=new H(b,c);return a.compare(b)||a.compareBuild(b)},ya=function(a,b,c){return 0<V(a,b,c)},Za=function(a,b,c){return 0>V(a,b,c)},Zb=function(a,b,c){return 0!==V(a,b,c)},tb=function(a,b,c){return 0<=V(a,b,c)},ub=function(a,b,c){return 0>=V(a,b,c)},$a=function(a,b,c,d){switch(b){case "===":return"object"===typeof a&&(a=a.version),"object"===typeof c&&(c=c.version),a===c;case "!==":return"object"===typeof a&&\n(a=a.version),"object"===typeof c&&(c=c.version),a!==c;case "":case "=":case "==":return rb(a,c,d);case "!=":return Zb(a,c,d);case ">":return ya(a,c,d);case ">=":return tb(a,c,d);case "<":return Za(a,c,d);case "<=":return ub(a,c,d);default:throw new TypeError("Invalid operator: "+b);}},ab=O.re,bb=O.t,Jc=function(a){a.prototype[Symbol.iterator]=function c(){var d=this,e;return $jscomp.generator.createGenerator(c,function(f){1==f.nextAddress&&(e=d.head);if(3!=f.nextAddress)return e?f.yield(e.value,\n3):f.jumpTo(0);e=e.next;return f.jumpTo(2)})}};D.Node=na;D.create=D;D.prototype.removeNode=function(a){if(a.list!==this)throw Error("removing node which does not belong to this list");var b=a.next,c=a.prev;b&&(b.prev=c);c&&(c.next=b);a===this.head&&(this.head=b);a===this.tail&&(this.tail=c);a.list.length--;a.next=null;a.prev=null;a.list=null;return b};D.prototype.unshiftNode=function(a){if(a!==this.head){a.list&&a.list.removeNode(a);var b=this.head;a.list=this;if(a.next=b)b.prev=a;this.head=a;this.tail||\n(this.tail=a);this.length++}};D.prototype.pushNode=function(a){if(a!==this.tail){a.list&&a.list.removeNode(a);var b=this.tail;a.list=this;if(a.prev=b)b.next=a;this.tail=a;this.head||(this.head=a);this.length++}};D.prototype.push=function(){for(var a=0,b=arguments.length;a<b;a++)this.tail=new na(arguments[a],this.tail,null,this),this.head||(this.head=this.tail),this.length++;return this.length};D.prototype.unshift=function(){for(var a=0,b=arguments.length;a<b;a++)this.head=new na(arguments[a],null,\nthis.head,this),this.tail||(this.tail=this.head),this.length++;return this.length};D.prototype.pop=function(){if(this.tail){var a=this.tail.value;(this.tail=this.tail.prev)?this.tail.next=null:this.head=null;this.length--;return a}};D.prototype.shift=function(){if(this.head){var a=this.head.value;(this.head=this.head.next)?this.head.prev=null:this.tail=null;this.length--;return a}};D.prototype.forEach=function(a,b){b=b||this;for(var c=this.head,d=0;null!==c;d++)a.call(b,c.value,d,this),c=c.next};\nD.prototype.forEachReverse=function(a,b){b=b||this;for(var c=this.tail,d=this.length-1;null!==c;d--)a.call(b,c.value,d,this),c=c.prev};D.prototype.get=function(a){for(var b=0,c=this.head;null!==c&&b<a;b++)c=c.next;if(b===a&&null!==c)return c.value};D.prototype.getReverse=function(a){for(var b=0,c=this.tail;null!==c&&b<a;b++)c=c.prev;if(b===a&&null!==c)return c.value};D.prototype.map=function(a,b){b=b||this;for(var c=new D,d=this.head;null!==d;)c.push(a.call(b,d.value,this)),d=d.next;return c};D.prototype.mapReverse=\nfunction(a,b){b=b||this;for(var c=new D,d=this.tail;null!==d;)c.push(a.call(b,d.value,this)),d=d.prev;return c};D.prototype.reduce=function(a,b){var c=this.head;if(1<arguments.length)var d=b;else if(this.head)c=this.head.next,d=this.head.value;else throw new TypeError("Reduce of empty list with no initial value");for(var e=0;null!==c;e++)d=a(d,c.value,e),c=c.next;return d};D.prototype.reduceReverse=function(a,b){var c=this.tail;if(1<arguments.length)var d=b;else if(this.tail)c=this.tail.prev,d=this.tail.value;\nelse throw new TypeError("Reduce of empty list with no initial value");for(var e=this.length-1;null!==c;e--)d=a(d,c.value,e),c=c.prev;return d};D.prototype.toArray=function(){for(var a=Array(this.length),b=0,c=this.head;null!==c;b++)a[b]=c.value,c=c.next;return a};D.prototype.toArrayReverse=function(){for(var a=Array(this.length),b=0,c=this.tail;null!==c;b++)a[b]=c.value,c=c.prev;return a};D.prototype.slice=function(a,b){b=b||this.length;0>b&&(b+=this.length);a=a||0;0>a&&(a+=this.length);var c=new D;\nif(b<a||0>b)return c;0>a&&(a=0);b>this.length&&(b=this.length);for(var d=0,e=this.head;null!==e&&d<a;d++)e=e.next;for(;null!==e&&d<b;d++,e=e.next)c.push(e.value);return c};D.prototype.sliceReverse=function(a,b){b=b||this.length;0>b&&(b+=this.length);a=a||0;0>a&&(a+=this.length);var c=new D;if(b<a||0>b)return c;0>a&&(a=0);b>this.length&&(b=this.length);for(var d=this.length,e=this.tail;null!==e&&d>b;d--)e=e.prev;for(;null!==e&&d>a;d--,e=e.prev)c.push(e.value);return c};D.prototype.splice=function(a,\nb,c){for(var d=[],e=2;e<arguments.length;++e)d[e-2]=arguments[e];a>this.length&&(a=this.length-1);0>a&&(a=this.length+a);e=0;for(var f=this.head;null!==f&&e<a;e++)f=f.next;var h=[];for(e=0;f&&e<b;e++)h.push(f.value),f=this.removeNode(f);null===f&&(f=this.tail);f!==this.head&&f!==this.tail&&(f=f.prev);for(e=0;e<d.length;e++){var k=d[e];f=f===this.head?new na(k,null,f,this):new na(k,f,f.next,this);null===f.next&&(this.tail=f);null===f.prev&&(this.head=f);this.length++}return h};D.prototype.reverse=\nfunction(){for(var a=this.head,b=this.tail,c=a;null!==c;c=c.prev){var d=c.prev;c.prev=c.next;c.next=d}this.head=b;this.tail=a;return this};try{Jc(D)}catch(a){}var sa=Symbol("max"),W=Symbol("length"),za=Symbol("lengthCalculator"),Ia=Symbol("allowStale"),ta=Symbol("maxAge"),ea=Symbol("dispose"),$b=Symbol("noDisposeOnSet"),J=Symbol("lruList"),Z=Symbol("cache"),ac=Symbol("updateAgeOnGet"),vb=function(){return 1},L=function(a){"number"===typeof a&&(a={max:a});a||(a={});if(a.max&&("number"!==typeof a.max||\n0>a.max))throw new TypeError("max must be a non-negative number");this[sa]=a.max||Infinity;var b=a.length||vb;this[za]="function"!==typeof b?vb:b;this[Ia]=a.stale||!1;if(a.maxAge&&"number"!==typeof a.maxAge)throw new TypeError("maxAge must be a number");this[ta]=a.maxAge||0;this[ea]=a.dispose;this[$b]=a.noDisposeOnSet||!1;this[ac]=a.updateAgeOnGet||!1;this.reset()};L.prototype.rforEach=function(a,b){b=b||this;for(var c=this[J].tail;null!==c;){var d=c.prev;bc(this,a,c,b);c=d}};L.prototype.forEach=\nfunction(a,b){b=b||this;for(var c=this[J].head;null!==c;){var d=c.next;bc(this,a,c,b);c=d}};L.prototype.keys=function(){return this[J].toArray().map(function(a){return a.key})};L.prototype.values=function(){return this[J].toArray().map(function(a){return a.value})};L.prototype.reset=function(){var a=this;this[ea]&&this[J]&&this[J].length&&this[J].forEach(function(b){return a[ea](b.key,b.value)});this[Z]=new Map;this[J]=new D;this[W]=0};L.prototype.dump=function(){var a=this;return this[J].map(function(b){return cb(a,\nb)?!1:{k:b.key,v:b.value,e:b.now+(b.maxAge||0)}}).toArray().filter(function(b){return b})};L.prototype.dumpLru=function(){return this[J]};L.prototype.set=function(a,b,c){if((c=c||this[ta])&&"number"!==typeof c)throw new TypeError("maxAge must be a number");var d=c?Date.now():0,e=this[za](b,a);if(this[Z].has(a)){if(e>this[sa])return Aa(this,this[Z].get(a)),!1;var f=this[Z].get(a).value;if(this[ea]&&!this[$b])this[ea](a,f.value);f.now=d;f.maxAge=c;f.value=b;this[W]+=e-f.length;f.length=e;this.get(a);\nJa(this);return!0}c=new Kc(a,b,e,d,c);if(c.length>this[sa]){if(this[ea])this[ea](a,b);return!1}this[W]+=c.length;this[J].unshift(c);this[Z].set(a,this[J].head);Ja(this);return!0};L.prototype.has=function(a){if(!this[Z].has(a))return!1;a=this[Z].get(a).value;return!cb(this,a)};L.prototype.get=function(a){return wb(this,a,!0)};L.prototype.peek=function(a){return wb(this,a,!1)};L.prototype.pop=function(){var a=this[J].tail;if(!a)return null;Aa(this,a);return a.value};L.prototype.del=function(a){Aa(this,\nthis[Z].get(a))};L.prototype.load=function(a){this.reset();for(var b=Date.now(),c=a.length-1;0<=c;c--){var d=a[c],e=d.e||0;0===e?this.set(d.k,d.v):(e-=b,0<e&&this.set(d.k,d.v,e))}};L.prototype.prune=function(){var a=this;this[Z].forEach(function(b,c){return wb(a,c,!1)})};$jscomp.global.Object.defineProperties(L.prototype,{max:{configurable:!0,enumerable:!0,set:function(a){if("number"!==typeof a||0>a)throw new TypeError("max must be a non-negative number");this[sa]=a||Infinity;Ja(this)},get:function(){return this[sa]}},\nallowStale:{configurable:!0,enumerable:!0,set:function(a){this[Ia]=!!a},get:function(){return this[Ia]}},maxAge:{configurable:!0,enumerable:!0,set:function(a){if("number"!==typeof a)throw new TypeError("maxAge must be a non-negative number");this[ta]=a;Ja(this)},get:function(){return this[ta]}},lengthCalculator:{configurable:!0,enumerable:!0,set:function(a){var b=this;"function"!==typeof a&&(a=vb);a!==this[za]&&(this[za]=a,this[W]=0,this[J].forEach(function(c){c.length=b[za](c.value,c.key);b[W]+=\nc.length}));Ja(this)},get:function(){return this[za]}},length:{configurable:!0,enumerable:!0,get:function(){return this[W]}},itemCount:{configurable:!0,enumerable:!0,get:function(){return this[J].length}}});var wb=function(a,b,c){if(b=a[Z].get(b)){var d=b.value;if(cb(a,d)){if(Aa(a,b),!a[Ia])return}else c&&(a[ac]&&(b.value.now=Date.now()),a[J].unshiftNode(b));return d.value}},cb=function(a,b){if(!b||!b.maxAge&&!a[ta])return!1;var c=Date.now()-b.now;return b.maxAge?c>b.maxAge:a[ta]&&c>a[ta]},Ja=function(a){if(a[W]>\na[sa])for(var b=a[J].tail;a[W]>a[sa]&&null!==b;){var c=b.prev;Aa(a,b);b=c}},Aa=function(a,b){if(b){var c=b.value;if(a[ea])a[ea](c.key,c.value);a[W]-=c.length;a[Z].delete(c.key);a[J].removeNode(b)}},Kc=function(a,b,c,d,e){this.key=a;this.value=b;this.length=c;this.now=d;this.maxAge=e||0},bc=function(a,b,c,d){var e=c.value;cb(a,e)&&(Aa(a,c),a[Ia]||(e=void 0));e&&b.call(d,e.value,e.key,a)},fa=function(a,b){var c=this;b=Ya(b);if(a instanceof fa)return a.loose===!!b.loose&&a.includePrerelease===!!b.includePrerelease?\na:new fa(a.raw,b);if(a instanceof ba)return this.raw=a.value,this.set=[[a]],this.format(),this;this.options=b;this.loose=!!b.loose;this.includePrerelease=!!b.includePrerelease;this.raw=a;this.set=a.split(/\\s*\\|\\|\\s*/).map(function(d){return c.parseRange(d.trim())}).filter(function(d){return d.length});if(!this.set.length)throw new TypeError("Invalid SemVer Range: "+a);if(1<this.set.length)if(a=this.set[0],this.set=this.set.filter(function(d){return"<0.0.0-0"!==d[0].value}),0===this.set.length)this.set=\n[a];else if(1<this.set.length)for(a=$jscomp.makeIterator(this.set),b=a.next();!b.done;b=a.next())if(b=b.value,1===b.length&&""===b[0].value){this.set=[b];break}this.format()};fa.prototype.format=function(){return this.range=this.set.map(function(a){return a.join(" ").trim()}).join("||").trim()};fa.prototype.toString=function(){return this.range};fa.prototype.parseRange=function(a){var b=this;a=a.trim();var c="parseRange:"+Object.keys(this.options).join(",")+":"+a,d=cc.get(c);if(d)return d;d=this.options.loose;\na=a.replace(d?P[M.HYPHENRANGELOOSE]:P[M.HYPHENRANGE],Lc(this.options.includePrerelease));E("hyphen replace",a);a=a.replace(P[M.COMPARATORTRIM],Mc);E("comparator trim",a,P[M.COMPARATORTRIM]);a=a.replace(P[M.TILDETRIM],Nc);a=a.replace(P[M.CARETTRIM],Oc);a=a.split(/\\s+/).join(" ");var e=d?P[M.COMPARATORLOOSE]:P[M.COMPARATOR];d=a.split(" ").map(function(h){var k=h;h=b.options;E("comp",k,h);k=Pc(k,h);E("caret",k);k=Qc(k,h);E("tildes",k);k=Rc(k,h);E("xrange",k);E("replaceStars",k,h);k=k.trim().replace(P[M.STAR],\n"");E("stars",k);return k}).join(" ").split(/\\s+/).map(function(h){var k=b.options;E("replaceGTE0",h,k);return h.trim().replace(P[k.includePrerelease?M.GTE0PRE:M.GTE0],"")}).filter(this.options.loose?function(h){return!!h.match(e)}:function(){return!0}).map(function(h){return new ba(h,b.options)});d.length;a=new Map;d=$jscomp.makeIterator(d);for(var f=d.next();!f.done;f=d.next()){f=f.value;if("<0.0.0-0"===f.value)return[f];a.set(f.value,f)}1<a.size&&a.has("")&&a.delete("");a=[].concat($jscomp.arrayFromIterable(a.values()));\ncc.set(c,a);return a};fa.prototype.intersects=function(a,b){if(!(a instanceof fa))throw new TypeError("a Range is required");return this.set.some(function(c){return dc(c,b)&&a.set.some(function(d){return dc(d,b)&&c.every(function(e){return d.every(function(f){return e.intersects(f,b)})})})})};fa.prototype.test=function(a){if(!a)return!1;if("string"===typeof a)try{a=new H(a,this.options)}catch(h){return!1}for(var b=0;b<this.set.length;b++){a:{var c=this.set[b];for(var d=a,e=this.options,f=0;f<c.length;f++)if(!c[f].test(d)){c=\n!1;break a}if(d.prerelease.length&&!e.includePrerelease){for(e=0;e<c.length;e++)if(E(c[e].semver),c[e].semver!==ba.ANY&&0<c[e].semver.prerelease.length&&(f=c[e].semver,f.major===d.major&&f.minor===d.minor&&f.patch===d.patch)){c=!0;break a}c=!1}else c=!0}if(c)return!0}return!1};var U=fa,cc=new L({max:1E3}),P=O.re,M=O.t,Mc=O.comparatorTrimReplace,Nc=O.tildeTrimReplace,Oc=O.caretTrimReplace,dc=function(a,b){var c=!0;a=a.slice();for(var d=a.pop();c&&a.length;)c=a.every(function(e){return d.intersects(e,\nb)}),d=a.pop();return c},S=function(a){return!a||"x"===a.toLowerCase()||"*"===a},Qc=function(a,b){return a.trim().split(/\\s+/).map(function(c){return Sc(c,b)}).join(" ")},Sc=function(a,b){return a.replace(b.loose?P[M.TILDELOOSE]:P[M.TILDE],function(c,d,e,f,h){E("tilde",a,c,d,e,f,h);S(d)?d="":S(e)?d=">="+d+".0.0 <"+(+d+1)+".0.0-0":S(f)?d=">="+d+"."+e+".0 <"+d+"."+(+e+1)+".0-0":h?(E("replaceTilde pr",h),d=">="+d+"."+e+"."+f+"-"+h+" <"+d+"."+(+e+1)+".0-0"):d=">="+d+"."+e+"."+f+" <"+d+"."+(+e+1)+".0-0";\nE("tilde return",d);return d})},Pc=function(a,b){return a.trim().split(/\\s+/).map(function(c){return Tc(c,b)}).join(" ")},Tc=function(a,b){E("caret",a,b);var c=b.includePrerelease?"-0":"";return a.replace(b.loose?P[M.CARETLOOSE]:P[M.CARET],function(d,e,f,h,k){E("caret",a,d,e,f,h,k);S(e)?e="":S(f)?e=">="+e+".0.0"+c+" <"+(+e+1)+".0.0-0":S(h)?e="0"===e?">="+e+"."+f+".0"+c+" <"+e+"."+(+f+1)+".0-0":">="+e+"."+f+".0"+c+" <"+(+e+1)+".0.0-0":k?(E("replaceCaret pr",k),e="0"===e?"0"===f?">="+e+"."+f+"."+h+\n"-"+k+" <"+e+"."+f+"."+(+h+1)+"-0":">="+e+"."+f+"."+h+"-"+k+" <"+e+"."+(+f+1)+".0-0":">="+e+"."+f+"."+h+"-"+k+" <"+(+e+1)+".0.0-0"):(E("no pr"),e="0"===e?"0"===f?">="+e+"."+f+"."+h+c+" <"+e+"."+f+"."+(+h+1)+"-0":">="+e+"."+f+"."+h+c+" <"+e+"."+(+f+1)+".0-0":">="+e+"."+f+"."+h+" <"+(+e+1)+".0.0-0");E("caret return",e);return e})},Rc=function(a,b){E("replaceXRanges",a,b);return a.split(/\\s+/).map(function(c){return Uc(c,b)}).join(" ")},Uc=function(a,b){a=a.trim();return a.replace(b.loose?P[M.XRANGELOOSE]:\nP[M.XRANGE],function(c,d,e,f,h,k){E("xRange",a,c,d,e,f,h,k);var q=S(e),p=q||S(f);h=p||S(h);"="===d&&h&&(d="");k=b.includePrerelease?"-0":"";q?c=">"===d||"<"===d?"<0.0.0-0":"*":d&&h?(p&&(f=0),h=0,">"===d?(d=">=",p?(e=+e+1,f=0):f=+f+1,h=0):"<="===d&&(d="<",p?e=+e+1:f=+f+1),"<"===d&&(k="-0"),c=d+e+"."+f+"."+h+k):p?c=">="+e+".0.0"+k+" <"+(+e+1)+".0.0-0":h&&(c=">="+e+"."+f+".0"+k+" <"+e+"."+(+f+1)+".0-0");E("xRange return",c);return c})},Lc=function(a){return function(b,c,d,e,f,h,k,q,p,z,x,C,R){c=S(d)?\n"":S(e)?">="+d+".0.0"+(a?"-0":""):S(f)?">="+d+"."+e+".0"+(a?"-0":""):h?">="+c:">="+c+(a?"-0":"");q=S(p)?"":S(z)?"<"+(+p+1)+".0.0-0":S(x)?"<"+p+"."+(+z+1)+".0-0":C?"<="+p+"."+z+"."+x+"-"+C:a?"<"+p+"."+z+"."+(+x+1)+"-0":"<="+q;return(c+" "+q).trim()}},Ka=Symbol("SemVer ANY"),ka=function(a,b){b=Ya(b);if(a instanceof ka){if(a.loose===!!b.loose)return a;a=a.value}E("comparator",a,b);this.options=b;this.loose=!!b.loose;this.parse(a);this.value=this.semver===Ka?"":this.operator+this.semver.version;E("comp",\nthis)};ka.prototype.parse=function(a){var b=a.match(this.options.loose?ec[fc.COMPARATORLOOSE]:ec[fc.COMPARATOR]);if(!b)throw new TypeError("Invalid comparator: "+a);this.operator=void 0!==b[1]?b[1]:"";"="===this.operator&&(this.operator="");this.semver=b[2]?new H(b[2],this.options.loose):Ka};ka.prototype.toString=function(){return this.value};ka.prototype.test=function(a){E("Comparator.test",a,this.options.loose);if(this.semver===Ka||a===Ka)return!0;if("string"===typeof a)try{a=new H(a,this.options)}catch(b){return!1}return $a(a,\nthis.operator,this.semver,this.options)};ka.prototype.intersects=function(a,b){if(!(a instanceof ka))throw new TypeError("a Comparator is required");b&&"object"===typeof b||(b={loose:!!b,includePrerelease:!1});if(""===this.operator)return""===this.value?!0:(new U(a.value,b)).test(this.value);if(""===a.operator)return""===a.value?!0:(new U(this.value,b)).test(a.semver);var c=(">="===this.operator||">"===this.operator)&&(">="===a.operator||">"===a.operator),d=("<="===this.operator||"<"===this.operator)&&\n("<="===a.operator||"<"===a.operator),e=this.semver.version===a.semver.version,f=(">="===this.operator||"<="===this.operator)&&(">="===a.operator||"<="===a.operator),h=$a(this.semver,"<",a.semver,b)&&(">="===this.operator||">"===this.operator)&&("<="===a.operator||"<"===a.operator);a=$a(this.semver,">",a.semver,b)&&("<="===this.operator||"<"===this.operator)&&(">="===a.operator||">"===a.operator);return c||d||e&&f||h||a};$jscomp.global.Object.defineProperties(ka,{ANY:{configurable:!0,enumerable:!0,\nget:function(){return Ka}}});var ba=ka,ec=O.re,fc=O.t,la=function(a,b,c){try{b=new U(b,c)}catch(d){return!1}return b.test(a)},Vc=ba.ANY,xb=function(a,b,c,d){a=new H(a,d);b=new U(b,d);switch(c){case ">":var e=ya;c=ub;var f=Za;var h=">";var k=">=";break;case "<":e=Za;c=tb;f=ya;h="<";k="<=";break;default:throw new TypeError(\'Must provide a hilo val of "<" or ">"\');}if(la(a,b,d))return!1;for(var q={},p=0;p<b.set.length;q={$jscomp$loop$prop$high$29:q.$jscomp$loop$prop$high$29,$jscomp$loop$prop$low$30:q.$jscomp$loop$prop$low$30},\n++p){var z=b.set[p];q.$jscomp$loop$prop$high$29=null;q.$jscomp$loop$prop$low$30=null;z.forEach(function(x){return function(C){C.semver===Vc&&(C=new ba(">=0.0.0"));x.$jscomp$loop$prop$high$29=x.$jscomp$loop$prop$high$29||C;x.$jscomp$loop$prop$low$30=x.$jscomp$loop$prop$low$30||C;e(C.semver,x.$jscomp$loop$prop$high$29.semver,d)?x.$jscomp$loop$prop$high$29=C:f(C.semver,x.$jscomp$loop$prop$low$30.semver,d)&&(x.$jscomp$loop$prop$low$30=C)}}(q));if(q.$jscomp$loop$prop$high$29.operator===h||q.$jscomp$loop$prop$high$29.operator===\nk||(!q.$jscomp$loop$prop$low$30.operator||q.$jscomp$loop$prop$low$30.operator===h)&&c(a,q.$jscomp$loop$prop$low$30.semver)||q.$jscomp$loop$prop$low$30.operator===k&&f(a,q.$jscomp$loop$prop$low$30.semver))return!1}return!0},yb=ba.ANY,Wc=function(a,b,c){if(a===b)return!0;if(1===a.length&&a[0].semver===yb){if(1===b.length&&b[0].semver===yb)return!0;a=c.includePrerelease?[new ba(">=0.0.0-0")]:[new ba(">=0.0.0")]}if(1===b.length&&b[0].semver===yb){if(c.includePrerelease)return!0;b=[new ba(">=0.0.0")]}var d=\nnew Set,e,f,h=$jscomp.makeIterator(a);for(a=h.next();!a.done;a=h.next())a=a.value,">"===a.operator||">="===a.operator?e=gc(e,a,c):"<"===a.operator||"<="===a.operator?f=hc(f,a,c):d.add(a.semver);if(1<d.size)return null;if(e&&f){var k=V(e.semver,f.semver,c);if(0<k||0===k&&(">="!==e.operator||"<="!==f.operator))return null}for(a=$jscomp.makeIterator(d).next();!a.done;){k=a.value;if(e&&!la(k,String(e),c)||f&&!la(k,String(f),c))return null;e=$jscomp.makeIterator(b);for(a=e.next();!a.done;a=e.next())if(!la(k,\nString(a.value),c))return!1;return!0}d=f&&!c.includePrerelease&&f.semver.prerelease.length?f.semver:!1;h=e&&!c.includePrerelease&&e.semver.prerelease.length?e.semver:!1;d&&1===d.prerelease.length&&"<"===f.operator&&0===d.prerelease[0]&&(d=!1);b=$jscomp.makeIterator(b);for(a=b.next();!a.done;a=b.next()){a=a.value;var q=q||">"===a.operator||">="===a.operator;var p=p||"<"===a.operator||"<="===a.operator;if(e)if(h&&a.semver.prerelease&&a.semver.prerelease.length&&a.semver.major===h.major&&a.semver.minor===\nh.minor&&a.semver.patch===h.patch&&(h=!1),">"===a.operator||">="===a.operator){var z=gc(e,a,c);if(z===a&&z!==e)return!1}else if(">="===e.operator&&!la(e.semver,String(a),c))return!1;if(f)if(d&&a.semver.prerelease&&a.semver.prerelease.length&&a.semver.major===d.major&&a.semver.minor===d.minor&&a.semver.patch===d.patch&&(d=!1),"<"===a.operator||"<="===a.operator){if(z=hc(f,a,c),z===a&&z!==f)return!1}else if("<="===f.operator&&!la(f.semver,String(a),c))return!1;if(!a.operator&&(f||e)&&0!==k)return!1}return e&&\np&&!f&&0!==k||f&&q&&!e&&0!==k||h||d?!1:!0},gc=function(a,b,c){if(!a)return b;c=V(a.semver,b.semver,c);return 0<c?a:0>c?b:">"===b.operator&&">="===a.operator?b:a},hc=function(a,b,c){if(!a)return b;c=V(a.semver,b.semver,c);return 0>c?a:0<c?b:"<"===b.operator&&"<="===a.operator?b:a},Fb={re:O.re,src:O.src,tokens:O.t,SEMVER_SPEC_VERSION:"2.0.0",SemVer:H,compareIdentifiers:qa,rcompareIdentifiers:function(a,b){return qa(b,a)},parse:ra,valid:function(a,b){return(a=ra(a,b))?a.version:null},clean:function(a,\nb){return(a=ra(a.trim().replace(/^[=v]+/,""),b))?a.version:null},inc:function(a,b,c,d){"string"===typeof c&&(d=c,c=void 0);try{return(new H(a,c)).inc(b,d).version}catch(e){return null}},diff:function(a,b){if(rb(a,b))return null;a=ra(a);b=ra(b);var c=a.prerelease.length||b.prerelease.length,d=c?"pre":"",e;for(e in a)if(("major"===e||"minor"===e||"patch"===e)&&a[e]!==b[e])return d+e;return c?"prerelease":""},major:function(a,b){return(new H(a,b)).major},minor:function(a,b){return(new H(a,b)).minor},\npatch:function(a,b){return(new H(a,b)).patch},prerelease:function(a,b){return(a=ra(a,b))&&a.prerelease.length?a.prerelease:null},compare:V,rcompare:function(a,b,c){return V(b,a,c)},compareLoose:function(a,b){return V(a,b,!0)},compareBuild:sb,sort:function(a,b){return a.sort(function(c,d){return sb(c,d,b)})},rsort:function(a,b){return a.sort(function(c,d){return sb(d,c,b)})},gt:ya,lt:Za,eq:rb,neq:Zb,gte:tb,lte:ub,cmp:$a,coerce:function(a,b){if(a instanceof H)return a;"number"===typeof a&&(a=String(a));\nif("string"!==typeof a)return null;b=b||{};var c=null;if(b.rtl){for(var d;(d=ab[bb.COERCERTL].exec(a))&&(!c||c.index+c[0].length!==a.length);)c&&d.index+d[0].length===c.index+c[0].length||(c=d),ab[bb.COERCERTL].lastIndex=d.index+d[1].length+d[2].length;ab[bb.COERCERTL].lastIndex=-1}else c=a.match(ab[bb.COERCE]);return null===c?null:ra(c[2]+"."+(c[3]||"0")+"."+(c[4]||"0"),b)},Comparator:ba,Range:U,satisfies:la,toComparators:function(a,b){return(new U(a,b)).set.map(function(c){return c.map(function(d){return d.value}).join(" ").trim().split(" ")})},\nmaxSatisfying:function(a,b,c){var d=null,e=null,f=null;try{f=new U(b,c)}catch(h){return null}a.forEach(function(h){!f.test(h)||d&&-1!==e.compare(h)||(d=h,e=new H(d,c))});return d},minSatisfying:function(a,b,c){var d=null,e=null,f=null;try{f=new U(b,c)}catch(h){return null}a.forEach(function(h){!f.test(h)||d&&1!==e.compare(h)||(d=h,e=new H(d,c))});return d},minVersion:function(a,b){a=new U(a,b);b=new H("0.0.0");if(a.test(b))return b;b=new H("0.0.0-0");if(a.test(b))return b;b=null;for(var c={},d=0;d<\na.set.length;c={$jscomp$loop$prop$setMin$27:c.$jscomp$loop$prop$setMin$27},++d){var e=a.set[d];c.$jscomp$loop$prop$setMin$27=null;e.forEach(function(f){return function(h){var k=new H(h.semver.version);switch(h.operator){case ">":0===k.prerelease.length?k.patch++:k.prerelease.push(0),k.raw=k.format();case "":case ">=":if(!f.$jscomp$loop$prop$setMin$27||ya(k,f.$jscomp$loop$prop$setMin$27))f.$jscomp$loop$prop$setMin$27=k;break;case "<":case "<=":break;default:throw Error("Unexpected operation: "+h.operator);\n}}}(c));!c.$jscomp$loop$prop$setMin$27||b&&!ya(b,c.$jscomp$loop$prop$setMin$27)||(b=c.$jscomp$loop$prop$setMin$27)}return b&&a.test(b)?b:null},validRange:function(a,b){try{return(new U(a,b)).range||"*"}catch(c){return null}},outside:xb,gtr:function(a,b,c){return xb(a,b,">",c)},ltr:function(a,b,c){return xb(a,b,"<",c)},intersects:function(a,b,c){a=new U(a,c);b=new U(b,c);return a.intersects(b)},simplifyRange:function(a,b,c){var d=[],e=null,f=null;a=a.sort(function(q,p){return V(q,p,c)});for(var h=\n$jscomp.makeIterator(a),k=h.next();!k.done;k=h.next())k=k.value,la(k,b,c)?(f=k,e||(e=k)):(f&&d.push([e,f]),e=f=null);e&&d.push([e,null]);e=[];d=$jscomp.makeIterator(d);for(f=d.next();!f.done;f=d.next())h=$jscomp.makeIterator(f.value),f=h.next().value,h=h.next().value,f===h?e.push(f):h||f!==a[0]?h?f===a[0]?e.push("<="+h):e.push(f+" - "+h):e.push(">="+f):e.push("*");a=e.join(" || ");return a.length<("string"===typeof b.raw?b.raw:String(b)).length?a:b},subset:function(a,b,c){c=void 0===c?{}:c;if(a===\nb)return!0;a=new U(a,c);b=new U(b,c);var d=!1;a=$jscomp.makeIterator(a.set);var e=a.next();a:for(;!e.done;e=a.next()){e=e.value;for(var f=$jscomp.makeIterator(b.set),h=f.next();!h.done;h=f.next())if(h=Wc(e,h.value,c),d=d||null!==h,h)continue a;if(d)return!1}return!0}},La={"category-6":"#ec8431 #829eb1 #c89d29 #3580b1 #adc839 #ab7fb4".split(" "),"fire-7":"#fbf2c7 #f9e39c #f8d36e #f4bb6a #e68a4f #d15a40 #ab4232".split(" "),"fireandice-6":"#e68a4f #f4bb6a #f9e39c #dadfe2 #a6b7c6 #849eae".split(" "),\n"ice-7":"#edefee #dadfe2 #c4ccd2 #a6b7c6 #849eae #607785 #47525d".split(" ")},Ma={"main-colors":"#1696d2 #d2d2d2 #000000 #fdbf11 #ec008b #55b748 #5c5859 #db2b27".split(" "),"shades-blue":"#CFE8F3 #A2D4EC #73BFE2 #46ABDB #1696D2 #12719E #0A4C6A #062635".split(" "),"shades-gray":"#F5F5F5 #ECECEC #E3E3E3 #DCDBDB #D2D2D2 #9D9D9D #696969 #353535".split(" "),"shades-yellow":"#FFF2CF #FCE39E #FDD870 #FCCB41 #FDBF11 #E88E2D #CA5800 #843215".split(" "),"shades-magenta":"#F5CBDF #EB99C2 #E46AA7 #E54096 #EC008B #AF1F6B #761548 #351123".split(" "),\n"shades-green":"#DCEDD9 #BCDEB4 #98CF90 #78C26D #55B748 #408941 #2C5C2D #1A2E19".split(" "),"shades-black":"#D5D5D4 #ADABAC #848081 #5C5859 #332D2F #262223 #1A1717 #0E0C0D".split(" "),"shades-red":"#F8D5D4 #F1AAA9 #E9807D #E25552 #DB2B27 #A4201D #6E1614 #370B0A".split(" "),"one-group":["#1696d2","#000000"],"two-groups-cat-1":["#1696d2","#000000"],"two-groups-cat-2":["#1696d2","#fdbf11"],"two-groups-cat-3":["#1696d2","#db2b27"],"two-groups-seq":["#a2d4ec","#1696d2"],"three-groups-cat":["#1696d2","#fdbf11",\n"#000000"],"three-groups-seq":["#a2d4ec","#1696d2","#0a4c6a"],"four-groups-cat-1":["#000000","#d2d2d2","#fdbf11","#1696d2"],"four-groups-cat-2":["#1696d2","#ec0008b","#fdbf11","#5c5859"],"four-groups-seq":["#cfe8f3","#73bf42","#1696d2","#0a4c6a"],"five-groups-cat-1":["#1696d2","#fdbf11","#d2d2d2","#ec008b","#000000"],"five-groups-cat-2":["#1696d2","#0a4c6a","#d2d2d2","#fdbf11","#332d2f"],"five-groups-seq":["#cfe8f3","#73bf42","#1696d2","#0a4c6a","#000000"],"six-groups-cat-1":"#1696d2 #ec008b #fdbf11 #000000 #d2d2d2 #55b748".split(" "),\n"six-groups-cat-2":"#1696d2 #d2d2d2 #ec008b #fdbf11 #332d2f #0a4c6a".split(" "),"six-groups-seq":"#cfe8f3 #a2d4ec #73bfe2 #46abdb #1696d2 #12719e".split(" "),"diverging-colors":"#ca5800 #fdbf11 #fdd870 #fff2cf #cfe8f3 #73bfe2 #1696d2 #0a4c6a".split(" ")},uc=Object.freeze({__proto__:null,dark:{background:"#333",title:{color:"#fff",subtitleColor:"#fff"},style:{"guide-label":{fill:"#fff"},"guide-title":{fill:"#fff"}},axis:{domainColor:"#fff",gridColor:"#888",tickColor:"#fff"}},excel:{background:"#fff",\narc:{fill:"#4572a7"},area:{fill:"#4572a7"},line:{stroke:"#4572a7",strokeWidth:2},path:{stroke:"#4572a7"},rect:{fill:"#4572a7"},shape:{stroke:"#4572a7"},symbol:{fill:"#4572a7",strokeWidth:1.5,size:50},axis:{bandPosition:.5,grid:!0,gridColor:"#000000",gridOpacity:1,gridWidth:.5,labelPadding:10,tickSize:5,tickWidth:.5},axisBand:{grid:!1,tickExtra:!0},legend:{labelBaseline:"middle",labelFontSize:11,symbolSize:50,symbolType:"square"},range:{category:"#4572a7 #aa4643 #8aa453 #71598e #4598ae #d98445 #94aace #d09393 #b9cc98 #a99cbc".split(" ")}},\nfivethirtyeight:{arc:{fill:"#30a2da"},area:{fill:"#30a2da"},axis:{domainColor:"#cbcbcb",grid:!0,gridColor:"#cbcbcb",gridWidth:1,labelColor:"#999",labelFontSize:10,titleColor:"#333",tickColor:"#cbcbcb",tickSize:10,titleFontSize:14,titlePadding:10,labelPadding:4},axisBand:{grid:!1},background:"#f0f0f0",group:{fill:"#f0f0f0"},legend:{labelColor:"#333",labelFontSize:11,padding:1,symbolSize:30,symbolType:"square",titleColor:"#333",titleFontSize:14,titlePadding:10},line:{stroke:"#30a2da",strokeWidth:2},\npath:{stroke:"#30a2da",strokeWidth:.5},rect:{fill:"#30a2da"},range:{category:"#30a2da #fc4f30 #e5ae38 #6d904f #8b8b8b #b96db8 #ff9e27 #56cc60 #52d2ca #52689e #545454 #9fe4f8".split(" "),diverging:"#cc0020 #e77866 #f6e7e1 #d6e8ed #91bfd9 #1d78b5".split(" "),heatmap:["#d6e8ed","#cee0e5","#91bfd9","#549cc6","#1d78b5"]},point:{filled:!0,shape:"circle"},shape:{stroke:"#30a2da"},bar:{binSpacing:2,fill:"#30a2da",stroke:null},title:{anchor:"start",fontSize:24,fontWeight:600,offset:20}},ggplot2:{group:{fill:"#e5e5e5"},\narc:{fill:"#000"},area:{fill:"#000"},line:{stroke:"#000"},path:{stroke:"#000"},rect:{fill:"#000"},shape:{stroke:"#000"},symbol:{fill:"#000",size:40},axis:{domain:!1,grid:!0,gridColor:"#FFFFFF",gridOpacity:1,labelColor:"#7F7F7F",labelPadding:4,tickColor:"#7F7F7F",tickSize:5.67,titleFontSize:16,titleFontWeight:"normal"},legend:{labelBaseline:"middle",labelFontSize:11,symbolSize:40},range:{category:"#000000 #7F7F7F #1A1A1A #999999 #333333 #B0B0B0 #4D4D4D #C9C9C9 #666666 #DCDCDC".split(" ")}},googlecharts:{arc:{fill:"#3366CC"},\narea:{fill:"#3366CC"},path:{stroke:"#3366CC"},rect:{fill:"#3366CC"},shape:{stroke:"#3366CC"},symbol:{stroke:"#3366CC"},circle:{fill:"#3366CC"},background:"#fff",padding:{top:10,right:10,bottom:10,left:10},style:{"guide-label":{font:"Arial, sans-serif",fontSize:12},"guide-title":{font:"Arial, sans-serif",fontSize:12},"group-title":{font:"Arial, sans-serif",fontSize:12}},title:{font:"Arial, sans-serif",fontSize:14,fontWeight:"bold",dy:-3,anchor:"start"},axis:{gridColor:"#ccc",tickColor:"#ccc",domain:!1,\ngrid:!0},range:{category:"#4285F4 #DB4437 #F4B400 #0F9D58 #AB47BC #00ACC1 #FF7043 #9E9D24 #5C6BC0 #F06292 #00796B #C2185B".split(" "),heatmap:["#c6dafc","#5e97f6","#2a56c6"]}},latimes:{background:"#ffffff",title:{anchor:"start",color:"#000000",font:"Benton Gothic Bold, sans-serif",fontSize:22,fontWeight:"normal"},arc:{fill:"#82c6df"},area:{fill:"#82c6df"},line:{stroke:"#82c6df",strokeWidth:2},path:{stroke:"#82c6df"},rect:{fill:"#82c6df"},shape:{stroke:"#82c6df"},symbol:{fill:"#82c6df",size:30},axis:{labelFont:"Benton Gothic, sans-serif",\nlabelFontSize:11.5,labelFontWeight:"normal",titleFont:"Benton Gothic Bold, sans-serif",titleFontSize:13,titleFontWeight:"normal"},axisX:{labelAngle:0,labelPadding:4,tickSize:3},axisY:{labelBaseline:"middle",maxExtent:45,minExtent:45,tickSize:2,titleAlign:"left",titleAngle:0,titleX:-45,titleY:-11},legend:{labelFont:"Benton Gothic, sans-serif",labelFontSize:11.5,symbolType:"square",titleFont:"Benton Gothic Bold, sans-serif",titleFontSize:13,titleFontWeight:"normal"},range:{category:La["category-6"],\ndiverging:La["fireandice-6"],heatmap:La["fire-7"],ordinal:La["fire-7"],ramp:La["fire-7"]}},quartz:{background:"#f9f9f9",arc:{fill:"#ab5787"},area:{fill:"#ab5787"},line:{stroke:"#ab5787"},path:{stroke:"#ab5787"},rect:{fill:"#ab5787"},shape:{stroke:"#ab5787"},symbol:{fill:"#ab5787",size:30},axis:{domainColor:"#979797",domainWidth:.5,gridWidth:.2,labelColor:"#979797",tickColor:"#979797",tickWidth:.2,titleColor:"#979797"},axisBand:{grid:!1},axisX:{grid:!0,tickSize:10},axisY:{domain:!1,grid:!0,tickSize:0},\nlegend:{labelFontSize:11,padding:1,symbolSize:30,symbolType:"square"},range:{category:"#ab5787 #51b2e5 #703c5c #168dd9 #d190b6 #00609f #d365ba #154866 #666666 #c4c4c4".split(" ")}},urbaninstitute:{background:"#FFFFFF",title:{anchor:"start",fontSize:18,font:"Lato"},axisX:{domain:!0,domainColor:"#000000",domainWidth:1,grid:!1,labelFontSize:12,labelFont:"Lato",labelAngle:0,tickColor:"#000000",tickSize:5,titleFontSize:12,titlePadding:10,titleFont:"Lato"},axisY:{domain:!1,domainWidth:1,grid:!0,gridColor:"#DEDDDD",\ngridWidth:1,labelFontSize:12,labelFont:"Lato",labelPadding:8,ticks:!1,titleFontSize:12,titlePadding:10,titleFont:"Lato",titleAngle:0,titleY:-10,titleX:18},legend:{labelFontSize:12,labelFont:"Lato",symbolSize:100,titleFontSize:12,titlePadding:10,titleFont:"Lato",orient:"right",offset:10},view:{stroke:"transparent"},range:{category:Ma["six-groups-cat-1"],diverging:Ma["diverging-colors"],heatmap:Ma["diverging-colors"],ordinal:Ma["six-groups-seq"],ramp:Ma["shades-blue"]},area:{fill:"#1696d2"},rect:{fill:"#1696d2"},\nline:{color:"#1696d2",stroke:"#1696d2",strokeWidth:5},trail:{color:"#1696d2",stroke:"#1696d2",strokeWidth:0,size:1},path:{stroke:"#1696d2",strokeWidth:.5},point:{filled:!0},text:{font:"Lato",color:"#1696d2",fontSize:11,align:"center",fontWeight:400,size:11},style:{bar:{fill:"#1696d2",stroke:null}},arc:{fill:"#1696d2"},shape:{stroke:"#1696d2"},symbol:{fill:"#1696d2",size:30}},version:"2.10.0",vox:{background:"#fff",arc:{fill:"#3e5c69"},area:{fill:"#3e5c69"},line:{stroke:"#3e5c69"},path:{stroke:"#3e5c69"},\nrect:{fill:"#3e5c69"},shape:{stroke:"#3e5c69"},symbol:{fill:"#3e5c69"},axis:{domainWidth:.5,grid:!0,labelPadding:2,tickSize:5,tickWidth:.5,titleFontWeight:"normal"},axisBand:{grid:!1},axisX:{gridWidth:.2},axisY:{gridDash:[3],gridWidth:.4},legend:{labelFontSize:11,padding:1,symbolType:"square"},range:{category:"#3e5c69 #6793a6 #182429 #0570b0 #3690c0 #74a9cf #a6bddb #e2ddf2".split(" ")}}}),kc=function(a){return function(b){return b[a]}},lc=function(a){var b=a.length;return function(c){for(var d=0;d<\nb;++d)c=c[a[d]];return c}};(function(a,b,c){var d=mc(a);a=1===d.length?d[0]:a;return va((c&&c.get||jc)(d),[a],b||a)})("id");va(function(a){return a},[],"identity");va(function(){return 0},[],"zero");va(function(){return 1},[],"one");va(function(){return!0},[],"true");va(function(){return!1},[],"false");var pc=Array.isArray,Xc={offsetX:10,offsetY:10,id:"vg-tooltip-element",styleId:"vega-tooltip-style",theme:"light",disableDefaultStyle:!1,sanitize:function(a){return String(a).replace(/&/g,"&amp;").replace(/</g,\n"&lt;")},maxDepth:2},Qb=function(a){this.options=Object.assign(Object.assign({},Xc),a);var b=this.options.id;this.el=null;this.call=this.tooltipHandler.bind(this);if(!this.options.disableDefaultStyle&&!document.getElementById(this.options.styleId)){a=document.createElement("style");a.setAttribute("id",this.options.styleId);if(!/^[A-Za-z]+[-:.\\w]*$/.test(b))throw Error("Invalid HTML ID");b="#vg-tooltip-element {\\n  visibility: hidden;\\n  padding: 8px;\\n  position: fixed;\\n  z-index: 1000;\\n  font-family: sans-serif;\\n  font-size: 11px;\\n  border-radius: 3px;\\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\\n  /* The default theme is the light theme. */\\n  background-color: rgba(255, 255, 255, 0.95);\\n  border: 1px solid #d9d9d9;\\n  color: black; }\\n  #vg-tooltip-element.visible {\\n    visibility: visible; }\\n  #vg-tooltip-element h2 {\\n    margin-top: 0;\\n    margin-bottom: 10px;\\n    font-size: 13px; }\\n  #vg-tooltip-element img {\\n    max-width: 200px;\\n    max-height: 200px; }\\n  #vg-tooltip-element table {\\n    border-spacing: 0; }\\n    #vg-tooltip-element table tr {\\n      border: none; }\\n      #vg-tooltip-element table tr td {\\n        overflow: hidden;\\n        text-overflow: ellipsis;\\n        padding-top: 2px;\\n        padding-bottom: 2px; }\\n        #vg-tooltip-element table tr td.key {\\n          color: #808080;\\n          max-width: 150px;\\n          text-align: right;\\n          padding-right: 4px; }\\n        #vg-tooltip-element table tr td.value {\\n          display: block;\\n          max-width: 300px;\\n          max-height: 7em;\\n          text-align: left; }\\n  #vg-tooltip-element.dark-theme {\\n    background-color: rgba(32, 32, 32, 0.9);\\n    border: 1px solid #f5f5f5;\\n    color: white; }\\n    #vg-tooltip-element.dark-theme td.key {\\n      color: #bfbfbf; }\\n".toString().replace("vg-tooltip-element",\nb);a.innerHTML=b;b=document.head;0<b.childNodes.length?b.insertBefore(a,b.childNodes[0]):b.appendChild(a)}};Qb.prototype.tooltipHandler=function(a,b,c,d){this.el=document.getElementById(this.options.id);this.el||(this.el=document.createElement("div"),this.el.setAttribute("id",this.options.id),this.el.classList.add("vg-tooltip"),document.body.appendChild(this.el));(null!=document.fullscreenElement?document.fullscreenElement:document.body).appendChild(this.el);if(null==d||""===d)this.el.classList.remove("visible",\nthis.options.theme+"-theme");else{this.el.innerHTML=oc(d,this.options.sanitize,this.options.maxDepth);this.el.classList.add("visible",this.options.theme+"-theme");a=this.el.getBoundingClientRect();var e=this.options.offsetX;c=this.options.offsetY;d=b.clientX+e;d+a.width>window.innerWidth&&(d=+b.clientX-e-a.width);e=b.clientY+c;e+a.height>window.innerHeight&&(e=+b.clientY-c-a.height);this.el.setAttribute("style","top: "+e+"px; left: "+d+"px")}};String.prototype.startsWith||(String.prototype.startsWith=\nfunction(a,b){return this.substr(!b||0>b?0:+b,a.length)===a});var zb,Na=Bc,db="undefined"!==typeof window?window:void 0;void 0===Na&&(null===(zb=null===db||void 0===db?void 0:db.vl)||void 0===zb?0:zb.compile)&&(Na=db.vl);var vc={"export":{svg:!0,png:!0},source:!0,compiled:!0,editor:!0},wc={CLICK_TO_VIEW_ACTIONS:"Click to view actions",COMPILED_ACTION:"View Compiled Vega",EDITOR_ACTION:"Open in Vega Editor",PNG_ACTION:"Save as PNG",SOURCE_ACTION:"View Source",SVG_ACTION:"Save as SVG"},Ca={vega:"Vega",\n"vega-lite":"Vega-Lite"},Oa={vega:self.vega.version,"vega-lite":Na?self.vegaLite.version:"not available"},xc={vega:function(a){return a},"vega-lite":function(a,b){return self.vegaLite.compile(a,{config:b}).spec}},ma=function(){for(var a=[],b=0;b<arguments.length;b++)a[b]=arguments[b];var c;if(c=1<a.length){if(c=self.vega.isString(a[0]))c=a[0],c=!(c.startsWith("http://")||c.startsWith("https://")||c.startsWith("//"));c=c||a[0]instanceof HTMLElement||3===a.length}return c?Pa(a[0],a[1],a[2]):Sb(a[0],\na[1])};ma.vegaLite=Na;ma.vl=Na;ma.container=Sb;ma.embed=Pa;ma.vega=Ac;ma["default"]=Pa;ma.version="6.17.0";return ma});\n'];
gvjs_DM.raw=[""];gvjs_AM(gvjs_xM(gvjs_DM));var gvjs_Fha=window.vegaEmbed;var gvjs_Gha=window.vegaLite||gvjs_Eha;/*

 Copyright 2021 Google LLC
 This code is released under the MIT license.
 SPDX-License-Identifier: MIT

*/
function gvjs_EM(a){gvjs_Qn.call(this,a)}gvjs_o(gvjs_EM,gvjs_Qn);gvjs_EM.prototype.Rd=function(){};function gvjs_Hha(a,b,c){var d=a.Gp;if(null==d)throw Error("No vega spec found");var e=a.getContainer();b(function(){if(a.lx)gvjs_Fha.embed(e,a.Gp,a.lx).then(function(){c()});else{var f=gvjs_Dha;"undefined"===typeof f&&(f=window.vega);var g=f.parse,h=f.View;f=f.Warn;g=g(d,{},{ast:!0});h=new h(g,{expr:gvjs_Cha});h.logLevel(f);h.initialize(e);h.renderer(gvjs_9p);h.hover();h.runAsync().then(c)}})()};function gvjs_FM(a){gvjs_Qn.call(this,a);this.width=this.height=0;this.Tu=new gvjs_8q(this)}gvjs_o(gvjs_FM,gvjs_EM);gvjs_FM.prototype.getSelection=function(){return[]};gvjs_FM.prototype.setSelection=function(){};
function gvjs_Iha(a,b){var c,d,e,f,g,h,k,l=a.La(b),m=a.getHeight(b),n={width:b.Mg(gvjs_3o,l),left:b.Mg(gvjs_0o,l),right:b.Mg(gvjs_1o,l),height:b.Mg(gvjs__o,m),top:b.Mg(gvjs_2o,m),bottom:b.Mg(gvjs_Zo,m)},p=gvjs_$q(l,m,n);b=null!=n.top?p.top:void 0;m=null!=n.bottom?m-p.bottom:void 0;var q=null!=n.left?p.left:void 0;l=null!=n.right?l-p.right:void 0;a=a.Fp||a.Gp||{};a={height:null!==(c=a.height)&&void 0!==c?c:p.height,width:null!==(d=a.width)&&void 0!==d?d:p.width,padding:a.padding};p=null!==(e=a.padding)&&
void 0!==e?e:{};typeof p===gvjs_h&&(p.top=null!==(f=p.top)&&void 0!==f?f:b,p.bottom=null!==(g=p.bottom)&&void 0!==g?g:m,p.left=null!==(h=p.left)&&void 0!==h?h:q,p.right=null!==(k=p.right)&&void 0!==k?k:l,a.padding=p)}
gvjs_FM.prototype.Rd=function(a,b,c){var d=this;c=void 0===c?{}:c;c=new gvjs_Aj([c,{}]);if(this.Gp=c.fa("vega")||void 0)this.Gp=Object.assign({},this.Gp);if(this.Fp=c.fa("vegaLite")||void 0)this.Fp=Object.assign({},this.Fp);if(this.lx=c.fa("vegaEmbed",null))this.lx=Object.assign({},this.lx);if(!this.Gp&&!this.Fp)throw Error("VegaChart requires either a vega or vegaLite option.");gvjs_Iha(this,c);gvjs_Jha(this,b);this.Fp&&(this.Gp=gvjs_Gha.compile(this.Fp,{}).spec);this.lx&&(this.lx.mode="vega",this.lx.ast=
!0);gvjs_Hha(this,a,function(){d.Tu.dispatchEvent(gvjs_i)})};
function gvjs_Jha(a,b){function c(h){var k={};if(h){h=Array.isArray(h)?h:[h];h=gvjs_8d(h);for(var l=h.next();!l.done;l=h.next())l=l.value,k[l.name]=l}return k}var d=a.Fp?a.Fp.datasets||{}:null!=a.Gp?c(a.Gp.data):{},e=Object.keys(d);if(b instanceof gvjs_Po){b=c(b.getData());d=Object.assign(Object.assign({},d),b);var f=Object.keys(b);e=e.filter(function(h){return-1===f.indexOf(h)});e=[].concat(gvjs_9d(f),gvjs_9d(e))}else-1===e.indexOf(gvjs_fp)&&e.unshift(gvjs_fp),d=Object.assign(Object.assign({},d),
{datatable:gvjs_Kha(b)});if(a.Fp){for(var g in d)d.hasOwnProperty(g)&&(d[g]=d[g].values);a.Fp.datasets=d}else e=e.map(function(h){return d[h]}),a.Gp.data=e}function gvjs_Kha(a){for(var b=a.$(),c=a.ca(),d=[],e=0;e<b;e++)d.push(a.Ne(e));e=[];for(var f=0;f<c;f++){var g={};e.push(g);for(var h=0;h<b;h++)g[d[h]]=a.getValue(f,h)}return{name:gvjs_fp,values:e}};gvjs_q(gvjs_Zc,gvjs_FM,void 0);
